<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>测试游记</title>
  
  
  <link href="http://zx490336534.github.io/atom.xml" rel="self"/>
  
  <link href="http://zx490336534.github.io/"/>
  <updated>2021-07-26T12:08:12.859Z</updated>
  <id>http://zx490336534.github.io/</id>
  
  <author>
    <name>测试游记</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>30-服务器架构演进</title>
    <link href="http://zx490336534.github.io/article/88f586e9.html"/>
    <id>http://zx490336534.github.io/article/88f586e9.html</id>
    <published>2021-06-26T14:24:00.000Z</published>
    <updated>2021-07-26T12:08:12.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="30-服务器架构演进"><a href="#30-服务器架构演进" class="headerlink" title="30-服务器架构演进"></a>30-服务器架构演进</h1><p>把服务包部署到多台设备</p><p>多台机器一起向外提供服务，合并在一起的软件：niginx</p><p>多台机器合并在一起：集群</p><p>nginx负载均衡，反向代理</p><p>nginx里面记录不同机器的ip，配置不同的分配策略</p><p>nginx：web服务器，并不一定是一般理解的前台服务</p><p>前后分离：front+server</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul><li>最典型的软件是nginx</li><li>也可以是硬件F5</li><li>阿里云的SLB，也是一个软件负载均衡</li></ul><span id="more"></span><h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><p>需要有jdk</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>bin：启动、关闭tomcat的文件。startup、shutdown为启动文件，catalina文件为配置文件</li><li>conf：配置文件。server.xml为最重要的配置文件</li><li>logs：项目运行时，默认日志路径。在没有修改默认日志路径时，运行日志记录在该路径下</li><li>webapps：项目包防止路径。把wat包，放在这个路径下，启动tomcat会自动解压</li></ul><h3 id="catalina-bat「Windows」、catalina-sh「Linux」"><a href="#catalina-bat「Windows」、catalina-sh「Linux」" class="headerlink" title="catalina.bat「Windows」、catalina.sh「Linux」"></a>catalina.bat「Windows」、catalina.sh「Linux」</h3><p>在执行startup文件启动tomcat时，会去执行catalina文件</p><h4 id="catalina文件中，-设置堆栈信息"><a href="#catalina文件中，-设置堆栈信息" class="headerlink" title="catalina文件中， 设置堆栈信息"></a>catalina文件中， 设置堆栈信息</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"-server -Xms256m -Xmx512m -Xss256k -XX:PermSize=128m"</span></span><br></pre></td></tr></tbody></table></figure><p>-server：第一个参数，指定为服务，多核时使用</p><p>-Xms：启动时，初始堆大小；没有配置时，从最小逐步增加到最大值</p><p>-Xmx：运行时分配的最大堆大小；默认64M</p><p>-Xmn：新生代堆大小</p><p>-Xss：每个线程栈大小</p><p>-XX:PermSize：初始化非内存大小</p><p>-XX:MaxPermSize：永久代(非堆)最大内存大小</p><p>-XX:MaxNewSize：新生代最大大小</p><h4 id="catalina文件中，-设置GC"><a href="#catalina文件中，-设置GC" class="headerlink" title="catalina文件中， 设置GC"></a>catalina文件中， 设置GC</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"-verbose:gc -XX+PrintGC -XX:PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:filename"</span></span><br></pre></td></tr></tbody></table></figure><p>-verbose:gc：显示垃圾回收信息</p><p>-XX:+UseParNewGC：设置minor收集的时间</p><p>-XX:+UseConcMarkSweepGC：设置major收集时间</p><ul><li>设置并行收集器：</li></ul><p>-XX:ParallelGCThreads=n：设置并行收集器收时使用的CPU数，并行收集线程数。</p><p>-XX:MaxGCPauseMillis=n：设置并行收集最大暂停时间</p><p>-XX:GCTimeRatio=n：设置垃圾回收时间占程序运行时间的百分比</p><ul><li>设置并发收集器：</li></ul><p>-XX:+CMSIncrementalMode：设置为增量模式。适用于单CPU情况</p><p>-XX:ParallelGCThreads=n：设置并发收集器年轻代收集方式为并行收集时，使用的CPU数，并行收集线程数</p><p><strong>写GC日志，是要消耗IO的，所以在生成环境，一般不配置这个</strong></p><h3 id="conf-server-xml"><a href="#conf-server-xml" class="headerlink" title="conf/server.xml"></a>conf/server.xml</h3><p>Tomcat中最顶层的是server，代表整个服务器，一个server可以包含至少一个service，每个service可以包含多个connector和一个container。Connector用于处理连接相关的事情，并提供Socket与Request和Response相关的转化；Container用于封装和管理Servlet，以及具体Request请求；多个connector就可以配置多种类型连接，如http、https</p><h4 id="不同的protocol"><a href="#不同的protocol" class="headerlink" title="不同的protocol"></a>不同的protocol</h4><p>Connector在处理HTTP请求时，会使用不同的protocol，典型的有：</p><ul><li>BIO：BlockingIO阻塞(tomcat7支持，8支持NIO2，8.5\9去掉了BIO)默认值为maxThreads值</li><li>NIO：Non-blockingIO非阻塞IO，默认值10000</li><li>APR：ApachePortableRuntime Apache可移植运行库，是高并发的首选模式；默认值8192，需要安装apr、apr_utils、tomcat-native包</li></ul><p>Protocol默认是HTTP/1.1，不同版本，会自动选择上面的模式（APR模式需要有相应的包才会自动选择）</p><h4 id="Connector重要参数"><a href="#Connector重要参数" class="headerlink" title="Connector重要参数"></a>Connector重要参数</h4><ul><li>connectionsTimeout：连接超时时间，单位毫秒</li><li>acceptCount：能接收的队列长度，队列满了，再有连接就会拒绝，默认100</li><li>maxConnections：任意时刻能接受和处理的最大连接数。达到最大值，就会阻塞accept连接。如果设置为-1，则连接数不受限制</li><li>maxThreads：请求处理线程的最大数量。默认为200</li><li>minSpareThreads：tomcat初始化默认时默认创建的线程数，也是以后线程增加时一次增加的最小数量</li><li>maxSpareThreads：这个参数标识，一旦创建的线程数量超过了这个值，Tomcat就会关闭不活动的线程</li></ul><h3 id="连接数不够"><a href="#连接数不够" class="headerlink" title="连接数不够"></a>连接数不够</h3><p>修改如下内容：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span> <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">minSpareThreads</span>=<span class="string">"4"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">acceptCount</span>=<span class="string">"1000"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>name：线程池的标记</p></li><li><p>namePrefix：线程名字前缀</p></li><li><p>maxThreads：线程池中最大活跃线程数，默认200</p></li><li><p>minSpareThreads：线程池中保存的最小线程数，也是线程每次增加的最小值，默认25</p></li><li><p>connectionTimrout：连接超时时间，单位毫秒</p></li><li><p>accepCount：最大可接受的排队数量</p></li><li><p>maxSpareThreads：一旦创建的线程数量超过这个数值，Tomcat就会关闭不活动的线程</p></li></ul><h2 id="tomcat监控环境搭建"><a href="#tomcat监控环境搭建" class="headerlink" title="tomcat监控环境搭建"></a>tomcat监控环境搭建</h2><blockquote><p>gragana + prometheus监控tomcat</p></blockquote><h3 id="下载jvm-exporter-jar"><a href="#下载jvm-exporter-jar" class="headerlink" title="下载jvm_exporter.jar"></a>下载jvm_exporter.jar</h3><p>下载地址：<a href="https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/">https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/</a></p><p>将<code>jvm_exporter.jar</code>放到tomcat的bin文件夹下</p><h3 id="配置tomcat-yml到tomcat的bin文件夹下"><a href="#配置tomcat-yml到tomcat的bin文件夹下" class="headerlink" title="配置tomcat.yml到tomcat的bin文件夹下"></a>配置tomcat.yml到tomcat的bin文件夹下</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">---   </span><br><span class="line">lowercaseOutputLabelNames: true</span><br><span class="line">lowercaseOutputName: true</span><br><span class="line">rules:</span><br><span class="line">- pattern: 'Catalina&lt;type=GlobalRequestProcessor, name=\"(\w+-\w+)-(\d+)\"&gt;<span class="tag">&lt;&gt;</span>(\w+):'</span><br><span class="line">  name: tomcat_$3_total</span><br><span class="line">  labels:</span><br><span class="line">    port: "$2"</span><br><span class="line">    protocol: "$1"</span><br><span class="line">  help: Tomcat global $3</span><br><span class="line">  type: COUNTER</span><br><span class="line">- pattern: 'Catalina&lt;j2eeType=Servlet, WebModule=//([-a-zA-Z0-9+&amp;@#/%?=~_|!:.,;]*[-a-zA-Z0-9+&amp;@#/%=~_|]), name=([-a-zA-Z0-9+/$%~_-|!.]*), J2EEApplication=none, J2EEServer=none&gt;<span class="tag">&lt;&gt;</span>(requestCount|maxTime|processingTime|errorCount):'</span><br><span class="line">  name: tomcat_servlet_$3_total</span><br><span class="line">  labels:</span><br><span class="line">    module: "$1"</span><br><span class="line">    servlet: "$2"</span><br><span class="line">  help: Tomcat servlet $3 total</span><br><span class="line">  type: COUNTER</span><br><span class="line">- pattern: 'Catalina&lt;type=ThreadPool, name="(\w+-\w+)-(\d+)"&gt;<span class="tag">&lt;&gt;</span>(currentThreadCount|currentThreadsBusy|keepAliveCount|pollerThreadCount|connectionCount):'</span><br><span class="line">  name: tomcat_threadpool_$3</span><br><span class="line">  labels:</span><br><span class="line">    port: "$2"</span><br><span class="line">    protocol: "$1"</span><br><span class="line">  help: Tomcat threadpool $3</span><br><span class="line">  type: GAUGE</span><br><span class="line">- pattern: 'Catalina&lt;type=Manager, host=([-a-zA-Z0-9+&amp;@#/%?=~_|!:.,;]*[-a-zA-Z0-9+&amp;@#/%=~_|]), context=([-a-zA-Z0-9+/$%~_-|!.]*)&gt;<span class="tag">&lt;&gt;</span>(processingTime|sessionCounter|rejectedSessions|expiredSessions):'</span><br><span class="line">  name: tomcat_session_$3_total</span><br><span class="line">  labels:</span><br><span class="line">    context: "$2"</span><br><span class="line">    host: "$1"</span><br><span class="line">  help: Tomcat session $3 total</span><br><span class="line">  type: COUNTER</span><br><span class="line">- pattern: ".*"</span><br></pre></td></tr></tbody></table></figure><h3 id="配置catalina-sh"><a href="#配置catalina-sh" class="headerlink" title="配置catalina.sh"></a>配置catalina.sh</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"-javaagent:./jmx_prometheus_javaagent-0.14.0.jar=3088:./tomcat.yml"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><h3 id="配置prometheus"><a href="#配置prometheus" class="headerlink" title="配置prometheus"></a>配置prometheus</h3><p>配置prometheus.yml文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- job_name:"tomcat_export"</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:["被监控机器IP:3088"]</span><br></pre></td></tr></tbody></table></figure><h3 id="配置grafana"><a href="#配置grafana" class="headerlink" title="配置grafana"></a>配置grafana</h3><ul><li>添加数据源：URL<code>http://prometheus_ip:9000</code></li><li>引入模版：8563或3457</li><li>名称：自定义</li><li>job修改为prometheus.yml文件中的job_name</li></ul><h2 id="GC分析"><a href="#GC分析" class="headerlink" title="GC分析"></a>GC分析</h2><blockquote><p><a href="https://gceasy.io/">https://gceasy.io/</a></p></blockquote><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><blockquote><p>是一个用C语言编写的高性能HTTP服务器，反向代理web服务器</p></blockquote><ul><li>占用内存小</li><li>并发能力强</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grybnro1vxj30lq05kdhz.jpg" alt="image-20210628215410866"></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream web_app {</span><br><span class="line">        server 192.168.114.139:8080 weight=1 max_fails=2 fail_timeout=30;</span><br><span class="line">server 192.168.114.139:8880 weight=1 max_fails=2 fail_timeout=30;</span><br><span class="line">    }</span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  192.168.114.139;</span><br><span class="line">        location / {</span><br><span class="line">    proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line">            proxy_set_header Host  $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://web_app;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="niginx-tomcat负载均衡"><a href="#niginx-tomcat负载均衡" class="headerlink" title="niginx+tomcat负载均衡"></a>niginx+tomcat负载均衡</h2><h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><p>默认策略，如果服务器down掉了，会自动剔除该服务器，此策略适合服务器配置相当，无状态且短平快的服务使用</p><h3 id="weight权重"><a href="#weight权重" class="headerlink" title="weight权重"></a>weight权重</h3><p>权重越高分配到需要处理的请求越多，此策略可以与least_conn和ip_hash结合使用，此策略比较适合服务器的硬件配置差别比较大的情况</p><h3 id="ip-hash依据ip分配"><a href="#ip-hash依据ip分配" class="headerlink" title="ip_hash依据ip分配"></a>ip_hash依据ip分配</h3><p>ip_hash不能与backup同时使用，此策略适合有状态服务，比如session，服务器需要剔除，必须手动down掉</p><h3 id="least-conn最小连接"><a href="#least-conn最小连接" class="headerlink" title="least_conn最小连接"></a>least_conn最小连接</h3><p>此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况</p><h3 id="fair响应时间"><a href="#fair响应时间" class="headerlink" title="fair响应时间"></a>fair响应时间</h3><p>负载均衡策略的实现需要安装第三方插件，按照服务器端的响应时间来分配请求，响应时间短的优先分配</p><h3 id="url-hash依据url分配"><a href="#url-hash依据url分配" class="headerlink" title="url_hash依据url分配"></a>url_hash依据url分配</h3><p>按访问url结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用</p><h2 id="niginx常用配置"><a href="#niginx常用配置" class="headerlink" title="niginx常用配置"></a>niginx常用配置</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grze9nxcyyj30on09qgzx.jpg" alt="niginx常用配置"></p><h2 id="对niginx监控"><a href="#对niginx监控" class="headerlink" title="对niginx监控"></a>对niginx监控</h2><p>使用<code>nginx-module-vts</code>与<code>nginx-vts-exporter</code></p><ul><li>nginx-module-vts: Nginx virtual host traffic status module，nginx的监控模块，能够提供json、html、prometheus格式的数据产出。</li><li>nginx-vts-exporter: Simple server that scrapes Nginx vts stats and exports them via HTTP for Prometheus consumption。主要用于收集nginx的监控数据，并给Prometheus提供监控接口，默认端口号9913。</li></ul><h2 id="如何测试集群的性能"><a href="#如何测试集群的性能" class="headerlink" title="如何测试集群的性能"></a>如何测试集群的性能</h2><p>首先，需要有一个集群，就要安装项目的集群环境搭建的标准，搭建一套集群环境，只是此时，集群规模不需要做那么大，自己搭建一套最小的集群（至少是两个相同服务构成的一个集群）</p><p>然后，对该集群进行性能测试，得到最小规模的集群的性能指标</p><p>然后，再在集群中，添加服务，此时集群有3个服务，然后再对集群进行一次性能测试，此时3个服务构成的集群的性能指标tps增加了多少，并发用户增加了多少，那么理论上，可以计算出增加服务后tps等指标的增加情况</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><blockquote><p>数据：描述事物的符号记录，符号可以是数字，文字，图片，图像，声音，语言</p><p>数据库：存放数据的仓库，这个仓库是计算机存储设备，而且数据是按一定的格式存放的</p></blockquote><p>在企业项目中，数据库的读操作更频繁</p><h3 id="dbms"><a href="#dbms" class="headerlink" title="dbms"></a>dbms</h3><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><p>采用关系模型来组织数据库的数据，以行+列方式存储数据</p><ul><li>结构化方式存储数据库</li><li>标准的结构化查询语句「SQL」标准的增删改查</li><li>事物性，寻找ACID规则「原子性、一致性、隔离性、持久性」</li></ul><p>sql有四种</p><ul><li>DCL数据库控制语言「Data Control Language」用来确认或取消数据库用户和角色权限变更</li><li>DDL数据库定义语言「Data Definition Language」用来创建或删除数据库以及表</li><li>DML数据库操作语言「Data Mainpulation Language」用来变更表数据记录</li><li>DQL数据库查询语言「Data Query Language」用来查询表中的记录</li></ul><h4 id="非关系型数据库NoSQL「Not-only-SQL」"><a href="#非关系型数据库NoSQL「Not-only-SQL」" class="headerlink" title="非关系型数据库NoSQL「Not only SQL」"></a>非关系型数据库NoSQL「Not only SQL」</h4><h3 id="选择数据库需要注意"><a href="#选择数据库需要注意" class="headerlink" title="选择数据库需要注意"></a>选择数据库需要注意</h3><ul><li>IO性能比较好的</li><li>磁盘空间比较大</li><li>稳定性</li></ul><h3 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h3><p>数据库的缓存有两部分</p><ul><li>数据库本身的缓存</li><li>专门做缓存的数据库</li></ul><h3 id="数据库拆分"><a href="#数据库拆分" class="headerlink" title="数据库拆分"></a>数据库拆分</h3><ul><li>直接拆数据库</li><li>分表分区</li></ul><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs4nrjw436j30pd0bq0yl.jpg" alt="存储引擎"></p><p>mysql数据库建表的时候，有一个存储引擎，可以选择，默认为<strong>InnoDB</strong></p><p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据库引擎进行创建，查询，更新和删除数据操作。</p><p>存储引擎就是指表的类型。数据库的存储引擎决定了表在计算机中的存储方式。不同的存储引擎提供不同的存储机制，索引技巧，锁定水平等功能，使用不同的存储引擎还可以获得特定的功能</p><p>例如，存在两张表：一个配置表，一个用户表</p><ul><li>配置表，一般在项目启动的时候，读取一次，在项目运行过程中，一般都不会去修改</li><li>用户信息表：在项目启动时，不会去读取，但是在项目运行过程中，随时都有可能修改</li></ul><p>所以，它们的使用场景不一样，创建表时会选择不同的搜索引擎</p><p>配置表一般选用<code>MyISM</code>存储引擎</p><p>用户信息表一般选用<code>InnoDB</code></p><p>mysql数据库5.5版本及以前</p><ul><li>默认存储引擎为<code>MyISM</code></li><li>追求存储数据的速度，存储数据不准</li><li>锁，表锁，会锁定整张表</li><li>索引：B树索引</li></ul><p>mysql数据库5.5版本及以后</p><ul><li>默认存储引擎为<code>InnoDB</code></li><li>追求存储数据的准确性，事务一致性</li><li>锁，行锁，会锁定当前行</li><li>索引：默认B+树索引</li></ul><p>B+树的优点：</p><ul><li>树的层次更低，IO次数更少</li><li>每次查询的结果都是在叶子节点，查询性能稳定</li><li>叶子节点形成链表，范围查询更方便</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><blockquote><p>是一种数据结构，用于帮助我们在大量数据中快速定位我们要查找的数据</p></blockquote><p>建索引：使用空间换时间，索引有一定大小，占磁盘、内存空间，以此来换取时间更少。是为了提升查询数据的速度，它会降低修改速度</p><ul><li><p>主键索引：有且仅有一个</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表名(字段);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX 索引名(字段);</span><br></pre></td></tr></tbody></table></figure></li><li><p>唯一索引：不可重复，但是可以存储NULL</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index 索引名 <span class="keyword">on</span> 表名(字段);</span><br></pre></td></tr></tbody></table></figure><ul><li>复合索引：由表的多列按照顺序组合成为索引，使用时，按照组合顺序使用索引，也可以使用组合索引中部分索引字段</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表名(字段<span class="number">1</span>，字段<span class="number">2.</span>...)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index index_name <span class="keyword">on</span> name(id，co3，co2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_name <span class="keyword">where</span> id<span class="operator">=</span>?,co3<span class="operator">=</span>? 使用了索引</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_name <span class="keyword">where</span> id<span class="operator">=</span>?,co2<span class="operator">=</span>?</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_name <span class="keyword">where</span> co3<span class="operator">=</span>?,co2<span class="operator">=</span>?</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_name <span class="keyword">where</span> co2<span class="operator">=</span>?,co3<span class="operator">=</span>?</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_name <span class="keyword">where</span> id<span class="operator">=</span>?,co3<span class="operator">=</span>?,co2<span class="operator">=</span>? 使用了索引</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_name <span class="keyword">where</span> id<span class="operator">=</span>?,co2<span class="operator">=</span>?,co3<span class="operator">=</span>?</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_name <span class="keyword">where</span> id<span class="operator">=</span>? 使用了索引</span><br></pre></td></tr></tbody></table></figure><h4 id="索引的弊端"><a href="#索引的弊端" class="headerlink" title="索引的弊端"></a>索引的弊端</h4><ul><li>索引本身很大，通常存放在磁盘或内存</li><li>不是索引情况都可以用索引，数据库很少，列值比频繁变更，列很少使用</li><li>索引会降低增删改的效率，但是一般会提升查的效率</li></ul><h4 id="索引的优势"><a href="#索引的优势" class="headerlink" title="索引的优势"></a>索引的优势</h4><ul><li>降低IO、CPU使用率</li><li>索引列，可以保证行的唯一性</li><li>可以有效缩短数据检索时间</li><li>加快表与表之间的连接</li></ul><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT {*|字段列名} 查询要显示的列名</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="number">1</span><span class="operator">&gt;</span>,<span class="operator">&lt;</span>表名<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">join</span>, <span class="keyword">on</span> 数据来源表</span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> 限制条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span><span class="operator">&lt;</span>字段<span class="operator">&gt;</span> 查询的结果，按照条件字段分组</span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span>expression<span class="operator">&gt;</span> 过滤分组</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>字段<span class="operator">&gt;</span> 按照字段排序</span><br><span class="line">LIMIT <span class="operator">&lt;</span><span class="keyword">offset</span><span class="operator">&gt;</span>[<span class="operator">&lt;</span><span class="type">row</span> count<span class="operator">&gt;</span>] 显示数据条数</span><br></pre></td></tr></tbody></table></figure><p>sql语句的执行顺序，与编写顺序会不一致</p><p>sql执行过程：</p><ul><li>输入数据库的ip，端口，账号，密码「连接层」</li><li>提供各种接口，CRUD，对脚本进行优化「服务层」</li><li>执行你的sql「引擎层」</li><li>数据交换「存储层」</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gslf0b4girj30rh0afjrx.jpg" alt="关系型数据库"></p><p>数据库管理系统dbms，写数据时，把你的数据，转化为日志文件，对日志文件进行解读，还原你的日志过程</p><h3 id="select的解析过程"><a href="#select的解析过程" class="headerlink" title="select的解析过程"></a>select的解析过程</h3><ul><li>from table_name 数据源中捞取数据</li><li>where 条件 对捞取的数据进行条件过滤</li><li>group by 分组<ul><li>根据上面的条件字段来分组「建议where条件字段」</li><li>不按照上面的条件字段来分组「会产生临时表」</li></ul></li><li>having 分组过滤</li><li>select 字段</li><li>order by 建议使用select 字段来排序</li><li>limit 数据量</li></ul><h2 id="数据库性能优化"><a href="#数据库性能优化" class="headerlink" title="数据库性能优化"></a>数据库性能优化</h2><ul><li>数据库库层面的优化「os」<ul><li>sysctl</li><li>ulimit</li></ul></li><li>数据库配置文件<ul><li>/etc/my.cnf</li><li>SHOW VARIABLES;</li></ul></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">'%slow_query_log%'</span> 查看慢查询的开关与日志路径 默认<span class="number">10</span>秒为慢查询</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">'long_query_time'</span> 慢查询的阈值默认<span class="number">10</span>秒</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">'max_connections%'</span> 查看系统配置的最大连接数</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">'Max_used_connections'</span> 查看当前用户已经建立的连接数</span><br></pre></td></tr></tbody></table></figure><p>当出现<code>ERROR 1040:Too many connections</code>可以通过修改连接数来解决</p><h3 id="定位慢查询日志"><a href="#定位慢查询日志" class="headerlink" title="定位慢查询日志"></a>定位慢查询日志</h3><ol><li>开启慢查询的开关</li></ol><blockquote><p>因为，数据中慢查询日志，一般情况下都是关闭的，因为慢查询的开启，就要写日志，会消耗IO。</p><p>所以在生产数据库中，建议千万不要去开启</p></blockquote><p>我们用jmeter做性能测试，设计了一个性能场景，运行，发现在一定量的并发用户时，平均响应时间，已经超过了1秒钟，那么，我们可以说，可能存在了慢查询日志。</p><p>响应时间都没有超过1秒(阈值)，那么肯定没有慢查询日志。</p><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">sql</span>语句</span><br></pre></td></tr></tbody></table></figure><ul><li><p>id:编号</p><ul><li>id相同时，从上往下执行</li><li>id不同时，从大到小</li></ul></li><li><p>select type:查询语句</p><ul><li>SIMPLE:简单的SELECT，不使用union或子查询</li><li>PRIMARY:查询中包含复杂的子查询，最外层的select被标记为PRIMARY</li><li>UNION:union中第二个或后面的select语句</li><li>DEPENDENT UNION:union中的第二个或后面的select语句，取决于外面的查询</li><li>UNION RESULT:union的结果</li><li>SUBQUERY:子查询的第一个select</li><li>DEPENDENT SUBQUERY:子查询中的第一个select，取决于外面的查询</li><li>DERIVD:衍生查询，使用临时表(select from子句的子查询)</li><li>UNCACHEABLE SUBQUERY:一个子查询的结果不能被缓存，必须重新评估外链接的第一行</li></ul></li><li><p>table:表</p></li><li><p>type:类型</p><ul><li>All:全表扫描Full table scan</li><li>index:遍历索引数据 Full index scan</li><li>range:使用一个索引来检索给定范围的行</li><li>ref:使用了索引列上值进行查询</li><li>eq_ref:类似ref，只是使用的索引为唯一索引</li><li>const,system:MySQL对查询某部分进行优化，并转化为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转化为一个常量，system上const类型的特例，当查询的表只有一行的情况下，使用system</li><li>Null:MySQl在优化过程中分解语句，执行时甚至不用访问表或索引</li></ul><blockquote><p>性能效率：system &gt; const  &gt; eq_ref  &gt; ref  &gt; range  &gt; index &gt; all 左边效率高于右边</p></blockquote></li><li><p>possible_keys:预测用到的索引</p></li><li><p>key:实际用到的索引</p></li><li><p>key_len:实际使用索引的长度</p></li><li><p>ref:表之间的匹配条件</p></li><li><p>rows:通过索引查询到的数据量</p></li><li><p>filtered:</p></li><li><p>Extra:额外的信息</p><ul><li>Using  where:显示的字段不在索引(select 的字段，有的不再索引中，要从源table表中查询)</li><li>Using index:使用了索引，不用回表查询，能够起到性能提升</li><li>Using temporary:使用了临时表，性能消耗比较大，常见于group by语句</li><li>Using fileSort:使用文件排序，无法利用索引完成排序操作，性能消耗非常大，常见于order by语句</li><li>Using join buffer:mysql引擎使用了链接缓存</li><li>Impossible where:where子句永远为false</li><li>Select tables optimized away:仅通过使用索引，优化器可能仅从聚合函数结果返回一行</li><li>NULL:</li></ul></li></ul><p>using where 使用where条件过滤，但是where条件不在索引，那我们就要考虑用和where后面的字段来建索引</p><h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h3><ul><li>在写on语句时，将数据量小的表放在左边</li><li>where后面的条件尽可能用索引字段，复合索引时，最好按复合索引顺序写where条件</li><li>where后面有in语句，in字段的索引，最好放复合索引的后面，因为in的字段索引可能会失效</li><li>模糊查询时，尽量用常量开头，不要用%开头，用%开头查询索引将失效</li><li>尽量不要使用or，否则索引失效</li><li>尽量不要使用类型转化（显式、隐式），否则索引失效</li><li>如果主查询数据量大，则使用in</li><li>如果子查询数据量大，则使用exists</li><li>查询哪些列，就根据哪些列group by，不然会产生一个临时表</li></ul><h3 id="库优化"><a href="#库优化" class="headerlink" title="库优化"></a>库优化</h3><ul><li>os配置修改</li><li>数据库的配置参数</li><li>数据库 &lt;=&gt; 应用程序 &lt;=&gt; 配置文件</li></ul><h3 id="表优化"><a href="#表优化" class="headerlink" title="表优化"></a>表优化</h3><ul><li><p>表存储引擎</p></li><li><p>表结构（拆表）</p></li><li><p>表建立索引</p><ul><li>慢sql：根据分析结果调整索引，开发人员修改自己的sql</li></ul></li><li><p>主从同步</p></li><li><p>分表分区</p></li></ul><h3 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h3><ul><li>数据同步</li><li>读写分离</li></ul><p>在主数据库中做任何操作，在从数据库中，都会重复一次</p><p>在从数据库中修改，主数据库是不会变化的</p><p>所以主数据库进行写操作，从数据库进行读操作</p><p>可以手动设置同步时间间隔</p><h3 id="分表分区"><a href="#分表分区" class="headerlink" title="分表分区"></a>分表分区</h3><h4 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h4><ul><li>拆列：一张表多列，被拆到多张表「垂直分表」</li></ul><p>表字段变少，行数不变</p><ul><li>拆行：一张表某些行，被拆到另外行「水平分表」</li></ul><p>表字段不变，行数变少</p><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>把数据存到不同地方</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;30-服务器架构演进&quot;&gt;&lt;a href=&quot;#30-服务器架构演进&quot; class=&quot;headerlink&quot; title=&quot;30-服务器架构演进&quot;&gt;&lt;/a&gt;30-服务器架构演进&lt;/h1&gt;&lt;p&gt;把服务包部署到多台设备&lt;/p&gt;
&lt;p&gt;多台机器一起向外提供服务，合并在一起的软件：niginx&lt;/p&gt;
&lt;p&gt;多台机器合并在一起：集群&lt;/p&gt;
&lt;p&gt;nginx负载均衡，反向代理&lt;/p&gt;
&lt;p&gt;nginx里面记录不同机器的ip，配置不同的分配策略&lt;/p&gt;
&lt;p&gt;nginx：web服务器，并不一定是一般理解的前台服务&lt;/p&gt;
&lt;p&gt;前后分离：front+server&lt;/p&gt;
&lt;h2 id=&quot;负载均衡&quot;&gt;&lt;a href=&quot;#负载均衡&quot; class=&quot;headerlink&quot; title=&quot;负载均衡&quot;&gt;&lt;/a&gt;负载均衡&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最典型的软件是nginx&lt;/li&gt;
&lt;li&gt;也可以是硬件F5&lt;/li&gt;
&lt;li&gt;阿里云的SLB，也是一个软件负载均衡&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>29-网络知识</title>
    <link href="http://zx490336534.github.io/article/91eff690.html"/>
    <id>http://zx490336534.github.io/article/91eff690.html</id>
    <published>2021-06-24T12:39:00.000Z</published>
    <updated>2021-06-26T14:28:07.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="29-网络知识"><a href="#29-网络知识" class="headerlink" title="29-网络知识"></a>29-网络知识</h1><p>通常说的网络，都是在TCP/IP协议族的基础上运作的，HTTP协议，只是这个协议族中的一个。</p><ul><li>TCP协议：通过数据发送者和接收者相互回应对方发来的确认信息，可靠的进行数据传输</li><li>IP协议：指定数据发送的ip信息，以及通过路由转发数据</li></ul><h2 id="TCP数据的组成"><a href="#TCP数据的组成" class="headerlink" title="TCP数据的组成"></a>TCP数据的组成</h2><ul><li>源地址：发起方的ip地址</li><li>目的地址：接收方的域名或者ip地址</li><li>数据：包封装</li><li>源端口：每建立一个连接，就要使用一个端口</li><li>目标端口：服务器的端口，一般使用连接池管理</li></ul><p>一个请求：源地址:源端口 –&gt; 网卡 –&gt; 互联网(局域网) –&gt; 目标服务器网卡 –&gt; 目标服务器内部</p><span id="more"></span><h3 id="源端口"><a href="#源端口" class="headerlink" title="源端口"></a>源端口</h3><ul><li>端口有限个：共65535个</li><li>0～1023公认端口，服务器使用端口，被作为特殊服务所定义</li><li>1024～49151注册端口，自己定义的一个服务端口</li><li>49152～65535动态端口</li></ul><p>我们要与被访问的服务建立连接，我们本地要消耗端口，端口区间1024～65535。实际上，发起方这边，能消耗的最大端口大概是1.64w</p><p>每一次通信，都会占用1个端口</p><ul><li>端口开启：发送方分配一个端口，数据从端口出去，进入网络</li><li>端口关闭：端口开启时间片到了，关闭端口</li></ul><ol><li>对于普通使用，端口数量没有问题，但是性能测试时候，就可能出现问题</li><li>常见错误「Address aready in use:connect」</li><li>在一段时间中，我们最多和服务建立1.64w的连接</li><li>长连接，占用连接的时间比较长，短连接，占用时间比较短</li><li>长连接，连接占用时间是可以配置的，调低长连接占用时间，是可以使端口得到更快的释放，从而实现端口复用</li></ol><h4 id="如何查看当前占用端口数"><a href="#如何查看当前占用端口数" class="headerlink" title="如何查看当前占用端口数"></a>如何查看当前占用端口数</h4><ul><li>windows</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|find "TCP" /i /c</span><br></pre></td></tr></tbody></table></figure><p><code>/i</code>:搜索时不区分大小写</p><p><code>/c</code>:统计搜索结果</p><ul><li>linux</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|grep "tcp"|wc -l</span><br></pre></td></tr></tbody></table></figure><h4 id="源端口问题调优"><a href="#源端口问题调优" class="headerlink" title="源端口问题调优"></a>源端口问题调优</h4><p>注册表<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</code></p><ul><li>设置或者添加<code>MaxUserPort</code>为10进制的65534</li><li>设置或添加<code>TcpTimedWaitDelay</code>为10进制的30（默认为240s）</li><li>去除jmeter中的<code>KeepAlive</code>勾选</li></ul><h2 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h2><p>网卡的作用：把计算机数据，转换为网络传输数据</p><p>网卡的速度：绝对数据转换的速度</p><p>现在大部分网卡：千兆网卡 = Gbps</p><h3 id="查看网络延迟"><a href="#查看网络延迟" class="headerlink" title="查看网络延迟"></a>查看网络延迟</h3><p>使用<code>ping</code>查看网络延迟</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:~ zhongxin$ ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (180.101.49.12): 56 data bytes</span><br><span class="line">64 bytes from 180.101.49.12: icmp_seq=0 ttl=50 time=14.450 ms</span><br><span class="line">64 bytes from 180.101.49.12: icmp_seq=1 ttl=50 time=19.119 ms</span><br><span class="line">64 bytes from 180.101.49.12: icmp_seq=2 ttl=50 time=14.121 ms</span><br><span class="line">64 bytes from 180.101.49.12: icmp_seq=3 ttl=50 time=14.018 ms</span><br><span class="line">64 bytes from 180.101.49.12: icmp_seq=4 ttl=50 time=14.843 ms</span><br><span class="line">^C</span><br><span class="line">--- www.a.shifen.com ping statistics ---</span><br><span class="line">5 packets transmitted, 5 packets received, 0.0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 14.018/15.310/19.119/1.926 ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(base) 192:~ zhongxin$ ping 127.0.0.1</span><br><span class="line">PING 127.0.0.1 (127.0.0.1): 56 data bytes</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.051 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.416 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.080 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.063 ms</span><br><span class="line">^C</span><br><span class="line">--- 127.0.0.1 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 packets received, 0.0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.051/0.152/0.416/0.152 ms</span><br></pre></td></tr></tbody></table></figure><p>如果时间比较长甚至有丢包，说明网络延迟比较大</p><p>在做性能测试时，可以通过聚合报告的最后两列，查看网络是否有瓶颈</p><p>通过这两个，就能判断，是否存在网络延迟</p><h3 id="linux中如何查看网卡速度"><a href="#linux中如何查看网卡速度" class="headerlink" title="linux中如何查看网卡速度"></a>linux中如何查看网卡速度</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ethtool 你的网卡|grep <span class="string">"Speed"</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="网络-接收方限制-网络连接配置"><a href="#网络-接收方限制-网络连接配置" class="headerlink" title="网络-接收方限制-网络连接配置"></a>网络-接收方限制-网络连接配置</h2><p><code>sysctl</code>：用于运行时配置内核参数，这些参数位于<code>/proc/sys</code>目录下</p><p>linux系统启动，依次读取</p><ul><li><code>/etc/sysctl.d/*.conf</code></li><li><code>/run/sysctl.d/*.conf</code></li><li><code>/usr/lib/sysctl.d/*.conf</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grvysyhuhaj30tq087afo.jpg" alt="用法"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grvyvx11wqj30tc0ey13n.jpg" alt="场景参数"></p><h2 id="控制shell程序资源"><a href="#控制shell程序资源" class="headerlink" title="控制shell程序资源"></a>控制shell程序资源</h2><p><code>ulimit</code>用于控制shell程序的资源</p><p><code>ulimit -a</code>查看当前所有的限制</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">oot@zx:~# ulimit -a</span><br><span class="line">core file size          (blocks, -c) 0</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 15522</span><br><span class="line">max locked memory       (kbytes, -l) 65536</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 65535</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 8192</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 15522</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br><span class="line">root@zx:~# </span><br></pre></td></tr></tbody></table></figure><ul><li>第1列：限制项</li><li>第2列：该限制项目命令参数及单位</li><li>第3列：目前限制值(unlimited=不限制)</li></ul><p>可以通过<code>ulimit 参数 限制值</code> 临时修改限制值</p><h2 id="查看某个进程允许打开的最大文件数"><a href="#查看某个进程允许打开的最大文件数" class="headerlink" title="查看某个进程允许打开的最大文件数"></a>查看某个进程允许打开的最大文件数</h2><p><code>cat /proc/PID/limits</code></p><p>查看系统运行打开的最大文件数量：<code>cat /proc/sys/fs/file-max</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# cat /proc/sys/fs/file-max</span><br><span class="line">9223372036854775807</span><br></pre></td></tr></tbody></table></figure><h2 id="查看某个进程当前已经打开的文件总数"><a href="#查看某个进程当前已经打开的文件总数" class="headerlink" title="查看某个进程当前已经打开的文件总数"></a>查看某个进程当前已经打开的文件总数</h2><p><code>lsof -p PID|wc -l</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# lsof |wc -l # 查看当前系统打开的总文件数量</span><br><span class="line">7213</span><br></pre></td></tr></tbody></table></figure><p>如果服务有高并发请求，服务打开的总的文件数量超过系统运行打开的文件数量，会报无法打开文件的错误</p><p>解决办法：</p><ol><li><code>lsof |wc -l</code>统计当前系统打开的文件数量</li><li><code>cat /proc/sys/fs/file-max</code>查看系统运行打开的最大文件数量</li><li><code>lsof -p PID|wc -l</code>某个进程当前打开的文件数量</li></ol><h2 id="禁ping设置"><a href="#禁ping设置" class="headerlink" title="禁ping设置"></a>禁ping设置</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/sbin/sysctl -w net.ipv4.icmp_echo_ignore_all=1</span><br><span class="line">/sbin/sysctl -w net.ipv4.route.flush=1</span><br><span class="line">/sbin/sysctl -p</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:~ zhongxin$ ping 123.56.13.233</span><br><span class="line">PING 123.56.13.233 (123.56.13.233): 56 data bytes</span><br><span class="line">64 bytes from 123.56.13.233: icmp_seq=0 ttl=50 time=35.825 ms</span><br><span class="line">64 bytes from 123.56.13.233: icmp_seq=1 ttl=50 time=35.241 ms</span><br><span class="line">64 bytes from 123.56.13.233: icmp_seq=2 ttl=50 time=41.471 ms</span><br><span class="line">64 bytes from 123.56.13.233: icmp_seq=3 ttl=50 time=34.870 ms</span><br><span class="line">64 bytes from 123.56.13.233: icmp_seq=4 ttl=50 time=64.342 ms</span><br><span class="line">64 bytes from 123.56.13.233: icmp_seq=5 ttl=50 time=51.517 ms</span><br><span class="line">64 bytes from 123.56.13.233: icmp_seq=6 ttl=50 time=35.040 ms</span><br><span class="line">64 bytes from 123.56.13.233: icmp_seq=7 ttl=50 time=35.376 ms</span><br><span class="line">^C</span><br><span class="line">--- 123.56.13.233 ping statistics ---</span><br><span class="line">8 packets transmitted, 8 packets received, 0.0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 34.870/41.710/64.342/10.101 ms</span><br><span class="line">(base) 192:~ zhongxin$ ping 123.56.13.233</span><br><span class="line">PING 123.56.13.233 (123.56.13.233): 56 data bytes</span><br><span class="line">Request timeout for icmp_seq 0</span><br><span class="line">Request timeout for icmp_seq 1</span><br><span class="line">Request timeout for icmp_seq 2</span><br><span class="line">Request timeout for icmp_seq 3</span><br><span class="line">Request timeout for icmp_seq 4</span><br><span class="line">Request timeout for icmp_seq 5</span><br><span class="line">^C</span><br><span class="line">--- 123.56.13.233 ping statistics ---</span><br><span class="line">7 packets transmitted, 0 packets received, 100.0% packet loss</span><br><span class="line">(base) 192:~ zhongxin$</span><br></pre></td></tr></tbody></table></figure><h2 id="恢复禁ping"><a href="#恢复禁ping" class="headerlink" title="恢复禁ping"></a>恢复禁ping</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/sbin/sysctl -w net.ipv4.icmp_echo_ignore_all=0</span><br><span class="line">/sbin/sysctl -w net.ipv4.route.flush=1</span><br><span class="line">/sbin/sysctl -p</span><br></pre></td></tr></tbody></table></figure><h2 id="永久修改限制值"><a href="#永久修改限制值" class="headerlink" title="永久修改限制值"></a>永久修改限制值</h2><p><code>/etc/security/limits.conf</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">root@zx:/# cat /etc/security/limits.conf </span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/security/limits.conf</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment">#Each line describes a limit for a user in the form:</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment">#&lt;domain&gt;        &lt;type&gt;  &lt;item&gt;  &lt;value&gt;</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment">#Where:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">&lt;domain&gt; can be:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - a user name</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - a group name, with @group syntax</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - the wildcard *, <span class="keyword">for</span> default entry</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - the wildcard %, can be also used with %group syntax,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                 <span class="keyword">for</span> maxlogin <span class="built_in">limit</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - NOTE: group and wildcard limits are not applied to root.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">          To apply a <span class="built_in">limit</span> to the root user, &lt;domain&gt; must be</span></span><br><span class="line"><span class="meta">#</span><span class="bash">          the literal username root.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment">#&lt;type&gt; can have the two values:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - <span class="string">"soft"</span> <span class="keyword">for</span> enforcing the soft limits</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - <span class="string">"hard"</span> <span class="keyword">for</span> enforcing hard limits</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment">#&lt;item&gt; can be one of the following:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - core - limits the core file size (KB)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - data - max data size (KB)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - fsize - maximum filesize (KB)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - memlock - max locked-in-memory address space (KB)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - nofile - max number of open file descriptors</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - rss - max resident <span class="built_in">set</span> size (KB)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - stack - max stack size (KB)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - cpu - max CPU time (MIN)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - nproc - max number of processes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - as - address space <span class="built_in">limit</span> (KB)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - maxlogins - max number of logins <span class="keyword">for</span> this user</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - maxsyslogins - max number of logins on the system</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - priority - the priority to run user process with</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - locks - max number of file locks the user can hold</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - sigpending - max number of pending signals</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - msgqueue - max memory used by POSIX message queues (bytes)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - nice - max nice priority allowed to raise to values: [-20, 19]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - rtprio - max realtime priority</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        - chroot - change root to directory (Debian-specific)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment">#&lt;domain&gt;      &lt;type&gt;  &lt;item&gt;         &lt;value&gt;</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="bash"><span class="comment">#*               soft    core            0</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">root            hard    core            100000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">*               hard    rss             10000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">@student        hard    nproc           20</span></span><br><span class="line"><span class="meta">#</span><span class="bash">@faculty        soft    nproc           20</span></span><br><span class="line"><span class="meta">#</span><span class="bash">@faculty        hard    nproc           50</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ftp             hard    nproc           0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ftp             -       chroot          /ftp</span></span><br><span class="line"><span class="meta">#</span><span class="bash">@student        -       maxlogins       4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> End of file</span></span><br><span class="line">root soft nofile 65535</span><br><span class="line">root hard nofile 65535</span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line">root@zx:/#</span><br></pre></td></tr></tbody></table></figure><ul><li>参数1:用户</li><li>参数2:软、硬限制</li><li>参数3:限制</li><li>参数4:数量</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grvzqv1vlvj30v30ei7em.jpg" alt="参数"></p><p>永久修改，需要重启后生效</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>当系统允许打开的文件数很大，但是查看到系统打开的文件总数量远小于系统允许打开的文件数量。</p><p>当进行性能测试的时候，发现出现不能打开更多文件的报错，这个时候的原因就是，你当前部署用的账号，打开的文件数量限制导致的。</p><p>如果通过修改系统配置文件，就可以解决这个性能问题，那么这个性能问题就可以通过测试人员的调优解决。需要把该修改同步到生成服务器中进行修改。</p><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p><code>Content.xml</code>文件有连接池的配置，默认为200</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>mysql的配置文件<code>/etc/my.cnf</code>默认连接池大小是151约等于最大打开文件数据/5 ：1024/5</p><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>一般不会有问题</p><h2 id="USE方法"><a href="#USE方法" class="headerlink" title="USE方法"></a>USE方法</h2><blockquote><p>USE 「utilization saturation errors」对于所有资源，查看他的使用率，饱和度和错误</p></blockquote><p>在性能测试时，有出现错误，先判断，脚本是否写的有问题</p><p>然后排查是否有服务器问题</p><p>先排查是否有硬件问题，然后配置「os、服务」，软件服务性能问题</p><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><ul><li>硬件资源「服务器所有元器件」</li><li>软件资源「文件描述符、连接跟踪数、套接字大小、中间件、连接数」</li></ul><h3 id="使用率"><a href="#使用率" class="headerlink" title="使用率"></a>使用率</h3><p>在规定时间间隔内，资源用于服务工作的时间百分比</p><h3 id="饱和度"><a href="#饱和度" class="headerlink" title="饱和度"></a>饱和度</h3><p>资源不能再服务更多额外工作的程度</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>错误事件的个数</p><h2 id="性能测试前期正常，后期报错"><a href="#性能测试前期正常，后期报错" class="headerlink" title="性能测试前期正常，后期报错"></a>性能测试前期正常，后期报错</h2><ol><li>看保存信息</li><li>看系统负载是否恢复正常再开启测试</li><li>源端口是否够用</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;29-网络知识&quot;&gt;&lt;a href=&quot;#29-网络知识&quot; class=&quot;headerlink&quot; title=&quot;29-网络知识&quot;&gt;&lt;/a&gt;29-网络知识&lt;/h1&gt;&lt;p&gt;通常说的网络，都是在TCP/IP协议族的基础上运作的，HTTP协议，只是这个协议族中的一个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP协议：通过数据发送者和接收者相互回应对方发来的确认信息，可靠的进行数据传输&lt;/li&gt;
&lt;li&gt;IP协议：指定数据发送的ip信息，以及通过路由转发数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;TCP数据的组成&quot;&gt;&lt;a href=&quot;#TCP数据的组成&quot; class=&quot;headerlink&quot; title=&quot;TCP数据的组成&quot;&gt;&lt;/a&gt;TCP数据的组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;源地址：发起方的ip地址&lt;/li&gt;
&lt;li&gt;目的地址：接收方的域名或者ip地址&lt;/li&gt;
&lt;li&gt;数据：包封装&lt;/li&gt;
&lt;li&gt;源端口：每建立一个连接，就要使用一个端口&lt;/li&gt;
&lt;li&gt;目标端口：服务器的端口，一般使用连接池管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个请求：源地址:源端口 –&amp;gt; 网卡 –&amp;gt; 互联网(局域网) –&amp;gt; 目标服务器网卡 –&amp;gt; 目标服务器内部&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>28-磁盘知识</title>
    <link href="http://zx490336534.github.io/article/daf73f86.html"/>
    <id>http://zx490336534.github.io/article/daf73f86.html</id>
    <published>2021-06-17T07:51:00.000Z</published>
    <updated>2021-06-22T14:13:58.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="28-磁盘知识"><a href="#28-磁盘知识" class="headerlink" title="28-磁盘知识"></a>28-磁盘知识</h1><blockquote><p>持久化的存储设备</p></blockquote><p>存储设备，系统中容量最大的存储设备</p><p>存储数据之前，要先进行格式化</p><p>linux：ext4</p><p>windwos：FAT32、NTFS</p><p>在读写数据时，数据与磁盘间有个磁盘缓存（内存的一部分）</p><h2 id="机械磁盘「HHD」"><a href="#机械磁盘「HHD」" class="headerlink" title="机械磁盘「HHD」"></a>机械磁盘「HHD」</h2><p>由盘片，磁头组成，数据存在盘片的环形磁道上，读写时，磁头移动，定位到数据的磁道，进行数据读写</p><h2 id="固态磁盘「SSD」"><a href="#固态磁盘「SSD」" class="headerlink" title="固态磁盘「SSD」"></a>固态磁盘「SSD」</h2><p>由固态电子元器件组成，不需要磁头寻址，所以不管是连续IO还是随机IO，都比机械盘快</p><span id="more"></span><h2 id="为什么代码可以运行在不同的操作系统中"><a href="#为什么代码可以运行在不同的操作系统中" class="headerlink" title="为什么代码可以运行在不同的操作系统中"></a>为什么代码可以运行在不同的操作系统中</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grk5x1ia0jj30ni0cyn2h.jpg" alt="不同系统的读写"></p><h2 id="Linux中，一切都是文件"><a href="#Linux中，一切都是文件" class="headerlink" title="Linux中，一切都是文件"></a>Linux中，一切都是文件</h2><p>磁盘文件系统：ext4、xfs、nfs</p><p>内存文件系统：基于内存的文件系统 <code>/proc/sys</code></p><p>网络文件系统：用来访问其他计算机数据的文件系统 <code>nfs</code> ,<code>smb</code></p><h2 id="磁盘内部"><a href="#磁盘内部" class="headerlink" title="磁盘内部"></a>磁盘内部</h2><p>扇区sector：磁盘组成的最小单位「512B」，磁盘磁道中一个弧段</p><p>块Block：操作系统与磁盘数据交换的最小单位，快=2^n*扇区</p><ul><li>linux：类似Ext4文件系统，就是磁盘分块</li><li>windows：类似NTFS文件系统，也就是块，只是被叫做「簇」</li></ul><p>页page：操作系统与内存数据交换的最小单位</p><p>缓冲区：buffer内存与磁盘速度不匹配，在数据与磁盘进行IO时，数据先进入缓存区</p><p>页缓存：Linux内存中对磁盘部分数据的副本，加快程序读取磁盘的速度和进程间数据共享</p><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><ul><li><p>基本分区：不能再分区</p></li><li><p>扩展分区：必须进行二次分区，才能使用。再分区就是逻辑分区</p></li></ul><p>linux中IDE设备分区符以「hd」开头</p><ul><li>hd=Hard Disk表示硬盘是IDE（或ATA）并行接口.速度快一些</li></ul><p>linux中SCSI设备分区符以「sd」开头</p><ul><li>sd=Serial ATA Disk表示硬盘是scsi，<strong>SATA串行接口</strong>，u盘也是scsi</li><li>vmware中把磁盘做成scsi设备，所以硬盘名称是sda</li></ul><p>sda:a、b、c…第几个硬盘</p><p>sda1、sda2…数字1、2、3表示第几个分区</p><p><code>fdisk -l</code>查看系统分区详细信息</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# fdisk -l</span><br><span class="line">Disk /dev/vda: 40 GiB, 42949672960 bytes, 83886080 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xcdbde65e</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors Size Id Type</span><br><span class="line">/dev/vda1  *     2048 83886046 83883999  40G 83 Linux</span><br><span class="line">root@zx:~# </span><br></pre></td></tr></tbody></table></figure><p>分区的目的：提升磁盘读写数据的速度</p><h2 id="磁盘阵列RAID"><a href="#磁盘阵列RAID" class="headerlink" title="磁盘阵列RAID"></a>磁盘阵列RAID</h2><blockquote><p>独立磁盘构成具有冗余能力的阵列</p></blockquote><ul><li>由多块独立的磁盘组成一个容量巨大的磁盘组，利用磁盘提供数据所产生的加成效果提升整个磁盘系统的效能。利用这个技术，把数据切割成多段，分别存在不同磁盘上</li><li>RAID0:数据分片存在2块磁盘，读写速度提升2倍，主要用于SWAP\TMP，但是数据不冗余，数据恢复难</li><li>RAID1:相同数据冗余存入2块磁盘，写速度不变，读速度提升2倍，数据冗余1份，主要用于数据备份，但磁盘利用率低</li><li>RAID5:数据分片和校验码混合存储3份，读写速度提升2倍，主要在要求告诉时用，可以用于数据还原</li><li>RAID10:2块磁盘1组先做RAID1，多组RAID1，再做RAID0，读写速度N「组数」倍</li></ul><h2 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h2><p>Virtual File System简称VFS。是Linux内核的子系统之一，它为用户程序提供文件和文件操作系统的统一接口，屏蔽不同文件系统的差异和操作细节。节奏VFS可以直接使用open()，read()，write()这样的系统调用操作文件，而无需考虑具体的文化系统和实际的存储介质</p><p>通过VFS系统，Linux提供了通用的系统调用，可以跨越不同文件系统和介质之间执行，极大简化了用户访问不同文件系统的过程。另一方面，新的文件系统，新类型的存储介质，可以无须编译的情况下，动态加载到Linux中</p><h2 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h2><p>文件操作：先open，再read或write，最后close</p><p>读写的不同：</p><ul><li>是否利用标准库缓存：缓存IO、非缓存IO</li><li>是否利用页缓存：直接IO、非直接IO<ul><li>直接IO：跳过操作系统和页缓存，直接与文件系统交互来访问文件</li><li>非直接IO：文件读写时，先给页缓存，再由内核调用，写入磁盘</li></ul></li><li>释放阻塞自身运行：阻塞IO、非阻塞IO<ul><li>阻塞IO：如果没有获得响应，就阻塞当前线程</li><li>非阻塞IO：不阻塞当前线程</li></ul></li><li>是否等待响应结果：同步IO、异步IO<ul><li>同步IO：要一直等待整个IO完成，才能获取IO响应</li><li>异步IO：不等待IO完成，可以执行另外任务</li></ul></li></ul><h2 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# iostat -dx 2</span><br><span class="line">Linux 5.4.0-54-generic (zx)     06/17/2021      _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">Device            r/s     rkB/s   rrqm/s  %rrqm r_await rareq-sz     w/s     wkB/s   wrqm/s  %wrqm w_await wareq-sz     d/s     dkB/s   drqm/s  %drqm d_await dareq-sz  aqu-sz  %util</span><br><span class="line">vda              0.00      0.11     0.00  33.65    1.93    28.47    0.94     10.72     1.28  57.78    2.17    11.43    0.00      0.00     0.00   0.00    0.00     0.00    0.00   0.13</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Device            r/s     rkB/s   rrqm/s  %rrqm r_await rareq-sz     w/s     wkB/s   wrqm/s  %wrqm w_await wareq-sz     d/s     dkB/s   drqm/s  %drqm d_await dareq-sz  aqu-sz  %util</span><br><span class="line">vda              0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00   0.00</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Device            r/s     rkB/s   rrqm/s  %rrqm r_await rareq-sz     w/s     wkB/s   wrqm/s  %wrqm w_await wareq-sz     d/s     dkB/s   drqm/s  %drqm d_await dareq-sz  aqu-sz  %util</span><br><span class="line">vda              0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00   0.00</span><br></pre></td></tr></tbody></table></figure><ul><li><code>rrqm/s</code>:每秒进行merge的读操作数目，即delta(rmerge)/s</li><li><code>wrqm/s</code>:每秒进行merge的写操作数目，即delta(wmerge)/s</li><li><code>r/s</code>:每秒完成的读IO设备次数，即delta(rio)/s</li><li><code>w/s</code>:每秒完成的写IO设备次数</li><li><code>rsec/s</code>:每秒读扇区数</li><li><code>wsec/s</code>:每秒写扇区数</li><li><code>rkBs</code>:每秒读k字节数</li><li><code>wkB/s</code>:每秒写k字节数</li></ul><h2 id="磁盘性能指标"><a href="#磁盘性能指标" class="headerlink" title="磁盘性能指标"></a>磁盘性能指标</h2><h3 id="使用率"><a href="#使用率" class="headerlink" title="使用率"></a>使用率</h3><p>指磁盘处理IO的时间百分比</p><h3 id="饱和度"><a href="#饱和度" class="headerlink" title="饱和度"></a>饱和度</h3><p>磁盘处理IO的繁忙程度</p><h3 id="IOPS"><a href="#IOPS" class="headerlink" title="IOPS"></a>IOPS</h3><p>input\output per second 每秒的IO请求</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>每秒的IO请求大小</p><h3 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h3><p>指IO请求从发送到收到响应的时间间隔</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></tbody></table></figure><ul><li>echo 1:释放页缓存</li><li>echo 2:释放目录项</li><li>echo 3:释放页缓存、目录项、节点</li></ul><p>执行之后，buff会为0，cache会减少，free增大</p><h2 id="测试磁盘「写」能力"><a href="#测试磁盘「写」能力" class="headerlink" title="测试磁盘「写」能力"></a>测试磁盘「写」能力</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# dd if=/dev/zero of=$PWD/outfile bs=20MB count=100</span><br><span class="line">100+0 records in</span><br><span class="line">100+0 records out</span><br><span class="line">2000000000 bytes (2.0 GB, 1.9 GiB) copied, 12.5943 s, 159 MB/s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@zx:~# time dd if=/dev/zero of=$PWD/outfile bs=20MB count=100</span><br><span class="line">100+0 records in</span><br><span class="line">100+0 records out</span><br><span class="line">2000000000 bytes (2.0 GB, 1.9 GiB) copied, 18.2494 s, 110 MB/s</span><br><span class="line"></span><br><span class="line">real    0m18.556s</span><br><span class="line">user    0m0.000s</span><br><span class="line">sys     0m2.696s</span><br></pre></td></tr></tbody></table></figure><ul><li>if输入文件(in file)</li><li>of输出文件(out file)</li><li>/dev/zero 一个伪设备，只产生字符流，不会有IO</li><li>of=$PWD/outfile 输出到当前目录下的outfile文件中</li><li>bs=20MB count=100 块文件20MB，执行100次</li></ul><h3 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h3><p>使用<code>vmstat 1</code>：free变小，空闲内存变小；buffer为0，cache数据变大，bo数据也变大，说明有大量的写磁盘</p><p>使用<code>iostat -dx 1</code>：r/s没有数据，wKB/s有大量数据，说明有大量的磁盘操作</p><p><code>top</code>：wa有明显的数据</p><h2 id="测试磁盘「读」能力"><a href="#测试磁盘「读」能力" class="headerlink" title="测试磁盘「读」能力"></a>测试磁盘「读」能力</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs           394M  908K  393M   1% /run</span><br><span class="line">/dev/vda1        40G   14G   24G  37% /</span><br><span class="line">tmpfs           2.0G     0  2.0G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           2.0G     0  2.0G   0% /sys/fs/cgroup</span><br><span class="line">overlay          40G   14G   24G  37% /var/lib/docker/overlay2/620bb7aa0e627cdba9390176389043e6822ab9e5eb2babdeab85277eff33f615/merged</span><br><span class="line">overlay          40G   14G   24G  37% /var/lib/docker/overlay2/d3473cb9961cfa686528b22e036640d393e58e3f53498952e88b602392005deb/merged</span><br><span class="line">overlay          40G   14G   24G  37% /var/lib/docker/overlay2/4255afaa35207b007713bd6b0366838b6452038dffd1c1a1d23639aaab9a37ae/merged</span><br><span class="line">tmpfs           394M     0  394M   0% /run/user/0</span><br><span class="line"></span><br><span class="line">root@zx:~# dd if=/dev/vda1 of=/dev/null bs=20MB count=100</span><br><span class="line">100+0 records in</span><br><span class="line">100+0 records out</span><br><span class="line">2000000000 bytes (2.0 GB, 1.9 GiB) copied, 17.9035 s, 112 MB/s</span><br><span class="line"></span><br><span class="line">root@zx:~# time dd if=/dev/vda1 of=/dev/null bs=20MB count=100</span><br><span class="line">100+0 records in</span><br><span class="line">100+0 records out</span><br><span class="line">2000000000 bytes (2.0 GB, 1.9 GiB) copied, 9.53937 s, 210 MB/s</span><br><span class="line"></span><br><span class="line">real    0m9.548s</span><br><span class="line">user    0m0.001s</span><br><span class="line">sys     0m1.305s</span><br></pre></td></tr></tbody></table></figure><ul><li>if输入文件(in file)</li><li>of输出文件(out file)</li><li>/dev/vda1 磁盘第1个物理分区，读取这个磁盘文件，会有IO</li><li>/dev/null 一个伪设置，回收站，是个无底洞，可以无限放暑假</li><li>bs=20MB count=100 块文件20MB，执行100次</li></ul><h3 id="观察-1"><a href="#观察-1" class="headerlink" title="观察"></a>观察</h3><p>使用<code>vmstat 1</code>：free变小，空闲内存变小；buffer明显变大，cache数据没有明显变化，bi也有明显的数据</p><p>bi数据，经过几次增加后，buffer数据也相应的增加，当bi数据没有时，buffer数据也不变了，但是读的操作还没有结束。说明后面的读数据来自buffer</p><ul><li>buffer是由磁盘虚拟而来，用于加快磁盘读速度。</li></ul><p>使用<code>iostat -dx 1</code>：rkB/s数据变大，wkB/s数据不明显</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在<strong>写</strong>磁盘数据时，<strong>cache会变大</strong>，在<strong>读</strong>磁盘数据时，buffer会变大。</p><h2 id="测试内存的速度"><a href="#测试内存的速度" class="headerlink" title="测试内存的速度"></a>测试内存的速度</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# echo 3&gt;/proc/sys/vm/drop_caches </span><br><span class="line"></span><br><span class="line">root@zx:~# dd if=/dev/zero of=/dev/null bs=50MB count=100</span><br><span class="line">100+0 records in</span><br><span class="line">100+0 records out</span><br><span class="line">5000000000 bytes (5.0 GB, 4.7 GiB) copied, 0.831753 s, 6.0 GB/s</span><br></pre></td></tr></tbody></table></figure><p>内存的速度，大概是几个GB/s</p><p>内存的速度，看你是磁盘速度的上百倍</p><h2 id="磁盘性能优化"><a href="#磁盘性能优化" class="headerlink" title="磁盘性能优化"></a>磁盘性能优化</h2><ol><li>由机械硬盘，转为固态硬盘，提升磁盘的速度，所以整体性能提升</li><li>减少磁盘的IO次数。代码可以优化</li><li>可以适当的加大内存的大小</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;28-磁盘知识&quot;&gt;&lt;a href=&quot;#28-磁盘知识&quot; class=&quot;headerlink&quot; title=&quot;28-磁盘知识&quot;&gt;&lt;/a&gt;28-磁盘知识&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;持久化的存储设备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;存储设备，系统中容量最大的存储设备&lt;/p&gt;
&lt;p&gt;存储数据之前，要先进行格式化&lt;/p&gt;
&lt;p&gt;linux：ext4&lt;/p&gt;
&lt;p&gt;windwos：FAT32、NTFS&lt;/p&gt;
&lt;p&gt;在读写数据时，数据与磁盘间有个磁盘缓存（内存的一部分）&lt;/p&gt;
&lt;h2 id=&quot;机械磁盘「HHD」&quot;&gt;&lt;a href=&quot;#机械磁盘「HHD」&quot; class=&quot;headerlink&quot; title=&quot;机械磁盘「HHD」&quot;&gt;&lt;/a&gt;机械磁盘「HHD」&lt;/h2&gt;&lt;p&gt;由盘片，磁头组成，数据存在盘片的环形磁道上，读写时，磁头移动，定位到数据的磁道，进行数据读写&lt;/p&gt;
&lt;h2 id=&quot;固态磁盘「SSD」&quot;&gt;&lt;a href=&quot;#固态磁盘「SSD」&quot; class=&quot;headerlink&quot; title=&quot;固态磁盘「SSD」&quot;&gt;&lt;/a&gt;固态磁盘「SSD」&lt;/h2&gt;&lt;p&gt;由固态电子元器件组成，不需要磁头寻址，所以不管是连续IO还是随机IO，都比机械盘快&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>27-内存知识</title>
    <link href="http://zx490336534.github.io/article/f32ce47c.html"/>
    <id>http://zx490336534.github.io/article/f32ce47c.html</id>
    <published>2021-06-05T02:44:00.000Z</published>
    <updated>2021-06-16T07:51:07.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="27-内存知识"><a href="#27-内存知识" class="headerlink" title="27-内存知识"></a>27-内存知识</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><blockquote><p>内存又叫主存，是CPU与其他设备沟通的桥梁，主要用来临时存放数据，配合CPU工作，协调CPU的处理速度</p></blockquote><ul><li>硬盘数据，外设数据，玩了传输数据，要进CPU前，都要先进入内存</li><li>临时存放，在断电后，内存内容就会丢失</li></ul><p>内存的组成：内存地址+存储单元</p><h2 id="存储单元-数据结构"><a href="#存储单元-数据结构" class="headerlink" title="存储单元-数据结构"></a>存储单元-数据结构</h2><h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><blockquote><p>两种不同的数据结构</p></blockquote><h3 id="堆（heap）"><a href="#堆（heap）" class="headerlink" title="堆（heap）"></a>堆（heap）</h3><p>一种经过排序的<strong>树型数据</strong>结构</p><p>存放程序的<strong>对象</strong></p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>数组、列表：数据是有顺序的，从左到右，从0开始。如果要在列表中，插入一个数据，那么在插入位置之后的数据，都需要移动，删除列表中间某个数据，在位置之后的数据，也都要移动。</p><p>链表也是一种数组，它的每个数据存储的都是数据值+下一个元素的地址。</p><p>如果要在链表中，插入一个数据。插入位置「前一个元素」中的「下一个元素的地址」需要指向插入的数据的地址，「待插入的元素」记录「下一个元素的地址」。</p><p>查找一个数据时，需要从头开始读取数据，一个一个的比对，直到找到需要的数据才停止。这个过程会有大量的IO，所以读取数据速度并不快。</p><ul><li>二叉树</li></ul><p>建立在链表的基础上的一种数据结构</p><p>二叉树左边存储的是小于自身数据，右边是存储大于自身数据</p><p>插入数据：因为是链表，插入速度也比较快</p><p>读取数据：因为数据已经做了二分，查找链路变短，IO就减少了，读取速度也变快</p><p>二叉树的不足：随着存储的数据量增大，二叉树会越来越大，那要查找某个数据的IO次数，也会非常多</p><ul><li>B树「平衡二叉树」</li></ul><blockquote><p>不是一个简单的平衡二叉树，是一个立体的平衡二叉树</p></blockquote><p>B树和平衡二叉树稍有不同的是B树属于多叉树又名平衡多路查找树（查找路径不只两个），数据库索引技术里大量使用者B树和B+树的数据结构</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>LIFO「Last In First Out」后进先出</p><ul><li><p>装入叫压入</p></li><li><p>取出叫弹出</p></li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>FIFO「First In First Out」先进先出</p><ul><li>顺序队列</li><li>循环队列</li></ul><span id="more"></span><h3 id="内存使用"><a href="#内存使用" class="headerlink" title="内存使用"></a>内存使用</h3><p>一个程序运行起来，需要分配一块内存空间，无异常时，就在分配的空间中弹性伸缩存储</p><p>这个存储空间至少包含一块栈区，一块堆区，还会包括其他</p><ul><li>栈区：存放程序中的变量</li><li>堆区：存放程序中的对象</li></ul><h3 id="JVM-java虚拟机"><a href="#JVM-java虚拟机" class="headerlink" title="JVM java虚拟机"></a>JVM java虚拟机</h3><p>程序计数器、java虚拟机栈、本地方法栈、方法区、堆内存</p><ul><li>程序计数器：记录持续执行字节码的行号指示器</li><li>java虚拟机栈：java方法执行时的内存模型<ul><li>StackOverflowError：线程请求的栈深度大于虚拟机运行的最大深度</li><li>OutOfMemoryError：栈在动态扩展时，无法申请到足够的内存空间</li><li>内存泄漏：程序运行时，申请的内存空间使用完了，不及时释放，导致可申请的内存空间越来越少。可以使用的内存空间越来越少。</li></ul></li><li>方法区：共享内存区域，存储已被虚拟机加载的数据</li><li>栈内存：存储局部变量，变量有一定的作用域，离开作用域，空间就会被释放，所以更新速度快，生命周期短</li><li>堆内存：存储数组和对象，new出来的都存堆里，如果数据消失，实体不会马上释放</li></ul><p>OOM会导致整个内存条空间全被使用吗？ 不会！只会消耗该程序申请的空间，不会消耗内存条全部空间</p><h4 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h4><ul><li>新生代=Eden（存放JVM刚分配的对象） + Survivor1 + Survivor2 （两个空间一样大，Eden中未被GC的对象，会在这两个区间来回拷贝，默认拷贝超过15次，就移入年老代）</li><li>Tenured 年老代</li><li>Perm 永久代（元空间）</li></ul><h3 id="内存空间的释放"><a href="#内存空间的释放" class="headerlink" title="内存空间的释放"></a>内存空间的释放</h3><p>GC资源回收</p><p>需要有GC，但是频率要合理，不能过高</p><h4 id="怎么判断是可回收"><a href="#怎么判断是可回收" class="headerlink" title="怎么判断是可回收"></a>怎么判断是可回收</h4><ul><li>是否可达</li><li>是否存活</li></ul><h4 id="判断哪些可被回收"><a href="#判断哪些可被回收" class="headerlink" title="判断哪些可被回收"></a>判断哪些可被回收</h4><ul><li>不要的、不能被回收：新生代、年老代</li><li>拷贝算法：把新生代变为年老代</li></ul><h4 id="什么时候回收"><a href="#什么时候回收" class="headerlink" title="什么时候回收"></a>什么时候回收</h4><ul><li>分配的空间不足，才会执行回收</li><li>定时回收</li></ul><h4 id="怎么回收"><a href="#怎么回收" class="headerlink" title="怎么回收"></a>怎么回收</h4><p>垃圾回收算法：新生代-复制算法「清理Eden，将存活的复制到Survivor」，年老代-标记整理算法「先标记，再整理」</p><h3 id="资源回收"><a href="#资源回收" class="headerlink" title="资源回收"></a>资源回收</h3><p>只有在讲「堆」的时候，才会说资源回收。本地方法栈、程序计数器、虚拟机栈这些是不需要进行垃圾回收的</p><h3 id="Java的内存回收机制"><a href="#Java的内存回收机制" class="headerlink" title="Java的内存回收机制"></a>Java的内存回收机制</h3><p>内存空间中垃圾回收的工作由垃圾回收器「Garbage Collecot，GC」完成。它的核心思想是：对虚拟机可用内存空间，即堆空间中的对象进行识别，如果对象正在被引用，那么称其为存活对象，反之，如果对象不再被引用，则为垃圾对象，可以回收其占据的空间，用于再分配。</p><h2 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h2><p><code>-Xms</code>:初始堆大小<br><code>-Xmx</code>:最大堆空间<br><code>-Xmn</code>:设置新生代大小<br><code>-XX:SurivivorRatio</code>:新生代eden空间，from空间，to空间的比例关系<br><code>-XX:PermSize</code>:方法区初始大小<br><code>-XX:MaxPermSize</code>:方法区最大值<br><code>-XX:MetaspaceSize</code>:元空间GC阈值<br><code>-XX:MaxMetaspaceSize</code>:最大元空间大小<br><code>-Xss</code>:栈大小<br><code>-XX:MaxDirectMemorySize</code>:直接内存大小，默认为最大堆空间</p><h2 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          3.8Gi       414Mi       293Mi       2.0Mi       3.2Gi       3.2Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></tbody></table></figure><p>Mem:物理内存</p><ul><li>total合计</li><li>used已被用</li><li>free未使用</li><li>shared共享</li><li>buff/cache缓冲区、缓存<ul><li>buff：对原始磁盘块（操作系统与磁盘交流的最小单位）的临时存储</li><li>cache：从磁盘读取文件的页缓存</li></ul></li><li>available新进程可分配=free+可回收的</li></ul><p>Swap:交换分区</p><p>一种虚拟内存，由磁盘虚拟化而来，存在于内存和磁盘之间，因为磁盘和内存之间速度存在差异</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top - 14:51:35 up 169 days,  4:55,  1 user,  load average: 0.01, 0.02, 0.00</span><br><span class="line">Tasks: 108 total,   1 running, 107 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  1.2 us,  0.5 sy,  0.0 ni, 98.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">MiB Mem :   3936.1 total,    294.0 free,    414.6 used,   3227.6 buff/cache</span><br><span class="line">MiB Swap:      0.0 total,      0.0 free,      0.0 used.   3266.4 avail Mem </span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                     </span><br><span class="line"> 479183 root      10 -10  128.7m  37.5m  14.5m S   2.3   1.0 487:05.64 AliYunDun                                                   </span><br><span class="line"> 672280 root      20   0   59.3m  53.2m   5.9m S   1.0   1.4 139:43.55 gunicorn                                                    </span><br><span class="line"> 479138 root      10 -10   21.8m   5.7m   4.9m S   0.3   0.1  27:41.60 AliYunDunUpdate</span><br></pre></td></tr></tbody></table></figure><p>VIRT 虚拟内存使用量 = Swap + RES</p><p>RES 物理内存使用量+未换出的虚拟内存大小 = CODE + DATA</p><p>SHR 共享内存使用量</p><p>Swap 虚拟内存中被换出的大小</p><p>CODE 代码占用的物理内存大小</p><p>DATA 代码之外的部分占用的物理内存大小</p><p>%MEM 使用的物理内存占总内存的比率</p><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><h3 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h3><p>命令：jmap [options] pid</p><p><code>-dump</code>:生成java堆栈的快照信息<br><code>-heap</code>:显示java堆详细信息，使用那种回收机制，参数配置，分代情况<br><code>-histo</code>:显示堆中对象统计信息，包括类，实例数量</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jmap -F -dump:format=b,file=jvmpertest110901.bin 3636</span><br><span class="line">format=b 格式为二进制</span><br><span class="line">file 输出到什么文件，文件格式.bin</span><br><span class="line">3636 进程pid</span><br></pre></td></tr></tbody></table></figure><p>这个命令，执行时间很长，生成的文件也很大</p><h3 id="arthas"><a href="#arthas" class="headerlink" title="arthas"></a>arthas</h3><blockquote><p>阿里巴巴开源的java诊断工具，实现了jvm自带的几乎所有诊断功能</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br></pre></td></tr></tbody></table></figure><h4 id="工具上手"><a href="#工具上手" class="headerlink" title="工具上手"></a>工具上手</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></tbody></table></figure><h4 id="内存泄漏抓包"><a href="#内存泄漏抓包" class="headerlink" title="内存泄漏抓包"></a>内存泄漏抓包</h4><ul><li>dashboard</li><li>heapdump</li></ul><h2 id="jvm分析"><a href="#jvm分析" class="headerlink" title="jvm分析"></a>jvm分析</h2><h3 id="输出gc日志"><a href="#输出gc日志" class="headerlink" title="输出gc日志"></a>输出gc日志</h3><p>jvm的启动参数中加入</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimestamps -XX:+PrintGCApplicationsStopedTime</span><br></pre></td></tr></tbody></table></figure><p>启动后输出：GC概要信息，详细信息，gc时间，gc造成的应用暂停时间</p><h3 id="jcosole"><a href="#jcosole" class="headerlink" title="jcosole"></a>jcosole</h3><p>jdk自带的内存分析工具，有图形界面，可以查看jvm内存信息，线程信息，类加载信息，MBean信息</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jconsole.sh pid</span><br></pre></td></tr></tbody></table></figure><h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><p>jdk自带的分析gc工具，参数很多</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcutil pid 10000 间隔10000毫秒显示一次gc信息</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;27-内存知识&quot;&gt;&lt;a href=&quot;#27-内存知识&quot; class=&quot;headerlink&quot; title=&quot;27-内存知识&quot;&gt;&lt;/a&gt;27-内存知识&lt;/h1&gt;&lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;内存又叫主存，是CPU与其他设备沟通的桥梁，主要用来临时存放数据，配合CPU工作，协调CPU的处理速度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;硬盘数据，外设数据，玩了传输数据，要进CPU前，都要先进入内存&lt;/li&gt;
&lt;li&gt;临时存放，在断电后，内存内容就会丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内存的组成：内存地址+存储单元&lt;/p&gt;
&lt;h2 id=&quot;存储单元-数据结构&quot;&gt;&lt;a href=&quot;#存储单元-数据结构&quot; class=&quot;headerlink&quot; title=&quot;存储单元-数据结构&quot;&gt;&lt;/a&gt;存储单元-数据结构&lt;/h2&gt;&lt;h3 id=&quot;堆栈&quot;&gt;&lt;a href=&quot;#堆栈&quot; class=&quot;headerlink&quot; title=&quot;堆栈&quot;&gt;&lt;/a&gt;堆栈&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;两种不同的数据结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;堆（heap）&quot;&gt;&lt;a href=&quot;#堆（heap）&quot; class=&quot;headerlink&quot; title=&quot;堆（heap）&quot;&gt;&lt;/a&gt;堆（heap）&lt;/h3&gt;&lt;p&gt;一种经过排序的&lt;strong&gt;树型数据&lt;/strong&gt;结构&lt;/p&gt;
&lt;p&gt;存放程序的&lt;strong&gt;对象&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h4&gt;&lt;p&gt;数组、列表：数据是有顺序的，从左到右，从0开始。如果要在列表中，插入一个数据，那么在插入位置之后的数据，都需要移动，删除列表中间某个数据，在位置之后的数据，也都要移动。&lt;/p&gt;
&lt;p&gt;链表也是一种数组，它的每个数据存储的都是数据值+下一个元素的地址。&lt;/p&gt;
&lt;p&gt;如果要在链表中，插入一个数据。插入位置「前一个元素」中的「下一个元素的地址」需要指向插入的数据的地址，「待插入的元素」记录「下一个元素的地址」。&lt;/p&gt;
&lt;p&gt;查找一个数据时，需要从头开始读取数据，一个一个的比对，直到找到需要的数据才停止。这个过程会有大量的IO，所以读取数据速度并不快。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二叉树&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建立在链表的基础上的一种数据结构&lt;/p&gt;
&lt;p&gt;二叉树左边存储的是小于自身数据，右边是存储大于自身数据&lt;/p&gt;
&lt;p&gt;插入数据：因为是链表，插入速度也比较快&lt;/p&gt;
&lt;p&gt;读取数据：因为数据已经做了二分，查找链路变短，IO就减少了，读取速度也变快&lt;/p&gt;
&lt;p&gt;二叉树的不足：随着存储的数据量增大，二叉树会越来越大，那要查找某个数据的IO次数，也会非常多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B树「平衡二叉树」&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不是一个简单的平衡二叉树，是一个立体的平衡二叉树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B树和平衡二叉树稍有不同的是B树属于多叉树又名平衡多路查找树（查找路径不只两个），数据库索引技术里大量使用者B树和B+树的数据结构&lt;/p&gt;
&lt;h3 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h3&gt;&lt;p&gt;LIFO「Last In First Out」后进先出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;装入叫压入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取出叫弹出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h4&gt;&lt;p&gt;FIFO「First In First Out」先进先出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序队列&lt;/li&gt;
&lt;li&gt;循环队列&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>26-CPU知识</title>
    <link href="http://zx490336534.github.io/article/92781838.html"/>
    <id>http://zx490336534.github.io/article/92781838.html</id>
    <published>2021-05-30T03:57:00.000Z</published>
    <updated>2021-06-16T07:51:07.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="26-CPU知识"><a href="#26-CPU知识" class="headerlink" title="26-CPU知识"></a>26-CPU知识</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><h3 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h3><blockquote><p>一段程序要被执行，先编译成机器语言</p><p>进入内存</p><p>cpu控制器再从内存中获取指令、数据，放到寄存器中，</p><p>时钟控制cpu的运算器睡眠时候开始计算，计算时长多长</p><p>运算器开始计算，运算过程中，如果还需要数据，控制器再从寄存器中拿数据，拿不到就从内存中拿，如果一个时间片段计算不完，就干其他事，之后再执行，执行完了输出数据给寄存器，再传给内存</p></blockquote><p>影响CPU性能的物理因素：主频、架构、核</p><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><ul><li>Inter(x86)</li><li>AMD(x86)</li><li>IBM(PowerPC)</li><li>ARM</li></ul><h4 id="主频"><a href="#主频" class="headerlink" title="主频"></a>主频</h4><p>GHz</p><h4 id="核心数"><a href="#核心数" class="headerlink" title="核心数"></a>核心数</h4><p>单核、双核、n核</p><span id="more"></span><h3 id="CPU的四个组成部分"><a href="#CPU的四个组成部分" class="headerlink" title="CPU的四个组成部分"></a>CPU的四个组成部分</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr0brerrb3j608h09qt9002.jpg" alt="cpu组成"></p><h4 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h4><p>运算</p><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><p>把内存的指令、数据读入寄存器，控制计算机</p><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>暂存指针、数据、地址</p><p>CPU的几级缓存，就是寄存器</p><h4 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h4><p>计时</p><p>在CPU中进行计算时，都会分配一个时间片段</p><ul><li>如果某个计算，在分配的时间片段中完成，自动中断</li><li>如果某个计算，在分配的时间片段中没有完成，强制中断</li></ul><p>如果某个任务需要的计算时间比较长，那么cpu的分片就会出现不连续的时间分片</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>与CPU沟通的桥梁</p><p>存cpu的运算数据</p><p>硬盘、外存数据</p><h3 id="CPU的数据来源"><a href="#CPU的数据来源" class="headerlink" title="CPU的数据来源"></a>CPU的数据来源</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr0c4qt6tfj30jk0cjjtd.jpg" alt="数据"></p><h4 id="有内存数据"><a href="#有内存数据" class="headerlink" title="有内存数据"></a>有内存数据</h4><ul><li>内存中的数据</li><li>外设数据</li></ul><h4 id="磁盘数据"><a href="#磁盘数据" class="headerlink" title="磁盘数据"></a>磁盘数据</h4><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>CPU中的控制单元，控制指令执行的顺序，并不是按照先后顺序执行，而是按照优先级顺序</p><p>运算单元，进行计算时：</p><ul><li>如果源数据充足</li><li>如果源数据不够，则会发生等待「iowait」</li></ul><h3 id="查看CPU信息"><a href="#查看CPU信息" class="headerlink" title="查看CPU信息"></a>查看CPU信息</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lscpu</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr0dc9j2f8j30xh0mc42i.jpg" alt="lscpu"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr0dculm8nj30hg089q64.jpg" alt="字段含义"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo 内存中记录的cpu信息</span><br><span class="line">cat /proc/cpuinfo | grep "physical id"|sort |uniq |wc -l 查看物理cpu数量</span><br><span class="line">cat /proc/cpuinfo | grep "cpu cores"|uniq 查看CPU的core数「核数」</span><br><span class="line">cat /proc/cpuinfo | grep "processor"|wc -l 查看逻辑CPU数量</span><br></pre></td></tr></tbody></table></figure><h2 id="监控cpu"><a href="#监控cpu" class="headerlink" title="监控cpu"></a>监控cpu</h2><h3 id="load-average值-和CPU使用率之间的关系"><a href="#load-average值-和CPU使用率之间的关系" class="headerlink" title="load average值 和CPU使用率之间的关系"></a>load average值 和CPU使用率之间的关系</h3><p>现在的linux服务器中 load average 不等于 CPU使用率</p><p>load average是系统的整体负载体现，它包括 CPU负载+Disk负载+网络负载+外设负载</p><p>load average = cpuload + ioload</p><p>CPU的使用：用户进程使用时间us、系统内核运行时间sy、空闲时间idle、管理被抢占时间st</p><p>繁忙：us + sy + st + ni + hi + si = CPU使用率的时间（除以总时间）</p><p>空闲：idle + wa</p><ul><li>sy：上下文切换「自愿、非自愿」</li></ul><blockquote><p>自愿上下文切换：内存瓶颈</p><p>非自愿上下文切换：cpu瓶颈（抢占资源）</p></blockquote><ul><li>us\ni：用户运行计算 CPU密集计算、FGC、死循环</li><li>si：软中断 CPU竞争</li><li>wa：等待资源 I/O问题（磁盘、网络）</li><li>st：抢占资源（宿主机抢占资源）</li></ul><h3 id="CPU上下文"><a href="#CPU上下文" class="headerlink" title="CPU上下文"></a>CPU上下文</h3><p>上下文：CPU寄存器和程序计数器</p><p>程序计数器：存储CPU正在执行的指令位置和下一条指令的位置</p><p>上下文切换：先把当前的任务CPU上下文（CPU寄存器和程序计数器）保存起来，然后加载新任务的上下文到CPU的寄存器和程序计数器中，CPU再跳转到计数器上执行新任务</p><p>上下文切换可以分为：</p><ul><li>进程上下文切换</li><li>线程上下文切换</li><li>中断上下文切换</li></ul><blockquote><p>进程：资源的基本单位</p><p>线程：调度的基本单位</p></blockquote><p>进程上下文切换：特权等级，跨等级时，需要「系统调用」</p><ol><li>同进程上下文切换：进程用户态-系统调用-进程内核-系统调用-进程用户态</li><li>不同进程上下文切换：进程切换时要保存进程用户态资源（虚拟内存，栈等）</li></ol><p>线程上下文切换</p><p>线程，共享进程的资源，但是线程也有自己所有的数据，如栈、寄存器</p><ol><li><p>同进程中线程上下文切换：进程资源共享，切换线程私有资源</p></li><li><p>不通进程中线程上下文切换=切换进程</p></li></ol><h2 id="CPU性能分析"><a href="#CPU性能分析" class="headerlink" title="CPU性能分析"></a>CPU性能分析</h2><h3 id="load-高-amp-amp-CPU高"><a href="#load-高-amp-amp-CPU高" class="headerlink" title="load 高&amp;&amp; CPU高"></a>load 高&amp;&amp; CPU高</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr5d519k81j30mc05kq3t.jpg" alt="top"></p><h4 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a>情况1</h4><p>sy系统态高：排查CPU上下文切换</p><ol><li>如果「非资源上下文切换」多，说明CPU不够用，进程时间片到，被迫切换</li><li>如果「自愿上下文切换」多，说明计算用的资源不够用，可能存在I/O、内存瓶颈</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# vmstat 1</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 0  0      0 142112 170316 3332688    0    0     0     5    1    2  1  1 99  0  0</span><br><span class="line"> 0  0      0 141844 170316 3332728    0    0     0     0  877 1585  1  1 98  0  0</span><br></pre></td></tr></tbody></table></figure><p>如果<code>cs</code>比较高，说明可能存在上下文切换问题</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@zx:~# pidstat -u -w 1 </span><br><span class="line">Linux 5.4.0-54-generic (zx)     06/03/2021      _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">08:45:08 PM   UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command</span><br><span class="line">08:45:09 PM     0      6095    0.99    0.00    0.00    0.00    0.99     1  dockerd</span><br><span class="line">08:45:09 PM     0     10684    0.99    0.00    0.00    0.00    0.99     1  containerd-shim</span><br><span class="line">08:45:09 PM     0     10776    0.99    0.99    0.00    0.00    1.98     1  gunicorn</span><br><span class="line">08:45:09 PM     0    479183    0.00    1.98    0.00    0.00    1.98     1  AliYunDun</span><br><span class="line">08:45:09 PM     0    503082    0.00    0.99    0.00    0.00    0.99     0  kworker/0:1-events</span><br><span class="line"></span><br><span class="line">08:45:08 PM   UID       PID   cswch/s nvcswch/s  Command</span><br><span class="line">08:45:09 PM     0        11     40.59      0.00  rcu_sched</span><br><span class="line">08:45:09 PM     0     10708      1.98      0.99  supervisord</span><br><span class="line">08:45:09 PM     0     10775      0.99      0.00  gunicorn</span><br><span class="line">08:45:09 PM     0    479183     10.89      0.00  AliYunDun</span><br><span class="line">08:45:09 PM     0    496341      3.96      0.00  kworker/1:1-events</span><br><span class="line">08:45:09 PM     0    502548     12.87      0.00  kworker/u4:2-events_power_efficient</span><br><span class="line">08:45:09 PM     0    503082      6.93      0.00  kworker/0:1-events</span><br><span class="line">08:45:09 PM     0    503173      0.99      0.00  pidstat</span><br></pre></td></tr></tbody></table></figure><p><code>cswch/s</code> :自愿上下文</p><p><code> nvcswch/s</code>:非资源上下文</p><h4 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a>情况2</h4><p>si软中断高：CPU抢资源，资源不够用 I/O问题</p><ol><li><p>sys高 + si 高 = 内存或者网络I/O问题</p><p>解决办法：排查内存 和 I/O</p></li><li><p>sys高 + si 不高 = CPU瓶颈</p><p>加CPU</p></li></ol><h4 id="情况3"><a href="#情况3" class="headerlink" title="情况3"></a>情况3</h4><p>us用户态高：用户程序计算</p><blockquote><p>GC 资源回收</p></blockquote><p>密集型计算、内存FGC、资源等待（线程池）</p><h2 id="CPU实战"><a href="#CPU实战" class="headerlink" title="CPU实战"></a>CPU实战</h2><h3 id="stress-ng"><a href="#stress-ng" class="headerlink" title="stress-ng"></a>stress-ng</h3><blockquote><p>服务器cpu性能压测工具，模拟系统压力</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y epel-release.noarch &amp;&amp; yum -y update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y stress-ng</span></span><br></pre></td></tr></tbody></table></figure><h4 id="实操一：进程上下文"><a href="#实操一：进程上下文" class="headerlink" title="实操一：进程上下文"></a>实操一：进程上下文</h4><p>进程上下文切换「进程密集型」</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动N*10个进程，在只有N核的系统上，会产生大量的进程切换，模拟进程间竞争CPU的场景</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> (( proc_cnt = <span class="string">'nproc'</span>*10 )); stress-ng --cpu <span class="variable">$proc_cnt</span> --pthread 1 --timeout 150</span></span><br><span class="line">stress-ng: info:  [504418] dispatching hogs: 2 cpu, 1 pthread</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> top</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr5e8we173j30m80goacy.jpg" alt="启动后"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vmstat 1</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr5ea9aov7j30m80c8wg7.jpg" alt="vmstat 1"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pidstat -u -w 1</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr5ebjv8zpj30m80kdjvt.jpg" alt="pidstat -u -w 1"></p><ol><li>top：load值一直在增加 系统负载在升高</li><li>top：CPU的 <code>us</code> +<code>sy</code> 约等于 100% <code>us</code>较高 <code>sy</code>较低</li><li>vmstat：procs的 r就绪队列长度，正在运行和等待的CPU进程数很大</li><li>vmstat ：system的in「每秒中断次数」和cs「上下文切换次数」都很大</li><li>vmstat：free、buff、cache变化不大</li><li>pidstat：nvcswch/s 非自愿上下文切换在逐步升高</li></ol><p>解决办法：项目所在的服务器，</p><ul><li>减少运行中的进程</li><li>增加cpu的数量</li></ul><h4 id="实操二：线程上下文"><a href="#实操二：线程上下文" class="headerlink" title="实操二：线程上下文"></a>实操二：线程上下文</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在N核系统上，生成N个进程，每个进程1024个线程，模拟线程间竞争CPU的场景</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> stress-ng --cpu `nproc` --pthread 1024 --timeout 60</span> </span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> top</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr75b70p9vj30m80goadb.jpg" alt="top"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vmstat 1</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr75c9bx6aj30m80gowh1.jpg" alt="vmstat 1"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pidstat -u -w 1</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr75dwc06qj30we0jswl3.jpg" alt="pidstat -u -w 1 "></p><ol><li>top：load值一直在增加，而且增长的非常大</li><li>top：CPU的us + sy 约等于100% us较低、sy较高</li><li>vmstat：procs的r就绪队列长度，正在运行和等待的CPU进程数很大</li><li>vmsta：system的in「每秒中断数」和cs「上下文切换数」都很大</li><li>vmstat：free变小、buff基本不变、cache变大</li></ol><ul><li>free：内存空闲空间，内存消耗增大</li><li>buffer：buffer数磁盘虚拟出来的，用于内存从磁盘读取数据时使用</li><li>cache：cache是内存虚拟出来，用于cpu与内存速度匹配</li></ul><ol start="6"><li>pidstat：cswch/s 自愿上下文切换升高</li></ol><p>当一个程序开启了大量的线程，就会使用大量的内存资源，就会出现大量的cpu竞争。</p><p>从内存中获取数据会有大量的IO数据交换。</p><p>解决办法</p><ul><li>减少项目启动的线程数</li><li>更换内存速度更高的内存条</li><li>更换使用CPU的缓存更大的CPU（效果不一定好）</li><li>改系统的交互分区</li></ul><h4 id="实战三：IO密集型"><a href="#实战三：IO密集型" class="headerlink" title="实战三：IO密集型"></a>实战三：IO密集型</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启1个worker不停的读写临时文件，同时启动 6个workers不停的调用sync系统调用提交缓存</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> stress-ng -i 6 --hdd 1 --timeout 150</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> top</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr766julbdj30m80gon07.jpg" alt="top"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vmstat 1</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr76783ux0j30m80goq5h.jpg" alt="vmstat 1"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mpstat -P ALL 3</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr767r8273j30qc0gojul.jpg" alt="mpstat -P ALL 3"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pidstat -w 1</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7685fctgj30qc0gowi8.jpg" alt="image-20210605101558463"></p><ol><li>top：load值升高，CPU的wa值很大，freeMem变小，buff/cache值增大</li><li>vmstat ：memory的free变小，buff基本不变，cache变大，io的bo值非常大「磁盘读写」，CPU的in、cs也都很大</li><li>mpstat：%iowait变得很大，有大量的磁盘IO</li><li>pidstat：cswch/s 自愿上下文切换 变得非常大</li></ol><p>解决办法</p><p>磁盘性能导致</p><ul><li>更换读写速度更快的磁盘</li><li>加大内存</li></ul><p>网络IO导致</p><ul><li>调整网络参数或更换速度更快的网卡</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;26-CPU知识&quot;&gt;&lt;a href=&quot;#26-CPU知识&quot; class=&quot;headerlink&quot; title=&quot;26-CPU知识&quot;&gt;&lt;/a&gt;26-CPU知识&lt;/h1&gt;&lt;h2 id=&quot;CPU&quot;&gt;&lt;a href=&quot;#CPU&quot; class=&quot;headerlink&quot; title=&quot;CPU&quot;&gt;&lt;/a&gt;CPU&lt;/h2&gt;&lt;h3 id=&quot;中央处理器&quot;&gt;&lt;a href=&quot;#中央处理器&quot; class=&quot;headerlink&quot; title=&quot;中央处理器&quot;&gt;&lt;/a&gt;中央处理器&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一段程序要被执行，先编译成机器语言&lt;/p&gt;
&lt;p&gt;进入内存&lt;/p&gt;
&lt;p&gt;cpu控制器再从内存中获取指令、数据，放到寄存器中，&lt;/p&gt;
&lt;p&gt;时钟控制cpu的运算器睡眠时候开始计算，计算时长多长&lt;/p&gt;
&lt;p&gt;运算器开始计算，运算过程中，如果还需要数据，控制器再从寄存器中拿数据，拿不到就从内存中拿，如果一个时间片段计算不完，就干其他事，之后再执行，执行完了输出数据给寄存器，再传给内存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;影响CPU性能的物理因素：主频、架构、核&lt;/p&gt;
&lt;h4 id=&quot;架构&quot;&gt;&lt;a href=&quot;#架构&quot; class=&quot;headerlink&quot; title=&quot;架构&quot;&gt;&lt;/a&gt;架构&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Inter(x86)&lt;/li&gt;
&lt;li&gt;AMD(x86)&lt;/li&gt;
&lt;li&gt;IBM(PowerPC)&lt;/li&gt;
&lt;li&gt;ARM&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;主频&quot;&gt;&lt;a href=&quot;#主频&quot; class=&quot;headerlink&quot; title=&quot;主频&quot;&gt;&lt;/a&gt;主频&lt;/h4&gt;&lt;p&gt;GHz&lt;/p&gt;
&lt;h4 id=&quot;核心数&quot;&gt;&lt;a href=&quot;#核心数&quot; class=&quot;headerlink&quot; title=&quot;核心数&quot;&gt;&lt;/a&gt;核心数&lt;/h4&gt;&lt;p&gt;单核、双核、n核&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>23-分布式</title>
    <link href="http://zx490336534.github.io/article/90d9f3f5.html"/>
    <id>http://zx490336534.github.io/article/90d9f3f5.html</id>
    <published>2021-05-21T11:50:00.000Z</published>
    <updated>2021-06-16T07:51:07.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="23-分布式"><a href="#23-分布式" class="headerlink" title="23-分布式"></a>23-分布式</h1><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>集合在一起的一群机器，多台机器向外提供服务器能力</p><h2 id="性能分布式"><a href="#性能分布式" class="headerlink" title="性能分布式"></a>性能分布式</h2><p>多台机器分摊压力机，产生更大的并发，向服务器发起请求</p><h2 id="什么时候用分布式"><a href="#什么时候用分布式" class="headerlink" title="什么时候用分布式"></a>什么时候用分布式</h2><p>在单台机器无法虚拟出更高并发数时</p><span id="more"></span><h2 id="分布式的配置"><a href="#分布式的配置" class="headerlink" title="分布式的配置"></a>分布式的配置</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>安装jdk，且大版本一致</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></tbody></table></figure><ul><li>jmeter的版本一致「包括插件」</li><li>一个局域网中</li><li>开放防火墙端口或者关闭防火墙</li></ul><h3 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h3><ol><li>操作系统可以任选，但是不能混合多种操作系统，最好是统一一种</li><li>本地jmeter包上传到从机上，并修改bin文件中文件的执行权限</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R +x * #对当前文件夹下所有文件增加执行权限</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>开启并修改<code>jmeter.properties</code>中</li></ol><blockquote><p>server_port 和 server.rmi.port 修改为同一个端口</p></blockquote><ul><li><code>server_port</code> </li><li><code>server.rmi.port</code> </li><li><code>server.rmi.ssl.disable=true</code>:不开启加密认证传输</li></ul><ol start="4"><li>启动服务</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Linux</span></span><br><span class="line">./jmeter-server -Djava.rmi.server.hostname=当前机器IP</span><br><span class="line"><span class="meta">#</span><span class="bash"> Windows</span></span><br><span class="line">jmeter-server.bat -Djava.rmi.server.hostname=当前机器IP</span><br></pre></td></tr></tbody></table></figure><h3 id="master"><a href="#master" class="headerlink" title="master"></a>master</h3><ol><li>开启并修改<code>jmeter.properties</code>中</li></ol><ul><li><code>remote_hosts</code>=<code>slaveIP:端口</code>,<code>slaveIP:端口</code>,<code>slaveIP:端口</code></li><li><code>server.rmi.ssl.disable=true</code></li><li><code>mode=Standard</code>:在slave机器上显示监控结果数据</li></ul><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol><li><p>打开jmeter图形界面</p></li><li><p>在<code>运行</code>-&gt;<code>远程启动</code>中选择<code>Slave</code>地址项</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqqcutmmz3j307w0a4q4g.jpg" alt="远程启动"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>Slave上的机器执行完全按照Master机器的指令执行。包括场景、脚本。所以我们只需要修改master上的脚本就可以了，无需修改slave上的内容</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;23-分布式&quot;&gt;&lt;a href=&quot;#23-分布式&quot; class=&quot;headerlink&quot; title=&quot;23-分布式&quot;&gt;&lt;/a&gt;23-分布式&lt;/h1&gt;&lt;h2 id=&quot;集群&quot;&gt;&lt;a href=&quot;#集群&quot; class=&quot;headerlink&quot; title=&quot;集群&quot;&gt;&lt;/a&gt;集群&lt;/h2&gt;&lt;p&gt;集合在一起的一群机器，多台机器向外提供服务器能力&lt;/p&gt;
&lt;h2 id=&quot;性能分布式&quot;&gt;&lt;a href=&quot;#性能分布式&quot; class=&quot;headerlink&quot; title=&quot;性能分布式&quot;&gt;&lt;/a&gt;性能分布式&lt;/h2&gt;&lt;p&gt;多台机器分摊压力机，产生更大的并发，向服务器发起请求&lt;/p&gt;
&lt;h2 id=&quot;什么时候用分布式&quot;&gt;&lt;a href=&quot;#什么时候用分布式&quot; class=&quot;headerlink&quot; title=&quot;什么时候用分布式&quot;&gt;&lt;/a&gt;什么时候用分布式&lt;/h2&gt;&lt;p&gt;在单台机器无法虚拟出更高并发数时&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>22-性能测试持续集成</title>
    <link href="http://zx490336534.github.io/article/46316bdc.html"/>
    <id>http://zx490336534.github.io/article/46316bdc.html</id>
    <published>2021-05-18T22:44:00.000Z</published>
    <updated>2021-05-19T12:44:49.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-性能测试持续集成"><a href="#22-性能测试持续集成" class="headerlink" title="22-性能测试持续集成"></a>22-性能测试持续集成</h1><h2 id="CICD持续集成持续交付"><a href="#CICD持续集成持续交付" class="headerlink" title="CICD持续集成持续交付"></a>CICD持续集成持续交付</h2><h3 id="CICD"><a href="#CICD" class="headerlink" title="CICD"></a>CICD</h3><p>CI：持续集成</p><p>CD：持续交付</p><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>持续集成与持续交付落地的一个工具</p><h3 id="Devops"><a href="#Devops" class="headerlink" title="Devops"></a>Devops</h3><h2 id="性能测试持续集成与持续交付的解决方案"><a href="#性能测试持续集成与持续交付的解决方案" class="headerlink" title="性能测试持续集成与持续交付的解决方案"></a>性能测试持续集成与持续交付的解决方案</h2><blockquote><p>jenkins + ant + jmx</p></blockquote><h3 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h3><p>持续集成工具</p><h3 id="ant：maven"><a href="#ant：maven" class="headerlink" title="ant：maven"></a>ant：maven</h3><p>测试、编译代码</p><h3 id="jmx"><a href="#jmx" class="headerlink" title="jmx"></a>jmx</h3><p>jmeter编写的脚本</p><span id="more"></span><h2 id="CLI模式"><a href="#CLI模式" class="headerlink" title="CLI模式"></a>CLI模式</h2><p>命令行的模式运行jmeter脚本</p><p>真正做性能测试时，要用CLI模式「命令行模式」</p><p>命令行模式，能够产生出更大的请求压力</p><p>脚本：50个线程数，向服务器发起登录接口请求<code>50 * rps  = 每秒钟总共向服务器发起的请求数</code></p><ul><li>GUI： <code>50 * 35 = 1750</code>一部分资源用于图形界面</li><li>CLI：<code>50 * 45 = 2250</code>这样服务器收到的请求更多，单位时间服务器处理的事务数更大，服务器的压力就会更大</li></ul><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqncvo4vhsj312h0ms0zq.jpg" alt="运行jmeter"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">================================================================================</span><br><span class="line">Don't use GUI mode for load testing !, only for Test creation and Test debugging.</span><br><span class="line">For load testing, use CLI Mode (was NON GUI):</span><br><span class="line">   jmeter -n -t [jmx file] -l [results file] -e -o [Path to web report folder]</span><br><span class="line">&amp; increase Java Heap to meet your test requirements:</span><br><span class="line">   Modify current env variable HEAP="-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m" in the jmeter batch file</span><br><span class="line">Check : https://jmeter.apache.org/usermanual/best-practices.html</span><br><span class="line">================================================================================</span><br></pre></td></tr></tbody></table></figure><p>示例：<code>jmeter -n -t [jmx file] -l [results file] -e -o [Path to web report folder]</code></p><h3 id="jmeter"><a href="#jmeter" class="headerlink" title="jmeter"></a>jmeter</h3><p>命令名称</p><h3 id="n"><a href="#n" class="headerlink" title="-n"></a>-n</h3><p>non gui 也就是启用CLI模式</p><h3 id="t"><a href="#t" class="headerlink" title="-t"></a>-t</h3><p>测试计划，jmx脚本名称 可以带路径。默认是jmeter的bin路径</p><h3 id="l"><a href="#l" class="headerlink" title="-l"></a>-l</h3><p>输出性能结果到文件。一般为「jtl」、「csv」格式文件</p><ul><li>文件推荐为jtl格式</li><li>文件<strong>必须不存在</strong>，不能追加到文件中，如果文件已经存在，执行时候会报错</li></ul><h3 id="e"><a href="#e" class="headerlink" title="-e"></a>-e</h3><p>转换</p><h3 id="o"><a href="#o" class="headerlink" title="-o"></a>-o</h3><p>输出到文件夹。</p><p>把前面的jtl文件转换为html报告到文件夹中</p><p>文件夹<strong>必须为空</strong>，如果文件夹中有内容，执行也会报错</p><h2 id="执行CLI命令"><a href="#执行CLI命令" class="headerlink" title="执行CLI命令"></a>执行CLI命令</h2><ol><li><strong>进入jmeter的bin文件夹</strong>，打开命令终端</li></ol><ul><li>因为jmeter没有配置环境变量，所以需要使用jmeter命令的时候，必须要进入jmeter所在文件夹下</li></ul><p>例如在mac下运行：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:bin zhongxin$ ./jmeter -n -t ./text/易捷支付-性能场景-1.jmx -l ./text/load1.jtl -e -o ./text/load1</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>端口区间：4445-4455</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqndjd2co9j31g90u0wub.jpg" alt="命令行"></p><h3 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h3><p>通过CTL模式，已经生成了HTML报告</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqndjzzioij30xr0u0tik.jpg" alt="测试报告"></p><h4 id="APDEX"><a href="#APDEX" class="headerlink" title="APDEX"></a>APDEX</h4><p>用户满意度指数</p><h4 id="时间图"><a href="#时间图" class="headerlink" title="时间图"></a>时间图</h4><h4 id="吞吐量图"><a href="#吞吐量图" class="headerlink" title="吞吐量图"></a>吞吐量图</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqndm6jkvoj30wg0imdjw.jpg" alt="吞吐量"></p><p>从图中可以看出，每60秒记录一次数据。我们可以通过修改<code>reportgenerator.properties</code>来改变它的取点间隔.最小值为1000</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Defines the overall granularity <span class="keyword">for</span> over time graphs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Granularity must be higher than 1000 (1second) otherwise Throughput graphs will be incorrect</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> see Bug 60149</span></span><br><span class="line">jmeter.reportgenerator.overall_granularity=60000</span><br></pre></td></tr></tbody></table></figure><p>GUI重新生成html报告：只在5.1.1版本以上才可以</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqndpkgxamj30hs0a9gp1.jpg" alt="生成报告"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqndrch4fej30jl0ev0u8.jpg" alt="选择"></p><ul><li>Result file：选择刚才执行生成的jtl文件</li><li>user.properties file:选择<code>jmeter.properties</code></li><li>Output directory：选择一个空文件夹放置报告</li></ul><h5 id="查看重新生成的报告"><a href="#查看重新生成的报告" class="headerlink" title="查看重新生成的报告"></a>查看重新生成的报告</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqnduwqd2oj30wb0iuwk9.jpg" alt="新报告"></p><h2 id="jenkins-ant配置"><a href="#jenkins-ant配置" class="headerlink" title="jenkins+ant配置"></a>jenkins+ant配置</h2><h3 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h3><p>由于临时使用，使用Docker进行安装</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">192:jenkins-server root# pwd</span><br><span class="line">/Users/zhongxin/jenkins-server</span><br><span class="line">192:jenkins-server root# docker run -d -v ${pwd}:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts</span><br><span class="line">9f5819f72b36e3b5d8d6e0ea1f8d7ac8f8f119d4bdba1b7454928395d7e1dcd6</span><br><span class="line">192:jenkins-server root# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                                                                                      NAMES</span><br><span class="line">9f5819f72b36   jenkins/jenkins:lts   "/sbin/tini -- /usr/…"   36 seconds ago   Up 33 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp, 0.0.0.0:50000-&gt;50000/tcp, :::50000-&gt;50000/tcp   laughing_matsumoto</span><br><span class="line">192:jenkins-server root# docker exec laughing_matsumoto tail /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">b44d7ac5745c4ca68b48ea42c7f65260</span><br><span class="line">192:jenkins-server root# docker exec laughing_matsumoto mkdir /tmp/ant</span><br><span class="line">192:jenkins-server root# docker cp /Users/zhongxin/Downloads/apache-ant-1.9.14/ 9f5819f72b36:/tmp/ant</span><br><span class="line">192:jenkins-server root# docker cp /Users/zhongxin/Downloads/apache-jmeter-5.1.1 9f5819f72b36:/tmp/ant</span><br></pre></td></tr></tbody></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ol><li><p>manage jenkins -&gt; manage plugins 搜索ant并安装</p></li><li><p>manage jenkins -&gt; global tool Configuration -&gt; 找到Ant的入口 -&gt; 填入解压后的ant路径</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqnyxlx0uaj30ty0c1jrw.jpg" alt="ant路径"></p><ol start="3"><li>新建自由项目任务</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqnyy8snk5j30qs0aomxw.jpg" alt="新建项目"></p><ul><li><p>构建环境中点击「增加构建步骤」选择「Invoke Ant」</p></li><li><p>选择Ant Version为全局配置中的名称</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqnzflurmtj30pv09f3yu.jpg" alt="构建"></p><ul><li>点击「高级」 选择<code>Build File</code>文件<code>/Users/zhongxin/Downloads/性能测试VIP课用文件/02.jmeter/apache-jmeter-5.1.1/extras/build.xml</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqnziyk5t0j30q20exaas.jpg" alt="修改build位置"></p><ul><li>修改<code>build.xml</code></li></ul><blockquote><p>Ant编译、部署jmx文件，就是根据build.xml来执行的</p></blockquote><h3 id="build-xml"><a href="#build-xml" class="headerlink" title="build.xml"></a>build.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"接口性能监控"</span> <span class="attr">default</span>=<span class="string">"all"</span> <span class="attr">basedir</span>=<span class="string">"."</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">tstamp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span> <span class="attr">property</span>=<span class="string">"time"</span> <span class="attr">pattern</span>=<span class="string">"yyyyMMddhhmm"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tstamp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要改成自己本地的 Jmeter 目录--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.home"</span> <span class="attr">value</span>=<span class="string">"/tmp/ant/apache-jmeter-5.1.1/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"report.title"</span> <span class="attr">value</span>=<span class="string">"接口性能监控"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jmeter生成jtl格式的结果报告的路径--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.jtl.dir"</span> <span class="attr">value</span>=<span class="string">"${jmeter.home}/work/resultLog/jtl"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jmeter生成html格式的结果报告的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.html.dir"</span> <span class="attr">value</span>=<span class="string">"${jmeter.home}/work/resultLog/html"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成的报告的前缀--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ReportName"</span> <span class="attr">value</span>=<span class="string">"TestReport"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.jtlName"</span> <span class="attr">value</span>=<span class="string">"${jmeter.result.jtl.dir}/${ReportName}${time}.jtl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.htmlName"</span> <span class="attr">value</span>=<span class="string">"${jmeter.result.html.dir}/${ReportName}${time}.html"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">antcall</span> <span class="attr">target</span>=<span class="string">"test"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">antcall</span> <span class="attr">target</span>=<span class="string">"report"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">antcall</span> <span class="attr">target</span>=<span class="string">"mail"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">name</span>=<span class="string">"jmeter"</span> <span class="attr">classname</span>=<span class="string">"org.programmerplanet.ant.taskdefs.jmeter.JMeterTask"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jmeter</span> <span class="attr">jmeterhome</span>=<span class="string">"${jmeter.home}"</span> <span class="attr">resultlog</span>=<span class="string">"${jmeter.result.jtlName}"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 声明要运行的脚本"*.jmx"指包含此目录下的所有jmeter脚本--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testplans</span> <span class="attr">dir</span>=<span class="string">"${jmeter.home}/bin/text"</span> <span class="attr">includes</span>=<span class="string">"*.jmx"</span> /&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.save.saveservice.output_format"</span> <span class="attr">value</span>=<span class="string">"xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jmeter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">"xslt.classpath"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"${jmeter.home}/lib"</span> <span class="attr">includes</span>=<span class="string">"xalan*.jar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"${jmeter.home}/lib"</span> <span class="attr">includes</span>=<span class="string">"serializer*.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"report"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tstamp</span>&gt;</span> <span class="tag">&lt;<span class="name">format</span> <span class="attr">property</span>=<span class="string">"report.datestamp"</span> <span class="attr">pattern</span>=<span class="string">"yyyy/MM/dd HH:mm"</span> /&gt;</span><span class="tag">&lt;/<span class="name">tstamp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xslt</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">classpathref</span>=<span class="string">"xslt.classpath"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">force</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">in</span>=<span class="string">"${jmeter.result.jtlName}"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">out</span>=<span class="string">"${jmeter.result.htmlName}"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"${jmeter.home}/extras/jmeter-results-detail-report_21.xsl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"showData"</span> <span class="attr">expression</span>=<span class="string">"${show-data}"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"dateReport"</span> <span class="attr">expression</span>=<span class="string">"${report.datestamp}"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"titleReport"</span> <span class="attr">expression</span>=<span class="string">"${report.title}:${report.datestamp}"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">xslt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 因为上面生成报告的时候，不会将相关的图片也一起拷贝至目标目录，所以，需要手动拷贝 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">copy</span> <span class="attr">todir</span>=<span class="string">"${jmeter.result.html.dir}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"${jmeter.home}/extras"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"collapse.png"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"expand.png"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">copy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mail_from"</span> <span class="attr">value</span>=<span class="string">"发送邮件的地址"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"邮箱密码"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mail_to:发送列表,多个之间逗号间隔 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mail_to"</span> <span class="attr">value</span>=<span class="string">"接收邮件地址"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mailport"</span> <span class="attr">value</span>=<span class="string">"25"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--邮箱需要开通smtp服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mailhost"</span> <span class="attr">value</span>=<span class="string">"smtp邮件服务器地址"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"mail"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">loadfile</span> <span class="attr">property</span>=<span class="string">"report"</span> <span class="attr">srcFile</span>=<span class="string">"${jmeter.result.htmlName}"</span> <span class="attr">encoding</span>=<span class="string">"${encoding}"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mail</span> <span class="attr">from</span>=<span class="string">"${mail_from}"</span> <span class="attr">tolist</span>=<span class="string">"${mail_to}"</span> <span class="attr">mailport</span>=<span class="string">"${mailport}"</span> <span class="attr">mailhost</span>=<span class="string">"${mailhost}"</span> <span class="attr">user</span>=<span class="string">"${mail_from}"</span> <span class="attr">password</span>=<span class="string">"${password}"</span> <span class="attr">subject</span>=<span class="string">"TestReport-${ant.project.name}"</span> <span class="attr">messagemimetype</span>=<span class="string">"text/html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">        本轮构建的结果如下：</span><br><span class="line">        ${report}           </span><br><span class="line">        <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mail</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">file</span>=<span class="string">"${jmeter.result.htmlName}"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>注意需要实现新建下面两个文件夹</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jmeter生成jtl格式的结果报告的路径--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.jtl.dir"</span> <span class="attr">value</span>=<span class="string">"${jmeter.home}/work/resultLog/jtl"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jmeter生成html格式的结果报告的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.html.dir"</span> <span class="attr">value</span>=<span class="string">"${jmeter.home}/work/resultLog/html"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>jmeter.properties</code>中添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter.save.saveservice.output_format=xml</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqo07k1mpcj31ch0q3124.jpg" alt="运行输出"></p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BUILD FAILED</span><br><span class="line">/tmp/ant/apache-jmeter-5.1.1/extras/build.xml:20: The following error occurred while executing this line:</span><br><span class="line">/tmp/ant/apache-jmeter-5.1.1/extras/build.xml:26: taskdef class org.programmerplanet.ant.taskdefs.jmeter.JMeterTask cannot be found</span><br><span class="line"> using the classloader AntClassLoader[]</span><br></pre></td></tr></tbody></table></figure><p>把文件<code>apache-jmeter-5.1.1/extras/ant-jmeter-1.1.1.jar</code>复制到<code>apache-ant-1.9.14/lib</code>目录下</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;22-性能测试持续集成&quot;&gt;&lt;a href=&quot;#22-性能测试持续集成&quot; class=&quot;headerlink&quot; title=&quot;22-性能测试持续集成&quot;&gt;&lt;/a&gt;22-性能测试持续集成&lt;/h1&gt;&lt;h2 id=&quot;CICD持续集成持续交付&quot;&gt;&lt;a href=&quot;#CICD持续集成持续交付&quot; class=&quot;headerlink&quot; title=&quot;CICD持续集成持续交付&quot;&gt;&lt;/a&gt;CICD持续集成持续交付&lt;/h2&gt;&lt;h3 id=&quot;CICD&quot;&gt;&lt;a href=&quot;#CICD&quot; class=&quot;headerlink&quot; title=&quot;CICD&quot;&gt;&lt;/a&gt;CICD&lt;/h3&gt;&lt;p&gt;CI：持续集成&lt;/p&gt;
&lt;p&gt;CD：持续交付&lt;/p&gt;
&lt;h3 id=&quot;Jenkins&quot;&gt;&lt;a href=&quot;#Jenkins&quot; class=&quot;headerlink&quot; title=&quot;Jenkins&quot;&gt;&lt;/a&gt;Jenkins&lt;/h3&gt;&lt;p&gt;持续集成与持续交付落地的一个工具&lt;/p&gt;
&lt;h3 id=&quot;Devops&quot;&gt;&lt;a href=&quot;#Devops&quot; class=&quot;headerlink&quot; title=&quot;Devops&quot;&gt;&lt;/a&gt;Devops&lt;/h3&gt;&lt;h2 id=&quot;性能测试持续集成与持续交付的解决方案&quot;&gt;&lt;a href=&quot;#性能测试持续集成与持续交付的解决方案&quot; class=&quot;headerlink&quot; title=&quot;性能测试持续集成与持续交付的解决方案&quot;&gt;&lt;/a&gt;性能测试持续集成与持续交付的解决方案&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;jenkins + ant + jmx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;jenkins&quot;&gt;&lt;a href=&quot;#jenkins&quot; class=&quot;headerlink&quot; title=&quot;jenkins&quot;&gt;&lt;/a&gt;jenkins&lt;/h3&gt;&lt;p&gt;持续集成工具&lt;/p&gt;
&lt;h3 id=&quot;ant：maven&quot;&gt;&lt;a href=&quot;#ant：maven&quot; class=&quot;headerlink&quot; title=&quot;ant：maven&quot;&gt;&lt;/a&gt;ant：maven&lt;/h3&gt;&lt;p&gt;测试、编译代码&lt;/p&gt;
&lt;h3 id=&quot;jmx&quot;&gt;&lt;a href=&quot;#jmx&quot; class=&quot;headerlink&quot; title=&quot;jmx&quot;&gt;&lt;/a&gt;jmx&lt;/h3&gt;&lt;p&gt;jmeter编写的脚本&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>21-zabbix</title>
    <link href="http://zx490336534.github.io/article/3fb58e39.html"/>
    <id>http://zx490336534.github.io/article/3fb58e39.html</id>
    <published>2021-05-16T09:39:00.000Z</published>
    <updated>2021-05-16T12:41:32.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="21-zabbix"><a href="#21-zabbix" class="headerlink" title="21-zabbix"></a>21-zabbix</h1><blockquote><p>企业级的、高度成熟的、分布式开源监控解决方案。</p><p>它能监控众多网络参数和服务器的健康度、完整性，把数据存储在数据库中，然后再通过web页面，用不同的方式，展示各种监控数据，再通过告警机制，设置告警阈值，发送收取告警信息</p></blockquote><h2 id="zabbix的组成"><a href="#zabbix的组成" class="headerlink" title="zabbix的组成"></a>zabbix的组成</h2><ul><li>zabbix-server：数据库 + 前端front。不能安装在被测服务器上</li><li>zabbix-agent：数据收集器，需要安装在被测的服务器上</li><li>proxy：网络代理</li><li>java gateway：网络路由</li><li>sender：渲染</li><li>get</li><li>js</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><a href="https://www.zabbix.com/cn/download?zabbix=5.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql&amp;ws=nginx">https://www.zabbix.com/cn/download?zabbix=5.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql&amp;ws=nginx</a></p></blockquote><span id="more"></span><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo ~]# yum install gcc wget vim make -y</span><br></pre></td></tr></tbody></table></figure><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo mysql_rpm]# wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">[root@dubbo mysql_rpm]# yum install mysql57-community-release-el7-10.noarch.rpm -y</span><br></pre></td></tr></tbody></table></figure><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></tbody></table></figure><h3 id="修改数据库配置文件-etc-my-cnf"><a href="#修改数据库配置文件-etc-my-cnf" class="headerlink" title="修改数据库配置文件/etc/my.cnf"></a>修改数据库配置文件<code>/etc/my.cnf</code></h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加validate_password_policy配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 0:弱密码 1:中密码 2:强密码</span></span><br><span class="line">validate_password_policy=0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭密码策略</span></span><br><span class="line">validate_password = off</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置字符编码</span></span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect='SET NAMES utf8'</span><br></pre></td></tr></tbody></table></figure><h3 id="查找原始密码"><a href="#查找原始密码" class="headerlink" title="查找原始密码"></a>查找原始密码</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo mysql_rpm]# grep "password" /var/log/mysqld.log</span><br></pre></td></tr></tbody></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p><strong>查看host的方法</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkgbiujblj30h508uq3k.jpg" alt="查看host"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo mysql_rpm]# mysql -u root -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入原始密码</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'123456'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> alter user <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'123456'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></tbody></table></figure><h3 id="安装fping-可跳过"><a href="#安装fping-可跳过" class="headerlink" title="安装fping(可跳过)"></a>安装fping(可跳过)</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo zabbix]# wget http://fping.org/dist/fping-5.0.tar.gz</span><br><span class="line">--2021-05-16 13:11:42--  http://fping.org/dist/fping-5.0.tar.gz</span><br><span class="line">正在解析主机 fping.org (fping.org)... 104.26.15.126, 172.67.75.110, 104.26.14.126, ...</span><br><span class="line">正在连接 fping.org (fping.org)|104.26.15.126|:80... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class="line">长度：185281 (181K) [application/x-gzip]</span><br><span class="line">正在保存至: “fping-5.0.tar.gz”</span><br><span class="line"></span><br><span class="line"><span class="meta">100%</span><span class="bash">[===========================================================================================&gt;] 185,281      287KB/s 用时 0.6s</span>   </span><br><span class="line"></span><br><span class="line">2021-05-16 13:11:44 (287 KB/s) - 已保存 “fping-5.0.tar.gz” [185281/185281])</span><br><span class="line"></span><br><span class="line">[root@dubbo zabbix]# ls</span><br><span class="line">fping-5.0.tar.gz</span><br><span class="line">[root@dubbo zabbix]# tar -xzvf fping-5.0.tar.gz</span><br><span class="line">...</span><br><span class="line">[root@dubbo zabbix]# cd fping-5.0</span><br><span class="line">[root@dubbo fping-5.0]# ./configure --prefix=/usr/local/fping &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><p><strong>配置环境变量</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo fping-5.0]# sed -i '1i\export PATH=$PATH:/usr/local/fping/sbin' /etc/profile &amp;&amp; source /etc/profile</span><br><span class="line">[root@dubbo fping-5.0]# echo "export PATH=$PATH:/usr/local/fping/sbin" &gt;&gt; /etc/bashrc</span><br></pre></td></tr></tbody></table></figure><h3 id="安装zabbix-server-zabbix-agent"><a href="#安装zabbix-server-zabbix-agent" class="headerlink" title="安装zabbix-server zabbix-agent"></a>安装zabbix-server zabbix-agent</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo zabbix]# wget http://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class="line">[root@dubbo zabbix]# yum install zabbix-release-5.0-1.el7.noarch.rpm -y</span><br><span class="line">[root@dubbo zabbix]# wget http://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-server-mysql-5.0.6-1.el7.x86_64.rpm</span><br><span class="line">[root@dubbo zabbix]# yum install zabbix-server-mysql-5.0.6-1.el7.x86_64.rpm -y</span><br><span class="line">[root@dubbo zabbix]# wget http://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-agent-5.0.6-1.el7.x86_64.rpm</span><br><span class="line">[root@dubbo zabbix]# yum install zabbix-agent-5.0.6-1.el7.x86_64.rpm -y</span><br><span class="line">[root@dubbo zabbix]# yum install centos-release-scl -y</span><br></pre></td></tr></tbody></table></figure><h3 id="修改配置文件zabbix-repo"><a href="#修改配置文件zabbix-repo" class="headerlink" title="修改配置文件zabbix.repo"></a>修改配置文件zabbix.repo</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/zabbix.repo </span><br><span class="line">[zabbix-frontend] </span><br><span class="line">... </span><br><span class="line">enabled=1 </span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h3 id="安装zabbix-frontend"><a href="#安装zabbix-frontend" class="headerlink" title="安装zabbix frontend"></a>安装zabbix frontend</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zabbix-web-mysql-scl zabbix-nginx-conf-scl -y</span><br></pre></td></tr></tbody></table></figure><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span> </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create user zabbix@localhost identified by <span class="string">'zabbix123456'</span>;</span> </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all privileges on zabbix.* to zabbix@localhost;</span> </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> quit;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql-5.0.6/create.sql.gz |mysql -uzabbix -p zabbix 123456</span><br></pre></td></tr></tbody></table></figure><h3 id="配置zabbix-server"><a href="#配置zabbix-server" class="headerlink" title="配置zabbix-server"></a>配置zabbix-server</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_server.conf </span><br><span class="line">DBPassword=zabbix123456</span><br></pre></td></tr></tbody></table></figure><h3 id="配置前端php"><a href="#配置前端php" class="headerlink" title="配置前端php"></a>配置前端php</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf </span><br><span class="line">listen 80; </span><br><span class="line">server_name 机器的ip地址; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 去掉这两个前面的注释</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置启用nginx"><a href="#配置启用nginx" class="headerlink" title="配置启用nginx"></a>配置启用nginx</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf </span><br><span class="line"></span><br><span class="line">listen.acl_users = apache,nginx </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置时区，去掉前面的注释</span> </span><br><span class="line">php_value[date.timezone] = Asia/Shanghai</span><br></pre></td></tr></tbody></table></figure><h3 id="启动所有服务"><a href="#启动所有服务" class="headerlink" title="启动所有服务"></a>启动所有服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm </span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置开机启动</span> </span><br><span class="line">systemctl enable zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span><br></pre></td></tr></tbody></table></figure><h2 id="直接使用已安装项目"><a href="#直接使用已安装项目" class="headerlink" title="直接使用已安装项目"></a>直接使用已安装项目</h2><blockquote><p><a href="https://www.zabbix.com/cn/download_appliance">https://www.zabbix.com/cn/download_appliance</a></p></blockquote><p>官网上有一些已经安装好的虚拟机项目，可以直接导入使用</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkj4t3f72j30z50ncgpk.jpg" alt="image-20210516201434302"></p><p>注意：需要修改数据库密码</p><h3 id="系统账号密码"><a href="#系统账号密码" class="headerlink" title="系统账号密码"></a>系统账号密码</h3><p>root/zabbix</p><h3 id="显示IP"><a href="#显示IP" class="headerlink" title="显示IP"></a>显示IP</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></tbody></table></figure><h2 id="前端登录"><a href="#前端登录" class="headerlink" title="前端登录"></a>前端登录</h2><ul><li>账号：Admin</li><li>密码：zabbix</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkjtuek4pj31g90u0n6i.jpg" alt="首页"></p><h2 id="grafana-zabbix集成"><a href="#grafana-zabbix集成" class="headerlink" title="grafana + zabbix集成"></a>grafana + zabbix集成</h2><p>需要在grafana机器上安装插件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grafana-cli plugins install alexanderzobnin-zabbix-app</span><br></pre></td></tr></tbody></table></figure><p>建议使用的模版ID为：「8677」、「6098」</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;21-zabbix&quot;&gt;&lt;a href=&quot;#21-zabbix&quot; class=&quot;headerlink&quot; title=&quot;21-zabbix&quot;&gt;&lt;/a&gt;21-zabbix&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;企业级的、高度成熟的、分布式开源监控解决方案。&lt;/p&gt;
&lt;p&gt;它能监控众多网络参数和服务器的健康度、完整性，把数据存储在数据库中，然后再通过web页面，用不同的方式，展示各种监控数据，再通过告警机制，设置告警阈值，发送收取告警信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;zabbix的组成&quot;&gt;&lt;a href=&quot;#zabbix的组成&quot; class=&quot;headerlink&quot; title=&quot;zabbix的组成&quot;&gt;&lt;/a&gt;zabbix的组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;zabbix-server：数据库 + 前端front。不能安装在被测服务器上&lt;/li&gt;
&lt;li&gt;zabbix-agent：数据收集器，需要安装在被测的服务器上&lt;/li&gt;
&lt;li&gt;proxy：网络代理&lt;/li&gt;
&lt;li&gt;java gateway：网络路由&lt;/li&gt;
&lt;li&gt;sender：渲染&lt;/li&gt;
&lt;li&gt;get&lt;/li&gt;
&lt;li&gt;js&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zabbix.com/cn/download?zabbix=5.0&amp;amp;os_distribution=centos&amp;amp;os_version=7&amp;amp;db=mysql&amp;amp;ws=nginx&quot;&gt;https://www.zabbix.com/cn/download?zabbix=5.0&amp;amp;os_distribution=centos&amp;amp;os_version=7&amp;amp;db=mysql&amp;amp;ws=nginx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>20-grafana+influxdb</title>
    <link href="http://zx490336534.github.io/article/bc9c5188.html"/>
    <id>http://zx490336534.github.io/article/bc9c5188.html</id>
    <published>2021-05-16T00:30:00.000Z</published>
    <updated>2021-05-16T09:22:38.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20-grafana-influxdb"><a href="#20-grafana-influxdb" class="headerlink" title="20-grafana+influxdb"></a>20-grafana+influxdb</h1><blockquote><p>一款用go编写的开源应用，用于大规模指标数据的可视化展示，是网络架构和应用分析中最流行的时序数据展示工具</p></blockquote><p><code>grafana</code>:展示时序数据库数据的工具</p><p><code>influxdb</code>:时序数据库，存数据</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>grafana+influxdb不能安装在被测服务器上</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo opt]# yum install grafana-7.4.3-1.x86_64.rpm -y</span><br></pre></td></tr></tbody></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo opt]# systemctl restart grafana-server</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.9.3:3000/login</span><br><span class="line">账号密码都为admin</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjzlusawqj30xr0u0qf6.jpg" alt="截屏2021-05-16 上午8.58.55"></p><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>下载地址<code>https://dl.influxdata.com/influxdb/releases/influxdb-1.7.8.x86_64.rpm</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo opt]# yum install influxdb-2.0.2.x86_64.rpm -y</span><br></pre></td></tr></tbody></table></figure><h2 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo opt]# influxd</span><br></pre></td></tr></tbody></table></figure><h2 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo ~]# influx</span><br></pre></td></tr></tbody></table></figure><h3 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></tbody></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database jmeter;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop databases jmeter;</span><br></pre></td></tr></tbody></table></figure><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use jmeter;</span><br></pre></td></tr></tbody></table></figure><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></tbody></table></figure><h3 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo ~]# influx</span><br><span class="line">Connected to http://localhost:8086 version 1.7.8</span><br><span class="line">InfluxDB shell version: 1.7.8</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> create database jmeter;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line">jmeter</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use jmeter;</span></span><br><span class="line">Using database jmeter</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br></pre></td></tr></tbody></table></figure><h2 id="数据存入"><a href="#数据存入" class="headerlink" title="数据存入"></a>数据存入</h2><p>添加一个「后端监听器」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjz04qhlwj30xr0u0dos.jpg" alt="后端监听器"></p><p>修改IP地址</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxdbUrl:http://192.168.9.3:8086/write?db=jmeter</span><br></pre></td></tr></tbody></table></figure><h2 id="grafana中添加数据"><a href="#grafana中添加数据" class="headerlink" title="grafana中添加数据"></a>grafana中添加数据</h2><h3 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqk063muq2j313p0ex796.jpg" alt="添加数据源"></p><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqk06963xhj30xr0u0dov.jpg" alt="选择数据库"></p><h3 id="填写数据库信息"><a href="#填写数据库信息" class="headerlink" title="填写数据库信息"></a>填写数据库信息</h3><h3 id="导入模版"><a href="#导入模版" class="headerlink" title="导入模版"></a><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqk07abuoij30xr0u07d6.jpg" alt="填写数据库信息">导入模版</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdo7dltuj306m0b9jrn.jpg" alt="导入"></p><p>输入模版编码为<code>5496</code>后点击「Load」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdooyzugj30xr0u0q9h.jpg" alt="模版编码"></p><p>修改「Measurement name」与Jmeter中设置的一致</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdq4z5muj30r705z0t7.jpg" alt="jmeter的设置"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdpknfedj30xr0u0wmi.jpg" alt="修改Measurement name"></p><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>运行jmeter后，查看数据库</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdvbmctnj30xv0u0481.jpg" alt="数据展示"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdy8bu0mj31g90u0gut.jpg" alt="查看数据"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;20-grafana-influxdb&quot;&gt;&lt;a href=&quot;#20-grafana-influxdb&quot; class=&quot;headerlink&quot; title=&quot;20-grafana+influxdb&quot;&gt;&lt;/a&gt;20-grafana+influxdb&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一款用go编写的开源应用，用于大规模指标数据的可视化展示，是网络架构和应用分析中最流行的时序数据展示工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;grafana&lt;/code&gt;:展示时序数据库数据的工具&lt;/p&gt;
&lt;p&gt;&lt;code&gt;influxdb&lt;/code&gt;:时序数据库，存数据&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;grafana+influxdb不能安装在被测服务器上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@dubbo opt]# yum install grafana-7.4.3-1.x86_64.rpm -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@dubbo opt]# systemctl restart grafana-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>19-nmon</title>
    <link href="http://zx490336534.github.io/article/5ac52f3c.html"/>
    <id>http://zx490336534.github.io/article/5ac52f3c.html</id>
    <published>2021-05-15T23:34:00.000Z</published>
    <updated>2021-05-16T00:32:16.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-nmon"><a href="#19-nmon" class="headerlink" title="19-nmon"></a>19-nmon</h1><h2 id="nmon"><a href="#nmon" class="headerlink" title="nmon"></a>nmon</h2><blockquote><p><a href="http://nmon.sourceforge.net/">http://nmon.sourceforge.net/</a></p><p>C语言编写本身资源消耗非常小</p></blockquote><p>部署到被测试服务器上，可以监控不同的Linux系统（不同的linux发行版本，nmon命令是不同的）</p><h3 id="查看Linux的发行版本"><a href="#查看Linux的发行版本" class="headerlink" title="查看Linux的发行版本"></a>查看Linux的发行版本</h3><blockquote><p><code>cd /etc</code>查看路径下有没有「release」关键字的文件</p></blockquote><h4 id="查看redhat家族的发行版本"><a href="#查看redhat家族的发行版本" class="headerlink" title="查看redhat家族的发行版本"></a>查看redhat家族的发行版本</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h4 id="查看Ubuntu的发行版本"><a href="#查看Ubuntu的发行版本" class="headerlink" title="查看Ubuntu的发行版本"></a>查看Ubuntu的发行版本</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@zx:/# cat /etc/os-release </span><br><span class="line">NAME="Ubuntu"</span><br><span class="line">VERSION="20.04.1 LTS (Focal Fossa)"</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME="Ubuntu 20.04.1 LTS"</span><br><span class="line">VERSION_ID="20.04"</span><br><span class="line">HOME_URL="https://www.ubuntu.com/"</span><br><span class="line">SUPPORT_URL="https://help.ubuntu.com/"</span><br><span class="line">BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"</span><br><span class="line">PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"</span><br><span class="line">VERSION_CODENAME=focal</span><br><span class="line">UBUNTU_CODENAME=focal</span><br></pre></td></tr></tbody></table></figure><h3 id="确定下载的文件"><a href="#确定下载的文件" class="headerlink" title="确定下载的文件"></a>确定下载的文件</h3><p>进入<code>http://nmon.sourceforge.net/pmwiki.php?n=Site.Download</code>找到有符合当前Linux版本信息的文件下载</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 nmon16m_helpsystems]# ls</span><br><span class="line">nmon_power_64_centos6      nmon_power_64_linux   nmon_x86_64_mint19      nmon_x86_64_rhel8</span><br><span class="line">nmon_power_64_centos7      nmon_power_64_rhel6   nmon_x86_64_oel5        nmon_x86_64_sles10</span><br><span class="line">nmon_power_64le_centos7    nmon_power_64_rhel7   nmon_x86_64_oel6        nmon_x86_64_sles11</span><br><span class="line">nmon_power_64le_centos8    nmon_power_64_sles11  nmon_x86_64_oel7        nmon_x86_64_sles12</span><br><span class="line">nmon_power_64le_linux      nmon_x86_64_centos5   nmon_x86_64_oel8        nmon_x86_64_sles15</span><br><span class="line">nmon_power_64le_rhel7      nmon_x86_64_centos6   nmon_x86_64_opensuse10  nmon_x86_64_ubuntu14</span><br><span class="line">nmon_power_64le_rhel7_gpu  nmon_x86_64_centos7   nmon_x86_64_opensuse11  nmon_x86_64_ubuntu16</span><br><span class="line">nmon_power_64le_rhel8      nmon_x86_64_centos8   nmon_x86_64_opensuse12  nmon_x86_64_ubuntu18</span><br><span class="line">nmon_power_64le_sles12     nmon_x86_64_debian08  nmon_x86_64_opensuse15  nmon_x86_64_ubuntu19</span><br><span class="line">nmon_power_64le_ubuntu14   nmon_x86_64_debian09  nmon_x86_64_rhel5</span><br><span class="line">nmon_power_64le_ubuntu16   nmon_x86_64_debian10  nmon_x86_64_rhel6</span><br><span class="line">nmon_power_64le_ubuntu18   nmon_x86_64_mint18    nmon_x86_64_rhel7</span><br></pre></td></tr></tbody></table></figure><h3 id="nmon三种运行模式"><a href="#nmon三种运行模式" class="headerlink" title="nmon三种运行模式"></a>nmon三种运行模式</h3><h4 id="实时屏幕交互"><a href="#实时屏幕交互" class="headerlink" title="实时屏幕交互"></a>实时屏幕交互</h4><p>优点：可以通过屏幕实时看到服务器资源使用情况</p><p>缺点：只能看到，无法保存数据</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 nmon16m_helpsystems]# ./nmon_x86_64_centos7</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxipq9buj312o0pc0y2.jpg" alt="实时屏幕交互"></p><p><strong>常用命令</strong>：<code>cmdrtn</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxmfpresj30u01f6av9.jpg" alt="截屏2021-05-16 上午7.50.17"></p><ul><li>c:cpu信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxof6ct0j30jl03t0sw.jpg" alt="CPU"></p><p>CPU下面的数字表示有几核</p><p><code>User%</code>:用户态cpu的使用率</p><p><code>Sys%</code>:系统态cpu的使用率</p><p><code>Wait%</code>:等待的cpu占用率</p><p><code>Idle%</code>:空闲cpu的占用率</p><ul><li>m:内存</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxs2rjbgj30kc05qdgp.jpg" alt="内存"></p><ul><li>d:磁盘读写</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxsismz0j30kb04idge.jpg" alt="磁盘读写"></p><ul><li>r:资源</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxv1jqjaj30lc0b2myu.jpg" alt="资源"></p><ul><li>t:top命令</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxuqvwkqj30s40ceq55.jpg" alt="top"></p><ul><li>n:网络</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxuhy55ej30k503ddg8.jpg" alt="网络"></p><h4 id="数据收集模式"><a href="#数据收集模式" class="headerlink" title="数据收集模式"></a>数据收集模式</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f            spreadsheet output format [note: default -s300 -c288]</span><br><span class="line">                         output file is &lt;hostname&gt;_YYYYMMDD_HHMM.nmon</span><br><span class="line">-s &lt;seconds&gt;  Time between snap shots - with "-c count" decides duration of the data capture</span><br><span class="line">-c &lt;number&gt;   The number of snapshots before nmon stops</span><br></pre></td></tr></tbody></table></figure><p><code>-f</code>=<code>-s 300 -c 288</code>每隔300秒收集一次数据，收集288次。收集完成后自动结束。总共会收集300*288=24小时</p><p><code>-s num</code>:间隔多长时间收集一次数据</p><p><code>-c num</code>:总共收集的次数</p><p>运行后会生成<code>vircent7_210327_1457.nmon</code></p><p>该文件打开后难以查看结果，需要导出后使用Excel宏解读</p><blockquote><p>解析的<code>nmon analyser v66.xlsm</code>文件，需要使用Office的Excel打开</p><p>打开后点击分析按钮，就可以查看到图表展示</p><p>链接: <a href="https://pan.baidu.com/s/183jY_ktWO3gxouIFb3KYfw">https://pan.baidu.com/s/183jY_ktWO3gxouIFb3KYfw</a>  密码: ri7h</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nmon_x86_64_centos7 -f #收集24小时</span><br><span class="line">./nmon_x86_64_centos7 -f -s2 -c200 #按照设定的间隔和次数收集</span><br><span class="line">./nmon_x86_64_centos7 -f -s2 -c200 -m /tmp/mon #指定输出到一个存在的文件夹路径下</span><br></pre></td></tr></tbody></table></figure><h4 id="定时收集模式"><a href="#定时收集模式" class="headerlink" title="定时收集模式"></a>定时收集模式</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Capacity Planning mode - use cron to run each day</span><br><span class="line">        -x            Sensible spreadsheet output for one day</span><br><span class="line">                      Every 15 mins for 1 day ( i.e. -ft -s 900 -c 96)</span><br><span class="line">        -X            Sensible spreadsheet output for busy hour</span><br><span class="line">                      Every 30 secs for 1 hour ( i.e. -ft -s 30 -c 120)</span><br><span class="line">        -z            Like -x but the output saved in /var/perf/tmp assuming root user</span><br></pre></td></tr></tbody></table></figure><p>-X:收集一小时</p><p>-x:收集一天</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;19-nmon&quot;&gt;&lt;a href=&quot;#19-nmon&quot; class=&quot;headerlink&quot; title=&quot;19-nmon&quot;&gt;&lt;/a&gt;19-nmon&lt;/h1&gt;&lt;h2 id=&quot;nmon&quot;&gt;&lt;a href=&quot;#nmon&quot; class=&quot;headerlink&quot; title=&quot;nmon&quot;&gt;&lt;/a&gt;nmon&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://nmon.sourceforge.net/&quot;&gt;http://nmon.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C语言编写本身资源消耗非常小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;部署到被测试服务器上，可以监控不同的Linux系统（不同的linux发行版本，nmon命令是不同的）&lt;/p&gt;
&lt;h3 id=&quot;查看Linux的发行版本&quot;&gt;&lt;a href=&quot;#查看Linux的发行版本&quot; class=&quot;headerlink&quot; title=&quot;查看Linux的发行版本&quot;&gt;&lt;/a&gt;查看Linux的发行版本&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;cd /etc&lt;/code&gt;查看路径下有没有「release」关键字的文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;查看redhat家族的发行版本&quot;&gt;&lt;a href=&quot;#查看redhat家族的发行版本&quot; class=&quot;headerlink&quot; title=&quot;查看redhat家族的发行版本&quot;&gt;&lt;/a&gt;查看redhat家族的发行版本&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@vircent7 ~]# cat /etc/redhat-release &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CentOS Linux release 7.8.2003 (Core)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>18-读取数据库数据进行性能测试</title>
    <link href="http://zx490336534.github.io/article/d51793d9.html"/>
    <id>http://zx490336534.github.io/article/d51793d9.html</id>
    <published>2021-05-15T12:32:00.000Z</published>
    <updated>2021-05-15T14:05:05.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-读取数据库数据进行性能测试"><a href="#18-读取数据库数据进行性能测试" class="headerlink" title="18-读取数据库数据进行性能测试"></a>18-读取数据库数据进行性能测试</h1><h2 id="用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？"><a href="#用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？" class="headerlink" title="用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？"></a>用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？</h2><h3 id="系统是否允许一个账号被同时登录多次？"><a href="#系统是否允许一个账号被同时登录多次？" class="headerlink" title="系统是否允许一个账号被同时登录多次？"></a>系统是否允许一个账号被同时登录多次？</h3><p>如果有互踢功能，那是不能使用同一个账号</p><h3 id="有没有缓存机制（数据库缓存）"><a href="#有没有缓存机制（数据库缓存）" class="headerlink" title="有没有缓存机制（数据库缓存）"></a>有没有缓存机制（数据库缓存）</h3><p>如果有，不能使用同一个账号</p><h3 id="造多个账号进行性能测试"><a href="#造多个账号进行性能测试" class="headerlink" title="造多个账号进行性能测试"></a>造多个账号进行性能测试</h3><ol><li>尽可能的在运行过程中，造足够量的账号</li><li>如果只有固定的一些账号可用时，做这种性能测试时，要记得带上「退出登录」接口</li><li>如果只有固定的一些账号可用时，不关心登录接口的信息，可用不用退出</li></ol><span id="more"></span><h2 id="直接使用数据库中数据进行性能测试"><a href="#直接使用数据库中数据进行性能测试" class="headerlink" title="直接使用数据库中数据进行性能测试"></a>直接使用数据库中数据进行性能测试</h2><h3 id="数据连接"><a href="#数据连接" class="headerlink" title="数据连接"></a>数据连接</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjeqti7v8j30xr0u0wnm.jpg" alt="数据连接"></p><h3 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,password from zx limit 10</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjerbyy59j30xr0u0aio.jpg" alt="数据库查询"></p><h3 id="循环设置属性"><a href="#循环设置属性" class="headerlink" title="循环设置属性"></a>循环设置属性</h3><h4 id="添加计数器"><a href="#添加计数器" class="headerlink" title="添加计数器"></a>添加计数器</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjeru1kqwj308408e3yv.jpg" alt="计数器"></p><h4 id="添加调试取样器设置属性"><a href="#添加调试取样器设置属性" class="headerlink" title="添加调试取样器设置属性"></a>添加调试取样器设置属性</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${__setProperty(per_user_${d},${__V(user_${d})},)};${__setProperty(per_pwd_${d},${__V(password_${d})},)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjescwe3rj30lc05f0t1.jpg" alt="调试取样器"></p><h3 id="查看属性设置情况"><a href="#查看属性设置情况" class="headerlink" title="查看属性设置情况"></a>查看属性设置情况</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjesuny8wj30xr0u0n8s.jpg" alt="截屏2021-05-15 下午8.59.06"></p><h3 id="使用数据库中读取到的内容"><a href="#使用数据库中读取到的内容" class="headerlink" title="使用数据库中读取到的内容"></a>使用数据库中读取到的内容</h3><h4 id="设置线程数"><a href="#设置线程数" class="headerlink" title="设置线程数"></a>设置线程数</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjewjnuorj309j0bldgj.jpg" alt="线程数"></p><h4 id="添加计数器-1"><a href="#添加计数器-1" class="headerlink" title="添加计数器"></a>添加计数器</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjevxo2ofj309f08udg7.jpg" alt="计数器"></p><h4 id="发起http请求"><a href="#发起http请求" class="headerlink" title="发起http请求"></a>发起http请求</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjew55zuaj30jf09cmxz.jpg" alt="发起请求"></p><h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjewzhxu4j30na0hxgnp.jpg" alt="查看结果"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><p>线程1:从本地sqlite数据库中获取数据，设置为属性</p></li><li><p>线程2:从属性中，直接获取值，进行性能测试</p></li></ol><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><blockquote><p>监控被测服务器的软件、硬件资源，收集这些资源的使用情况的数据，用于后续的性能分析</p></blockquote><h3 id="ServerAgent-监控硬件"><a href="#ServerAgent-监控硬件" class="headerlink" title="ServerAgent 监控硬件"></a>ServerAgent 监控硬件</h3><ul><li><p>可用于监控Linux和Winodws</p></li><li><p>可以和Jmeter直接集成</p></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>将<code>ServerAgent-2.2.3.zip</code>上传到被测服务器</li><li>解压文件</li><li>进入解压文件后，执行启动命令</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 serverAgent]# chmod 777 startAgent.sh</span><br><span class="line">[root@vircent7 serverAgent]# ./startAgent.sh</span><br><span class="line">INFO    2021-03-27 13:27:11.890 [kg.apc.p] (): Binding UDP to 4444</span><br><span class="line">INFO    2021-03-27 13:27:12.896 [kg.apc.p] (): Binding TCP to 4444</span><br><span class="line">INFO    2021-03-27 13:27:12.924 [kg.apc.p] (): JP@GC Agent v2.2.3 started</span><br></pre></td></tr></tbody></table></figure><blockquote><p>默认的服务器端口为<code>4444</code></p></blockquote><h4 id="jmeter与该监控集成"><a href="#jmeter与该监控集成" class="headerlink" title="jmeter与该监控集成"></a>jmeter与该监控集成</h4><p>jmeter监听器&gt;jp@gc - PerfMon Metrics Collector「需要安装第三方插件 jpgc」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjfpc8nqnj30xr0u0qg6.jpg" alt="监听器"></p><h4 id="实际工作中可能遇到的问题"><a href="#实际工作中可能遇到的问题" class="headerlink" title="实际工作中可能遇到的问题"></a>实际工作中可能遇到的问题</h4><ol><li>被测服务器数云服务器，云服务器会禁用4444端口</li></ol><blockquote><p>关闭UDP端口，开启TCP端口为5279</p><p>UDP是一种广播模式传递数据，这种方式数据不安全</p><p>TCP需要建立连接才能传输数据，数据相对更安全</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 serverAgent]# ./startAgent.sh --udp-port 0 --tcp-port 5279</span><br><span class="line">INFO    2021-03-27 13:36:21.743 [kg.apc.p] (): Binding TCP to 5279</span><br><span class="line">INFO    2021-03-27 13:36:21.909 [kg.apc.p] (): JP@GC Agent v2.2.3 started</span><br></pre></td></tr></tbody></table></figure><p>网络要通：不是使用ping命令</p><p>ping：只要网络存在这个IP，ping命令可以被禁用，企业中的服务器，很多时候都会禁用ping命令</p><p>服务器向外提供是通过端口，如果服务器没有启动，是没有端口可用，能ping通但是无法连接</p><p>防火墙上没有开通端口权限</p><p>一般采用 <code>telnet ip端口</code>  </p><ol><li>如果这个命令不能执行</li></ol><ul><li>telnet不是内部命令｜未找到命令：说明没有开启telnet命令或没有安装</li></ul><ol start="2"><li>如果这个命令不通</li></ol><ul><li><p>被测服务器没有启动对应的服务</p></li><li><p>防火墙没有开放该端口 <code>systemctl status firewalld</code></p></li></ul> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>如果是云服务器，一定要去web管理台 安全策略中开放端口</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;18-读取数据库数据进行性能测试&quot;&gt;&lt;a href=&quot;#18-读取数据库数据进行性能测试&quot; class=&quot;headerlink&quot; title=&quot;18-读取数据库数据进行性能测试&quot;&gt;&lt;/a&gt;18-读取数据库数据进行性能测试&lt;/h1&gt;&lt;h2 id=&quot;用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？&quot;&gt;&lt;a href=&quot;#用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？&quot; class=&quot;headerlink&quot; title=&quot;用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？&quot;&gt;&lt;/a&gt;用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？&lt;/h2&gt;&lt;h3 id=&quot;系统是否允许一个账号被同时登录多次？&quot;&gt;&lt;a href=&quot;#系统是否允许一个账号被同时登录多次？&quot; class=&quot;headerlink&quot; title=&quot;系统是否允许一个账号被同时登录多次？&quot;&gt;&lt;/a&gt;系统是否允许一个账号被同时登录多次？&lt;/h3&gt;&lt;p&gt;如果有互踢功能，那是不能使用同一个账号&lt;/p&gt;
&lt;h3 id=&quot;有没有缓存机制（数据库缓存）&quot;&gt;&lt;a href=&quot;#有没有缓存机制（数据库缓存）&quot; class=&quot;headerlink&quot; title=&quot;有没有缓存机制（数据库缓存）&quot;&gt;&lt;/a&gt;有没有缓存机制（数据库缓存）&lt;/h3&gt;&lt;p&gt;如果有，不能使用同一个账号&lt;/p&gt;
&lt;h3 id=&quot;造多个账号进行性能测试&quot;&gt;&lt;a href=&quot;#造多个账号进行性能测试&quot; class=&quot;headerlink&quot; title=&quot;造多个账号进行性能测试&quot;&gt;&lt;/a&gt;造多个账号进行性能测试&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;尽可能的在运行过程中，造足够量的账号&lt;/li&gt;
&lt;li&gt;如果只有固定的一些账号可用时，做这种性能测试时，要记得带上「退出登录」接口&lt;/li&gt;
&lt;li&gt;如果只有固定的一些账号可用时，不关心登录接口的信息，可用不用退出&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>17-混合场景设计</title>
    <link href="http://zx490336534.github.io/article/307fc095.html"/>
    <id>http://zx490336534.github.io/article/307fc095.html</id>
    <published>2021-05-09T01:56:00.000Z</published>
    <updated>2021-05-15T14:04:16.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-混合场景设计"><a href="#17-混合场景设计" class="headerlink" title="17-混合场景设计"></a>17-混合场景设计</h1><h2 id="面向目标的场景"><a href="#面向目标的场景" class="headerlink" title="面向目标的场景"></a>面向目标的场景</h2><ul><li>Target Rate：TPS</li><li>Ramp Up Time：启动时间</li><li>Ramp-Up Steps Count：启动步长 总共可以调整的次数，如果少于总次数可以达到目标，那么后面剩余的次数就不会再调整。如果所有的调整次数都用完了，也无法达到目标，就是无法实现目标</li></ul><blockquote><p>调整次数，调整的是「并发用户数」</p></blockquote><p>在这个场景中，完全没有设置「并发用户数」的地方，是通过自动调整并发用户数来实现的</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqby7vn8ncj30t90dnwfj.jpg" alt="bzm - Arrivals Thread Group"></p><span id="more"></span><h2 id="混合场景"><a href="#混合场景" class="headerlink" title="混合场景"></a>混合场景</h2><h3 id="错误的混合场景"><a href="#错误的混合场景" class="headerlink" title="错误的混合场景"></a>错误的混合场景</h3><ol><li><p>一个线程组中，挂载多个接口，向服务器发起请求。但是这种严格意义上来说，属于伪混合场景</p></li><li><p>加吞吐量控制器当作混合场景：完全不知道如何做性能测试的思路</p></li><li><p>if条件控制器来做混合场景，也是伪混合场景</p></li></ol><h3 id="真正的混合场景"><a href="#真正的混合场景" class="headerlink" title="真正的混合场景"></a>真正的混合场景</h3><p>不同数量的并发用户，向服务器发起不同的接口请求</p><p>因为并发用户数量设置，是要使用线程组的。所以「不同数量的并发用户」需要使用多个线程组</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbypw2aomj303003c3yg.jpg" alt="多个线程组"></p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>jmeter中，写脚本，最难的技术点，是跨线程组传参</p><blockquote><p>用户定义变量：全局变量，可以跨线程组。在启动时获取一次，在运行过程中不会动态获取值</p><p>用户参数：局部变量，不能直接跨线程组</p></blockquote><ol><li>属性</li></ol><blockquote><p>jmeter属性</p><ul><li>静态属性：properties</li><li>动态属性：setPorperty</li></ul><p>系统属性：</p></blockquote><ul><li>前面线程组中的接口参数值，设置为jmeter的属性</li><li>后面的线程组，获取jmeter属性值</li><li>线程组设置不同的并发用户数 </li></ul><ol start="2"><li>文件嫁接：使用「数据库」方式比使用「csv」方式性能要好 消耗本机的资源要小</li></ol><h2 id="属性跨线程组"><a href="#属性跨线程组" class="headerlink" title="属性跨线程组"></a>属性跨线程组</h2><h3 id="线程1：注册"><a href="#线程1：注册" class="headerlink" title="线程1：注册"></a>线程1：注册</h3><p>为了让数据读取的比较整齐，将注册与属性设置放在一个「事务控制器」中</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbz9jp3e1j30qs05ft9n.jpg" alt="事务控制器"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzarpo2nj30tr0d9n00.jpg" alt="HTTP请求"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzawq9o1j30oh06kdgx.jpg" alt="用户参数"></p><p>使用JSON取样器将返回内容进行提取</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzb1qwz4j30w008c409.jpg" alt="JSON取样器"></p><p>编写两个「调试取样器」进行属性的设置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">${__setProperty(pro_mobile,${gmobile},)}</span><br><span class="line">${__setProperty(pro_gqid,${gqid},)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzc2derjj30m0062ab2.jpg" alt="设置手机号"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzc72mwkj30lb06bdgv.jpg" alt="设置gqid"></p><p>运行一次查看「属性显示」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzcu6n3qj313l0mhq7w.jpg" alt="image-20210509104547525"></p><h3 id="线程2：登录"><a href="#线程2：登录" class="headerlink" title="线程2：登录"></a>线程2：登录</h3><p>在HTTP请求中电话号码和gqid设置为</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">${__property(pro_mobile,,)}</span><br><span class="line">${__property(pro_gqid,,)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzeyx8lnj30un0ayq5f.jpg" alt="HTTP请求"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>由于Jmeter中线程数同时运行的，所以会出现获取到的值为上一次的值</p><p>当并发数量增加后，会出现多个请求使用了同一个属性</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>属性名称设置时携带「线程号」</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">${__setProperty(pro_mobile_${__threadNum},${gmobile},)}</span><br><span class="line">${__setProperty(pro_gqid_${__threadNum},${gqid},)}</span><br><span class="line"></span><br><span class="line">登录接口</span><br><span class="line">{</span><br><span class="line">    <span class="string">"mobile"</span>: <span class="string">"${__property(pro_mobile_${__threadNum},,)}"</span>,</span><br><span class="line">    <span class="string">"gqid"</span>:<span class="string">"${__property(pro_gqid_${__threadNum},,)}"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="波浪场景"><a href="#波浪场景" class="headerlink" title="波浪场景"></a>波浪场景</h2><p>波浪：有一定的时间规律</p><p>x轴：时间</p><p>y轴：并发用户数</p><h3 id="jp-gc-Ultimate-Thread-Group"><a href="#jp-gc-Ultimate-Thread-Group" class="headerlink" title="jp@gc - Ultimate Thread Group"></a>jp@gc - Ultimate Thread Group</h3><p>终极线程组</p><p>添加三条：</p><ul><li>线程数100，开始时间0秒，起线程时间30秒，持续60秒，停止线程时间10秒</li><li>线程数100，开始时间110秒，起线程时间30秒，持续60秒，停止线程时间10秒</li><li>线程数100，开始时间220秒，起线程时间30秒，持续60秒，停止线程时间10秒</li></ul><p>110秒=第一条的30秒+60秒+10秒+ 10秒等待时间</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqc123eznnj31740r8qaf.jpg" alt="波浪"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;17-混合场景设计&quot;&gt;&lt;a href=&quot;#17-混合场景设计&quot; class=&quot;headerlink&quot; title=&quot;17-混合场景设计&quot;&gt;&lt;/a&gt;17-混合场景设计&lt;/h1&gt;&lt;h2 id=&quot;面向目标的场景&quot;&gt;&lt;a href=&quot;#面向目标的场景&quot; class=&quot;headerlink&quot; title=&quot;面向目标的场景&quot;&gt;&lt;/a&gt;面向目标的场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Target Rate：TPS&lt;/li&gt;
&lt;li&gt;Ramp Up Time：启动时间&lt;/li&gt;
&lt;li&gt;Ramp-Up Steps Count：启动步长 总共可以调整的次数，如果少于总次数可以达到目标，那么后面剩余的次数就不会再调整。如果所有的调整次数都用完了，也无法达到目标，就是无法实现目标&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;调整次数，调整的是「并发用户数」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这个场景中，完全没有设置「并发用户数」的地方，是通过自动调整并发用户数来实现的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNly1gqby7vn8ncj30t90dnwfj.jpg&quot; alt=&quot;bzm - Arrivals Thread Group&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>16-负载、压力、面向目标测试场景</title>
    <link href="http://zx490336534.github.io/article/b22971f7.html"/>
    <id>http://zx490336534.github.io/article/b22971f7.html</id>
    <published>2021-05-08T13:20:00.000Z</published>
    <updated>2021-05-08T14:53:01.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="16-负载、压力、面向目标测试场景"><a href="#16-负载、压力、面向目标测试场景" class="headerlink" title="16-负载、压力、面向目标测试场景"></a>16-负载、压力、面向目标测试场景</h1><h2 id="负载测试场景"><a href="#负载测试场景" class="headerlink" title="负载测试场景"></a>负载测试场景</h2><blockquote><p>负载测试：逐步增加并发用户数，拐点区间</p></blockquote><p>jmeter如何逐步增加并发用户数：</p><p>安装<code>jpgc - Standard Set</code>插件</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbc93qh02j30vk0oggpt.jpg" alt="jpgc"></p><p>在「测试计划」右键添加「线程」的时候可以发现多了很多项</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbcizds0qj30b605qt9a.jpg" alt="线程"></p><span id="more"></span><p>选择「jp@gc - Stepping Thread Group (deprecated)」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbcj7twwwj30xr0u046k.jpg" alt="jp@gc - Stepping Thread Group (deprecated)"></p><p>x轴：时间</p><p>y轴：用户数</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbckz1jy4j30p706jq3d.jpg" alt="配置"></p><ol><li>This group will start 「100」 threads：将启动100个线程数</li><li>First，wair for 「0」 seconds： 首先等待0秒</li><li>Then start 「0」threads：然后 启动0个用户</li><li>Next，add「10」 threads every 「30」seconds，using ramp-up 「5」 seconds：每5秒钟，增加10个线程数，然后运行30秒</li><li>Then hold load for 「60」seconds：然后持续运行60秒</li><li>Finally，stop「5」threads every 「1」 seconds：最后，没1秒停止5个线程数</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbd3r6xbdj30t20sg0vl.jpg" alt="图讲解"></p><p><strong>缓起步，快结束</strong></p><p>结束时间不能太短，也不能太长</p><ul><li>太短：可能导致出错，这个出错是场景设计的问题，不是性能问题</li><li>太长：导致性能指标值与实际值偏差太大</li></ul><p>如果330正常，在360出现异常，出现拐点区间。</p><p>所以拐点范围为<code>[330,360]</code>，通过缩小范围，找到拐点值</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdffo2y6j30p206o74q.jpg" alt="寻找拐点"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdexynrjj30xr0u0gty.jpg" alt="寻找拐点"></p><p>想要寻找某个接口的最大并发用户数，通过最大并发用户数，获取性能指标值？</p><ol><li>设置一个阶梯线程组，自己设置一个最大值</li><li>运行，找到拐点值</li><li>缩小拐点区间，找到最大并发用户数</li><li>进行性能测试</li></ol><h3 id="如何找到拐点值"><a href="#如何找到拐点值" class="headerlink" title="如何找到拐点值"></a>如何找到拐点值</h3><p>在添加插件后可以看到「监听器」中新增了部分内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdmbxnbbj309b0cxabi.jpg" alt="监听器"></p><ul><li>Active Threads Over Time：随着时间变化的活跃线程数</li><li>PerfMon Metrics Collecotr：性能监控器</li><li>Response Times Over Time：随着时间变化的响应时间</li><li>Transactions per Second：TPS</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdr9pladj30900510t5.jpg" alt="线程组"></p><h4 id="Active-Threads-Over-Time"><a href="#Active-Threads-Over-Time" class="headerlink" title="Active Threads Over Time"></a>Active Threads Over Time</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdrx556oj31240fxmyw.jpg" alt="Active Threads Over Time"></p><h4 id="Response-Times-Over-Time"><a href="#Response-Times-Over-Time" class="headerlink" title="Response Times Over Time"></a>Response Times Over Time</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbds3ncb6j313t0k1789.jpg" alt="Response Times Over Time"></p><h4 id="Transactions-per-Second"><a href="#Transactions-per-Second" class="headerlink" title="Transactions per Second]"></a>Transactions per Second]</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdsa6ogkj313v0kftdi.jpg" alt="Transactions per Second"></p><ol><li><p>是否有报错</p></li><li><p>响应时间是否超过1.5s：用户满意度指数：500ms是可以接受，超过1.5s不能接受</p></li><li><p>tps 不上升，反而下降</p></li></ol><p>响应时间+活跃线程数=&gt;不同线程数时的平均响应时间</p><p>活跃线程数+TPS=&gt;不同线程数的平均tps</p><p>注意：一般不会在一个线程组下挂载多个接口，因为 监听器图标中，会把所有接口数据合并在一个图标中，数据太多，不利于分析</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbe6voyl3j31740pctic.jpg" alt="多个接口"></p><h2 id="压力测试场景"><a href="#压力测试场景" class="headerlink" title="压力测试场景"></a>压力测试场景</h2><ul><li>持续运行比较长时间，看服务器的稳定性</li><li>普通线程组：调度器持续运行时间，设置比较长</li><li>阶梯线程组：hold load时间设置比较长</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbecy8qw3j30q106rt96.jpg" alt="hold load"></p><h2 id="面向目标的场景"><a href="#面向目标的场景" class="headerlink" title="面向目标的场景"></a>面向目标的场景</h2><blockquote><p>需求：有一个页面，需要做性能测试。看能否支持一秒钟5000人访问</p></blockquote><p>相当于：1秒钟要处理500人的请求事务=&gt;500tps</p><p>一般的公司，接口tps范围数50～200</p><p>添加一个「bzm - Arrivals Thread Group」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbehzyr2aj31740pc7al.jpg" alt="bzm - Arrivals Thread Group"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;16-负载、压力、面向目标测试场景&quot;&gt;&lt;a href=&quot;#16-负载、压力、面向目标测试场景&quot; class=&quot;headerlink&quot; title=&quot;16-负载、压力、面向目标测试场景&quot;&gt;&lt;/a&gt;16-负载、压力、面向目标测试场景&lt;/h1&gt;&lt;h2 id=&quot;负载测试场景&quot;&gt;&lt;a href=&quot;#负载测试场景&quot; class=&quot;headerlink&quot; title=&quot;负载测试场景&quot;&gt;&lt;/a&gt;负载测试场景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;负载测试：逐步增加并发用户数，拐点区间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jmeter如何逐步增加并发用户数：&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;jpgc - Standard Set&lt;/code&gt;插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNly1gqbc93qh02j30vk0oggpt.jpg&quot; alt=&quot;jpgc&quot;&gt;&lt;/p&gt;
&lt;p&gt;在「测试计划」右键添加「线程」的时候可以发现多了很多项&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNly1gqbcizds0qj30b605qt9a.jpg&quot; alt=&quot;线程&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>15-性能测试场景</title>
    <link href="http://zx490336534.github.io/article/e64c544a.html"/>
    <id>http://zx490336534.github.io/article/e64c544a.html</id>
    <published>2021-05-07T13:25:00.000Z</published>
    <updated>2021-05-07T14:46:28.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="15-性能测试场景"><a href="#15-性能测试场景" class="headerlink" title="15-性能测试场景"></a>15-性能测试场景</h1><h2 id="全链路测试"><a href="#全链路测试" class="headerlink" title="全链路测试"></a>全链路测试</h2><blockquote><p>听起来，很高大上，但是没几家能落地</p><p>真正做全链路性能测试，只有大公司才可能落地</p></blockquote><p>全链路：就一个请求，从头到尾所有的环境，都进行性能测试</p><p>例如，公司中的一个登录业务，需要经过多少个服务，要调用多少个接口，这个接口的完整数据流是否清楚。</p><ol><li>一个一个接口把性能测试做下来。</li><li>每一个业务的性能测试做下来。</li><li>多个业务的性能测试做下来。</li></ol><p>需要解决单个接口，单个业务的性能瓶颈后，才可以开始全链路测试。</p><span id="more"></span><h3 id="模拟生产环境，真实用户对业务使用分配"><a href="#模拟生产环境，真实用户对业务使用分配" class="headerlink" title="模拟生产环境，真实用户对业务使用分配"></a>模拟生产环境，真实用户对业务使用分配</h3><ol><li>各种业务</li><li>各种业务的用户量不相同</li><li>业务覆盖广，深度深</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及系统多</li><li>如何模拟用户真实流量分配</li><li>接口业务多</li></ol><h3 id="如何开展"><a href="#如何开展" class="headerlink" title="如何开展"></a>如何开展</h3><ol><li>分析生产用户流量</li><li>各个业务接口性能测试脚本开发</li><li>压测环境要模拟生产环境</li><li>压测数据</li><li>实时全流程监控</li></ol><h3 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h3><ol><li>单系统优化</li><li>关键点优化</li><li>业务流程优化</li></ol><h2 id="性能场景设计"><a href="#性能场景设计" class="headerlink" title="性能场景设计"></a>性能场景设计</h2><ul><li>性能测试场景</li><li>负载测试场景</li><li>压力测试场景</li><li>面向目标场景</li><li>混合场景</li><li>波浪形场景</li></ul><h2 id="性能场景设计-性能测试场景"><a href="#性能场景设计-性能测试场景" class="headerlink" title="性能场景设计-性能测试场景"></a>性能场景设计-性能测试场景</h2><ol><li>普通线程组</li><li>服务器接口性能测试，一定要是多用户并发</li><li>多用户：jmeter线程组中的「线程数」</li></ol><ul><li><p>多用户并发=多个人</p></li><li><p>在性能测试中，这个「人」是如何模拟的？</p></li></ul><blockquote><p>一个软件、程序、代码运行起来，就会生产一个进程</p><p>一个进程中真正干活的是线程</p></blockquote><blockquote><p>性能测试中，模拟多用户并发，不同工具可能使用不同的方式。</p><p>jmeter使用的是线程</p><p>loadrunner可以使用进程、线程，默认是线程</p><p>locust使用的是协程</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqa7o1ac84j30x50c20u1.jpg" alt="线程组"></p><p><strong>线程数</strong>：相当于用户个数</p><p><strong>Ramp-Up时间（秒）</strong>：启动所有线程数的时间。在这个时间内，线程只要启动了，就去执行请求，是广义的并发</p><p>例如：当「Ramp-Up」设置为2，「线程数」设置为10：在2秒钟结束，10个用户都启动好。不保证在2秒钟过程中，到底是怎么启动的。</p><p>理论上 Jmeter没有显示线程数的数量，可以设置为任意大的数字。</p><p>实际上，受电脑本身的资源影响，不可能无限大。</p><p>一台电脑，cpu的频率直接影响线程数量，一般而言，一台电脑jmeter（http协议）能创建的线程数，大约在2000左右，保守在1000-1500</p><p>ramp-up设置：</p><ul><li>线程数&lt;100，1s</li><li>线程数&lt;200，2～3s</li><li>200&lt;线程数&lt;1000 3～5s</li></ul><p><strong>循环次数</strong>：至少设置为1</p><p><strong>永远</strong>：勾选后会持续运行直到手动停止</p><p><strong>调度器</strong>：需要配合「永远」一起使用。输入一个<strong>持续时间</strong>可以指定任务运行一段时间后停止</p><p><strong>启动延迟</strong>：线程起来后等待一段时间后再执行</p><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>配置「线程数」10，「Ramp-U」p为2，「循环次数」为「永远」，勾选「调度器」，设置「持续时间」为180秒</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqa8g6s2vqj306r07t74l.jpg" alt="线程属性"></p><p>运行后查看「聚合报告」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqa8gcpm4tj30ti09qjtb.jpg" alt="聚合报告"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;15-性能测试场景&quot;&gt;&lt;a href=&quot;#15-性能测试场景&quot; class=&quot;headerlink&quot; title=&quot;15-性能测试场景&quot;&gt;&lt;/a&gt;15-性能测试场景&lt;/h1&gt;&lt;h2 id=&quot;全链路测试&quot;&gt;&lt;a href=&quot;#全链路测试&quot; class=&quot;headerlink&quot; title=&quot;全链路测试&quot;&gt;&lt;/a&gt;全链路测试&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;听起来，很高大上，但是没几家能落地&lt;/p&gt;
&lt;p&gt;真正做全链路性能测试，只有大公司才可能落地&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全链路：就一个请求，从头到尾所有的环境，都进行性能测试&lt;/p&gt;
&lt;p&gt;例如，公司中的一个登录业务，需要经过多少个服务，要调用多少个接口，这个接口的完整数据流是否清楚。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个一个接口把性能测试做下来。&lt;/li&gt;
&lt;li&gt;每一个业务的性能测试做下来。&lt;/li&gt;
&lt;li&gt;多个业务的性能测试做下来。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要解决单个接口，单个业务的性能瓶颈后，才可以开始全链路测试。&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>14-Dubbo测试</title>
    <link href="http://zx490336534.github.io/article/61019fc7.html"/>
    <id>http://zx490336534.github.io/article/61019fc7.html</id>
    <published>2021-04-28T22:59:00.000Z</published>
    <updated>2021-05-07T14:46:28.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-Dubbo测试"><a href="#14-Dubbo测试" class="headerlink" title="14-Dubbo测试"></a>14-Dubbo测试</h1><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><blockquote><p>目前是apache托管的开源项目，能够实现RPC</p></blockquote><ul><li><p>注册中心：zookeeper 默认端口2181</p></li><li><p>服务提供者：应用程序</p></li><li><p>服务消费者：使用服务方</p></li><li><p>服务监控：监控</p><span id="more"></span><h3 id="测试服务器环境"><a href="#测试服务器环境" class="headerlink" title="测试服务器环境"></a>测试服务器环境</h3></li></ul><blockquote><p>测试服务器IP：192.168.9.3</p><p>zookeeper端口20181</p><p>服务提供者：</p><ul><li><p>membet1:20882 </p></li><li><p>membet2:20883</p></li></ul></blockquote><h3 id="测试dubbo的方法"><a href="#测试dubbo的方法" class="headerlink" title="测试dubbo的方法"></a>测试dubbo的方法</h3><h4 id="1-使用Telnet的方式"><a href="#1-使用Telnet的方式" class="headerlink" title="1.使用Telnet的方式"></a>1.使用Telnet的方式</h4><blockquote><p>在mac上运行telnet需要环境</p><p>使用<code>Homebrew</code>安装一下</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install telnet</span></span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> telnet 192.168.9.3 20882</span></span><br></pre></td></tr></tbody></table></figure><p>使用<code>ls</code>可以查看提供的服务的名称也就是「接口」</p><p>使用<code>ls -l</code>可以查看接口的所有方法</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">ls</span></span><br><span class="line">com.lemon.member.service.MemberService</span><br><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">ls -l com.lemon.member.service.MemberService</span></span><br><span class="line">com.lemon.member.pojo.Member getMember(com.lemon.member.pojo.Member)</span><br><span class="line">void recharge(com.lemon.member.pojo.Recharger)</span><br><span class="line">void withdraw(com.lemon.member.pojo.WithDrawer)</span><br><span class="line">void add(com.lemon.member.pojo.Member)</span><br><span class="line">void update(com.lemon.member.pojo.Member)</span><br><span class="line">java.util.List list()</span><br></pre></td></tr></tbody></table></figure><p>方法括号中有内容，就是带有参数的方法</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq093hm27zj30tt10x7cz.jpg" alt="Telnet"></p><p>使用<code>cd</code>进入到服务的名称位置后</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">ls -l</span></span><br><span class="line">com.lemon.member.service.MemberService -&gt; dubbo://192.168.9.3:20882/com.lemon.member.service.MemberService?anyhost=true&amp;application=futureloan-member-service&amp;dubbo=2.5.3&amp;interface=com.lemon.member.service.MemberService&amp;methods=add,recharge,getMember,update,list,withdraw&amp;pid=2333&amp;retries=3&amp;revision=0.0.1-SNAPSHOT&amp;side=provider&amp;timestamp=1619651401859</span><br></pre></td></tr></tbody></table></figure><p>调用接口的方法：<code>invoke 接口.方法()</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">invoke com.lemon.member.service.MemberService.list()</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09b8pyrqj30tt0tfgw7.jpg" alt="list方法"></p><h4 id="2-使用jmeter"><a href="#2-使用jmeter" class="headerlink" title="2.使用jmeter"></a>2.使用jmeter</h4><p>将<code>jmeter-plugins-dubbo-2.7.3-jar-with-dependencies.jar</code>放入<code>lib\ext</code>中后，重启Jmeter</p><p>添加「取样器」后可以看到增加了「Dubbo Sample」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09g6x548j309u0h5jt8.jpg" alt="取样器"></p><p>在「Registry Settings」填入服务器信息后点击「Get Provider List」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09j4xhyfj30xv0u0jxe.jpg" alt="填写"></p><p>可以看到我们可以查看相关方法。这些方法与刚才使用Telnet查看的一致</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09k8msbkj30t4058753.jpg" alt="查看方法"></p><p>我们选择「list」后点击运行</p><p>可以在「查看结果树」中查看与Telnet中一致的内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09l79zzoj30xr0u015i.jpg" alt="查看结果"></p><p>查看add的接口文档</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09qlk280j30gc03o74v.jpg" alt="add接口文档"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09r49proj30sp0av752.jpg" alt="入参"></p><h2 id="其他性能测试工具"><a href="#其他性能测试工具" class="headerlink" title="其他性能测试工具"></a>其他性能测试工具</h2><blockquote><p>ab和wrk都是快速响应性能测试工具</p></blockquote><h3 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://gitee.com/mirrors/wrk.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> wrk/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:~ zhongxin$ mkdir wrk</span><br><span class="line">(base) 192:~ zhongxin$ cd wrk/</span><br><span class="line">(base) 192:wrk zhongxin$ ls</span><br><span class="line">(base) 192:wrk zhongxin$ git clone https://gitee.com/mirrors/wrk.git</span><br><span class="line">Cloning into 'wrk'...</span><br><span class="line">remote: Enumerating objects: 1103, done.</span><br><span class="line">remote: Total 1103 (delta 0), reused 0 (delta 0), pack-reused 1103</span><br><span class="line">Receiving objects: 100% (1103/1103), 37.83 MiB | 2.02 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (345/345), done.</span><br><span class="line">(base) 192:wrk zhongxin$ ls</span><br><span class="line">wrk</span><br><span class="line">(base) 192:wrk zhongxin$ cd wrk/</span><br><span class="line">(base) 192:wrk zhongxin$ make</span><br></pre></td></tr></tbody></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-c 连接数</span><br><span class="line">-d 持续运行失常</span><br><span class="line">-t 线程数</span><br><span class="line">-s Lua脚本</span><br><span class="line">-H 添加请求头</span><br><span class="line">-v 查看版本信息</span><br></pre></td></tr></tbody></table></figure><h4 id="测试语句"><a href="#测试语句" class="headerlink" title="测试语句"></a>测试语句</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./wrk -t4 -c100 -d30s --latency https://www.baidu.com/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ./wrk -t4 -c100 -d30s --latency https://www.baidu.com/</span><br><span class="line">Running 30s test @ https://www.baidu.com/</span><br><span class="line">  4 threads and 100 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   151.92ms  126.20ms   1.99s    95.29%</span><br><span class="line">    Req/Sec   170.01     43.17   333.00     81.93%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%  128.98ms</span><br><span class="line">     75%  137.80ms</span><br><span class="line">     90%  195.57ms</span><br><span class="line">     99%  802.22ms</span><br><span class="line">  19933 requests in 30.10s, 298.16MB read</span><br><span class="line">  Socket errors: connect 0, read 156, write 0, timeout 45</span><br><span class="line">Requests/sec:    662.23</span><br><span class="line">Transfer/sec:      9.91MB</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq0a3ix9aoj30vh0gowim.jpg" alt="wrk"></p><ul><li>Avg 平均响应</li><li>Stdev 标准方差</li><li>Max 最大值</li><li>+/- Stdev 偏差比</li><li>Latency 响应时间分布</li><li>Req/sec 每秒请求数</li></ul><h3 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ab -V</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1879490 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ab -help</span><br><span class="line">Usage: ab [options] [http[s]://]hostname[:port]/path</span><br><span class="line">Options are:</span><br><span class="line">    -n requests     Number of requests to perform</span><br><span class="line">    -c concurrency  Number of multiple requests to make at a time</span><br><span class="line">    -t timelimit    Seconds to max. to spend on benchmarking</span><br><span class="line">                    This implies -n 50000</span><br><span class="line">    -s timeout      Seconds to max. wait for each response</span><br><span class="line">                    Default is 30 seconds</span><br><span class="line">    -b windowsize   Size of TCP send/receive buffer, in bytes</span><br><span class="line">    -B address      Address to bind to when making outgoing connections</span><br><span class="line">    -p postfile     File containing data to POST. Remember also to set -T</span><br><span class="line">    -u putfile      File containing data to PUT. Remember also to set -T</span><br><span class="line">    -T content-type Content-type header to use for POST/PUT data, eg.</span><br><span class="line">                    'application/x-www-form-urlencoded'</span><br><span class="line">                    Default is 'text/plain'</span><br><span class="line">    -v verbosity    How much troubleshooting info to print</span><br><span class="line">    -w              Print out results in HTML tables</span><br><span class="line">    -i              Use HEAD instead of GET</span><br><span class="line">    -x attributes   String to insert as table attributes</span><br><span class="line">    -y attributes   String to insert as tr attributes</span><br><span class="line">    -z attributes   String to insert as td or th attributes</span><br><span class="line">    -C attribute    Add cookie, eg. 'Apache=1234'. (repeatable)</span><br><span class="line">    -H attribute    Add Arbitrary header line, eg. 'Accept-Encoding: gzip'</span><br><span class="line">                    Inserted after all normal header lines. (repeatable)</span><br><span class="line">    -A attribute    Add Basic WWW Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -P attribute    Add Basic Proxy Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -X proxy:port   Proxyserver and port number to use</span><br><span class="line">    -V              Print version number and exit</span><br><span class="line">    -k              Use HTTP KeepAlive feature</span><br><span class="line">    -d              Do not show percentiles served table.</span><br><span class="line">    -S              Do not show confidence estimators and warnings.</span><br><span class="line">    -q              Do not show progress when doing more than 150 requests</span><br><span class="line">    -l              Accept variable document length (use this for dynamic pages)</span><br><span class="line">    -g filename     Output collected data to gnuplot format file.</span><br><span class="line">    -e filename     Output CSV file with percentages served</span><br><span class="line">    -r              Don't exit on socket receive errors.</span><br><span class="line">    -m method       Method name</span><br><span class="line">    -h              Display usage information (this message)</span><br><span class="line">    -I              Disable TLS Server Name Indication (SNI) extension</span><br><span class="line">    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)</span><br><span class="line">    -f protocol     Specify SSL/TLS protocol</span><br><span class="line">                    (TLS1, TLS1.1, TLS1.2 or ALL)</span><br><span class="line">    -E certfile     Specify optional client certificate chain and private key</span><br></pre></td></tr></tbody></table></figure><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c 并发用户数</span><br><span class="line">-n 总共请求数</span><br><span class="line">-t 持续运行时长</span><br><span class="line">-T 请求头Content-Type 默认text/plan</span><br><span class="line">-p post请求</span><br><span class="line">-m 请求方法名称</span><br><span class="line">-e 请求结果输出到csv文件</span><br><span class="line">-v 查看版本信息</span><br></pre></td></tr></tbody></table></figure><h4 id="测试语句-1"><a href="#测试语句-1" class="headerlink" title="测试语句"></a>测试语句</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -c 10 -n 10000 https://www.baidu.com/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ab -c 10 -n 10000 https://www.baidu.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1879490 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.baidu.com (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        BWS/1.1</span><br><span class="line">Server Hostname:        www.baidu.com</span><br><span class="line">Server Port:            443</span><br><span class="line">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><span class="line">Server Temp Key:        ECDH P-256 256 bits</span><br><span class="line">TLS Server Name:        www.baidu.com</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        227 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken for tests:   107.936 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      10818825 bytes</span><br><span class="line">HTML transferred:       2270000 bytes</span><br><span class="line">Requests per second:    92.65 [#/sec] (mean)</span><br><span class="line">Time per request:       107.936 [ms] (mean)</span><br><span class="line">Time per request:       10.794 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          97.88 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       31   80  23.8     77    1375</span><br><span class="line">Processing:     9   28  14.1     24     172</span><br><span class="line">Waiting:        9   24  10.8     21     158</span><br><span class="line">Total:         47  108  29.4    103    1404</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">    103</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">    112</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">    119</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">    123</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">    139</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">    153</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">    177</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">    197</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">   1404 (longest request)</span></span><br><span class="line">(base) 192:wrk zhongxin$</span><br></pre></td></tr></tbody></table></figure><h2 id="ngrinder"><a href="#ngrinder" class="headerlink" title="ngrinder"></a>ngrinder</h2><blockquote><p>nGrinder 是基于 Grinder 开源项目，由 NHN 公司的开发团队进行了重新设计和完善。nGrinder 是一款非常易用，有简洁友好的用户界面和 controller-agent 分布式结构的强大的压力测试工具。</p><p>它的脚本，支持 Jython、Groovy 两种语言。</p><p><strong>官方网站</strong>：<a href="http://naver.github.io/ngrinder/">http://naver.github.io/ngrinder/</a></p><p><strong>GitHub 地址</strong>：<a href="https://github.com/naver/ngrinder">https://github.com/naver/ngrinder</a></p></blockquote><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>下载 war 包 <a href="https://github.com/naver/ngrinder/releases">https://github.com/naver/ngrinder/releases</a></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Java -jar ngrinder-controller-xx.war</span></span><br></pre></td></tr></tbody></table></figure><ol><li>登录 Web 管理界面，点击顶部导航用户信息，在下拉信息中，选择‘下载代理’，将会自动下载 Agent，选择‘下载监控’，将自动下载 monitor 监控</li><li>解压、启动 Agent：双击 run_agent.bat(windows) ‘./run_agent.sh’(linux mac)</li><li>代理服务启动后，在页面 admin &gt; 代理管理，就能看到代理服务器</li></ol><h3 id="制作脚本"><a href="#制作脚本" class="headerlink" title="制作脚本"></a>制作脚本</h3><p>在首页，Quick Start 文本框中输入 要录制脚本的地址，第二个文本框，选择生成脚本的语言类型，点击 <strong>开始测试</strong> 按钮，就可生成脚本。或者点击，菜单栏中的‘<strong>脚本</strong>’</p><p>点击‘<strong>新建脚本</strong>’按钮，弹窗中，选择脚本类型，填写脚本名称，被测 URL(可选)，点击‘创建’即可创建出一个对应脚本语言的脚本</p><p>点击脚本列表 ‘脚本名称’列中的脚本名称，即可打开对应的脚本详情</p><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><ol><li>点击顶部菜单栏中的‘<strong>性能测试</strong>’菜单</li><li>再点击 ‘<strong>创建测试</strong>’</li><li>在这个页面中，填写‘<strong>测试名称</strong>’，填写‘<strong>代理</strong>’数量(根据后面的提示)， 选择‘<strong>脚本</strong>’，如果脚本中有服务器地址，则可以不选择目标主机，如果没有，则需要添加‘<strong>目标主机</strong>’，然后点击右上角的‘<strong>保存 并运行</strong>’，这样就可以按照你的设计，进行性能测试了。</li><li>性能测试执行过程成功，状态为绿色(红色为执行过程中出错)，执行成功，会展示一份测试报告概要。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;14-Dubbo测试&quot;&gt;&lt;a href=&quot;#14-Dubbo测试&quot; class=&quot;headerlink&quot; title=&quot;14-Dubbo测试&quot;&gt;&lt;/a&gt;14-Dubbo测试&lt;/h1&gt;&lt;h2 id=&quot;Dubbo&quot;&gt;&lt;a href=&quot;#Dubbo&quot; class=&quot;headerlink&quot; title=&quot;Dubbo&quot;&gt;&lt;/a&gt;Dubbo&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;目前是apache托管的开源项目，能够实现RPC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注册中心：zookeeper 默认端口2181&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务提供者：应用程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务消费者：使用服务方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务监控：监控&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>13-Websocket协议与MQ协议</title>
    <link href="http://zx490336534.github.io/article/41dbfa05.html"/>
    <id>http://zx490336534.github.io/article/41dbfa05.html</id>
    <published>2021-04-24T13:34:00.000Z</published>
    <updated>2021-04-24T15:09:56.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-Websocket协议与MQ协议"><a href="#13-Websocket协议与MQ协议" class="headerlink" title="13-Websocket协议与MQ协议"></a>13-Websocket协议与MQ协议</h1><h2 id="Websocket协议"><a href="#Websocket协议" class="headerlink" title="Websocket协议"></a>Websocket协议</h2><blockquote><p>基于TCP全双工协议，即可以从客户端向服务器端发送请求，也可以从服务器端主动向客户端发送消息。</p></blockquote><blockquote><p> HTTP协议只能从客户端向服务器发送请求，服务器端收到请求后，做出响应，发送给客户端</p></blockquote><p>Websocket和HTTP都是基于TCP协议的，所以使用抓包工具可以抓到websocket的数据</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><ul><li>F12</li><li>Fiddler</li><li>Charles</li><li>Wireshark</li><li>Tcpdump</li></ul><p>HTTP协议簇：http、https协议。https=http+ssl数据加密传输</p><p>websocket：ws，wss协议。wss=ws+ssl数据加密传输</p><span id="more"></span><h2 id="Jmeter测试Websocket"><a href="#Jmeter测试Websocket" class="headerlink" title="Jmeter测试Websocket"></a>Jmeter测试Websocket</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><blockquote><p>jmeter本身不支持websocket，需要安装插件</p></blockquote><p>将「jmeter-plugins-manager-1.6.jar」放入「li b\ext」文件夹中，重启jmeter可以看到<code>Jmeter Plugins Manager</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv68qfwnaj30vk0oggpq.jpg" alt="Jmeter Plugins Manager"></p><p>在「Abaliable Plugins」搜索「websocket」选择「Websocket Samplers by Peter Doornbosch」后点击「Apply Changes and Restart Jmeter」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv6ddxecqj30vk0ogdkg.jpg" alt="安装"></p><p>插件「取样器」，可以发现新增了一些Websocket的取样器</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv6dytkr7j309u0fkq4m.jpg" alt="取样器"></p><ul><li>WebSocket Close 关闭连接</li><li>WebSocket Open Connection 建立连接</li><li>WebSocket Ping/Pong 检查网络是否通畅</li><li>WebSocket Single Read Sampler 相当于http中的response 读取响应信息</li><li>WebSocket Single Write Sampler 相当于http中的request 向服务器发起信息</li><li>WebSocket request-response Sampler 发送请求 同时获取响应信息</li></ul><h2 id="MQ协议"><a href="#MQ协议" class="headerlink" title="MQ协议"></a>MQ协议</h2><blockquote><p>消息队列，是一种先进先出的典型数据结构，一般用来解决应用解耦，异步消息，流量削峰等问题，实现高性能，高可用，可伸缩和最终一致性的架构</p></blockquote><p>MQ典型产品：「RabbitMQ」、「ActiveMQ」、「Kafka」、「RocketMQ」、「ZeroMQ」</p><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>「MQTT Protocol Support」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv7gbh2gej30vk0ogn0w.jpg" alt="MQTT Protocol Support"></p><p>安装插件后可以看到「取样器」中增加了如下内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv7rfh5fpj309u0gmwga.jpg" alt="安装插件后"></p><ul><li>MQTT Publisher 发布</li><li>MQTT Subscriber 消费</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv7q0hckqj30xr0u0wok.jpg" alt="EMQ"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv81n819lj30xv0u0dmx.jpg" alt="工具-Websocket"></p><ol><li>点击「连接」</li><li>新增「订阅」</li><li>修改「消息」</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv82fgi72j30wp0cldgz.jpg" alt="消息"></p><p>使用Jmeter发送</p><p>点击「Generate ID」创建一个随机ID</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv882dpy6j30xr0u0tfj.jpg" alt="Push"></p><p>可以从「订阅」中看到创建的ID</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv89ouy1tj30xr0u0ahd.jpg" alt="订阅"></p><p>从「主题」中可以看到，主题已经被推送过来了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv8dlqu54j30xr0u0dmt.jpg" alt="主题"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;13-Websocket协议与MQ协议&quot;&gt;&lt;a href=&quot;#13-Websocket协议与MQ协议&quot; class=&quot;headerlink&quot; title=&quot;13-Websocket协议与MQ协议&quot;&gt;&lt;/a&gt;13-Websocket协议与MQ协议&lt;/h1&gt;&lt;h2 id=&quot;Websocket协议&quot;&gt;&lt;a href=&quot;#Websocket协议&quot; class=&quot;headerlink&quot; title=&quot;Websocket协议&quot;&gt;&lt;/a&gt;Websocket协议&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基于TCP全双工协议，即可以从客户端向服务器端发送请求，也可以从服务器端主动向客户端发送消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; HTTP协议只能从客户端向服务器发送请求，服务器端收到请求后，做出响应，发送给客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Websocket和HTTP都是基于TCP协议的，所以使用抓包工具可以抓到websocket的数据&lt;/p&gt;
&lt;h3 id=&quot;抓包&quot;&gt;&lt;a href=&quot;#抓包&quot; class=&quot;headerlink&quot; title=&quot;抓包&quot;&gt;&lt;/a&gt;抓包&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;F12&lt;/li&gt;
&lt;li&gt;Fiddler&lt;/li&gt;
&lt;li&gt;Charles&lt;/li&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;li&gt;Tcpdump&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP协议簇：http、https协议。https=http+ssl数据加密传输&lt;/p&gt;
&lt;p&gt;websocket：ws，wss协议。wss=ws+ssl数据加密传输&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>12-使用JDBC读取与写入数据</title>
    <link href="http://zx490336534.github.io/article/b1e20de1.html"/>
    <id>http://zx490336534.github.io/article/b1e20de1.html</id>
    <published>2021-04-23T11:48:00.000Z</published>
    <updated>2021-04-23T14:42:20.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-使用JDBC读取与写入数据"><a href="#12-使用JDBC读取与写入数据" class="headerlink" title="12-使用JDBC读取与写入数据"></a>12-使用JDBC读取与写入数据</h1><h2 id="JDBC注意点"><a href="#JDBC注意点" class="headerlink" title="JDBC注意点"></a>JDBC注意点</h2><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>建议不要带<code>;</code></p><p>一个jdbc request中不要写多个sql，默认只能支持一条sql</p><span id="more"></span><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="Variable-names"><a href="#Variable-names" class="headerlink" title="Variable names"></a>Variable names</h4><ul><li><p>定义变量，接收对应「列」的值</p></li><li><p>如果有不需要接收的列，则使用「空格+逗号」进行间隔</p></li><li><p>结果的值，使用「变量名称+_顺序数字」调用</p></li></ul><p><strong>实例</strong></p><p>定义一个<code>, mb</code>提取结果中的手机号码</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyh64a9sj313v0jract.jpg" alt="取值"></p><p>查看全部的运行结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyh9sjwaj313v0jrq7t.jpg" alt="结果查看"></p><p>使用「调试取样器」查看提取到的内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyhfcgvfj313v0jr0wu.jpg" alt="调试"></p><p>使用「ForEach控制器」输出全部结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptykt48tkj315w0luwig.jpg" alt="ForEach控制器"></p><ul><li>输入变量前缀：<code>mb</code></li><li>开始循环 0</li><li>结束循环 10</li><li>输出变量名称:<code>mbil</code></li></ul><p>添加一个「调试取样器」并修改它的名称为<code>${mbil}</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptym0ruavj31740n2ael.jpg" alt="调试取样器"></p><p>运行后查看结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptymji3uaj31740n2qac.jpg" alt="查看结果"></p><p>使用「循环控制器」获取</p><ul><li>循环次数填写<code>${mb_#}</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptytjbr8sj31740dydjj.jpg" alt="截屏2021-04-23 下午8.47.01"></p><p>「计数器」中</p><ul><li>开始值为1</li><li>递增为1</li><li>最大值为<code>${mb_#}</code></li><li>引用名称为<code>d</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptytosjnkj31740dygpo.jpg" alt="截屏2021-04-23 下午8.47.10"></p><p>将「调试取样器」名称修改为<code>${__V(mb_${d},)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptytt7irbj31740dyjv7.jpg" alt="截屏2021-04-23 下午8.47.17"></p><p>运行之后可以在结果中查看，每个值都打印出来了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyu00jzsj31740katg7.jpg" alt="截屏2021-04-23 下午8.47.26"></p><h4 id="Result-variable-name"><a href="#Result-variable-name" class="headerlink" title="Result variable name"></a>Result variable name</h4><blockquote><p>接收全部结果，并以列表展示</p></blockquote><p>添加一个名为「allvar」的变量接收</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyo2meetj31740s57a2.jpg" alt="定义"></p><p>查看结果</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allvar=[{mobile=13527104953, id=25, gqid=126361, identity=1e7a82646a503f41, token=rjNWTXOSU8g68V62fcqgEMm4ivcNhvV/W7C/k2G8kc+qYRbmw53LuAfcwFRAuT8pxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13528223194, id=29, gqid=126182, identity=640d783c00a09e98, token=YeCOmrviJNaF6nhhSI4Lqq3sBrTRxAT4m0vZbrLALFDOiIl02I+7z//l7vPA/s5XxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13560693138, id=40, gqid=124571, identity=7f897d7fd70df90a, token=bu3nXFfaVsqCIZ2eKOQDu8Ah/UfTTez3iPyWRSH3hgFY5AQFvR7kcg9gGdxq/0kTxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13560696226, id=51, gqid=126474, identity=8a989d323fde98f1, token=pEOeKYMBmmPWnT+CkxUKCj249HbCPHFkgH6FoOjrDcWQtElKwuYUjVwvP1SaDvznxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13527104943, id=78, gqid=4000000, identity=0da609ddca720332, token=cwjgPJCiSp/zom1v/xG39CkpdxgjTKvts+NVk+sVMzMfEtHIhoe56Ch2gNFKjesdxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13527104143, id=79, gqid=4000001, identity=195006160bc11f4f, token=JTQBPw32Sq88b5MjfrsA/eErfhax5EHrvVdzumTtRV+yXd0odVFMF8N93QEbnLTYxRU/jxaEwo/fQbjJJq9BrA==}]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptynxpyg2j31740s5497.jpg" alt="结果"></p><h2 id="使用JDBC批量造数据"><a href="#使用JDBC批量造数据" class="headerlink" title="使用JDBC批量造数据"></a>使用JDBC批量造数据</h2><blockquote><p>思路：循环执行insert语句</p></blockquote><h3 id="使用SQLite存储数据"><a href="#使用SQLite存储数据" class="headerlink" title="使用SQLite存储数据"></a>使用<code>SQLite</code>存储数据</h3><p>先连接数据库</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0762o9kj31740s2jy7.jpg" alt="连接数据库"></p><p>创建一张表</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu07li9hvj31740s244t.jpg" alt="创建表"></p><p>调用注册接口</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu08jac88j31740s2agt.jpg" alt="注册接口"></p><p>将注册结果插入到数据库中</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu07xb1e3j31740s20z1.jpg" alt="插入表"></p><p>查看结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu08zaryfj30xr0u0tev.jpg" alt="查看结果"></p><p>修改「线程组」的次数为1000次运行后查看数据库</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0c7veduj30xr0u0gus.jpg" alt="查看结果"></p><p>新建「JDBC Request」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0fy2cvlj31740s2wl1.jpg" alt="JDBC Request"></p><p>新建一个「保存响应到文件」</p><p>去除勾选「Dont add number to prefix」和「Dont add content type suffix」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0fmwcl5j31740s2wkz.jpg" alt="保存响应到文件"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0jrnmdpj30ps0qpgrw.jpg" alt="查看结果"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>使用数据库的优势：可以指定读取n行，每次操作消耗小</p><p>使用csv文件每次需要打开整个文件后进行读取</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;12-使用JDBC读取与写入数据&quot;&gt;&lt;a href=&quot;#12-使用JDBC读取与写入数据&quot; class=&quot;headerlink&quot; title=&quot;12-使用JDBC读取与写入数据&quot;&gt;&lt;/a&gt;12-使用JDBC读取与写入数据&lt;/h1&gt;&lt;h2 id=&quot;JDBC注意点&quot;&gt;&lt;a href=&quot;#JDBC注意点&quot; class=&quot;headerlink&quot; title=&quot;JDBC注意点&quot;&gt;&lt;/a&gt;JDBC注意点&lt;/h2&gt;&lt;h3 id=&quot;SQL语句&quot;&gt;&lt;a href=&quot;#SQL语句&quot; class=&quot;headerlink&quot; title=&quot;SQL语句&quot;&gt;&lt;/a&gt;SQL语句&lt;/h3&gt;&lt;p&gt;建议不要带&lt;code&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一个jdbc request中不要写多个sql，默认只能支持一条sql&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>11-其他协议</title>
    <link href="http://zx490336534.github.io/article/49ec7e33.html"/>
    <id>http://zx490336534.github.io/article/49ec7e33.html</id>
    <published>2021-04-22T14:56:00.000Z</published>
    <updated>2021-04-22T14:34:11.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-其他协议"><a href="#11-其他协议" class="headerlink" title="11-其他协议"></a>11-其他协议</h1><h2 id="CSV数据文件设置"><a href="#CSV数据文件设置" class="headerlink" title="CSV数据文件设置"></a>CSV数据文件设置</h2><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><ul><li><p>通过「浏览」来选择，这个路径是「绝对路径」</p></li><li><p>「相对路径」</p></li></ul><p>写法：</p><p>使用<code>./</code> 或<code>.\</code>开始。建议使用<code>.\</code>。因为这个是linux下的写法，并且在windows下也可以正常使用</p><p>从哪个地方相对开始：</p><p>从当前<code>jmx</code>文件保存的路径</p><span id="more"></span><h3 id="忽略首行"><a href="#忽略首行" class="headerlink" title="忽略首行"></a>忽略首行</h3><p>选择「True」，则从第二行开始</p><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>默认以「，」来进行分隔</p><p>当分隔出多列，但是其中某些列不需要使用。在「变量名称」中使用「空格+英文逗号」进行占位</p><h3 id="是否允许带引号（英文双引号）"><a href="#是否允许带引号（英文双引号）" class="headerlink" title="是否允许带引号（英文双引号）"></a>是否允许带引号（英文双引号）</h3><ul><li>True：引用变量携带引号</li><li>False：引用变量自动去除引号</li></ul><h3 id="遇到文件结束符再次循环"><a href="#遇到文件结束符再次循环" class="headerlink" title="遇到文件结束符再次循环"></a>遇到文件结束符再次循环</h3><p>比如文件有2行，循环6次，</p><ul><li>True：则2行2行的运行6次</li><li>False：运行2行后剩余4次运行失败</li></ul><h3 id="遇到文件结束符停止线程"><a href="#遇到文件结束符停止线程" class="headerlink" title="遇到文件结束符停止线程"></a>遇到文件结束符停止线程</h3><ul><li>True：文件读取完停止任务</li><li>False：运行到线程次数结束</li></ul><h2 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h2><blockquote><p>soap</p><p>jdbc</p><p>websocket</p><p>mq</p><p>dubbo</p></blockquote><h3 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h3><p><code>webservice</code>是一个web的应用程序，使用xml向外界暴露可供调用的API接口</p><p>SOAP以「http+xml」进行数据传输</p><p>测试地址：<a href="http://www.webxml.com.cn/zh_cn/web_services.aspx">http://www.webxml.com.cn/zh_cn/web_services.aspx</a></p><p> 获得中国省份、直辖市、地区和与之对应的ID：<a href="http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?op=getRegionProvince">http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?op=getRegionProvince</a></p><h4 id="soap1-1"><a href="#soap1-1" class="headerlink" title="soap1.1"></a>soap1.1</h4><blockquote><p>xml中为soap</p><p>头部中需要有：<code>SOAPAction</code></p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /WebServices/WeatherWS.asmx HTTP/1.1</span><br><span class="line">Host: ws.webxml.com.cn</span><br><span class="line">Content-Type: text/xml; charset=utf-8</span><br><span class="line">Content-Length: length</span><br><span class="line">SOAPAction: "http://WebXml.com.cn/getRegionProvince"</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soap</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">getRegionProvince</span> <span class="attr">xmlns</span>=<span class="string">"http://WebXml.com.cn/"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlmhps1aj313v0df75y.jpg" alt="请求头"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlmcplrpj313v0dfq5o.jpg" alt="请求"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlmsoi07j313v0rjte1.jpg" alt="结果"></p><h4 id="soap1-2"><a href="#soap1-2" class="headerlink" title="soap1.2"></a>soap1.2</h4><blockquote><p>xml中为soap12</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /WebServices/WeatherWS.asmx HTTP/1.1</span><br><span class="line">Host: ws.webxml.com.cn</span><br><span class="line">Content-Type: application/soap+xml; charset=utf-8</span><br><span class="line">Content-Length: length</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap12:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soap12</span>=<span class="string">"http://www.w3.org/2003/05/soap-envelope"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soap12:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">getRegionProvince</span> <span class="attr">xmlns</span>=<span class="string">"http://WebXml.com.cn/"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soap12:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap12:Envelope</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlr3sxh0j313v06f404.jpg" alt="请求头"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlralvq2j313v0cnn05.jpg" alt="请求体"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlrinj26j313v0r4q8h.jpg" alt="结果"></p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><blockquote><p>是一种用于执行SQL语句的JAVA API</p><p>通过这个api可以直接直接sql脚本</p></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><p>将<code>mysql-connector-java-***.jar</code>放到jmeter的<code>lib</code>目录下</p></li><li><p>重启jmeter</p></li><li><p>配置元件Config Element&gt;数据库连接配置JDBC Connection Configuration</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlx69z6cj308k0bvjso.jpg" alt="截屏2021-04-21 下午7.49.36"></p><blockquote><p>jmeter中引入jar包，建议放入到<code>lib</code>路径下</p><p>不推荐使用引入的方式</p></blockquote><h3 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h3><ul><li>添加取样器&gt;JDBC Request</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprm32be3qj306c0ceq43.jpg" alt="取样器"></p><ul><li>添加数据库连接信息</li></ul><ol><li>Variable Name for created pool 创建一个连接池</li><li>database URL：不同数据库的连接方式不一样。</li></ol><p>sqLite:<code>jdbc:sqlite:c:\*.db</code></p><p>mysql:<code>jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt;</code></p><p>Oracle:<code>oracle:thin:@//&lt;host&gt;:&lt;port&gt;/ServiceName</code></p><p>Microsoft SQL Server:<code>jdbc:sqlserver://&lt;server_name&gt;:&lt;port&gt;</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmc27quoj30xr0u0wlr.jpg" alt="数据库连接"></p><ol start="3"><li>在取样器中填写上连接池的名字</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmeo3ddyj313v07y0ub.jpg" alt="取样器"></p><ol start="4"><li>运行后查看结果</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmfcvpz8j313v0tmahx.jpg" alt="运行结果"></p><h3 id="Query-Type"><a href="#Query-Type" class="headerlink" title="Query Type"></a>Query Type</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmmw1zj8j313v0ax76q.jpg" alt="查询方式"></p><p>不带参数：</p><ul><li>Select Statement 查询</li><li>Update Statement 更新</li></ul><p>携带参数：</p><ul><li>Prepared Select Statement</li><li>Prepared Update Statement</li></ul><h2 id="脚本性能转换"><a href="#脚本性能转换" class="headerlink" title="脚本性能转换"></a>脚本性能转换</h2><ul><li>逻辑控制器：事务控制器</li><li>造测试数据库：DDT数据驱动性能测试（CSV文件设置）</li><li>线程组配置（性能场景设计）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;11-其他协议&quot;&gt;&lt;a href=&quot;#11-其他协议&quot; class=&quot;headerlink&quot; title=&quot;11-其他协议&quot;&gt;&lt;/a&gt;11-其他协议&lt;/h1&gt;&lt;h2 id=&quot;CSV数据文件设置&quot;&gt;&lt;a href=&quot;#CSV数据文件设置&quot; class=&quot;headerlink&quot; title=&quot;CSV数据文件设置&quot;&gt;&lt;/a&gt;CSV数据文件设置&lt;/h2&gt;&lt;h3 id=&quot;文件名&quot;&gt;&lt;a href=&quot;#文件名&quot; class=&quot;headerlink&quot; title=&quot;文件名&quot;&gt;&lt;/a&gt;文件名&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过「浏览」来选择，这个路径是「绝对路径」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「相对路径」&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写法：&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;./&lt;/code&gt; 或&lt;code&gt;.\&lt;/code&gt;开始。建议使用&lt;code&gt;.\&lt;/code&gt;。因为这个是linux下的写法，并且在windows下也可以正常使用&lt;/p&gt;
&lt;p&gt;从哪个地方相对开始：&lt;/p&gt;
&lt;p&gt;从当前&lt;code&gt;jmx&lt;/code&gt;文件保存的路径&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>10-逻辑控制器</title>
    <link href="http://zx490336534.github.io/article/ad741ca2.html"/>
    <id>http://zx490336534.github.io/article/ad741ca2.html</id>
    <published>2021-04-19T14:56:00.000Z</published>
    <updated>2021-04-22T14:34:11.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-逻辑控制器"><a href="#10-逻辑控制器" class="headerlink" title="10-逻辑控制器"></a>10-逻辑控制器</h1><h2 id="IF条件控制器"><a href="#IF条件控制器" class="headerlink" title="IF条件控制器"></a>IF条件控制器</h2><ol><li><code>Interpret Condition as Variable Expression?</code>默认勾选：</li></ol><ul><li><p>条件结果为<code>true</code>才会执行子取样器</p></li><li><p>需要使用<code>${__jexl3(,)}</code>和<code>${__groovy(,)}</code>进行逻辑判断</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${__jexl3(<span class="string">"${var1}"</span>==<span class="string">"value"</span>,)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppdhvqu4lj313u0cetbo.jpg" alt="如果（if）控制器"></p><ol start="2"><li>不勾选<code>Interpret Condition as Variable Expression?</code>会直接用<code>JavaScript</code>   语法</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"${var1}"</span>==<span class="string">"value"</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><code>Evaluate for all children?</code> 执行子节点前先计算表达式真假<span id="more"></span><h2 id="循环控制器"><a href="#循环控制器" class="headerlink" title="循环控制器"></a>循环控制器</h2></li></ol><p>循环次数 控制循环的次数</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppdxx7f5aj30tp04tjry.jpg" alt="循环控制器"></p><p>循环控制器+计数器=foreach控制器</p><p>循环完内容后还是会打印，直到达到循环次数</p><h2 id="foreach控制器"><a href="#foreach控制器" class="headerlink" title="foreach控制器"></a>foreach控制器</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppdyz9ssyj30tp084758.jpg" alt="foreach控制器"></p><p>假如有3个变量：<code>user_1</code>,<code>user_2</code>,<code>user_3</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppe1ub9qcj30tp084my4.jpg" alt="填写"></p><p>之后使用<code>${dr}</code>就可以使用这个变量了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)</span><br></pre></td></tr></tbody></table></figure><p>循环内容被循环完之后不再继续打印</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>jdbc协议，从数据库中，获取数据，进行循环使用</p><h2 id="仅一次控制器"><a href="#仅一次控制器" class="headerlink" title="仅一次控制器"></a>仅一次控制器</h2><p>每个用户都只执行一次</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppey4vzqhj30tp084jry.jpg" alt="仅一次控制器"></p><h2 id="临界部分控制器"><a href="#临界部分控制器" class="headerlink" title="临界部分控制器"></a>临界部分控制器</h2><p>把jmeter脚本的并行执行，强制变成串行执行</p><ul><li><p>固定锁，强制把多用户并行执行，变成单通道串行执行</p></li><li><p>动态锁，锁名称修改为<code>global_lock_${__threadNum}</code></p></li></ul><blockquote><h1 id="Critical-Section-Controller-临界部分控制器-到底该如何用"><a href="#Critical-Section-Controller-临界部分控制器-到底该如何用" class="headerlink" title="Critical Section Controller (临界部分控制器) 到底该如何用?"></a>Critical Section Controller (临界部分控制器) 到底该如何用?</h1><p>有同学在使用 jmeter 做性能测试的时候，有这样一个诉求，就是一个完整的业务包含多个接口请求，且有先后顺序。在做性能测试的时候，要求接口请求顺序永远按照自己定义好的请求顺序执行。</p><p>于是，他就在 jmeter 中线程组下按顺序添加了多个接口请求取样器，模拟并发请求调试。看到效果如下图(图一)：</p><p><img src="http://testingpai.com/upload/file/2020/5eed103b-4553-4591-8654-14e4accf7b97.gif" alt="image.png"></p><p>脚本调试是通了，但是，他看到查看结果树中显示请求结果数据好像不是按照顺序请求(没有仔细去分析，根据结果自认为的)，认为这样不符合自己的诉求，于是开始寻找新的办法。通过长时间的摸索，终于找到了一个貌似能解决的办法，增加一个 critical section controller(临界部分控制器)，认为增加一个锁，能控制执行顺序。于是修改脚本生成如图(图二):</p><p><img src="http://testingpai.com/upload/file/2020/2ed3450c-0ec3-4376-968c-bfb6be4c193c.gif" alt="image.png"></p><p>看到 查看结果树中显示的请求顺序与预期一致，是按照接口的顺序执行的，于是认为这样就是正确的。</p><p><strong>但是</strong>，不知道大家看了这两个图后，有没有注意一个细节？</p><p><em>第一种方式：</em></p><p><img src="http://testingpai.com/upload/file/2020/7dd05c73-246f-41a9-93ba-068e30cc979c.jpg" alt="image.png"></p><p>728 x 334 1199 x 550</p><p><img src="http://testingpai.com/upload/file/2020/ef1615be-70e6-46b9-8dfe-480bbf2f1f3a.jpg" alt="image.png"></p><p><em>第二种方式：</em></p><p><img src="http://testingpai.com/upload/file/2020/e8c17d01-0b4e-4f09-a386-07230731897e.jpg" alt="image.png"></p><p>728 x 338 1197 x 555</p><p><img src="http://testingpai.com/upload/file/2020/669f3afc-0226-4666-a430-ea1c7cdb61a9.jpg" alt="image.png"></p><p>第一种方式，整个执行过程只用了 4 秒种，第二种方式，执行过程耗时 13 秒，汇总报告中的吞吐量是按每分钟计算。*</p><p>这句话什么意思呢？就是说，第二种方式，虽然眼睛是看到了查看结果树中的数据是按照自定义的顺序执行的，但是执行时间远远大于第一种方式，换句话说，服务器的压力要远远小于第一种方式。<strong>人为的方式导致性能测试指标值错误</strong>。</p><p><strong>哪我们应该怎么做呢？</strong></p><p>首先，对于这样一种，遇到问题时，自主思考和学习的行为能力，还是值得表扬和肯定的。只是，需要学习的时候，再深入一点点，再细致一点点。</p><p>接下来，我们讲讲该怎么做。首先，我们要知道，在 jmeter 中，同层级无逻辑控制器控制的取样器，执行顺序是从上往下，顺序执行的。这句话，怎么理解？在我们单个用户脚本调试阶段，执行顺序是从上往下；在多用户并发时，每一个并发用户(线程)，也都是从上往下执行的，只是因为是并发，同一时刻，可能有不同用户(线程)做完了不同接口请求，查看结果树只是按照完成时间的先后显示请求结果。为了验证我说的这句话，我们可以再看下下图(图三)</p><p><img src="http://testingpai.com/upload/file/2020/5792442b-64e9-4965-b569-94793a97880b.gif" alt="image.png"></p><p>从查看结果树中，我们看 ThreadNum 号想同的请求，请求的顺序是不是都从 sample1 到 sample3。这样，其实已经满足了预期诉求。</p><p>哪 critical section controller(临界部分控制器)到底怎么用呢？我们先看下官方给我们的解答：</p><p><img src="http://testingpai.com/upload/file/2020/798642a1-cebb-4b3a-aefe-8e8d1825f959.jpg" alt="image.png"></p><p>临界部分控制器确保其子元素(采样器\控制器等)将仅由一个线程执行，在执行控制器的子元素之前先命名一个锁锁定。</p><p><img src="http://testingpai.com/upload/file/2020/f76f4d50-eab9-4e3a-b0a8-efc076372bfc.jpg" alt="image.png"></p><p>说直白点，就是并发请求(线程)这个控制器时，会先根据‘锁名称’生成一个‘锁’，锁定控制器下的所有子元素，等到所有子元素都执行完‘锁’才会释放，下一个请求(线程)才能执行，即，把原本的并发请求的并行处理方式，变成了串行处理。所以，就会看到上面我们说到的第二种方式的时间远远大于第一种方式。哪如何让 critical section controller 可以并行处理呢？我们再看看官方给的解释，它说的是，线程执行时，先根据‘锁名称’生成锁，串行，是因为锁名称相同，已经被占用，无法生成新的锁，所以只能等待锁的释放，哪我们是不是可以考虑让锁名称变成动态的呢？每个线程要用的时候，生成一个新的锁名称而且不重复，是不是就可以并行处理了。想要锁名称变成动态，方法很多，使用随机数函数、使用时间戳函数、使用线程数函数……, 是不是很多，只要用个自动生成值的函数就可以。</p><p><img src="http://testingpai.com/upload/file/2020/49d0dcc6-62d0-4023-adc7-342cd922e3fe.gif" alt="image.png"></p><p>这个，就是修改了 critical section controller 的锁名称为动态值，当某个线程调用时，就会自动生成一个新的锁名称。看最后执行的时间 5 秒，汇总报告中的吞吐量，是不是和第一种方式基本相同？</p><p>当然，有的同学比较追求完美，就是想看到最后的结果一定要按顺序展示。没问题，满足你的要求。</p><p><img src="http://testingpai.com/upload/file/2020/d924c77b-51eb-435f-932a-cdd02518e29b.gif" alt="image.png"></p><p>是不是，看到结果也是你指定的顺序，执行的时间也和第一种相同，最后的汇总报告中，看到了一个事务总数据。</p><p>好了，critical section controller(临界部分控制器)的使用，你是否已经掌握了呢？</p><p>作者：Allen<br>链接：<a href="http://testingpai.com/article/1595507267745">http://testingpai.com/article/1595507267745</a><br>来源：测试派<br>协议：CC BY-SA 4.0 <a href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></p></blockquote><h2 id="随机控制器"><a href="#随机控制器" class="headerlink" title="随机控制器"></a>随机控制器</h2><p>多个取样器中随机选一个</p><h2 id="随机顺序控制器"><a href="#随机顺序控制器" class="headerlink" title="随机顺序控制器"></a>随机顺序控制器</h2><p>多个取样器随机顺序执行</p><h2 id="吞吐量控制器"><a href="#吞吐量控制器" class="headerlink" title="吞吐量控制器"></a>吞吐量控制器</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppfcgse61j30tp084wf7.jpg" alt="吞吐量"></p><h1 id="DDT数据驱动性能测试"><a href="#DDT数据驱动性能测试" class="headerlink" title="DDT数据驱动性能测试"></a>DDT数据驱动性能测试</h1><h2 id="CSV文件"><a href="#CSV文件" class="headerlink" title="CSV文件"></a>CSV文件</h2><p>文本文件，是用英文逗号分隔的文本文件</p><h2 id="CSV数据文件设置"><a href="#CSV数据文件设置" class="headerlink" title="CSV数据文件设置"></a>CSV数据文件设置</h2><p>这个方法，是使用人数最多的数据驱动性能测试方法</p><p>但是，这个不是最优的数据驱性能测试方法</p><ul><li>文件名：必传，文本文件（txt，csv，xls）</li></ul><blockquote><p> 推荐用txt，是操作系统默认的文本文件格式</p><p>txt默认编码是utf8</p></blockquote><blockquote><p>csv文件，保存采用默认编码，不是utf8</p><p>csv文件打开比txt消耗大</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppfuo16qdj30tp0csjt3.jpg" alt="csv数据文件设置"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;10-逻辑控制器&quot;&gt;&lt;a href=&quot;#10-逻辑控制器&quot; class=&quot;headerlink&quot; title=&quot;10-逻辑控制器&quot;&gt;&lt;/a&gt;10-逻辑控制器&lt;/h1&gt;&lt;h2 id=&quot;IF条件控制器&quot;&gt;&lt;a href=&quot;#IF条件控制器&quot; class=&quot;headerlink&quot; title=&quot;IF条件控制器&quot;&gt;&lt;/a&gt;IF条件控制器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Interpret Condition as Variable Expression?&lt;/code&gt;默认勾选：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;条件结果为&lt;code&gt;true&lt;/code&gt;才会执行子取样器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要使用&lt;code&gt;${__jexl3(,)}&lt;/code&gt;和&lt;code&gt;${__groovy(,)}&lt;/code&gt;进行逻辑判断&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;${__jexl3(&lt;span class=&quot;string&quot;&gt;&quot;${var1}&quot;&lt;/span&gt;==&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;,)}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008eGmZEly1gppdhvqu4lj313u0cetbo.jpg&quot; alt=&quot;如果（if）控制器&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;不勾选&lt;code&gt;Interpret Condition as Variable Expression?&lt;/code&gt;会直接用&lt;code&gt;JavaScript&lt;/code&gt;   语法&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;${var1}&quot;&lt;/span&gt;==&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;code&gt;Evaluate for all children?&lt;/code&gt; 执行子节点前先计算表达式真假&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>9-正则提取器</title>
    <link href="http://zx490336534.github.io/article/c04862c6.html"/>
    <id>http://zx490336534.github.io/article/c04862c6.html</id>
    <published>2021-04-19T13:22:00.000Z</published>
    <updated>2021-04-22T14:34:11.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-正则提取器"><a href="#9-正则提取器" class="headerlink" title="9-正则提取器"></a>9-正则提取器</h1><h2 id="正则提取器"><a href="#正则提取器" class="headerlink" title="正则提取器"></a>正则提取器</h2><h3 id="apply-to"><a href="#apply-to" class="headerlink" title="apply to"></a>apply to</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl6zeymgoj30ti09bt9n.jpg" alt="apply to"></p><ul><li>Main sample and sub-samples 主取样器+子取样器</li><li>Main sample only 主取样器</li><li>Sub-sample only 子取样器</li><li>JMeter Variable Name to use：从一个变量中再提取想要的信息。直接写变量名称即可</li></ul><p>正则提取式的写法：左边界(正则式)右边界</p><p>「模版」的固定格式：<code>$数字$</code> 这个数字从1开始</p><span id="more"></span><h3 id="提取信息测试"><a href="#提取信息测试" class="headerlink" title="提取信息测试"></a>提取信息测试</h3><p>填写后进行测试：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl79zzutzj30ti09b3zj.jpg" alt="填写"></p><p>在「调试取样器」中可以看到<code>reg_msg</code>被正确赋值为我们正则匹配到的内容</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7awymsvj30ti0mctd7.jpg" alt="查看结果"></p><h3 id="进行二次提取"><a href="#进行二次提取" class="headerlink" title="进行二次提取"></a>进行二次提取</h3><p>使用「JMeter Variable Name to use」对「token」进行二次提取</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7ovralhj30ti099my7.jpg" alt="二次提取"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7q03i4jj30ti0o7gpt.jpg" alt="结果"></p><h3 id="提取响应头"><a href="#提取响应头" class="headerlink" title="提取响应头"></a>提取响应头</h3><p>选择「Request Headers」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7tv2q06j30ti09odgx.jpg" alt="响应头"></p><p>运行测试</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7uqj0ocj30ti0qn433.jpg" alt="查看结果"></p><h2 id="脚本性能转换"><a href="#脚本性能转换" class="headerlink" title="脚本性能转换"></a>脚本性能转换</h2><p>在jmeter中，默认一个取样器的一次请求，就是一个事务</p><p>如果想要把多个接口<strong>合并</strong>成为一个事务，合计「tps」值。</p><p>需要添加「事务控制器」 一定要勾选「generate parent sample」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl8cxvhz5j30ti056t8z.jpg" alt="事务控制器"></p><h2 id="聚合报告"><a href="#聚合报告" class="headerlink" title="聚合报告"></a>聚合报告</h2><ul><li>样本：事务的总请求次数</li><li>平均值、中位数、90%、95%、99%、最小值、最大值：都是响应时间<ul><li>xx% 的时间都是小于xxx响应时间</li></ul></li><li>异常</li><li>吞吐量：在固定不变的并发用户数情况下，且没有网络瓶颈时，与tps相等</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl8ffg929j313u0biact.jpg" alt="聚合报告"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;9-正则提取器&quot;&gt;&lt;a href=&quot;#9-正则提取器&quot; class=&quot;headerlink&quot; title=&quot;9-正则提取器&quot;&gt;&lt;/a&gt;9-正则提取器&lt;/h1&gt;&lt;h2 id=&quot;正则提取器&quot;&gt;&lt;a href=&quot;#正则提取器&quot; class=&quot;headerlink&quot; title=&quot;正则提取器&quot;&gt;&lt;/a&gt;正则提取器&lt;/h2&gt;&lt;h3 id=&quot;apply-to&quot;&gt;&lt;a href=&quot;#apply-to&quot; class=&quot;headerlink&quot; title=&quot;apply to&quot;&gt;&lt;/a&gt;apply to&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008eGmZEly1gpl6zeymgoj30ti09bt9n.jpg&quot; alt=&quot;apply to&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Main sample and sub-samples 主取样器+子取样器&lt;/li&gt;
&lt;li&gt;Main sample only 主取样器&lt;/li&gt;
&lt;li&gt;Sub-sample only 子取样器&lt;/li&gt;
&lt;li&gt;JMeter Variable Name to use：从一个变量中再提取想要的信息。直接写变量名称即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正则提取式的写法：左边界(正则式)右边界&lt;/p&gt;
&lt;p&gt;「模版」的固定格式：&lt;code&gt;$数字$&lt;/code&gt; 这个数字从1开始&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
