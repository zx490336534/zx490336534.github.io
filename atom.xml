<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>测试游记</title>
  
  
  <link href="http://zx490336534.github.io/atom.xml" rel="self"/>
  
  <link href="http://zx490336534.github.io/"/>
  <updated>2021-05-16T09:22:38.601Z</updated>
  <id>http://zx490336534.github.io/</id>
  
  <author>
    <name>测试游记</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20-grafana+influxdb</title>
    <link href="http://zx490336534.github.io/article/bc9c5188.html"/>
    <id>http://zx490336534.github.io/article/bc9c5188.html</id>
    <published>2021-05-16T00:30:00.000Z</published>
    <updated>2021-05-16T09:22:38.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20-grafana-influxdb"><a href="#20-grafana-influxdb" class="headerlink" title="20-grafana+influxdb"></a>20-grafana+influxdb</h1><blockquote><p>一款用go编写的开源应用，用于大规模指标数据的可视化展示，是网络架构和应用分析中最流行的时序数据展示工具</p></blockquote><p><code>grafana</code>:展示时序数据库数据的工具</p><p><code>influxdb</code>:时序数据库，存数据</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>grafana+influxdb不能安装在被测服务器上</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo opt]# yum install grafana-7.4.3-1.x86_64.rpm -y</span><br></pre></td></tr></tbody></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo opt]# systemctl restart grafana-server</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.9.3:3000/login</span><br><span class="line">账号密码都为admin</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjzlusawqj30xr0u0qf6.jpg" alt="截屏2021-05-16 上午8.58.55"></p><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>下载地址<code>https://dl.influxdata.com/influxdb/releases/influxdb-1.7.8.x86_64.rpm</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo opt]# yum install influxdb-2.0.2.x86_64.rpm -y</span><br></pre></td></tr></tbody></table></figure><h2 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo opt]# influxd</span><br></pre></td></tr></tbody></table></figure><h2 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo ~]# influx</span><br></pre></td></tr></tbody></table></figure><h3 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></tbody></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database jmeter;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop databases jmeter;</span><br></pre></td></tr></tbody></table></figure><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use jmeter;</span><br></pre></td></tr></tbody></table></figure><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></tbody></table></figure><h3 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@dubbo ~]# influx</span><br><span class="line">Connected to http://localhost:8086 version 1.7.8</span><br><span class="line">InfluxDB shell version: 1.7.8</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> create database jmeter;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line">jmeter</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use jmeter;</span></span><br><span class="line">Using database jmeter</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br></pre></td></tr></tbody></table></figure><h2 id="数据存入"><a href="#数据存入" class="headerlink" title="数据存入"></a>数据存入</h2><p>添加一个「后端监听器」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjz04qhlwj30xr0u0dos.jpg" alt="后端监听器"></p><p>修改IP地址</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxdbUrl:http://192.168.9.3:8086/write?db=jmeter</span><br></pre></td></tr></tbody></table></figure><h2 id="grafana中添加数据"><a href="#grafana中添加数据" class="headerlink" title="grafana中添加数据"></a>grafana中添加数据</h2><h3 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqk063muq2j313p0ex796.jpg" alt="添加数据源"></p><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqk06963xhj30xr0u0dov.jpg" alt="选择数据库"></p><h3 id="填写数据库信息"><a href="#填写数据库信息" class="headerlink" title="填写数据库信息"></a>填写数据库信息</h3><h3 id="导入模版"><a href="#导入模版" class="headerlink" title="导入模版"></a><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqk07abuoij30xr0u07d6.jpg" alt="填写数据库信息">导入模版</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdo7dltuj306m0b9jrn.jpg" alt="导入"></p><p>输入模版编码为<code>5496</code>后点击「Load」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdooyzugj30xr0u0q9h.jpg" alt="模版编码"></p><p>修改「Measurement name」与Jmeter中设置的一致</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdq4z5muj30r705z0t7.jpg" alt="jmeter的设置"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdpknfedj30xr0u0wmi.jpg" alt="修改Measurement name"></p><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>运行jmeter后，查看数据库</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdvbmctnj30xv0u0481.jpg" alt="数据展示"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqkdy8bu0mj31g90u0gut.jpg" alt="查看数据"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;20-grafana-influxdb&quot;&gt;&lt;a href=&quot;#20-grafana-influxdb&quot; class=&quot;headerlink&quot; title=&quot;20-grafana+influxdb&quot;&gt;&lt;/a&gt;20-grafana+influxdb&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一款用go编写的开源应用，用于大规模指标数据的可视化展示，是网络架构和应用分析中最流行的时序数据展示工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;grafana&lt;/code&gt;:展示时序数据库数据的工具&lt;/p&gt;
&lt;p&gt;&lt;code&gt;influxdb&lt;/code&gt;:时序数据库，存数据&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;grafana+influxdb不能安装在被测服务器上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@dubbo opt]# yum install grafana-7.4.3-1.x86_64.rpm -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@dubbo opt]# systemctl restart grafana-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>19-nmon</title>
    <link href="http://zx490336534.github.io/article/5ac52f3c.html"/>
    <id>http://zx490336534.github.io/article/5ac52f3c.html</id>
    <published>2021-05-15T23:34:00.000Z</published>
    <updated>2021-05-16T00:32:16.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-nmon"><a href="#19-nmon" class="headerlink" title="19-nmon"></a>19-nmon</h1><h2 id="nmon"><a href="#nmon" class="headerlink" title="nmon"></a>nmon</h2><blockquote><p><a href="http://nmon.sourceforge.net/">http://nmon.sourceforge.net/</a></p><p>C语言编写本身资源消耗非常小</p></blockquote><p>部署到被测试服务器上，可以监控不同的Linux系统（不同的linux发行版本，nmon命令是不同的）</p><h3 id="查看Linux的发行版本"><a href="#查看Linux的发行版本" class="headerlink" title="查看Linux的发行版本"></a>查看Linux的发行版本</h3><blockquote><p><code>cd /etc</code>查看路径下有没有「release」关键字的文件</p></blockquote><h4 id="查看redhat家族的发行版本"><a href="#查看redhat家族的发行版本" class="headerlink" title="查看redhat家族的发行版本"></a>查看redhat家族的发行版本</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h4 id="查看Ubuntu的发行版本"><a href="#查看Ubuntu的发行版本" class="headerlink" title="查看Ubuntu的发行版本"></a>查看Ubuntu的发行版本</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@zx:/# cat /etc/os-release </span><br><span class="line">NAME="Ubuntu"</span><br><span class="line">VERSION="20.04.1 LTS (Focal Fossa)"</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME="Ubuntu 20.04.1 LTS"</span><br><span class="line">VERSION_ID="20.04"</span><br><span class="line">HOME_URL="https://www.ubuntu.com/"</span><br><span class="line">SUPPORT_URL="https://help.ubuntu.com/"</span><br><span class="line">BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"</span><br><span class="line">PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"</span><br><span class="line">VERSION_CODENAME=focal</span><br><span class="line">UBUNTU_CODENAME=focal</span><br></pre></td></tr></tbody></table></figure><h3 id="确定下载的文件"><a href="#确定下载的文件" class="headerlink" title="确定下载的文件"></a>确定下载的文件</h3><p>进入<code>http://nmon.sourceforge.net/pmwiki.php?n=Site.Download</code>找到有符合当前Linux版本信息的文件下载</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 nmon16m_helpsystems]# ls</span><br><span class="line">nmon_power_64_centos6      nmon_power_64_linux   nmon_x86_64_mint19      nmon_x86_64_rhel8</span><br><span class="line">nmon_power_64_centos7      nmon_power_64_rhel6   nmon_x86_64_oel5        nmon_x86_64_sles10</span><br><span class="line">nmon_power_64le_centos7    nmon_power_64_rhel7   nmon_x86_64_oel6        nmon_x86_64_sles11</span><br><span class="line">nmon_power_64le_centos8    nmon_power_64_sles11  nmon_x86_64_oel7        nmon_x86_64_sles12</span><br><span class="line">nmon_power_64le_linux      nmon_x86_64_centos5   nmon_x86_64_oel8        nmon_x86_64_sles15</span><br><span class="line">nmon_power_64le_rhel7      nmon_x86_64_centos6   nmon_x86_64_opensuse10  nmon_x86_64_ubuntu14</span><br><span class="line">nmon_power_64le_rhel7_gpu  nmon_x86_64_centos7   nmon_x86_64_opensuse11  nmon_x86_64_ubuntu16</span><br><span class="line">nmon_power_64le_rhel8      nmon_x86_64_centos8   nmon_x86_64_opensuse12  nmon_x86_64_ubuntu18</span><br><span class="line">nmon_power_64le_sles12     nmon_x86_64_debian08  nmon_x86_64_opensuse15  nmon_x86_64_ubuntu19</span><br><span class="line">nmon_power_64le_ubuntu14   nmon_x86_64_debian09  nmon_x86_64_rhel5</span><br><span class="line">nmon_power_64le_ubuntu16   nmon_x86_64_debian10  nmon_x86_64_rhel6</span><br><span class="line">nmon_power_64le_ubuntu18   nmon_x86_64_mint18    nmon_x86_64_rhel7</span><br></pre></td></tr></tbody></table></figure><h3 id="nmon三种运行模式"><a href="#nmon三种运行模式" class="headerlink" title="nmon三种运行模式"></a>nmon三种运行模式</h3><h4 id="实时屏幕交互"><a href="#实时屏幕交互" class="headerlink" title="实时屏幕交互"></a>实时屏幕交互</h4><p>优点：可以通过屏幕实时看到服务器资源使用情况</p><p>缺点：只能看到，无法保存数据</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 nmon16m_helpsystems]# ./nmon_x86_64_centos7</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxipq9buj312o0pc0y2.jpg" alt="实时屏幕交互"></p><p><strong>常用命令</strong>：<code>cmdrtn</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxmfpresj30u01f6av9.jpg" alt="截屏2021-05-16 上午7.50.17"></p><ul><li>c:cpu信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxof6ct0j30jl03t0sw.jpg" alt="CPU"></p><p>CPU下面的数字表示有几核</p><p><code>User%</code>:用户态cpu的使用率</p><p><code>Sys%</code>:系统态cpu的使用率</p><p><code>Wait%</code>:等待的cpu占用率</p><p><code>Idle%</code>:空闲cpu的占用率</p><ul><li>m:内存</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxs2rjbgj30kc05qdgp.jpg" alt="内存"></p><ul><li>d:磁盘读写</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxsismz0j30kb04idge.jpg" alt="磁盘读写"></p><ul><li>r:资源</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxv1jqjaj30lc0b2myu.jpg" alt="资源"></p><ul><li>t:top命令</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxuqvwkqj30s40ceq55.jpg" alt="top"></p><ul><li>n:网络</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjxuhy55ej30k503ddg8.jpg" alt="网络"></p><h4 id="数据收集模式"><a href="#数据收集模式" class="headerlink" title="数据收集模式"></a>数据收集模式</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f            spreadsheet output format [note: default -s300 -c288]</span><br><span class="line">                         output file is &lt;hostname&gt;_YYYYMMDD_HHMM.nmon</span><br><span class="line">-s &lt;seconds&gt;  Time between snap shots - with "-c count" decides duration of the data capture</span><br><span class="line">-c &lt;number&gt;   The number of snapshots before nmon stops</span><br></pre></td></tr></tbody></table></figure><p><code>-f</code>=<code>-s 300 -c 288</code>每隔300秒收集一次数据，收集288次。收集完成后自动结束。总共会收集300*288=24小时</p><p><code>-s num</code>:间隔多长时间收集一次数据</p><p><code>-c num</code>:总共收集的次数</p><p>运行后会生成<code>vircent7_210327_1457.nmon</code></p><p>该文件打开后难以查看结果，需要导出后使用Excel宏解读</p><blockquote><p>解析的<code>nmon analyser v66.xlsm</code>文件，需要使用Office的Excel打开</p><p>打开后点击分析按钮，就可以查看到图表展示</p><p>链接: <a href="https://pan.baidu.com/s/183jY_ktWO3gxouIFb3KYfw">https://pan.baidu.com/s/183jY_ktWO3gxouIFb3KYfw</a>  密码: ri7h</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nmon_x86_64_centos7 -f #收集24小时</span><br><span class="line">./nmon_x86_64_centos7 -f -s2 -c200 #按照设定的间隔和次数收集</span><br><span class="line">./nmon_x86_64_centos7 -f -s2 -c200 -m /tmp/mon #指定输出到一个存在的文件夹路径下</span><br></pre></td></tr></tbody></table></figure><h4 id="定时收集模式"><a href="#定时收集模式" class="headerlink" title="定时收集模式"></a>定时收集模式</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Capacity Planning mode - use cron to run each day</span><br><span class="line">        -x            Sensible spreadsheet output for one day</span><br><span class="line">                      Every 15 mins for 1 day ( i.e. -ft -s 900 -c 96)</span><br><span class="line">        -X            Sensible spreadsheet output for busy hour</span><br><span class="line">                      Every 30 secs for 1 hour ( i.e. -ft -s 30 -c 120)</span><br><span class="line">        -z            Like -x but the output saved in /var/perf/tmp assuming root user</span><br></pre></td></tr></tbody></table></figure><p>-X:收集一小时</p><p>-x:收集一天</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;19-nmon&quot;&gt;&lt;a href=&quot;#19-nmon&quot; class=&quot;headerlink&quot; title=&quot;19-nmon&quot;&gt;&lt;/a&gt;19-nmon&lt;/h1&gt;&lt;h2 id=&quot;nmon&quot;&gt;&lt;a href=&quot;#nmon&quot; class=&quot;headerlink&quot; title=&quot;nmon&quot;&gt;&lt;/a&gt;nmon&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://nmon.sourceforge.net/&quot;&gt;http://nmon.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C语言编写本身资源消耗非常小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;部署到被测试服务器上，可以监控不同的Linux系统（不同的linux发行版本，nmon命令是不同的）&lt;/p&gt;
&lt;h3 id=&quot;查看Linux的发行版本&quot;&gt;&lt;a href=&quot;#查看Linux的发行版本&quot; class=&quot;headerlink&quot; title=&quot;查看Linux的发行版本&quot;&gt;&lt;/a&gt;查看Linux的发行版本&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;cd /etc&lt;/code&gt;查看路径下有没有「release」关键字的文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;查看redhat家族的发行版本&quot;&gt;&lt;a href=&quot;#查看redhat家族的发行版本&quot; class=&quot;headerlink&quot; title=&quot;查看redhat家族的发行版本&quot;&gt;&lt;/a&gt;查看redhat家族的发行版本&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@vircent7 ~]# cat /etc/redhat-release &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CentOS Linux release 7.8.2003 (Core)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>18-读取数据库数据进行性能测试</title>
    <link href="http://zx490336534.github.io/article/d51793d9.html"/>
    <id>http://zx490336534.github.io/article/d51793d9.html</id>
    <published>2021-05-15T12:32:00.000Z</published>
    <updated>2021-05-15T14:05:05.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-读取数据库数据进行性能测试"><a href="#18-读取数据库数据进行性能测试" class="headerlink" title="18-读取数据库数据进行性能测试"></a>18-读取数据库数据进行性能测试</h1><h2 id="用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？"><a href="#用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？" class="headerlink" title="用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？"></a>用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？</h2><h3 id="系统是否允许一个账号被同时登录多次？"><a href="#系统是否允许一个账号被同时登录多次？" class="headerlink" title="系统是否允许一个账号被同时登录多次？"></a>系统是否允许一个账号被同时登录多次？</h3><p>如果有互踢功能，那是不能使用同一个账号</p><h3 id="有没有缓存机制（数据库缓存）"><a href="#有没有缓存机制（数据库缓存）" class="headerlink" title="有没有缓存机制（数据库缓存）"></a>有没有缓存机制（数据库缓存）</h3><p>如果有，不能使用同一个账号</p><h3 id="造多个账号进行性能测试"><a href="#造多个账号进行性能测试" class="headerlink" title="造多个账号进行性能测试"></a>造多个账号进行性能测试</h3><ol><li>尽可能的在运行过程中，造足够量的账号</li><li>如果只有固定的一些账号可用时，做这种性能测试时，要记得带上「退出登录」接口</li><li>如果只有固定的一些账号可用时，不关心登录接口的信息，可用不用退出</li></ol><span id="more"></span><h2 id="直接使用数据库中数据进行性能测试"><a href="#直接使用数据库中数据进行性能测试" class="headerlink" title="直接使用数据库中数据进行性能测试"></a>直接使用数据库中数据进行性能测试</h2><h3 id="数据连接"><a href="#数据连接" class="headerlink" title="数据连接"></a>数据连接</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjeqti7v8j30xr0u0wnm.jpg" alt="数据连接"></p><h3 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,password from zx limit 10</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjerbyy59j30xr0u0aio.jpg" alt="数据库查询"></p><h3 id="循环设置属性"><a href="#循环设置属性" class="headerlink" title="循环设置属性"></a>循环设置属性</h3><h4 id="添加计数器"><a href="#添加计数器" class="headerlink" title="添加计数器"></a>添加计数器</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjeru1kqwj308408e3yv.jpg" alt="计数器"></p><h4 id="添加调试取样器设置属性"><a href="#添加调试取样器设置属性" class="headerlink" title="添加调试取样器设置属性"></a>添加调试取样器设置属性</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${__setProperty(per_user_${d},${__V(user_${d})},)};${__setProperty(per_pwd_${d},${__V(password_${d})},)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjescwe3rj30lc05f0t1.jpg" alt="调试取样器"></p><h3 id="查看属性设置情况"><a href="#查看属性设置情况" class="headerlink" title="查看属性设置情况"></a>查看属性设置情况</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjesuny8wj30xr0u0n8s.jpg" alt="截屏2021-05-15 下午8.59.06"></p><h3 id="使用数据库中读取到的内容"><a href="#使用数据库中读取到的内容" class="headerlink" title="使用数据库中读取到的内容"></a>使用数据库中读取到的内容</h3><h4 id="设置线程数"><a href="#设置线程数" class="headerlink" title="设置线程数"></a>设置线程数</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjewjnuorj309j0bldgj.jpg" alt="线程数"></p><h4 id="添加计数器-1"><a href="#添加计数器-1" class="headerlink" title="添加计数器"></a>添加计数器</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjevxo2ofj309f08udg7.jpg" alt="计数器"></p><h4 id="发起http请求"><a href="#发起http请求" class="headerlink" title="发起http请求"></a>发起http请求</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjew55zuaj30jf09cmxz.jpg" alt="发起请求"></p><h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjewzhxu4j30na0hxgnp.jpg" alt="查看结果"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><p>线程1:从本地sqlite数据库中获取数据，设置为属性</p></li><li><p>线程2:从属性中，直接获取值，进行性能测试</p></li></ol><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><blockquote><p>监控被测服务器的软件、硬件资源，收集这些资源的使用情况的数据，用于后续的性能分析</p></blockquote><h3 id="ServerAgent-监控硬件"><a href="#ServerAgent-监控硬件" class="headerlink" title="ServerAgent 监控硬件"></a>ServerAgent 监控硬件</h3><ul><li><p>可用于监控Linux和Winodws</p></li><li><p>可以和Jmeter直接集成</p></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>将<code>ServerAgent-2.2.3.zip</code>上传到被测服务器</li><li>解压文件</li><li>进入解压文件后，执行启动命令</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 serverAgent]# chmod 777 startAgent.sh</span><br><span class="line">[root@vircent7 serverAgent]# ./startAgent.sh</span><br><span class="line">INFO    2021-03-27 13:27:11.890 [kg.apc.p] (): Binding UDP to 4444</span><br><span class="line">INFO    2021-03-27 13:27:12.896 [kg.apc.p] (): Binding TCP to 4444</span><br><span class="line">INFO    2021-03-27 13:27:12.924 [kg.apc.p] (): JP@GC Agent v2.2.3 started</span><br></pre></td></tr></tbody></table></figure><blockquote><p>默认的服务器端口为<code>4444</code></p></blockquote><h4 id="jmeter与该监控集成"><a href="#jmeter与该监控集成" class="headerlink" title="jmeter与该监控集成"></a>jmeter与该监控集成</h4><p>jmeter监听器&gt;jp@gc - PerfMon Metrics Collector「需要安装第三方插件 jpgc」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqjfpc8nqnj30xr0u0qg6.jpg" alt="监听器"></p><h4 id="实际工作中可能遇到的问题"><a href="#实际工作中可能遇到的问题" class="headerlink" title="实际工作中可能遇到的问题"></a>实际工作中可能遇到的问题</h4><ol><li>被测服务器数云服务器，云服务器会禁用4444端口</li></ol><blockquote><p>关闭UDP端口，开启TCP端口为5279</p><p>UDP是一种广播模式传递数据，这种方式数据不安全</p><p>TCP需要建立连接才能传输数据，数据相对更安全</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 serverAgent]# ./startAgent.sh --udp-port 0 --tcp-port 5279</span><br><span class="line">INFO    2021-03-27 13:36:21.743 [kg.apc.p] (): Binding TCP to 5279</span><br><span class="line">INFO    2021-03-27 13:36:21.909 [kg.apc.p] (): JP@GC Agent v2.2.3 started</span><br></pre></td></tr></tbody></table></figure><p>网络要通：不是使用ping命令</p><p>ping：只要网络存在这个IP，ping命令可以被禁用，企业中的服务器，很多时候都会禁用ping命令</p><p>服务器向外提供是通过端口，如果服务器没有启动，是没有端口可用，能ping通但是无法连接</p><p>防火墙上没有开通端口权限</p><p>一般采用 <code>telnet ip端口</code>  </p><ol><li>如果这个命令不能执行</li></ol><ul><li>telnet不是内部命令｜未找到命令：说明没有开启telnet命令或没有安装</li></ul><ol start="2"><li>如果这个命令不通</li></ol><ul><li><p>被测服务器没有启动对应的服务</p></li><li><p>防火墙没有开放该端口 <code>systemctl status firewalld</code></p></li></ul> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vircent7 ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>如果是云服务器，一定要去web管理台 安全策略中开放端口</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;18-读取数据库数据进行性能测试&quot;&gt;&lt;a href=&quot;#18-读取数据库数据进行性能测试&quot; class=&quot;headerlink&quot; title=&quot;18-读取数据库数据进行性能测试&quot;&gt;&lt;/a&gt;18-读取数据库数据进行性能测试&lt;/h1&gt;&lt;h2 id=&quot;用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？&quot;&gt;&lt;a href=&quot;#用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？&quot; class=&quot;headerlink&quot; title=&quot;用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？&quot;&gt;&lt;/a&gt;用同一个token做性能测试，和1000个token随机取一个做性能测试，对服务器性能指标一样吗？&lt;/h2&gt;&lt;h3 id=&quot;系统是否允许一个账号被同时登录多次？&quot;&gt;&lt;a href=&quot;#系统是否允许一个账号被同时登录多次？&quot; class=&quot;headerlink&quot; title=&quot;系统是否允许一个账号被同时登录多次？&quot;&gt;&lt;/a&gt;系统是否允许一个账号被同时登录多次？&lt;/h3&gt;&lt;p&gt;如果有互踢功能，那是不能使用同一个账号&lt;/p&gt;
&lt;h3 id=&quot;有没有缓存机制（数据库缓存）&quot;&gt;&lt;a href=&quot;#有没有缓存机制（数据库缓存）&quot; class=&quot;headerlink&quot; title=&quot;有没有缓存机制（数据库缓存）&quot;&gt;&lt;/a&gt;有没有缓存机制（数据库缓存）&lt;/h3&gt;&lt;p&gt;如果有，不能使用同一个账号&lt;/p&gt;
&lt;h3 id=&quot;造多个账号进行性能测试&quot;&gt;&lt;a href=&quot;#造多个账号进行性能测试&quot; class=&quot;headerlink&quot; title=&quot;造多个账号进行性能测试&quot;&gt;&lt;/a&gt;造多个账号进行性能测试&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;尽可能的在运行过程中，造足够量的账号&lt;/li&gt;
&lt;li&gt;如果只有固定的一些账号可用时，做这种性能测试时，要记得带上「退出登录」接口&lt;/li&gt;
&lt;li&gt;如果只有固定的一些账号可用时，不关心登录接口的信息，可用不用退出&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>17-混合场景设计</title>
    <link href="http://zx490336534.github.io/article/307fc095.html"/>
    <id>http://zx490336534.github.io/article/307fc095.html</id>
    <published>2021-05-09T01:56:00.000Z</published>
    <updated>2021-05-15T14:04:16.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-混合场景设计"><a href="#17-混合场景设计" class="headerlink" title="17-混合场景设计"></a>17-混合场景设计</h1><h2 id="面向目标的场景"><a href="#面向目标的场景" class="headerlink" title="面向目标的场景"></a>面向目标的场景</h2><ul><li>Target Rate：TPS</li><li>Ramp Up Time：启动时间</li><li>Ramp-Up Steps Count：启动步长 总共可以调整的次数，如果少于总次数可以达到目标，那么后面剩余的次数就不会再调整。如果所有的调整次数都用完了，也无法达到目标，就是无法实现目标</li></ul><blockquote><p>调整次数，调整的是「并发用户数」</p></blockquote><p>在这个场景中，完全没有设置「并发用户数」的地方，是通过自动调整并发用户数来实现的</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqby7vn8ncj30t90dnwfj.jpg" alt="bzm - Arrivals Thread Group"></p><span id="more"></span><h2 id="混合场景"><a href="#混合场景" class="headerlink" title="混合场景"></a>混合场景</h2><h3 id="错误的混合场景"><a href="#错误的混合场景" class="headerlink" title="错误的混合场景"></a>错误的混合场景</h3><ol><li><p>一个线程组中，挂载多个接口，向服务器发起请求。但是这种严格意义上来说，属于伪混合场景</p></li><li><p>加吞吐量控制器当作混合场景：完全不知道如何做性能测试的思路</p></li><li><p>if条件控制器来做混合场景，也是伪混合场景</p></li></ol><h3 id="真正的混合场景"><a href="#真正的混合场景" class="headerlink" title="真正的混合场景"></a>真正的混合场景</h3><p>不同数量的并发用户，向服务器发起不同的接口请求</p><p>因为并发用户数量设置，是要使用线程组的。所以「不同数量的并发用户」需要使用多个线程组</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbypw2aomj303003c3yg.jpg" alt="多个线程组"></p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>jmeter中，写脚本，最难的技术点，是跨线程组传参</p><blockquote><p>用户定义变量：全局变量，可以跨线程组。在启动时获取一次，在运行过程中不会动态获取值</p><p>用户参数：局部变量，不能直接跨线程组</p></blockquote><ol><li>属性</li></ol><blockquote><p>jmeter属性</p><ul><li>静态属性：properties</li><li>动态属性：setPorperty</li></ul><p>系统属性：</p></blockquote><ul><li>前面线程组中的接口参数值，设置为jmeter的属性</li><li>后面的线程组，获取jmeter属性值</li><li>线程组设置不同的并发用户数 </li></ul><ol start="2"><li>文件嫁接：使用「数据库」方式比使用「csv」方式性能要好 消耗本机的资源要小</li></ol><h2 id="属性跨线程组"><a href="#属性跨线程组" class="headerlink" title="属性跨线程组"></a>属性跨线程组</h2><h3 id="线程1：注册"><a href="#线程1：注册" class="headerlink" title="线程1：注册"></a>线程1：注册</h3><p>为了让数据读取的比较整齐，将注册与属性设置放在一个「事务控制器」中</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbz9jp3e1j30qs05ft9n.jpg" alt="事务控制器"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzarpo2nj30tr0d9n00.jpg" alt="HTTP请求"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzawq9o1j30oh06kdgx.jpg" alt="用户参数"></p><p>使用JSON取样器将返回内容进行提取</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzb1qwz4j30w008c409.jpg" alt="JSON取样器"></p><p>编写两个「调试取样器」进行属性的设置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">${__setProperty(pro_mobile,${gmobile},)}</span><br><span class="line">${__setProperty(pro_gqid,${gqid},)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzc2derjj30m0062ab2.jpg" alt="设置手机号"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzc72mwkj30lb06bdgv.jpg" alt="设置gqid"></p><p>运行一次查看「属性显示」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzcu6n3qj313l0mhq7w.jpg" alt="image-20210509104547525"></p><h3 id="线程2：登录"><a href="#线程2：登录" class="headerlink" title="线程2：登录"></a>线程2：登录</h3><p>在HTTP请求中电话号码和gqid设置为</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">${__property(pro_mobile,,)}</span><br><span class="line">${__property(pro_gqid,,)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzeyx8lnj30un0ayq5f.jpg" alt="HTTP请求"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>由于Jmeter中线程数同时运行的，所以会出现获取到的值为上一次的值</p><p>当并发数量增加后，会出现多个请求使用了同一个属性</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>属性名称设置时携带「线程号」</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">${__setProperty(pro_mobile_${__threadNum},${gmobile},)}</span><br><span class="line">${__setProperty(pro_gqid_${__threadNum},${gqid},)}</span><br><span class="line"></span><br><span class="line">登录接口</span><br><span class="line">{</span><br><span class="line">    <span class="string">"mobile"</span>: <span class="string">"${__property(pro_mobile_${__threadNum},,)}"</span>,</span><br><span class="line">    <span class="string">"gqid"</span>:<span class="string">"${__property(pro_gqid_${__threadNum},,)}"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="波浪场景"><a href="#波浪场景" class="headerlink" title="波浪场景"></a>波浪场景</h2><p>波浪：有一定的时间规律</p><p>x轴：时间</p><p>y轴：并发用户数</p><h3 id="jp-gc-Ultimate-Thread-Group"><a href="#jp-gc-Ultimate-Thread-Group" class="headerlink" title="jp@gc - Ultimate Thread Group"></a>jp@gc - Ultimate Thread Group</h3><p>终极线程组</p><p>添加三条：</p><ul><li>线程数100，开始时间0秒，起线程时间30秒，持续60秒，停止线程时间10秒</li><li>线程数100，开始时间110秒，起线程时间30秒，持续60秒，停止线程时间10秒</li><li>线程数100，开始时间220秒，起线程时间30秒，持续60秒，停止线程时间10秒</li></ul><p>110秒=第一条的30秒+60秒+10秒+ 10秒等待时间</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqc123eznnj31740r8qaf.jpg" alt="波浪"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;17-混合场景设计&quot;&gt;&lt;a href=&quot;#17-混合场景设计&quot; class=&quot;headerlink&quot; title=&quot;17-混合场景设计&quot;&gt;&lt;/a&gt;17-混合场景设计&lt;/h1&gt;&lt;h2 id=&quot;面向目标的场景&quot;&gt;&lt;a href=&quot;#面向目标的场景&quot; class=&quot;headerlink&quot; title=&quot;面向目标的场景&quot;&gt;&lt;/a&gt;面向目标的场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Target Rate：TPS&lt;/li&gt;
&lt;li&gt;Ramp Up Time：启动时间&lt;/li&gt;
&lt;li&gt;Ramp-Up Steps Count：启动步长 总共可以调整的次数，如果少于总次数可以达到目标，那么后面剩余的次数就不会再调整。如果所有的调整次数都用完了，也无法达到目标，就是无法实现目标&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;调整次数，调整的是「并发用户数」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这个场景中，完全没有设置「并发用户数」的地方，是通过自动调整并发用户数来实现的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNly1gqby7vn8ncj30t90dnwfj.jpg&quot; alt=&quot;bzm - Arrivals Thread Group&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>16-负载、压力、面向目标测试场景</title>
    <link href="http://zx490336534.github.io/article/b22971f7.html"/>
    <id>http://zx490336534.github.io/article/b22971f7.html</id>
    <published>2021-05-08T13:20:00.000Z</published>
    <updated>2021-05-08T14:53:01.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="16-负载、压力、面向目标测试场景"><a href="#16-负载、压力、面向目标测试场景" class="headerlink" title="16-负载、压力、面向目标测试场景"></a>16-负载、压力、面向目标测试场景</h1><h2 id="负载测试场景"><a href="#负载测试场景" class="headerlink" title="负载测试场景"></a>负载测试场景</h2><blockquote><p>负载测试：逐步增加并发用户数，拐点区间</p></blockquote><p>jmeter如何逐步增加并发用户数：</p><p>安装<code>jpgc - Standard Set</code>插件</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbc93qh02j30vk0oggpt.jpg" alt="jpgc"></p><p>在「测试计划」右键添加「线程」的时候可以发现多了很多项</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbcizds0qj30b605qt9a.jpg" alt="线程"></p><span id="more"></span><p>选择「jp@gc - Stepping Thread Group (deprecated)」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbcj7twwwj30xr0u046k.jpg" alt="jp@gc - Stepping Thread Group (deprecated)"></p><p>x轴：时间</p><p>y轴：用户数</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbckz1jy4j30p706jq3d.jpg" alt="配置"></p><ol><li>This group will start 「100」 threads：将启动100个线程数</li><li>First，wair for 「0」 seconds： 首先等待0秒</li><li>Then start 「0」threads：然后 启动0个用户</li><li>Next，add「10」 threads every 「30」seconds，using ramp-up 「5」 seconds：每5秒钟，增加10个线程数，然后运行30秒</li><li>Then hold load for 「60」seconds：然后持续运行60秒</li><li>Finally，stop「5」threads every 「1」 seconds：最后，没1秒停止5个线程数</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbd3r6xbdj30t20sg0vl.jpg" alt="图讲解"></p><p><strong>缓起步，快结束</strong></p><p>结束时间不能太短，也不能太长</p><ul><li>太短：可能导致出错，这个出错是场景设计的问题，不是性能问题</li><li>太长：导致性能指标值与实际值偏差太大</li></ul><p>如果330正常，在360出现异常，出现拐点区间。</p><p>所以拐点范围为<code>[330,360]</code>，通过缩小范围，找到拐点值</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdffo2y6j30p206o74q.jpg" alt="寻找拐点"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdexynrjj30xr0u0gty.jpg" alt="寻找拐点"></p><p>想要寻找某个接口的最大并发用户数，通过最大并发用户数，获取性能指标值？</p><ol><li>设置一个阶梯线程组，自己设置一个最大值</li><li>运行，找到拐点值</li><li>缩小拐点区间，找到最大并发用户数</li><li>进行性能测试</li></ol><h3 id="如何找到拐点值"><a href="#如何找到拐点值" class="headerlink" title="如何找到拐点值"></a>如何找到拐点值</h3><p>在添加插件后可以看到「监听器」中新增了部分内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdmbxnbbj309b0cxabi.jpg" alt="监听器"></p><ul><li>Active Threads Over Time：随着时间变化的活跃线程数</li><li>PerfMon Metrics Collecotr：性能监控器</li><li>Response Times Over Time：随着时间变化的响应时间</li><li>Transactions per Second：TPS</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdr9pladj30900510t5.jpg" alt="线程组"></p><h4 id="Active-Threads-Over-Time"><a href="#Active-Threads-Over-Time" class="headerlink" title="Active Threads Over Time"></a>Active Threads Over Time</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdrx556oj31240fxmyw.jpg" alt="Active Threads Over Time"></p><h4 id="Response-Times-Over-Time"><a href="#Response-Times-Over-Time" class="headerlink" title="Response Times Over Time"></a>Response Times Over Time</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbds3ncb6j313t0k1789.jpg" alt="Response Times Over Time"></p><h4 id="Transactions-per-Second"><a href="#Transactions-per-Second" class="headerlink" title="Transactions per Second]"></a>Transactions per Second]</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdsa6ogkj313v0kftdi.jpg" alt="Transactions per Second"></p><ol><li><p>是否有报错</p></li><li><p>响应时间是否超过1.5s：用户满意度指数：500ms是可以接受，超过1.5s不能接受</p></li><li><p>tps 不上升，反而下降</p></li></ol><p>响应时间+活跃线程数=&gt;不同线程数时的平均响应时间</p><p>活跃线程数+TPS=&gt;不同线程数的平均tps</p><p>注意：一般不会在一个线程组下挂载多个接口，因为 监听器图标中，会把所有接口数据合并在一个图标中，数据太多，不利于分析</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbe6voyl3j31740pctic.jpg" alt="多个接口"></p><h2 id="压力测试场景"><a href="#压力测试场景" class="headerlink" title="压力测试场景"></a>压力测试场景</h2><ul><li>持续运行比较长时间，看服务器的稳定性</li><li>普通线程组：调度器持续运行时间，设置比较长</li><li>阶梯线程组：hold load时间设置比较长</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbecy8qw3j30q106rt96.jpg" alt="hold load"></p><h2 id="面向目标的场景"><a href="#面向目标的场景" class="headerlink" title="面向目标的场景"></a>面向目标的场景</h2><blockquote><p>需求：有一个页面，需要做性能测试。看能否支持一秒钟5000人访问</p></blockquote><p>相当于：1秒钟要处理500人的请求事务=&gt;500tps</p><p>一般的公司，接口tps范围数50～200</p><p>添加一个「bzm - Arrivals Thread Group」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbehzyr2aj31740pc7al.jpg" alt="bzm - Arrivals Thread Group"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;16-负载、压力、面向目标测试场景&quot;&gt;&lt;a href=&quot;#16-负载、压力、面向目标测试场景&quot; class=&quot;headerlink&quot; title=&quot;16-负载、压力、面向目标测试场景&quot;&gt;&lt;/a&gt;16-负载、压力、面向目标测试场景&lt;/h1&gt;&lt;h2 id=&quot;负载测试场景&quot;&gt;&lt;a href=&quot;#负载测试场景&quot; class=&quot;headerlink&quot; title=&quot;负载测试场景&quot;&gt;&lt;/a&gt;负载测试场景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;负载测试：逐步增加并发用户数，拐点区间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jmeter如何逐步增加并发用户数：&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;jpgc - Standard Set&lt;/code&gt;插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNly1gqbc93qh02j30vk0oggpt.jpg&quot; alt=&quot;jpgc&quot;&gt;&lt;/p&gt;
&lt;p&gt;在「测试计划」右键添加「线程」的时候可以发现多了很多项&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNly1gqbcizds0qj30b605qt9a.jpg&quot; alt=&quot;线程&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>15-性能测试场景</title>
    <link href="http://zx490336534.github.io/article/e64c544a.html"/>
    <id>http://zx490336534.github.io/article/e64c544a.html</id>
    <published>2021-05-07T13:25:00.000Z</published>
    <updated>2021-05-07T14:46:28.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="15-性能测试场景"><a href="#15-性能测试场景" class="headerlink" title="15-性能测试场景"></a>15-性能测试场景</h1><h2 id="全链路测试"><a href="#全链路测试" class="headerlink" title="全链路测试"></a>全链路测试</h2><blockquote><p>听起来，很高大上，但是没几家能落地</p><p>真正做全链路性能测试，只有大公司才可能落地</p></blockquote><p>全链路：就一个请求，从头到尾所有的环境，都进行性能测试</p><p>例如，公司中的一个登录业务，需要经过多少个服务，要调用多少个接口，这个接口的完整数据流是否清楚。</p><ol><li>一个一个接口把性能测试做下来。</li><li>每一个业务的性能测试做下来。</li><li>多个业务的性能测试做下来。</li></ol><p>需要解决单个接口，单个业务的性能瓶颈后，才可以开始全链路测试。</p><span id="more"></span><h3 id="模拟生产环境，真实用户对业务使用分配"><a href="#模拟生产环境，真实用户对业务使用分配" class="headerlink" title="模拟生产环境，真实用户对业务使用分配"></a>模拟生产环境，真实用户对业务使用分配</h3><ol><li>各种业务</li><li>各种业务的用户量不相同</li><li>业务覆盖广，深度深</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及系统多</li><li>如何模拟用户真实流量分配</li><li>接口业务多</li></ol><h3 id="如何开展"><a href="#如何开展" class="headerlink" title="如何开展"></a>如何开展</h3><ol><li>分析生产用户流量</li><li>各个业务接口性能测试脚本开发</li><li>压测环境要模拟生产环境</li><li>压测数据</li><li>实时全流程监控</li></ol><h3 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h3><ol><li>单系统优化</li><li>关键点优化</li><li>业务流程优化</li></ol><h2 id="性能场景设计"><a href="#性能场景设计" class="headerlink" title="性能场景设计"></a>性能场景设计</h2><ul><li>性能测试场景</li><li>负载测试场景</li><li>压力测试场景</li><li>面向目标场景</li><li>混合场景</li><li>波浪形场景</li></ul><h2 id="性能场景设计-性能测试场景"><a href="#性能场景设计-性能测试场景" class="headerlink" title="性能场景设计-性能测试场景"></a>性能场景设计-性能测试场景</h2><ol><li>普通线程组</li><li>服务器接口性能测试，一定要是多用户并发</li><li>多用户：jmeter线程组中的「线程数」</li></ol><ul><li><p>多用户并发=多个人</p></li><li><p>在性能测试中，这个「人」是如何模拟的？</p></li></ul><blockquote><p>一个软件、程序、代码运行起来，就会生产一个进程</p><p>一个进程中真正干活的是线程</p></blockquote><blockquote><p>性能测试中，模拟多用户并发，不同工具可能使用不同的方式。</p><p>jmeter使用的是线程</p><p>loadrunner可以使用进程、线程，默认是线程</p><p>locust使用的是协程</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqa7o1ac84j30x50c20u1.jpg" alt="线程组"></p><p><strong>线程数</strong>：相当于用户个数</p><p><strong>Ramp-Up时间（秒）</strong>：启动所有线程数的时间。在这个时间内，线程只要启动了，就去执行请求，是广义的并发</p><p>例如：当「Ramp-Up」设置为2，「线程数」设置为10：在2秒钟结束，10个用户都启动好。不保证在2秒钟过程中，到底是怎么启动的。</p><p>理论上 Jmeter没有显示线程数的数量，可以设置为任意大的数字。</p><p>实际上，受电脑本身的资源影响，不可能无限大。</p><p>一台电脑，cpu的频率直接影响线程数量，一般而言，一台电脑jmeter（http协议）能创建的线程数，大约在2000左右，保守在1000-1500</p><p>ramp-up设置：</p><ul><li>线程数&lt;100，1s</li><li>线程数&lt;200，2～3s</li><li>200&lt;线程数&lt;1000 3～5s</li></ul><p><strong>循环次数</strong>：至少设置为1</p><p><strong>永远</strong>：勾选后会持续运行直到手动停止</p><p><strong>调度器</strong>：需要配合「永远」一起使用。输入一个<strong>持续时间</strong>可以指定任务运行一段时间后停止</p><p><strong>启动延迟</strong>：线程起来后等待一段时间后再执行</p><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>配置「线程数」10，「Ramp-U」p为2，「循环次数」为「永远」，勾选「调度器」，设置「持续时间」为180秒</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqa8g6s2vqj306r07t74l.jpg" alt="线程属性"></p><p>运行后查看「聚合报告」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqa8gcpm4tj30ti09qjtb.jpg" alt="聚合报告"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;15-性能测试场景&quot;&gt;&lt;a href=&quot;#15-性能测试场景&quot; class=&quot;headerlink&quot; title=&quot;15-性能测试场景&quot;&gt;&lt;/a&gt;15-性能测试场景&lt;/h1&gt;&lt;h2 id=&quot;全链路测试&quot;&gt;&lt;a href=&quot;#全链路测试&quot; class=&quot;headerlink&quot; title=&quot;全链路测试&quot;&gt;&lt;/a&gt;全链路测试&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;听起来，很高大上，但是没几家能落地&lt;/p&gt;
&lt;p&gt;真正做全链路性能测试，只有大公司才可能落地&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全链路：就一个请求，从头到尾所有的环境，都进行性能测试&lt;/p&gt;
&lt;p&gt;例如，公司中的一个登录业务，需要经过多少个服务，要调用多少个接口，这个接口的完整数据流是否清楚。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个一个接口把性能测试做下来。&lt;/li&gt;
&lt;li&gt;每一个业务的性能测试做下来。&lt;/li&gt;
&lt;li&gt;多个业务的性能测试做下来。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要解决单个接口，单个业务的性能瓶颈后，才可以开始全链路测试。&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>14-Dubbo测试</title>
    <link href="http://zx490336534.github.io/article/61019fc7.html"/>
    <id>http://zx490336534.github.io/article/61019fc7.html</id>
    <published>2021-04-28T22:59:00.000Z</published>
    <updated>2021-05-07T14:46:28.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-Dubbo测试"><a href="#14-Dubbo测试" class="headerlink" title="14-Dubbo测试"></a>14-Dubbo测试</h1><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><blockquote><p>目前是apache托管的开源项目，能够实现RPC</p></blockquote><ul><li><p>注册中心：zookeeper 默认端口2181</p></li><li><p>服务提供者：应用程序</p></li><li><p>服务消费者：使用服务方</p></li><li><p>服务监控：监控</p><span id="more"></span><h3 id="测试服务器环境"><a href="#测试服务器环境" class="headerlink" title="测试服务器环境"></a>测试服务器环境</h3></li></ul><blockquote><p>测试服务器IP：192.168.9.3</p><p>zookeeper端口20181</p><p>服务提供者：</p><ul><li><p>membet1:20882 </p></li><li><p>membet2:20883</p></li></ul></blockquote><h3 id="测试dubbo的方法"><a href="#测试dubbo的方法" class="headerlink" title="测试dubbo的方法"></a>测试dubbo的方法</h3><h4 id="1-使用Telnet的方式"><a href="#1-使用Telnet的方式" class="headerlink" title="1.使用Telnet的方式"></a>1.使用Telnet的方式</h4><blockquote><p>在mac上运行telnet需要环境</p><p>使用<code>Homebrew</code>安装一下</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install telnet</span></span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> telnet 192.168.9.3 20882</span></span><br></pre></td></tr></tbody></table></figure><p>使用<code>ls</code>可以查看提供的服务的名称也就是「接口」</p><p>使用<code>ls -l</code>可以查看接口的所有方法</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">ls</span></span><br><span class="line">com.lemon.member.service.MemberService</span><br><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">ls -l com.lemon.member.service.MemberService</span></span><br><span class="line">com.lemon.member.pojo.Member getMember(com.lemon.member.pojo.Member)</span><br><span class="line">void recharge(com.lemon.member.pojo.Recharger)</span><br><span class="line">void withdraw(com.lemon.member.pojo.WithDrawer)</span><br><span class="line">void add(com.lemon.member.pojo.Member)</span><br><span class="line">void update(com.lemon.member.pojo.Member)</span><br><span class="line">java.util.List list()</span><br></pre></td></tr></tbody></table></figure><p>方法括号中有内容，就是带有参数的方法</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq093hm27zj30tt10x7cz.jpg" alt="Telnet"></p><p>使用<code>cd</code>进入到服务的名称位置后</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">ls -l</span></span><br><span class="line">com.lemon.member.service.MemberService -&gt; dubbo://192.168.9.3:20882/com.lemon.member.service.MemberService?anyhost=true&amp;application=futureloan-member-service&amp;dubbo=2.5.3&amp;interface=com.lemon.member.service.MemberService&amp;methods=add,recharge,getMember,update,list,withdraw&amp;pid=2333&amp;retries=3&amp;revision=0.0.1-SNAPSHOT&amp;side=provider&amp;timestamp=1619651401859</span><br></pre></td></tr></tbody></table></figure><p>调用接口的方法：<code>invoke 接口.方法()</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">invoke com.lemon.member.service.MemberService.list()</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09b8pyrqj30tt0tfgw7.jpg" alt="list方法"></p><h4 id="2-使用jmeter"><a href="#2-使用jmeter" class="headerlink" title="2.使用jmeter"></a>2.使用jmeter</h4><p>将<code>jmeter-plugins-dubbo-2.7.3-jar-with-dependencies.jar</code>放入<code>lib\ext</code>中后，重启Jmeter</p><p>添加「取样器」后可以看到增加了「Dubbo Sample」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09g6x548j309u0h5jt8.jpg" alt="取样器"></p><p>在「Registry Settings」填入服务器信息后点击「Get Provider List」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09j4xhyfj30xv0u0jxe.jpg" alt="填写"></p><p>可以看到我们可以查看相关方法。这些方法与刚才使用Telnet查看的一致</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09k8msbkj30t4058753.jpg" alt="查看方法"></p><p>我们选择「list」后点击运行</p><p>可以在「查看结果树」中查看与Telnet中一致的内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09l79zzoj30xr0u015i.jpg" alt="查看结果"></p><p>查看add的接口文档</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09qlk280j30gc03o74v.jpg" alt="add接口文档"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09r49proj30sp0av752.jpg" alt="入参"></p><h2 id="其他性能测试工具"><a href="#其他性能测试工具" class="headerlink" title="其他性能测试工具"></a>其他性能测试工具</h2><blockquote><p>ab和wrk都是快速响应性能测试工具</p></blockquote><h3 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://gitee.com/mirrors/wrk.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> wrk/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:~ zhongxin$ mkdir wrk</span><br><span class="line">(base) 192:~ zhongxin$ cd wrk/</span><br><span class="line">(base) 192:wrk zhongxin$ ls</span><br><span class="line">(base) 192:wrk zhongxin$ git clone https://gitee.com/mirrors/wrk.git</span><br><span class="line">Cloning into 'wrk'...</span><br><span class="line">remote: Enumerating objects: 1103, done.</span><br><span class="line">remote: Total 1103 (delta 0), reused 0 (delta 0), pack-reused 1103</span><br><span class="line">Receiving objects: 100% (1103/1103), 37.83 MiB | 2.02 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (345/345), done.</span><br><span class="line">(base) 192:wrk zhongxin$ ls</span><br><span class="line">wrk</span><br><span class="line">(base) 192:wrk zhongxin$ cd wrk/</span><br><span class="line">(base) 192:wrk zhongxin$ make</span><br></pre></td></tr></tbody></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-c 连接数</span><br><span class="line">-d 持续运行失常</span><br><span class="line">-t 线程数</span><br><span class="line">-s Lua脚本</span><br><span class="line">-H 添加请求头</span><br><span class="line">-v 查看版本信息</span><br></pre></td></tr></tbody></table></figure><h4 id="测试语句"><a href="#测试语句" class="headerlink" title="测试语句"></a>测试语句</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./wrk -t4 -c100 -d30s --latency https://www.baidu.com/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ./wrk -t4 -c100 -d30s --latency https://www.baidu.com/</span><br><span class="line">Running 30s test @ https://www.baidu.com/</span><br><span class="line">  4 threads and 100 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   151.92ms  126.20ms   1.99s    95.29%</span><br><span class="line">    Req/Sec   170.01     43.17   333.00     81.93%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%  128.98ms</span><br><span class="line">     75%  137.80ms</span><br><span class="line">     90%  195.57ms</span><br><span class="line">     99%  802.22ms</span><br><span class="line">  19933 requests in 30.10s, 298.16MB read</span><br><span class="line">  Socket errors: connect 0, read 156, write 0, timeout 45</span><br><span class="line">Requests/sec:    662.23</span><br><span class="line">Transfer/sec:      9.91MB</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq0a3ix9aoj30vh0gowim.jpg" alt="wrk"></p><ul><li>Avg 平均响应</li><li>Stdev 标准方差</li><li>Max 最大值</li><li>+/- Stdev 偏差比</li><li>Latency 响应时间分布</li><li>Req/sec 每秒请求数</li></ul><h3 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ab -V</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1879490 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ab -help</span><br><span class="line">Usage: ab [options] [http[s]://]hostname[:port]/path</span><br><span class="line">Options are:</span><br><span class="line">    -n requests     Number of requests to perform</span><br><span class="line">    -c concurrency  Number of multiple requests to make at a time</span><br><span class="line">    -t timelimit    Seconds to max. to spend on benchmarking</span><br><span class="line">                    This implies -n 50000</span><br><span class="line">    -s timeout      Seconds to max. wait for each response</span><br><span class="line">                    Default is 30 seconds</span><br><span class="line">    -b windowsize   Size of TCP send/receive buffer, in bytes</span><br><span class="line">    -B address      Address to bind to when making outgoing connections</span><br><span class="line">    -p postfile     File containing data to POST. Remember also to set -T</span><br><span class="line">    -u putfile      File containing data to PUT. Remember also to set -T</span><br><span class="line">    -T content-type Content-type header to use for POST/PUT data, eg.</span><br><span class="line">                    'application/x-www-form-urlencoded'</span><br><span class="line">                    Default is 'text/plain'</span><br><span class="line">    -v verbosity    How much troubleshooting info to print</span><br><span class="line">    -w              Print out results in HTML tables</span><br><span class="line">    -i              Use HEAD instead of GET</span><br><span class="line">    -x attributes   String to insert as table attributes</span><br><span class="line">    -y attributes   String to insert as tr attributes</span><br><span class="line">    -z attributes   String to insert as td or th attributes</span><br><span class="line">    -C attribute    Add cookie, eg. 'Apache=1234'. (repeatable)</span><br><span class="line">    -H attribute    Add Arbitrary header line, eg. 'Accept-Encoding: gzip'</span><br><span class="line">                    Inserted after all normal header lines. (repeatable)</span><br><span class="line">    -A attribute    Add Basic WWW Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -P attribute    Add Basic Proxy Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -X proxy:port   Proxyserver and port number to use</span><br><span class="line">    -V              Print version number and exit</span><br><span class="line">    -k              Use HTTP KeepAlive feature</span><br><span class="line">    -d              Do not show percentiles served table.</span><br><span class="line">    -S              Do not show confidence estimators and warnings.</span><br><span class="line">    -q              Do not show progress when doing more than 150 requests</span><br><span class="line">    -l              Accept variable document length (use this for dynamic pages)</span><br><span class="line">    -g filename     Output collected data to gnuplot format file.</span><br><span class="line">    -e filename     Output CSV file with percentages served</span><br><span class="line">    -r              Don't exit on socket receive errors.</span><br><span class="line">    -m method       Method name</span><br><span class="line">    -h              Display usage information (this message)</span><br><span class="line">    -I              Disable TLS Server Name Indication (SNI) extension</span><br><span class="line">    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)</span><br><span class="line">    -f protocol     Specify SSL/TLS protocol</span><br><span class="line">                    (TLS1, TLS1.1, TLS1.2 or ALL)</span><br><span class="line">    -E certfile     Specify optional client certificate chain and private key</span><br></pre></td></tr></tbody></table></figure><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c 并发用户数</span><br><span class="line">-n 总共请求数</span><br><span class="line">-t 持续运行时长</span><br><span class="line">-T 请求头Content-Type 默认text/plan</span><br><span class="line">-p post请求</span><br><span class="line">-m 请求方法名称</span><br><span class="line">-e 请求结果输出到csv文件</span><br><span class="line">-v 查看版本信息</span><br></pre></td></tr></tbody></table></figure><h4 id="测试语句-1"><a href="#测试语句-1" class="headerlink" title="测试语句"></a>测试语句</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -c 10 -n 10000 https://www.baidu.com/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ab -c 10 -n 10000 https://www.baidu.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1879490 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.baidu.com (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        BWS/1.1</span><br><span class="line">Server Hostname:        www.baidu.com</span><br><span class="line">Server Port:            443</span><br><span class="line">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><span class="line">Server Temp Key:        ECDH P-256 256 bits</span><br><span class="line">TLS Server Name:        www.baidu.com</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        227 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken for tests:   107.936 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      10818825 bytes</span><br><span class="line">HTML transferred:       2270000 bytes</span><br><span class="line">Requests per second:    92.65 [#/sec] (mean)</span><br><span class="line">Time per request:       107.936 [ms] (mean)</span><br><span class="line">Time per request:       10.794 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          97.88 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       31   80  23.8     77    1375</span><br><span class="line">Processing:     9   28  14.1     24     172</span><br><span class="line">Waiting:        9   24  10.8     21     158</span><br><span class="line">Total:         47  108  29.4    103    1404</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">    103</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">    112</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">    119</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">    123</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">    139</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">    153</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">    177</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">    197</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">   1404 (longest request)</span></span><br><span class="line">(base) 192:wrk zhongxin$</span><br></pre></td></tr></tbody></table></figure><h2 id="ngrinder"><a href="#ngrinder" class="headerlink" title="ngrinder"></a>ngrinder</h2><blockquote><p>nGrinder 是基于 Grinder 开源项目，由 NHN 公司的开发团队进行了重新设计和完善。nGrinder 是一款非常易用，有简洁友好的用户界面和 controller-agent 分布式结构的强大的压力测试工具。</p><p>它的脚本，支持 Jython、Groovy 两种语言。</p><p><strong>官方网站</strong>：<a href="http://naver.github.io/ngrinder/">http://naver.github.io/ngrinder/</a></p><p><strong>GitHub 地址</strong>：<a href="https://github.com/naver/ngrinder">https://github.com/naver/ngrinder</a></p></blockquote><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>下载 war 包 <a href="https://github.com/naver/ngrinder/releases">https://github.com/naver/ngrinder/releases</a></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Java -jar ngrinder-controller-xx.war</span></span><br></pre></td></tr></tbody></table></figure><ol><li>登录 Web 管理界面，点击顶部导航用户信息，在下拉信息中，选择‘下载代理’，将会自动下载 Agent，选择‘下载监控’，将自动下载 monitor 监控</li><li>解压、启动 Agent：双击 run_agent.bat(windows) ‘./run_agent.sh’(linux mac)</li><li>代理服务启动后，在页面 admin &gt; 代理管理，就能看到代理服务器</li></ol><h3 id="制作脚本"><a href="#制作脚本" class="headerlink" title="制作脚本"></a>制作脚本</h3><p>在首页，Quick Start 文本框中输入 要录制脚本的地址，第二个文本框，选择生成脚本的语言类型，点击 <strong>开始测试</strong> 按钮，就可生成脚本。或者点击，菜单栏中的‘<strong>脚本</strong>’</p><p>点击‘<strong>新建脚本</strong>’按钮，弹窗中，选择脚本类型，填写脚本名称，被测 URL(可选)，点击‘创建’即可创建出一个对应脚本语言的脚本</p><p>点击脚本列表 ‘脚本名称’列中的脚本名称，即可打开对应的脚本详情</p><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><ol><li>点击顶部菜单栏中的‘<strong>性能测试</strong>’菜单</li><li>再点击 ‘<strong>创建测试</strong>’</li><li>在这个页面中，填写‘<strong>测试名称</strong>’，填写‘<strong>代理</strong>’数量(根据后面的提示)， 选择‘<strong>脚本</strong>’，如果脚本中有服务器地址，则可以不选择目标主机，如果没有，则需要添加‘<strong>目标主机</strong>’，然后点击右上角的‘<strong>保存 并运行</strong>’，这样就可以按照你的设计，进行性能测试了。</li><li>性能测试执行过程成功，状态为绿色(红色为执行过程中出错)，执行成功，会展示一份测试报告概要。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;14-Dubbo测试&quot;&gt;&lt;a href=&quot;#14-Dubbo测试&quot; class=&quot;headerlink&quot; title=&quot;14-Dubbo测试&quot;&gt;&lt;/a&gt;14-Dubbo测试&lt;/h1&gt;&lt;h2 id=&quot;Dubbo&quot;&gt;&lt;a href=&quot;#Dubbo&quot; class=&quot;headerlink&quot; title=&quot;Dubbo&quot;&gt;&lt;/a&gt;Dubbo&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;目前是apache托管的开源项目，能够实现RPC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注册中心：zookeeper 默认端口2181&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务提供者：应用程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务消费者：使用服务方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务监控：监控&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>13-Websocket协议与MQ协议</title>
    <link href="http://zx490336534.github.io/article/41dbfa05.html"/>
    <id>http://zx490336534.github.io/article/41dbfa05.html</id>
    <published>2021-04-24T13:34:00.000Z</published>
    <updated>2021-04-24T15:09:56.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-Websocket协议与MQ协议"><a href="#13-Websocket协议与MQ协议" class="headerlink" title="13-Websocket协议与MQ协议"></a>13-Websocket协议与MQ协议</h1><h2 id="Websocket协议"><a href="#Websocket协议" class="headerlink" title="Websocket协议"></a>Websocket协议</h2><blockquote><p>基于TCP全双工协议，即可以从客户端向服务器端发送请求，也可以从服务器端主动向客户端发送消息。</p></blockquote><blockquote><p> HTTP协议只能从客户端向服务器发送请求，服务器端收到请求后，做出响应，发送给客户端</p></blockquote><p>Websocket和HTTP都是基于TCP协议的，所以使用抓包工具可以抓到websocket的数据</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><ul><li>F12</li><li>Fiddler</li><li>Charles</li><li>Wireshark</li><li>Tcpdump</li></ul><p>HTTP协议簇：http、https协议。https=http+ssl数据加密传输</p><p>websocket：ws，wss协议。wss=ws+ssl数据加密传输</p><span id="more"></span><h2 id="Jmeter测试Websocket"><a href="#Jmeter测试Websocket" class="headerlink" title="Jmeter测试Websocket"></a>Jmeter测试Websocket</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><blockquote><p>jmeter本身不支持websocket，需要安装插件</p></blockquote><p>将「jmeter-plugins-manager-1.6.jar」放入「li b\ext」文件夹中，重启jmeter可以看到<code>Jmeter Plugins Manager</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv68qfwnaj30vk0oggpq.jpg" alt="Jmeter Plugins Manager"></p><p>在「Abaliable Plugins」搜索「websocket」选择「Websocket Samplers by Peter Doornbosch」后点击「Apply Changes and Restart Jmeter」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv6ddxecqj30vk0ogdkg.jpg" alt="安装"></p><p>插件「取样器」，可以发现新增了一些Websocket的取样器</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv6dytkr7j309u0fkq4m.jpg" alt="取样器"></p><ul><li>WebSocket Close 关闭连接</li><li>WebSocket Open Connection 建立连接</li><li>WebSocket Ping/Pong 检查网络是否通畅</li><li>WebSocket Single Read Sampler 相当于http中的response 读取响应信息</li><li>WebSocket Single Write Sampler 相当于http中的request 向服务器发起信息</li><li>WebSocket request-response Sampler 发送请求 同时获取响应信息</li></ul><h2 id="MQ协议"><a href="#MQ协议" class="headerlink" title="MQ协议"></a>MQ协议</h2><blockquote><p>消息队列，是一种先进先出的典型数据结构，一般用来解决应用解耦，异步消息，流量削峰等问题，实现高性能，高可用，可伸缩和最终一致性的架构</p></blockquote><p>MQ典型产品：「RabbitMQ」、「ActiveMQ」、「Kafka」、「RocketMQ」、「ZeroMQ」</p><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>「MQTT Protocol Support」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv7gbh2gej30vk0ogn0w.jpg" alt="MQTT Protocol Support"></p><p>安装插件后可以看到「取样器」中增加了如下内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv7rfh5fpj309u0gmwga.jpg" alt="安装插件后"></p><ul><li>MQTT Publisher 发布</li><li>MQTT Subscriber 消费</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv7q0hckqj30xr0u0wok.jpg" alt="EMQ"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv81n819lj30xv0u0dmx.jpg" alt="工具-Websocket"></p><ol><li>点击「连接」</li><li>新增「订阅」</li><li>修改「消息」</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv82fgi72j30wp0cldgz.jpg" alt="消息"></p><p>使用Jmeter发送</p><p>点击「Generate ID」创建一个随机ID</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv882dpy6j30xr0u0tfj.jpg" alt="Push"></p><p>可以从「订阅」中看到创建的ID</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv89ouy1tj30xr0u0ahd.jpg" alt="订阅"></p><p>从「主题」中可以看到，主题已经被推送过来了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv8dlqu54j30xr0u0dmt.jpg" alt="主题"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;13-Websocket协议与MQ协议&quot;&gt;&lt;a href=&quot;#13-Websocket协议与MQ协议&quot; class=&quot;headerlink&quot; title=&quot;13-Websocket协议与MQ协议&quot;&gt;&lt;/a&gt;13-Websocket协议与MQ协议&lt;/h1&gt;&lt;h2 id=&quot;Websocket协议&quot;&gt;&lt;a href=&quot;#Websocket协议&quot; class=&quot;headerlink&quot; title=&quot;Websocket协议&quot;&gt;&lt;/a&gt;Websocket协议&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基于TCP全双工协议，即可以从客户端向服务器端发送请求，也可以从服务器端主动向客户端发送消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; HTTP协议只能从客户端向服务器发送请求，服务器端收到请求后，做出响应，发送给客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Websocket和HTTP都是基于TCP协议的，所以使用抓包工具可以抓到websocket的数据&lt;/p&gt;
&lt;h3 id=&quot;抓包&quot;&gt;&lt;a href=&quot;#抓包&quot; class=&quot;headerlink&quot; title=&quot;抓包&quot;&gt;&lt;/a&gt;抓包&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;F12&lt;/li&gt;
&lt;li&gt;Fiddler&lt;/li&gt;
&lt;li&gt;Charles&lt;/li&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;li&gt;Tcpdump&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP协议簇：http、https协议。https=http+ssl数据加密传输&lt;/p&gt;
&lt;p&gt;websocket：ws，wss协议。wss=ws+ssl数据加密传输&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>12-使用JDBC读取与写入数据</title>
    <link href="http://zx490336534.github.io/article/b1e20de1.html"/>
    <id>http://zx490336534.github.io/article/b1e20de1.html</id>
    <published>2021-04-23T11:48:00.000Z</published>
    <updated>2021-04-23T14:42:20.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-使用JDBC读取与写入数据"><a href="#12-使用JDBC读取与写入数据" class="headerlink" title="12-使用JDBC读取与写入数据"></a>12-使用JDBC读取与写入数据</h1><h2 id="JDBC注意点"><a href="#JDBC注意点" class="headerlink" title="JDBC注意点"></a>JDBC注意点</h2><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>建议不要带<code>;</code></p><p>一个jdbc request中不要写多个sql，默认只能支持一条sql</p><span id="more"></span><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="Variable-names"><a href="#Variable-names" class="headerlink" title="Variable names"></a>Variable names</h4><ul><li><p>定义变量，接收对应「列」的值</p></li><li><p>如果有不需要接收的列，则使用「空格+逗号」进行间隔</p></li><li><p>结果的值，使用「变量名称+_顺序数字」调用</p></li></ul><p><strong>实例</strong></p><p>定义一个<code>, mb</code>提取结果中的手机号码</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyh64a9sj313v0jract.jpg" alt="取值"></p><p>查看全部的运行结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyh9sjwaj313v0jrq7t.jpg" alt="结果查看"></p><p>使用「调试取样器」查看提取到的内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyhfcgvfj313v0jr0wu.jpg" alt="调试"></p><p>使用「ForEach控制器」输出全部结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptykt48tkj315w0luwig.jpg" alt="ForEach控制器"></p><ul><li>输入变量前缀：<code>mb</code></li><li>开始循环 0</li><li>结束循环 10</li><li>输出变量名称:<code>mbil</code></li></ul><p>添加一个「调试取样器」并修改它的名称为<code>${mbil}</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptym0ruavj31740n2ael.jpg" alt="调试取样器"></p><p>运行后查看结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptymji3uaj31740n2qac.jpg" alt="查看结果"></p><p>使用「循环控制器」获取</p><ul><li>循环次数填写<code>${mb_#}</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptytjbr8sj31740dydjj.jpg" alt="截屏2021-04-23 下午8.47.01"></p><p>「计数器」中</p><ul><li>开始值为1</li><li>递增为1</li><li>最大值为<code>${mb_#}</code></li><li>引用名称为<code>d</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptytosjnkj31740dygpo.jpg" alt="截屏2021-04-23 下午8.47.10"></p><p>将「调试取样器」名称修改为<code>${__V(mb_${d},)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptytt7irbj31740dyjv7.jpg" alt="截屏2021-04-23 下午8.47.17"></p><p>运行之后可以在结果中查看，每个值都打印出来了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyu00jzsj31740katg7.jpg" alt="截屏2021-04-23 下午8.47.26"></p><h4 id="Result-variable-name"><a href="#Result-variable-name" class="headerlink" title="Result variable name"></a>Result variable name</h4><blockquote><p>接收全部结果，并以列表展示</p></blockquote><p>添加一个名为「allvar」的变量接收</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyo2meetj31740s57a2.jpg" alt="定义"></p><p>查看结果</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allvar=[{mobile=13527104953, id=25, gqid=126361, identity=1e7a82646a503f41, token=rjNWTXOSU8g68V62fcqgEMm4ivcNhvV/W7C/k2G8kc+qYRbmw53LuAfcwFRAuT8pxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13528223194, id=29, gqid=126182, identity=640d783c00a09e98, token=YeCOmrviJNaF6nhhSI4Lqq3sBrTRxAT4m0vZbrLALFDOiIl02I+7z//l7vPA/s5XxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13560693138, id=40, gqid=124571, identity=7f897d7fd70df90a, token=bu3nXFfaVsqCIZ2eKOQDu8Ah/UfTTez3iPyWRSH3hgFY5AQFvR7kcg9gGdxq/0kTxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13560696226, id=51, gqid=126474, identity=8a989d323fde98f1, token=pEOeKYMBmmPWnT+CkxUKCj249HbCPHFkgH6FoOjrDcWQtElKwuYUjVwvP1SaDvznxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13527104943, id=78, gqid=4000000, identity=0da609ddca720332, token=cwjgPJCiSp/zom1v/xG39CkpdxgjTKvts+NVk+sVMzMfEtHIhoe56Ch2gNFKjesdxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13527104143, id=79, gqid=4000001, identity=195006160bc11f4f, token=JTQBPw32Sq88b5MjfrsA/eErfhax5EHrvVdzumTtRV+yXd0odVFMF8N93QEbnLTYxRU/jxaEwo/fQbjJJq9BrA==}]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptynxpyg2j31740s5497.jpg" alt="结果"></p><h2 id="使用JDBC批量造数据"><a href="#使用JDBC批量造数据" class="headerlink" title="使用JDBC批量造数据"></a>使用JDBC批量造数据</h2><blockquote><p>思路：循环执行insert语句</p></blockquote><h3 id="使用SQLite存储数据"><a href="#使用SQLite存储数据" class="headerlink" title="使用SQLite存储数据"></a>使用<code>SQLite</code>存储数据</h3><p>先连接数据库</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0762o9kj31740s2jy7.jpg" alt="连接数据库"></p><p>创建一张表</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu07li9hvj31740s244t.jpg" alt="创建表"></p><p>调用注册接口</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu08jac88j31740s2agt.jpg" alt="注册接口"></p><p>将注册结果插入到数据库中</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu07xb1e3j31740s20z1.jpg" alt="插入表"></p><p>查看结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu08zaryfj30xr0u0tev.jpg" alt="查看结果"></p><p>修改「线程组」的次数为1000次运行后查看数据库</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0c7veduj30xr0u0gus.jpg" alt="查看结果"></p><p>新建「JDBC Request」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0fy2cvlj31740s2wl1.jpg" alt="JDBC Request"></p><p>新建一个「保存响应到文件」</p><p>去除勾选「Dont add number to prefix」和「Dont add content type suffix」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0fmwcl5j31740s2wkz.jpg" alt="保存响应到文件"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0jrnmdpj30ps0qpgrw.jpg" alt="查看结果"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>使用数据库的优势：可以指定读取n行，每次操作消耗小</p><p>使用csv文件每次需要打开整个文件后进行读取</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;12-使用JDBC读取与写入数据&quot;&gt;&lt;a href=&quot;#12-使用JDBC读取与写入数据&quot; class=&quot;headerlink&quot; title=&quot;12-使用JDBC读取与写入数据&quot;&gt;&lt;/a&gt;12-使用JDBC读取与写入数据&lt;/h1&gt;&lt;h2 id=&quot;JDBC注意点&quot;&gt;&lt;a href=&quot;#JDBC注意点&quot; class=&quot;headerlink&quot; title=&quot;JDBC注意点&quot;&gt;&lt;/a&gt;JDBC注意点&lt;/h2&gt;&lt;h3 id=&quot;SQL语句&quot;&gt;&lt;a href=&quot;#SQL语句&quot; class=&quot;headerlink&quot; title=&quot;SQL语句&quot;&gt;&lt;/a&gt;SQL语句&lt;/h3&gt;&lt;p&gt;建议不要带&lt;code&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一个jdbc request中不要写多个sql，默认只能支持一条sql&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>11-其他协议</title>
    <link href="http://zx490336534.github.io/article/49ec7e33.html"/>
    <id>http://zx490336534.github.io/article/49ec7e33.html</id>
    <published>2021-04-22T14:56:00.000Z</published>
    <updated>2021-04-22T14:34:11.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-其他协议"><a href="#11-其他协议" class="headerlink" title="11-其他协议"></a>11-其他协议</h1><h2 id="CSV数据文件设置"><a href="#CSV数据文件设置" class="headerlink" title="CSV数据文件设置"></a>CSV数据文件设置</h2><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><ul><li><p>通过「浏览」来选择，这个路径是「绝对路径」</p></li><li><p>「相对路径」</p></li></ul><p>写法：</p><p>使用<code>./</code> 或<code>.\</code>开始。建议使用<code>.\</code>。因为这个是linux下的写法，并且在windows下也可以正常使用</p><p>从哪个地方相对开始：</p><p>从当前<code>jmx</code>文件保存的路径</p><span id="more"></span><h3 id="忽略首行"><a href="#忽略首行" class="headerlink" title="忽略首行"></a>忽略首行</h3><p>选择「True」，则从第二行开始</p><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>默认以「，」来进行分隔</p><p>当分隔出多列，但是其中某些列不需要使用。在「变量名称」中使用「空格+英文逗号」进行占位</p><h3 id="是否允许带引号（英文双引号）"><a href="#是否允许带引号（英文双引号）" class="headerlink" title="是否允许带引号（英文双引号）"></a>是否允许带引号（英文双引号）</h3><ul><li>True：引用变量携带引号</li><li>False：引用变量自动去除引号</li></ul><h3 id="遇到文件结束符再次循环"><a href="#遇到文件结束符再次循环" class="headerlink" title="遇到文件结束符再次循环"></a>遇到文件结束符再次循环</h3><p>比如文件有2行，循环6次，</p><ul><li>True：则2行2行的运行6次</li><li>False：运行2行后剩余4次运行失败</li></ul><h3 id="遇到文件结束符停止线程"><a href="#遇到文件结束符停止线程" class="headerlink" title="遇到文件结束符停止线程"></a>遇到文件结束符停止线程</h3><ul><li>True：文件读取完停止任务</li><li>False：运行到线程次数结束</li></ul><h2 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h2><blockquote><p>soap</p><p>jdbc</p><p>websocket</p><p>mq</p><p>dubbo</p></blockquote><h3 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h3><p><code>webservice</code>是一个web的应用程序，使用xml向外界暴露可供调用的API接口</p><p>SOAP以「http+xml」进行数据传输</p><p>测试地址：<a href="http://www.webxml.com.cn/zh_cn/web_services.aspx">http://www.webxml.com.cn/zh_cn/web_services.aspx</a></p><p> 获得中国省份、直辖市、地区和与之对应的ID：<a href="http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?op=getRegionProvince">http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?op=getRegionProvince</a></p><h4 id="soap1-1"><a href="#soap1-1" class="headerlink" title="soap1.1"></a>soap1.1</h4><blockquote><p>xml中为soap</p><p>头部中需要有：<code>SOAPAction</code></p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /WebServices/WeatherWS.asmx HTTP/1.1</span><br><span class="line">Host: ws.webxml.com.cn</span><br><span class="line">Content-Type: text/xml; charset=utf-8</span><br><span class="line">Content-Length: length</span><br><span class="line">SOAPAction: "http://WebXml.com.cn/getRegionProvince"</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soap</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">getRegionProvince</span> <span class="attr">xmlns</span>=<span class="string">"http://WebXml.com.cn/"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlmhps1aj313v0df75y.jpg" alt="请求头"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlmcplrpj313v0dfq5o.jpg" alt="请求"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlmsoi07j313v0rjte1.jpg" alt="结果"></p><h4 id="soap1-2"><a href="#soap1-2" class="headerlink" title="soap1.2"></a>soap1.2</h4><blockquote><p>xml中为soap12</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /WebServices/WeatherWS.asmx HTTP/1.1</span><br><span class="line">Host: ws.webxml.com.cn</span><br><span class="line">Content-Type: application/soap+xml; charset=utf-8</span><br><span class="line">Content-Length: length</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap12:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soap12</span>=<span class="string">"http://www.w3.org/2003/05/soap-envelope"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soap12:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">getRegionProvince</span> <span class="attr">xmlns</span>=<span class="string">"http://WebXml.com.cn/"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soap12:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap12:Envelope</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlr3sxh0j313v06f404.jpg" alt="请求头"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlralvq2j313v0cnn05.jpg" alt="请求体"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlrinj26j313v0r4q8h.jpg" alt="结果"></p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><blockquote><p>是一种用于执行SQL语句的JAVA API</p><p>通过这个api可以直接直接sql脚本</p></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><p>将<code>mysql-connector-java-***.jar</code>放到jmeter的<code>lib</code>目录下</p></li><li><p>重启jmeter</p></li><li><p>配置元件Config Element&gt;数据库连接配置JDBC Connection Configuration</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlx69z6cj308k0bvjso.jpg" alt="截屏2021-04-21 下午7.49.36"></p><blockquote><p>jmeter中引入jar包，建议放入到<code>lib</code>路径下</p><p>不推荐使用引入的方式</p></blockquote><h3 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h3><ul><li>添加取样器&gt;JDBC Request</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprm32be3qj306c0ceq43.jpg" alt="取样器"></p><ul><li>添加数据库连接信息</li></ul><ol><li>Variable Name for created pool 创建一个连接池</li><li>database URL：不同数据库的连接方式不一样。</li></ol><p>sqLite:<code>jdbc:sqlite:c:\*.db</code></p><p>mysql:<code>jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt;</code></p><p>Oracle:<code>oracle:thin:@//&lt;host&gt;:&lt;port&gt;/ServiceName</code></p><p>Microsoft SQL Server:<code>jdbc:sqlserver://&lt;server_name&gt;:&lt;port&gt;</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmc27quoj30xr0u0wlr.jpg" alt="数据库连接"></p><ol start="3"><li>在取样器中填写上连接池的名字</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmeo3ddyj313v07y0ub.jpg" alt="取样器"></p><ol start="4"><li>运行后查看结果</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmfcvpz8j313v0tmahx.jpg" alt="运行结果"></p><h3 id="Query-Type"><a href="#Query-Type" class="headerlink" title="Query Type"></a>Query Type</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmmw1zj8j313v0ax76q.jpg" alt="查询方式"></p><p>不带参数：</p><ul><li>Select Statement 查询</li><li>Update Statement 更新</li></ul><p>携带参数：</p><ul><li>Prepared Select Statement</li><li>Prepared Update Statement</li></ul><h2 id="脚本性能转换"><a href="#脚本性能转换" class="headerlink" title="脚本性能转换"></a>脚本性能转换</h2><ul><li>逻辑控制器：事务控制器</li><li>造测试数据库：DDT数据驱动性能测试（CSV文件设置）</li><li>线程组配置（性能场景设计）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;11-其他协议&quot;&gt;&lt;a href=&quot;#11-其他协议&quot; class=&quot;headerlink&quot; title=&quot;11-其他协议&quot;&gt;&lt;/a&gt;11-其他协议&lt;/h1&gt;&lt;h2 id=&quot;CSV数据文件设置&quot;&gt;&lt;a href=&quot;#CSV数据文件设置&quot; class=&quot;headerlink&quot; title=&quot;CSV数据文件设置&quot;&gt;&lt;/a&gt;CSV数据文件设置&lt;/h2&gt;&lt;h3 id=&quot;文件名&quot;&gt;&lt;a href=&quot;#文件名&quot; class=&quot;headerlink&quot; title=&quot;文件名&quot;&gt;&lt;/a&gt;文件名&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过「浏览」来选择，这个路径是「绝对路径」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「相对路径」&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写法：&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;./&lt;/code&gt; 或&lt;code&gt;.\&lt;/code&gt;开始。建议使用&lt;code&gt;.\&lt;/code&gt;。因为这个是linux下的写法，并且在windows下也可以正常使用&lt;/p&gt;
&lt;p&gt;从哪个地方相对开始：&lt;/p&gt;
&lt;p&gt;从当前&lt;code&gt;jmx&lt;/code&gt;文件保存的路径&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>10-逻辑控制器</title>
    <link href="http://zx490336534.github.io/article/ad741ca2.html"/>
    <id>http://zx490336534.github.io/article/ad741ca2.html</id>
    <published>2021-04-19T14:56:00.000Z</published>
    <updated>2021-04-22T14:34:11.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-逻辑控制器"><a href="#10-逻辑控制器" class="headerlink" title="10-逻辑控制器"></a>10-逻辑控制器</h1><h2 id="IF条件控制器"><a href="#IF条件控制器" class="headerlink" title="IF条件控制器"></a>IF条件控制器</h2><ol><li><code>Interpret Condition as Variable Expression?</code>默认勾选：</li></ol><ul><li><p>条件结果为<code>true</code>才会执行子取样器</p></li><li><p>需要使用<code>${__jexl3(,)}</code>和<code>${__groovy(,)}</code>进行逻辑判断</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${__jexl3(<span class="string">"${var1}"</span>==<span class="string">"value"</span>,)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppdhvqu4lj313u0cetbo.jpg" alt="如果（if）控制器"></p><ol start="2"><li>不勾选<code>Interpret Condition as Variable Expression?</code>会直接用<code>JavaScript</code>   语法</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"${var1}"</span>==<span class="string">"value"</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><code>Evaluate for all children?</code> 执行子节点前先计算表达式真假<span id="more"></span><h2 id="循环控制器"><a href="#循环控制器" class="headerlink" title="循环控制器"></a>循环控制器</h2></li></ol><p>循环次数 控制循环的次数</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppdxx7f5aj30tp04tjry.jpg" alt="循环控制器"></p><p>循环控制器+计数器=foreach控制器</p><p>循环完内容后还是会打印，直到达到循环次数</p><h2 id="foreach控制器"><a href="#foreach控制器" class="headerlink" title="foreach控制器"></a>foreach控制器</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppdyz9ssyj30tp084758.jpg" alt="foreach控制器"></p><p>假如有3个变量：<code>user_1</code>,<code>user_2</code>,<code>user_3</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppe1ub9qcj30tp084my4.jpg" alt="填写"></p><p>之后使用<code>${dr}</code>就可以使用这个变量了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)</span><br></pre></td></tr></tbody></table></figure><p>循环内容被循环完之后不再继续打印</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>jdbc协议，从数据库中，获取数据，进行循环使用</p><h2 id="仅一次控制器"><a href="#仅一次控制器" class="headerlink" title="仅一次控制器"></a>仅一次控制器</h2><p>每个用户都只执行一次</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppey4vzqhj30tp084jry.jpg" alt="仅一次控制器"></p><h2 id="临界部分控制器"><a href="#临界部分控制器" class="headerlink" title="临界部分控制器"></a>临界部分控制器</h2><p>把jmeter脚本的并行执行，强制变成串行执行</p><ul><li><p>固定锁，强制把多用户并行执行，变成单通道串行执行</p></li><li><p>动态锁，锁名称修改为<code>global_lock_${__threadNum}</code></p></li></ul><blockquote><h1 id="Critical-Section-Controller-临界部分控制器-到底该如何用"><a href="#Critical-Section-Controller-临界部分控制器-到底该如何用" class="headerlink" title="Critical Section Controller (临界部分控制器) 到底该如何用?"></a>Critical Section Controller (临界部分控制器) 到底该如何用?</h1><p>有同学在使用 jmeter 做性能测试的时候，有这样一个诉求，就是一个完整的业务包含多个接口请求，且有先后顺序。在做性能测试的时候，要求接口请求顺序永远按照自己定义好的请求顺序执行。</p><p>于是，他就在 jmeter 中线程组下按顺序添加了多个接口请求取样器，模拟并发请求调试。看到效果如下图(图一)：</p><p><img src="http://testingpai.com/upload/file/2020/5eed103b-4553-4591-8654-14e4accf7b97.gif" alt="image.png"></p><p>脚本调试是通了，但是，他看到查看结果树中显示请求结果数据好像不是按照顺序请求(没有仔细去分析，根据结果自认为的)，认为这样不符合自己的诉求，于是开始寻找新的办法。通过长时间的摸索，终于找到了一个貌似能解决的办法，增加一个 critical section controller(临界部分控制器)，认为增加一个锁，能控制执行顺序。于是修改脚本生成如图(图二):</p><p><img src="http://testingpai.com/upload/file/2020/2ed3450c-0ec3-4376-968c-bfb6be4c193c.gif" alt="image.png"></p><p>看到 查看结果树中显示的请求顺序与预期一致，是按照接口的顺序执行的，于是认为这样就是正确的。</p><p><strong>但是</strong>，不知道大家看了这两个图后，有没有注意一个细节？</p><p><em>第一种方式：</em></p><p><img src="http://testingpai.com/upload/file/2020/7dd05c73-246f-41a9-93ba-068e30cc979c.jpg" alt="image.png"></p><p>728 x 334 1199 x 550</p><p><img src="http://testingpai.com/upload/file/2020/ef1615be-70e6-46b9-8dfe-480bbf2f1f3a.jpg" alt="image.png"></p><p><em>第二种方式：</em></p><p><img src="http://testingpai.com/upload/file/2020/e8c17d01-0b4e-4f09-a386-07230731897e.jpg" alt="image.png"></p><p>728 x 338 1197 x 555</p><p><img src="http://testingpai.com/upload/file/2020/669f3afc-0226-4666-a430-ea1c7cdb61a9.jpg" alt="image.png"></p><p>第一种方式，整个执行过程只用了 4 秒种，第二种方式，执行过程耗时 13 秒，汇总报告中的吞吐量是按每分钟计算。*</p><p>这句话什么意思呢？就是说，第二种方式，虽然眼睛是看到了查看结果树中的数据是按照自定义的顺序执行的，但是执行时间远远大于第一种方式，换句话说，服务器的压力要远远小于第一种方式。<strong>人为的方式导致性能测试指标值错误</strong>。</p><p><strong>哪我们应该怎么做呢？</strong></p><p>首先，对于这样一种，遇到问题时，自主思考和学习的行为能力，还是值得表扬和肯定的。只是，需要学习的时候，再深入一点点，再细致一点点。</p><p>接下来，我们讲讲该怎么做。首先，我们要知道，在 jmeter 中，同层级无逻辑控制器控制的取样器，执行顺序是从上往下，顺序执行的。这句话，怎么理解？在我们单个用户脚本调试阶段，执行顺序是从上往下；在多用户并发时，每一个并发用户(线程)，也都是从上往下执行的，只是因为是并发，同一时刻，可能有不同用户(线程)做完了不同接口请求，查看结果树只是按照完成时间的先后显示请求结果。为了验证我说的这句话，我们可以再看下下图(图三)</p><p><img src="http://testingpai.com/upload/file/2020/5792442b-64e9-4965-b569-94793a97880b.gif" alt="image.png"></p><p>从查看结果树中，我们看 ThreadNum 号想同的请求，请求的顺序是不是都从 sample1 到 sample3。这样，其实已经满足了预期诉求。</p><p>哪 critical section controller(临界部分控制器)到底怎么用呢？我们先看下官方给我们的解答：</p><p><img src="http://testingpai.com/upload/file/2020/798642a1-cebb-4b3a-aefe-8e8d1825f959.jpg" alt="image.png"></p><p>临界部分控制器确保其子元素(采样器\控制器等)将仅由一个线程执行，在执行控制器的子元素之前先命名一个锁锁定。</p><p><img src="http://testingpai.com/upload/file/2020/f76f4d50-eab9-4e3a-b0a8-efc076372bfc.jpg" alt="image.png"></p><p>说直白点，就是并发请求(线程)这个控制器时，会先根据‘锁名称’生成一个‘锁’，锁定控制器下的所有子元素，等到所有子元素都执行完‘锁’才会释放，下一个请求(线程)才能执行，即，把原本的并发请求的并行处理方式，变成了串行处理。所以，就会看到上面我们说到的第二种方式的时间远远大于第一种方式。哪如何让 critical section controller 可以并行处理呢？我们再看看官方给的解释，它说的是，线程执行时，先根据‘锁名称’生成锁，串行，是因为锁名称相同，已经被占用，无法生成新的锁，所以只能等待锁的释放，哪我们是不是可以考虑让锁名称变成动态的呢？每个线程要用的时候，生成一个新的锁名称而且不重复，是不是就可以并行处理了。想要锁名称变成动态，方法很多，使用随机数函数、使用时间戳函数、使用线程数函数……, 是不是很多，只要用个自动生成值的函数就可以。</p><p><img src="http://testingpai.com/upload/file/2020/49d0dcc6-62d0-4023-adc7-342cd922e3fe.gif" alt="image.png"></p><p>这个，就是修改了 critical section controller 的锁名称为动态值，当某个线程调用时，就会自动生成一个新的锁名称。看最后执行的时间 5 秒，汇总报告中的吞吐量，是不是和第一种方式基本相同？</p><p>当然，有的同学比较追求完美，就是想看到最后的结果一定要按顺序展示。没问题，满足你的要求。</p><p><img src="http://testingpai.com/upload/file/2020/d924c77b-51eb-435f-932a-cdd02518e29b.gif" alt="image.png"></p><p>是不是，看到结果也是你指定的顺序，执行的时间也和第一种相同，最后的汇总报告中，看到了一个事务总数据。</p><p>好了，critical section controller(临界部分控制器)的使用，你是否已经掌握了呢？</p><p>作者：Allen<br>链接：<a href="http://testingpai.com/article/1595507267745">http://testingpai.com/article/1595507267745</a><br>来源：测试派<br>协议：CC BY-SA 4.0 <a href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></p></blockquote><h2 id="随机控制器"><a href="#随机控制器" class="headerlink" title="随机控制器"></a>随机控制器</h2><p>多个取样器中随机选一个</p><h2 id="随机顺序控制器"><a href="#随机顺序控制器" class="headerlink" title="随机顺序控制器"></a>随机顺序控制器</h2><p>多个取样器随机顺序执行</p><h2 id="吞吐量控制器"><a href="#吞吐量控制器" class="headerlink" title="吞吐量控制器"></a>吞吐量控制器</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppfcgse61j30tp084wf7.jpg" alt="吞吐量"></p><h1 id="DDT数据驱动性能测试"><a href="#DDT数据驱动性能测试" class="headerlink" title="DDT数据驱动性能测试"></a>DDT数据驱动性能测试</h1><h2 id="CSV文件"><a href="#CSV文件" class="headerlink" title="CSV文件"></a>CSV文件</h2><p>文本文件，是用英文逗号分隔的文本文件</p><h2 id="CSV数据文件设置"><a href="#CSV数据文件设置" class="headerlink" title="CSV数据文件设置"></a>CSV数据文件设置</h2><p>这个方法，是使用人数最多的数据驱动性能测试方法</p><p>但是，这个不是最优的数据驱性能测试方法</p><ul><li>文件名：必传，文本文件（txt，csv，xls）</li></ul><blockquote><p> 推荐用txt，是操作系统默认的文本文件格式</p><p>txt默认编码是utf8</p></blockquote><blockquote><p>csv文件，保存采用默认编码，不是utf8</p><p>csv文件打开比txt消耗大</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppfuo16qdj30tp0csjt3.jpg" alt="csv数据文件设置"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;10-逻辑控制器&quot;&gt;&lt;a href=&quot;#10-逻辑控制器&quot; class=&quot;headerlink&quot; title=&quot;10-逻辑控制器&quot;&gt;&lt;/a&gt;10-逻辑控制器&lt;/h1&gt;&lt;h2 id=&quot;IF条件控制器&quot;&gt;&lt;a href=&quot;#IF条件控制器&quot; class=&quot;headerlink&quot; title=&quot;IF条件控制器&quot;&gt;&lt;/a&gt;IF条件控制器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Interpret Condition as Variable Expression?&lt;/code&gt;默认勾选：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;条件结果为&lt;code&gt;true&lt;/code&gt;才会执行子取样器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要使用&lt;code&gt;${__jexl3(,)}&lt;/code&gt;和&lt;code&gt;${__groovy(,)}&lt;/code&gt;进行逻辑判断&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;${__jexl3(&lt;span class=&quot;string&quot;&gt;&quot;${var1}&quot;&lt;/span&gt;==&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;,)}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008eGmZEly1gppdhvqu4lj313u0cetbo.jpg&quot; alt=&quot;如果（if）控制器&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;不勾选&lt;code&gt;Interpret Condition as Variable Expression?&lt;/code&gt;会直接用&lt;code&gt;JavaScript&lt;/code&gt;   语法&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;${var1}&quot;&lt;/span&gt;==&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;code&gt;Evaluate for all children?&lt;/code&gt; 执行子节点前先计算表达式真假&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>9-正则提取器</title>
    <link href="http://zx490336534.github.io/article/c04862c6.html"/>
    <id>http://zx490336534.github.io/article/c04862c6.html</id>
    <published>2021-04-19T13:22:00.000Z</published>
    <updated>2021-04-22T14:34:11.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-正则提取器"><a href="#9-正则提取器" class="headerlink" title="9-正则提取器"></a>9-正则提取器</h1><h2 id="正则提取器"><a href="#正则提取器" class="headerlink" title="正则提取器"></a>正则提取器</h2><h3 id="apply-to"><a href="#apply-to" class="headerlink" title="apply to"></a>apply to</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl6zeymgoj30ti09bt9n.jpg" alt="apply to"></p><ul><li>Main sample and sub-samples 主取样器+子取样器</li><li>Main sample only 主取样器</li><li>Sub-sample only 子取样器</li><li>JMeter Variable Name to use：从一个变量中再提取想要的信息。直接写变量名称即可</li></ul><p>正则提取式的写法：左边界(正则式)右边界</p><p>「模版」的固定格式：<code>$数字$</code> 这个数字从1开始</p><span id="more"></span><h3 id="提取信息测试"><a href="#提取信息测试" class="headerlink" title="提取信息测试"></a>提取信息测试</h3><p>填写后进行测试：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl79zzutzj30ti09b3zj.jpg" alt="填写"></p><p>在「调试取样器」中可以看到<code>reg_msg</code>被正确赋值为我们正则匹配到的内容</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7awymsvj30ti0mctd7.jpg" alt="查看结果"></p><h3 id="进行二次提取"><a href="#进行二次提取" class="headerlink" title="进行二次提取"></a>进行二次提取</h3><p>使用「JMeter Variable Name to use」对「token」进行二次提取</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7ovralhj30ti099my7.jpg" alt="二次提取"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7q03i4jj30ti0o7gpt.jpg" alt="结果"></p><h3 id="提取响应头"><a href="#提取响应头" class="headerlink" title="提取响应头"></a>提取响应头</h3><p>选择「Request Headers」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7tv2q06j30ti09odgx.jpg" alt="响应头"></p><p>运行测试</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7uqj0ocj30ti0qn433.jpg" alt="查看结果"></p><h2 id="脚本性能转换"><a href="#脚本性能转换" class="headerlink" title="脚本性能转换"></a>脚本性能转换</h2><p>在jmeter中，默认一个取样器的一次请求，就是一个事务</p><p>如果想要把多个接口<strong>合并</strong>成为一个事务，合计「tps」值。</p><p>需要添加「事务控制器」 一定要勾选「generate parent sample」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl8cxvhz5j30ti056t8z.jpg" alt="事务控制器"></p><h2 id="聚合报告"><a href="#聚合报告" class="headerlink" title="聚合报告"></a>聚合报告</h2><ul><li>样本：事务的总请求次数</li><li>平均值、中位数、90%、95%、99%、最小值、最大值：都是响应时间<ul><li>xx% 的时间都是小于xxx响应时间</li></ul></li><li>异常</li><li>吞吐量：在固定不变的并发用户数情况下，且没有网络瓶颈时，与tps相等</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl8ffg929j313u0biact.jpg" alt="聚合报告"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;9-正则提取器&quot;&gt;&lt;a href=&quot;#9-正则提取器&quot; class=&quot;headerlink&quot; title=&quot;9-正则提取器&quot;&gt;&lt;/a&gt;9-正则提取器&lt;/h1&gt;&lt;h2 id=&quot;正则提取器&quot;&gt;&lt;a href=&quot;#正则提取器&quot; class=&quot;headerlink&quot; title=&quot;正则提取器&quot;&gt;&lt;/a&gt;正则提取器&lt;/h2&gt;&lt;h3 id=&quot;apply-to&quot;&gt;&lt;a href=&quot;#apply-to&quot; class=&quot;headerlink&quot; title=&quot;apply to&quot;&gt;&lt;/a&gt;apply to&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008eGmZEly1gpl6zeymgoj30ti09bt9n.jpg&quot; alt=&quot;apply to&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Main sample and sub-samples 主取样器+子取样器&lt;/li&gt;
&lt;li&gt;Main sample only 主取样器&lt;/li&gt;
&lt;li&gt;Sub-sample only 子取样器&lt;/li&gt;
&lt;li&gt;JMeter Variable Name to use：从一个变量中再提取想要的信息。直接写变量名称即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正则提取式的写法：左边界(正则式)右边界&lt;/p&gt;
&lt;p&gt;「模版」的固定格式：&lt;code&gt;$数字$&lt;/code&gt; 这个数字从1开始&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>8-Json提取器</title>
    <link href="http://zx490336534.github.io/article/602b9665.html"/>
    <id>http://zx490336534.github.io/article/602b9665.html</id>
    <published>2021-04-15T22:39:00.000Z</published>
    <updated>2021-04-22T14:34:11.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-Json提取器"><a href="#8-Json提取器" class="headerlink" title="8-Json提取器"></a>8-Json提取器</h1><h2 id="属性函数"><a href="#属性函数" class="headerlink" title="属性函数"></a>属性函数</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>以<code>.properties</code>结尾的文件，都是属性配置文件</p><span id="more"></span><h3 id="变量与属性"><a href="#变量与属性" class="headerlink" title="变量与属性"></a>变量与属性</h3><ul><li><p>变量：变量是自己在脚本中定义的</p></li><li><p>属性：jmeter启动时获取</p><ul><li><p><strong>静态属性</strong>：在属性配置文件中配置</p></li><li><p><strong>动态属性</strong>：在jmeter运行过程中，动态设置的</p></li><li><p><strong>系统属性</strong>：Jmeter运行环境属性</p></li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjh464092j30gg09p76p.jpg" alt="属性显示"></p><ul><li>查看Jmeter属性</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjh4o1xvpj30xr0u0thj.jpg" alt="Jmeter属性"></p><ul><li>查看系统属性</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjh6p1g98j30xr0u0tjb.jpg" alt="系统属性"></p><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><ul><li><code>${__P(,)}</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhbqaxgqj30lv0hgwhe.jpg" alt="P"></p><ul><li><code>${__property(,,)}</code></li></ul><p>调用属性</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhcjsbruj30lv0hgmzq.jpg" alt="property"></p><p>在「函数助手」中设置属性名称为<code>jmeter.version</code>后点击生成。可以看到结果与「属性显示」中一致</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhf3wlepj30lb0feabq.jpg" alt="获取值"></p><h3 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h3><p><code>${__setProperty(,,)}</code></p><p>给内容或变量设置属性名称</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhdacxf3j30lv0d375w.jpg" alt="setProperty"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在DDT，混合场景时候会用到</p><h2 id="拼接函数"><a href="#拼接函数" class="headerlink" title="拼接函数"></a>拼接函数</h2><p><code>${__V(,)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhoqlblaj30lb0eqtak.jpg" alt="V函数"></p><p>假如要拼接几个字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_1</span><br><span class="line">user_2</span><br><span class="line">user_3</span><br></pre></td></tr></tbody></table></figure><p>使用拼接函数<code>${__V(user_${__counter(,)},)}</code></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>在jdbc从数据库获取数据中，会使用到</p><h2 id="Json提取器"><a href="#Json提取器" class="headerlink" title="Json提取器"></a>Json提取器</h2><p><code>Match No.</code>:提取内容的索引，-1表示全部</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjii1v3k0j30ti07u3z7.jpg" alt="Json提取器"></p><p>提取式：<code>$.</code>开头</p><p>可以在「查看结果树」中调试</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjij20b2wj30ti0ftq5h.jpg" alt="查看结果树"></p><p>采用<code>$..</code>+末梢节点名称：相对路径提取方法</p><p>如果末梢节点存在多个，会返回数组「多个结果」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjikk5cpgj30ti0ftwh1.jpg" alt="相对位置"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjily0rmjj30ti0gpacl.jpg" alt="多个结果"></p><h3 id="提取多个值"><a href="#提取多个值" class="headerlink" title="提取多个值"></a>提取多个值</h3><p>每个内容之间都需要使用<code>;</code>来分隔</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjiwzdzynj30ti081q3o.jpg" alt="提取多个"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjiwev1oej30ti0iljuq.jpg" alt="查看结果"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;8-Json提取器&quot;&gt;&lt;a href=&quot;#8-Json提取器&quot; class=&quot;headerlink&quot; title=&quot;8-Json提取器&quot;&gt;&lt;/a&gt;8-Json提取器&lt;/h1&gt;&lt;h2 id=&quot;属性函数&quot;&gt;&lt;a href=&quot;#属性函数&quot; class=&quot;headerlink&quot; title=&quot;属性函数&quot;&gt;&lt;/a&gt;属性函数&lt;/h2&gt;&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;p&gt;以&lt;code&gt;.properties&lt;/code&gt;结尾的文件，都是属性配置文件&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>7-Jmeter函数</title>
    <link href="http://zx490336534.github.io/article/13f41b93.html"/>
    <id>http://zx490336534.github.io/article/13f41b93.html</id>
    <published>2021-04-10T07:39:00.000Z</published>
    <updated>2021-04-22T14:34:11.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-Jmeter函数"><a href="#7-Jmeter函数" class="headerlink" title="7-Jmeter函数"></a>7-Jmeter函数</h1><h2 id="用户参数"><a href="#用户参数" class="headerlink" title="用户参数"></a>用户参数</h2><h3 id="每次迭代更新一次"><a href="#每次迭代更新一次" class="headerlink" title="每次迭代更新一次"></a>每次迭代更新一次</h3><p><code>每次迭代更新一次</code>：勾选的话，在当前线程组中，所有取样器执行完一轮请求，才会更新一次，没有执行完不会更新值</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpen4zlozbj30x406ymz5.jpg" alt="每次跌打更新一次"></p><span id="more"></span><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>做性能测试时，先注册随机账号，然后再用账号登录，不需要提前准备测试数据</p><p>如果使用<code>用户定义变量</code>的话，生成的手机号，一直不发生改变，只有第一次注册成功，之后都是注册失败。但是登录可以一直成功。</p><h2 id="变量的引用与定义"><a href="#变量的引用与定义" class="headerlink" title="变量的引用与定义"></a>变量的引用与定义</h2><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p>字母、数字、下划线</p><h2 id="函数助手"><a href="#函数助手" class="headerlink" title="函数助手"></a>函数助手</h2><p>写法：双下划线开头+函数名称(区分大小写)+小括号+括号中以逗号分隔的参数</p><h3 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${__counter(,)} </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenhv0bchj30q40icdi8.jpg" alt="函数例子"></p><p>新建一个「调试取样器」，并将名称修改为<code>${__counter(,)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenphxn32j30x406y0uh.jpg" alt="调试取样器"></p><p>修改「线程组」循环次数为5次</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenq1kybaj30y40aqdi4.jpg" alt="线程组"></p><p>运行后查看「查看结果树」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenrcucbuj30z70c8di7.jpg" alt="查看结果树"></p><h3 id="统计函数类似元件-计数器"><a href="#统计函数类似元件-计数器" class="headerlink" title="统计函数类似元件-计数器"></a>统计函数类似元件-计数器</h3><p>新建一个「计数器」</p><ul><li>设置它的引用名称为<code>${d}</code></li><li>开始值为1</li><li>递增值为2</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenx104m7j30z70c8q58.jpg" alt="计数器"></p><p>新建一个「调试取样器」，并将名称修改为<code>${d}</code></p><p>运行后查看「查看结果树」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenxv0rabj30z70c8mzk.jpg" alt="查看结果树"></p><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeoy1ibfbj30um092q4n.jpg" alt="时间"></p><ul><li><p><code>${__time(,)}</code>：获取当前时间戳</p></li><li><p><code>${__timeShift(,,,,)}</code>：时间位移</p></li><li><p><code>${__dateTimeConvert(,,,)}</code>：时间戳转为本地时间</p></li><li><p><code>${__RandomDate(,,,,)}</code>：随机时间</p></li></ul><h4 id="获取当前时间戳函数-time"><a href="#获取当前时间戳函数-time" class="headerlink" title="获取当前时间戳函数${__time(,)}"></a>获取当前时间戳函数<code>${__time(,)}</code></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeo6bbawtj30lr0nrq6i.jpg" alt="time"></p><p>可能用的最多的就是通过这个函数，可以生成<strong>当前时间的时间戳</strong>，或者<strong>格式化当前时间</strong>。</p><p>常用于接口参数需要时间时的参数。</p><p>这个函数，有两个可填参数。</p><ul><li>如果都不填，那么获得的是当前时间的时间戳；</li><li>如果填第一个参数，就是<strong>格式化当前时间</strong>，填写对应的时间格式，把当前时间用对应的格式返回；如果想要格式化时间精确到毫秒：<code>${__time(yyyy-MM-dd HH:mm:ss:SSS,)}</code></li><li>如果填第二个参数，就是把时间结果用一个<strong>变量</strong>接收</li></ul><p>但是，不管怎么用，都只能<strong>获取当前时间</strong>。</p><h4 id="时间位移-timeShift"><a href="#时间位移-timeShift" class="headerlink" title="时间位移${__timeShift(,,,,)}"></a>时间位移<code>${__timeShift(,,,,)}</code></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeo5sztc1j30lr0qijw3.jpg" alt="timeShift"></p><p>这个函数，是离获取当前时间的 time 函数最近的一个函数，也是大家最容易与 time 函数混淆的函数。是<strong>时间位移</strong>函数。</p><p>常见于脚本中需要做时间偏移计算时用。</p><p>这个函数，它有五个可选参数：</p><p>如果所有的都不填，哪也是获取当前的时间戳；</p><p>第 1 个参数，是<strong>格式化时间</strong>，如果不填，时间戳精确到毫秒，如果填了，就格式化输出时间；</p><p>第 2 个参数，<strong>日期</strong>，上一个参数的格式返回这个日期，如：<code>${__timeShift(yyyy-MM-dd,20200915,,,)}</code> 如果未填，则为当前日期；</p><p>第 3 个参数，<strong>时间位移</strong>，以可选的正号‘+’ 和负号‘-’开头，负号‘-’开头，表示整个时间相减；再以大小写 p 为前缀，后面跟具体位移数和单位，单位’D’为天，’H’为小时，’M’为分钟， ‘S’为秒，而’T’必须在任意一个 H\M\S 出现之前，数字可以是正数或负数；天\时\分，前的数字为整数，秒，可以是小数。如在当前日期上增加 2 天 4 小数 6 分 10.234 秒：<code>${__timeShift(yyyy-MM-dd HH:mm:ss:SSS,,p2dt4h6m10.234s,,)}</code></p><p>第 4 个参数，<strong>区域语言设置</strong></p><p>第 5 个参数，定义<strong>存储结果的变量名</strong></p><h4 id="时间戳转为本地时间-dateTimeConvert"><a href="#时间戳转为本地时间-dateTimeConvert" class="headerlink" title="时间戳转为本地时间${__dateTimeConvert(,,,)}"></a>时间戳转为本地时间<code>${__dateTimeConvert(,,,)}</code></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeo7bsjp0j30lr0j6wha.jpg" alt="dateTimeConvert"></p><p><strong>将时间戳转换为本地时间</strong>。</p><p>常用于对接口响应结果中的时间戳进行转换。</p><p>这个函数，有四个参数</p><p>第 1 个参数，<strong>被转换的时间</strong>，为空时，表示当前时间戳，精确到毫秒</p><p>第 2 个参数，被转换时间的<strong>时间格式</strong>，上面时间的格式</p><p>第 3 个参数，<strong>转换后的时间格式</strong>，   </p><ul><li>例：<code>${__dateTimeConvert(09102020011034,MMddyyyyHHmmss,yyyyMMddHHmmss,)}</code> 原始时间格式为：月日年时分秒，转换后为：年月日时分秒</li><li>例 2：<code>${__dateTimeConvert(1599723255000,,yyyyMMdd HHmmss,)}</code> 一个精确到毫秒的时间戳，转换为：年月日 时分秒 格式时间</li></ul><p>第 4 个参数，定义<strong>存储结果的变量名称</strong></p><h4 id="随机时间-RandomDate"><a href="#随机时间-RandomDate" class="headerlink" title="随机时间${__RandomDate(,,,,)}"></a>随机时间<code>${__RandomDate(,,,,)}</code></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeo8nijzzj30li0jv0vs.jpg" alt="RandomDate"></p><p>它是<strong>随机日期函数</strong>。可以在一个随机日期之间，随机选一个日期返回。注意，这个函数操作的是 <strong>日期</strong>。</p><p>这个函数，有五个参数</p><p>第 1 个参数，<strong>日期格式</strong>，默认为 年-月-日</p><p>第 2 个参数，<strong>起始日期</strong>，随机日期区间起始值，包含起始值，空时，默认为当前日期</p><p>第 3 个参数，<strong>结束日期</strong>，随机日期区间结束值，不包含结束值   </p><ul><li>例：<code>${__RandomDate(yyyyMMdd,20200718,20200918,,)}</code> 从一个日期格式为 yyyyMMdd 日期区间随机区一个日期</li></ul><p>第 4 个参数，<strong>区域语言设置</strong></p><p>第 5 个参数，定义<strong>存储的变量名称</strong></p><h3 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpep0j2gxzj30lr0o7n0i.jpg" alt="简单加密"></p><p><code>${__digest(,,,,)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeozt8yxvj30o40jj41v.jpg" alt="加密"></p><h3 id="整数java运算"><a href="#整数java运算" class="headerlink" title="整数java运算"></a>整数java运算</h3><p><code>${__intSum(1,2,)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpep26id01j30ql0jcq5o.jpg" alt="运算"></p><h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><p><code>__jexl3</code>：支持jython、groovy、javascript</p><h3 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h3><p><code>__log</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpep3s564lj30qo0jn0vy.jpg" alt="打印日志"></p><h3 id="获取当前IP"><a href="#获取当前IP" class="headerlink" title="获取当前IP"></a>获取当前IP</h3><p><code>${__machineIP()}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpep453i8vj30o40gt773.jpg" alt="当前IP"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;7-Jmeter函数&quot;&gt;&lt;a href=&quot;#7-Jmeter函数&quot; class=&quot;headerlink&quot; title=&quot;7-Jmeter函数&quot;&gt;&lt;/a&gt;7-Jmeter函数&lt;/h1&gt;&lt;h2 id=&quot;用户参数&quot;&gt;&lt;a href=&quot;#用户参数&quot; class=&quot;headerlink&quot; title=&quot;用户参数&quot;&gt;&lt;/a&gt;用户参数&lt;/h2&gt;&lt;h3 id=&quot;每次迭代更新一次&quot;&gt;&lt;a href=&quot;#每次迭代更新一次&quot; class=&quot;headerlink&quot; title=&quot;每次迭代更新一次&quot;&gt;&lt;/a&gt;每次迭代更新一次&lt;/h3&gt;&lt;p&gt;&lt;code&gt;每次迭代更新一次&lt;/code&gt;：勾选的话，在当前线程组中，所有取样器执行完一轮请求，才会更新一次，没有执行完不会更新值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008eGmZEly1gpen4zlozbj30x406ymz5.jpg&quot; alt=&quot;每次跌打更新一次&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>6-手写Jmeter与录制</title>
    <link href="http://zx490336534.github.io/article/a44ae78a.html"/>
    <id>http://zx490336534.github.io/article/a44ae78a.html</id>
    <published>2021-04-09T12:39:00.000Z</published>
    <updated>2021-04-22T14:34:11.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-手写Jmeter与录制"><a href="#6-手写Jmeter与录制" class="headerlink" title="6-手写Jmeter与录制"></a>6-手写Jmeter与录制</h1><h2 id="元件作用域"><a href="#元件作用域" class="headerlink" title="元件作用域"></a>元件作用域</h2><h3 id="「取样器」"><a href="#「取样器」" class="headerlink" title="「取样器」"></a>「取样器」</h3><p>作用：只作用于自身</p><p>作用域：无作用域</p><span id="more"></span><h3 id="「逻辑控制器」"><a href="#「逻辑控制器」" class="headerlink" title="「逻辑控制器」"></a>「逻辑控制器」</h3><p>作用：控制子节点</p><p>作用域：作用于子节点</p><h3 id="「前置处理器」"><a href="#「前置处理器」" class="headerlink" title="「前置处理器」"></a>「前置处理器」</h3><p>作用：在取样器执行前执行</p><p>作用域：影响所有取样器</p><h3 id="「后置处理器」"><a href="#「后置处理器」" class="headerlink" title="「后置处理器」"></a>「后置处理器」</h3><p>作用：在取样器之后执行，影响在此之后的取样器</p><p>作用域：后续取样器</p><h3 id="「断言」"><a href="#「断言」" class="headerlink" title="「断言」"></a>「断言」</h3><p>作用：取样器之后执行</p><p>作用域：当前取样器</p><h3 id="「定时器」"><a href="#「定时器」" class="headerlink" title="「定时器」"></a>「定时器」</h3><p>作用：影响同级及子级取样器</p><p>作用域：同级及子级</p><h3 id="「配置元件」"><a href="#「配置元件」" class="headerlink" title="「配置元件」"></a>「配置元件」</h3><p>作用：影响同级及子级元件</p><p>作用域：同级及子级</p><h3 id="「监听器」"><a href="#「监听器」" class="headerlink" title="「监听器」"></a>「监听器」</h3><p>作用：收集取样器执行数据</p><p>作用域：同级</p><h2 id="取样器执行顺序"><a href="#取样器执行顺序" class="headerlink" title="取样器执行顺序"></a>取样器执行顺序</h2><p>在没有<strong>逻辑控制器</strong>控制时，执行顺序为「从上往下」</p><p><strong>查看结果树</strong>中显示的顺序是根据「收到响应的时间先后」排序的</p><h2 id="狭义并发与广义并发"><a href="#狭义并发与广义并发" class="headerlink" title="狭义并发与广义并发"></a>狭义并发与广义并发</h2><p>一般情况下，不会加集合点，不加集合点，是广义并发，请求量相对更大，更能体现服务器的性能</p><p>狭义的并发：需要加上集合点，总请求量会被强制降低，服务器的性能结果就不一定准确       </p><h2 id="手写脚本"><a href="#手写脚本" class="headerlink" title="手写脚本"></a>手写脚本</h2><h3 id="HTTP请求默认值"><a href="#HTTP请求默认值" class="headerlink" title="HTTP请求默认值"></a>HTTP请求默认值</h3><p>写一次「服务器名称或IP」，其他HTTP取样器可以不用填写</p><p>取样器填写后会覆盖默认值</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd4grd6xfj313u0bv0w0.jpg" alt="HTTP请求默认值"></p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>当有登录接口，和需要登录之后才能正常请求的接口时，<strong>一定要加上</strong></p><p>cookie管理器，特殊情况下才需要修改</p><h3 id="缓存管理器"><a href="#缓存管理器" class="headerlink" title="缓存管理器"></a>缓存管理器</h3><p>大多数情况下不使用</p><h2 id="录制脚本"><a href="#录制脚本" class="headerlink" title="录制脚本"></a>录制脚本</h2><h3 id="badboy录制"><a href="#badboy录制" class="headerlink" title="badboy录制"></a>badboy录制</h3><ol><li>打开badboy，url地址输入访问的网址，进行相关操作</li><li>工具 file-&gt;export to jmeter</li><li>jmeter打开导出文件</li></ol><p>不推荐使用</p><ul><li>工具不再维护</li><li>这个工具，对应新的前端写法不兼容</li></ul><h3 id="http代理服务器"><a href="#http代理服务器" class="headerlink" title="http代理服务器"></a>http代理服务器</h3><ol><li>新建一个项目</li><li>「测试计划」下添加「线程组」</li><li>添加「非测试元件-&gt;http代理服务器」</li><li>目标控制器选择 「测试计划-&gt;线程组」</li><li>点击「启动」，出现一个证书弹窗，自动生成证书</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd4zjykz2j30po0betba.jpg" alt="证书"></p><ol start="6"><li><p>打开计算机的代理设置或者配置浏览器代理</p></li><li><p>操作网页</p></li></ol><h4 id="配置浏览器代理"><a href="#配置浏览器代理" class="headerlink" title="配置浏览器代理"></a>配置浏览器代理</h4><p>使用「SwitchyOmega」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd54scy8cj30bh064mxj.jpg" alt="浏览器代理"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd5b0tgmyj313k0gymz8.jpg" alt="添加情景模式"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpdr6rcg06j31h40u0q9f.jpg" alt="录制结果"></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>新建一个「用户参数」</p><p>点击「添加变量」，名称为<code>myuser</code>,用户_1为：<code>15168230666</code></p><p>变量引用:<code>${muser}</code></p><h2 id="函数助手"><a href="#函数助手" class="headerlink" title="函数助手"></a>函数助手</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpdqu1anksj30x4035q40.jpg" alt="函数助手"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd5wl0wotj30o40gtacy.jpg" alt="函数助手"></p><p>修改我们的变量</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd5y0mpg8j313l04sjsc.jpg" alt="修改变量"></p><p>修改使用处</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd60r6k1ej313l0h6goi.jpg" alt="修改入参"></p><p>查看运行结果</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd6087espj313l0h6gpe.jpg" alt="查看结果"></p><h3 id="用户定义变量与用户参数"><a href="#用户定义变量与用户参数" class="headerlink" title="用户定义变量与用户参数"></a>用户定义变量与用户参数</h3><ul><li>「用户定义变量」是全局变量，启动运行时，调用一次，在运行过程中不再调用</li><li>「用户参数」是局部变量，在启动时调用一次，在运行过程中，使用时也会再次调用</li></ul><p>全局变量，只要在作用域范围内，都可以使用</p><p>局部变量，在线程组之外，是不能被使用的</p><p>jmeter的线程组之间，不能直接传递参数（局部变量）。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;6-手写Jmeter与录制&quot;&gt;&lt;a href=&quot;#6-手写Jmeter与录制&quot; class=&quot;headerlink&quot; title=&quot;6-手写Jmeter与录制&quot;&gt;&lt;/a&gt;6-手写Jmeter与录制&lt;/h1&gt;&lt;h2 id=&quot;元件作用域&quot;&gt;&lt;a href=&quot;#元件作用域&quot; class=&quot;headerlink&quot; title=&quot;元件作用域&quot;&gt;&lt;/a&gt;元件作用域&lt;/h2&gt;&lt;h3 id=&quot;「取样器」&quot;&gt;&lt;a href=&quot;#「取样器」&quot; class=&quot;headerlink&quot; title=&quot;「取样器」&quot;&gt;&lt;/a&gt;「取样器」&lt;/h3&gt;&lt;p&gt;作用：只作用于自身&lt;/p&gt;
&lt;p&gt;作用域：无作用域&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>5-HTTP请求注意事项</title>
    <link href="http://zx490336534.github.io/article/3afe7420.html"/>
    <id>http://zx490336534.github.io/article/3afe7420.html</id>
    <published>2021-04-08T22:39:00.000Z</published>
    <updated>2021-04-22T14:34:11.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-HTTP请求注意事项"><a href="#5-HTTP请求注意事项" class="headerlink" title="5-HTTP请求注意事项"></a>5-HTTP请求注意事项</h1><h2 id="HTTP请求注意事项"><a href="#HTTP请求注意事项" class="headerlink" title="HTTP请求注意事项"></a>HTTP请求注意事项</h2><h3 id="Web服务器-协议"><a href="#Web服务器-协议" class="headerlink" title="Web服务器-协议"></a>Web服务器-协议</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpasx263h6j30tf0dataa.jpg" alt="协议"></p><p><code>http</code>可以写，可以不写</p><p><code>https</code>必须写</p><span id="more"></span><h3 id="Web服务器-服务器名称或IP"><a href="#Web服务器-服务器名称或IP" class="headerlink" title="Web服务器-服务器名称或IP"></a>Web服务器-服务器名称或IP</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpasz3addcj30tf0dataa.jpg" alt="服务器名称或IP"></p><p>只能写域名或者IP。不能有<code>/</code></p><h3 id="Web服务器-端口"><a href="#Web服务器-端口" class="headerlink" title="Web服务器-端口"></a>Web服务器-端口</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpaszs5l11j30tf0dataa.jpg" alt="端口"></p><p>不写默认为80端口</p><h3 id="HTTP请求-方法"><a href="#HTTP请求-方法" class="headerlink" title="HTTP请求-方法"></a>HTTP请求-方法</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpat3hk85uj30tf0dataa.jpg" alt="方法"></p><p>根据接口文档选择</p><blockquote><p>浏览器地址栏中，只能执行get方法，不能执行post方法</p></blockquote><h3 id="HTTP请求-路径"><a href="#HTTP请求-路径" class="headerlink" title="HTTP请求-路径"></a>HTTP请求-路径</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpat597w8sj30tf0dataa.jpg" alt="路径"></p><p>不要在这个地址中写<code>domain</code>和<code>端口</code>信息，只写路径信息</p><p>不要忘记开头的<code>/</code></p><p>前后的空格要删除。如果没有删除，请求的时候会多<code>%20</code></p><h3 id="HTTP请求-内容编码"><a href="#HTTP请求-内容编码" class="headerlink" title="HTTP请求-内容编码"></a>HTTP请求-内容编码</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpat7a5jouj30tf0dataa.jpg" alt="内容编码"></p><p>默认<code>utf-8</code></p><p>只对<strong>请求体</strong>进行编码，对<strong>响应体</strong>无效</p><p>http请求的四部分：</p><ul><li>请求行</li><li>请求头 request-header</li><li>空行</li><li>请求体 request-body</li></ul><p>http响应的四部分</p><ul><li>响应头</li><li>响应体 response-header</li><li>空行</li><li>响应体 response-body</li></ul><h4 id="当请求中出现乱码"><a href="#当请求中出现乱码" class="headerlink" title="当请求中出现乱码"></a>当请求中出现乱码</h4><ol><li>内容编码设置为utf-8</li><li>消息头<code>Content-Type:;charset=utf-8</code></li><li>参数格式中的<code>编码</code>复选框<ol><li>当参数为中文时一定要勾选编码</li><li>当参数为<code>+=</code>等特殊符号时「常见于密码被加密」一定要勾选编码</li></ol></li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpatdimb18j30tf0daq4a.jpg" alt="编码"></p><h4 id="当响应中出现乱码"><a href="#当响应中出现乱码" class="headerlink" title="当响应中出现乱码"></a>当响应中出现乱码</h4><blockquote><p>原因：jmeter的gui图形界面，默认的编码是操作系统的编码</p><p>国内Windows系统的编码是 936gbk</p></blockquote><p>解决办法</p><p>打开<code>/apache-jmeter-5.1.1/bin/jmeter.properties</code></p><p>找到</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The encoding to be used if none is provided (default ISO-8859-1)</span><br><span class="line">#sampleresult.default.encoding=ISO-8859-1</span><br></pre></td></tr></tbody></table></figure><p>根据响应信息中的编码修改<code>sampleresult.default.encoding</code>值。修改后保存重启Jmeter</p><p>查看方法：</p><p>请求相应地址后查看<code>网页源代码</code>在头部找到「meta-content」</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"always"</span> <span class="attr">name</span>=<span class="string">"referrer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#2932e1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">sizes</span>=<span class="string">"any"</span> <span class="attr">mask</span> <span class="attr">href</span>=<span class="string">"//www.baidu.com/img/baidu_85beaf5496f291521eb75ba38eacbd87.svg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"search"</span> <span class="attr">type</span>=<span class="string">"application/opensearchdescription+xml"</span> <span class="attr">href</span>=<span class="string">"/content-search.xml"</span> <span class="attr">title</span>=<span class="string">"百度搜索"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以看出上面这段代码的编码为<code>utf-8</code></p><h3 id="HTTP请求-自动重定向"><a href="#HTTP请求-自动重定向" class="headerlink" title="HTTP请求-自动重定向"></a>HTTP请求-自动重定向</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpatx8rw59j30tf0dataa.jpg" alt="重定向"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpav09nqirj30xv0u0doc.jpg" alt="自动重定向"></p><p>都是重定向。HTTP响应码都是300系列</p><p>没有中间过程，无法进行中间数据提取</p><h3 id="HTTP请求-跟随重定向"><a href="#HTTP请求-跟随重定向" class="headerlink" title="HTTP请求-跟随重定向"></a>HTTP请求-跟随重定向</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpauz1yru4j30xr0u0dpl.jpg" alt="跟随重定向"></p><p>默认勾选</p><p>可以提取中间过程，用于后续关联</p><p>从图中可以看到，它将每次跳转都展示给了我们，可以展开查看每次跳转情况</p><h3 id="HTTP请求-使用KeepAlive"><a href="#HTTP请求-使用KeepAlive" class="headerlink" title="HTTP请求-使用KeepAlive"></a>HTTP请求-使用KeepAlive</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpatyd3k5xj30tf0dataa.jpg" alt="使用KeepAlive"></p><p>默认都是长连接</p><h3 id="HTTP请求-消息体数据"><a href="#HTTP请求-消息体数据" class="headerlink" title="HTTP请求-消息体数据"></a>HTTP请求-消息体数据</h3><p>参数-消息体数据是互斥的，写了之后无法写另一个</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><blockquote><p>优先级越高，越先执行</p></blockquote><p>配置元件中的所有元件，优先级是最高的</p><p>前置处理器-取样器-后置处理器 </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpauq2qwq7j309y06wgm6.jpg" alt="优先级"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;5-HTTP请求注意事项&quot;&gt;&lt;a href=&quot;#5-HTTP请求注意事项&quot; class=&quot;headerlink&quot; title=&quot;5-HTTP请求注意事项&quot;&gt;&lt;/a&gt;5-HTTP请求注意事项&lt;/h1&gt;&lt;h2 id=&quot;HTTP请求注意事项&quot;&gt;&lt;a href=&quot;#HTTP请求注意事项&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求注意事项&quot;&gt;&lt;/a&gt;HTTP请求注意事项&lt;/h2&gt;&lt;h3 id=&quot;Web服务器-协议&quot;&gt;&lt;a href=&quot;#Web服务器-协议&quot; class=&quot;headerlink&quot; title=&quot;Web服务器-协议&quot;&gt;&lt;/a&gt;Web服务器-协议&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008eGmZEly1gpasx263h6j30tf0dataa.jpg&quot; alt=&quot;协议&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http&lt;/code&gt;可以写，可以不写&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https&lt;/code&gt;必须写&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>4-使用Jmeter编写第一个脚本</title>
    <link href="http://zx490336534.github.io/article/8aebc491.html"/>
    <id>http://zx490336534.github.io/article/8aebc491.html</id>
    <published>2021-04-01T23:39:00.000Z</published>
    <updated>2021-04-22T14:34:11.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-使用Jmeter编写第一个脚本"><a href="#4-使用Jmeter编写第一个脚本" class="headerlink" title="4-使用Jmeter编写第一个脚本"></a>4-使用Jmeter编写第一个脚本</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>java编写的开源、免费、接口、自动化、性能测试工具</p><p>它的运行环境：<code>jre</code> 我们必须安装jdk才能运行jmeter</p><h3 id="查看java版本"><a href="#查看java版本" class="headerlink" title="查看java版本"></a>查看java版本</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br></pre></td></tr></tbody></table></figure><p>需要使用的jdk大版本是<code>1.8</code></p><p>官方只在1.8下进行开发和测试，其他jdk版本，可能存在兼容性问题</p><span id="more"></span><h3 id="jmeter版本"><a href="#jmeter版本" class="headerlink" title="jmeter版本"></a>jmeter版本</h3><p>使用的是<code>apache-jmeter-5.1.1</code></p><p>链接: <a href="https://pan.baidu.com/s/1DxiOyzo8VxFJGrFhJQKPaQ">https://pan.baidu.com/s/1DxiOyzo8VxFJGrFhJQKPaQ</a>  密码: fws3</p><h3 id="切换中文"><a href="#切换中文" class="headerlink" title="切换中文"></a>切换中文</h3><h4 id="临时切换中文"><a href="#临时切换中文" class="headerlink" title="临时切换中文"></a>临时切换中文</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp39vg304rj30ka0bhdij.jpg" alt="临时切换中文"></p><h3 id="永久修改中文"><a href="#永久修改中文" class="headerlink" title="永久修改中文"></a>永久修改中文</h3><p>修改<code>jmeter.properties</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第37行</span><br><span class="line">language=en</span><br><span class="line">修改为</span><br><span class="line">language=zh_CN</span><br></pre></td></tr></tbody></table></figure><h2 id="使用Jmeter写脚本"><a href="#使用Jmeter写脚本" class="headerlink" title="使用Jmeter写脚本"></a>使用Jmeter写脚本</h2><h3 id="写脚本的依赖"><a href="#写脚本的依赖" class="headerlink" title="写脚本的依赖"></a>写脚本的依赖</h3><ul><li>接口文档</li><li>API文档</li><li>swagger：接口管理平台</li><li>抓包：F12，Fiddler，Charles，Wireshark，Tcpdump</li></ul><h3 id="Jmeter文件夹"><a href="#Jmeter文件夹" class="headerlink" title="Jmeter文件夹"></a>Jmeter文件夹</h3><h4 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h4><ul><li>启动jmeter的所有文件</li><li>properties结尾的文件，都是jmeter的属性配置文件，最主要的是<code>jmeter.properties</code></li><li>create-rmi-keystore：创建证书</li><li>jmeter.log：日志打印</li></ul><h4 id="docs"><a href="#docs" class="headerlink" title="docs"></a>docs</h4><p>开发人员使用的api文档</p><p>有java能力相对Jmeter进行二次开发的API文档</p><h4 id="extras"><a href="#extras" class="headerlink" title="extras"></a>extras</h4><p>持续集成CI/CD使用</p><h4 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h4><p>jmeter工具的源码二进制jar包</p><p><code>/ext</code>：使用第三方插件时，把第三方jar放到该目录</p><h4 id="printable-docs"><a href="#printable-docs" class="headerlink" title="printable_docs"></a>printable_docs</h4><p>jmeter工具，<code>离线</code>帮助文档</p><p>在线、离线文档的差异</p><ul><li><code>离线文档</code>：当前jmeter版本的帮助文档</li><li><code>在线文档</code>：永远都是最新版本的</li></ul><h3 id="jmeter-GUI"><a href="#jmeter-GUI" class="headerlink" title="jmeter-GUI"></a>jmeter-GUI</h3><h4 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h4><p>并不包含Jmeter的主要功能，只包含必要的辅助功能</p><h4 id="左侧结构树"><a href="#左侧结构树" class="headerlink" title="左侧结构树"></a>左侧结构树</h4><blockquote><p>元件：通过右键添加的 所有可选定的内容，都是元件</p></blockquote><p>测试计划TestPlan：脚本根目录</p><p>选中某个元件，从右键中，选择功能</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp50tghocgj30f708f75x.jpg" alt="脚本根目录"></p><h4 id="右侧的编辑区"><a href="#右侧的编辑区" class="headerlink" title="右侧的编辑区"></a>右侧的编辑区</h4><p>脚本编辑区，不同的元件，内容不一样</p><h4 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h4><ul><li>线程组</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp50zx7k4zj308401s74h.jpg" alt="线程组"></p><blockquote><p>性能测试中，进行性能场景设计，在功能测试时，一般不做任何修改</p></blockquote><p>线程组：普通性能场景设计用的线程组，也是用的最多的线程</p><p>setUp线程、teardown线程组：和线程组差别不大，一般用作环境准备与清理</p><ul><li>配置元件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp510k6u4ej30b00bddhc.jpg" alt="配置元件"></p><blockquote><p>请求内容的头</p></blockquote><p>最大的特点：优先级<code>最高</code></p><p>重点关注：用户定义变量</p><ul><li>监听器</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp5122y6l8j308c0ahgmw.jpg" alt="监听器"></p><blockquote><p>结果监听与处理</p></blockquote><ul><li>定时器</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp512lhflcj308m07ijsb.jpg" alt="定时器"></p><blockquote><p>集合点，狭义并发</p></blockquote><p>现在 性能测试一般不再使用</p><p>设置<code>思考时间</code></p><ul><li>前置处理器</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp514kdn3oj309007vq3x.jpg" alt="前置处理器"></p><p>重点关注：用户参数</p><ul><li>后置处理器</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp5172muh8j309j09x75k.jpg" alt="后置处理器"></p><p>response结果提取</p><ul><li>断言</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp517ls6ubj308e0blmyb.jpg" alt="断言"></p><p>测试结果与预期结果进行比较</p><ul><li>测试片段</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp519b7l8mj308e06cdgg.jpg" alt="测试片段"></p><p>管理测试用例</p><ul><li>非测试元件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp519vphyyj308707iaat.jpg" alt="非测试元件"></p><p>设置代理服务器等环境</p><h3 id="编写http脚本"><a href="#编写http脚本" class="headerlink" title="编写http脚本"></a>编写http脚本</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51j2hez0j30nx0jutb1.jpg" alt="注册接口"></p><ol><li>添加线程组</li><li>添加取样器：HTTP请求</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51e3mwacj30f60cpad5.jpg" alt="取样器"></p><ol start="3"><li>添加HTTP信息头管理器</li></ol><p>从文档中:请求头：Content-Type：application/json;charset=utf-8 </p><p>点击<code>添加</code>按钮后输入它的请求头</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51l0coz6j30xr0u00yl.jpg" alt="添加HTTP信息头管理器"></p><ol start="4"><li>编辑HTTP请求</li></ol><p>输入协议<code>HTTP</code></p><p>IP:<code>192.168.9.2</code></p><p>端口号:<code>8080</code></p><p>方法:<code>POST</code></p><p>路径:<code>/app/mobile/api/user/register</code></p><p>消息体数据</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"mobile"</span>: <span class="string">"15800000001"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"3367"</span>,</span><br><span class="line">    <span class="attr">"platform"</span>: <span class="string">"w indows"</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"test11"</span>,</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"158000000011@test. com"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51n40bg5j30xr0u0q9u.jpg" alt="编辑HTTP请求"></p><ol start="5"><li>添加 监听器-查看结果树</li><li>运行</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51s1x2o3j30na04wjsg.jpg" alt="运行"></p><p>运行的时候它会提示让你先保存</p><ol start="7"><li>查看结果</li></ol><ul><li>绿色：仅代表网络是通的</li><li>红色：代表失败，但是具体是什么原因失败，要去分析</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51wkzqhtj30xr0u0dnj.jpg" alt="查看结果"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>1、请求体为json时，一定要加上消息头管理器</p><p>2、请求体，写在消息体数据中，是json格式</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;4-使用Jmeter编写第一个脚本&quot;&gt;&lt;a href=&quot;#4-使用Jmeter编写第一个脚本&quot; class=&quot;headerlink&quot; title=&quot;4-使用Jmeter编写第一个脚本&quot;&gt;&lt;/a&gt;4-使用Jmeter编写第一个脚本&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;java编写的开源、免费、接口、自动化、性能测试工具&lt;/p&gt;
&lt;p&gt;它的运行环境：&lt;code&gt;jre&lt;/code&gt; 我们必须安装jdk才能运行jmeter&lt;/p&gt;
&lt;h3 id=&quot;查看java版本&quot;&gt;&lt;a href=&quot;#查看java版本&quot; class=&quot;headerlink&quot; title=&quot;查看java版本&quot;&gt;&lt;/a&gt;查看java版本&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; java -version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;需要使用的jdk大版本是&lt;code&gt;1.8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;官方只在1.8下进行开发和测试，其他jdk版本，可能存在兼容性问题&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>3-性能测试知识面</title>
    <link href="http://zx490336534.github.io/article/bd78ee6b.html"/>
    <id>http://zx490336534.github.io/article/bd78ee6b.html</id>
    <published>2021-03-28T00:45:00.000Z</published>
    <updated>2021-04-22T14:34:11.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-性能测试知识面"><a href="#3-性能测试知识面" class="headerlink" title="3-性能测试知识面"></a>3-性能测试知识面</h1><h2 id="脚本开发相关"><a href="#脚本开发相关" class="headerlink" title="脚本开发相关"></a>脚本开发相关</h2><blockquote><p>根据不同协议，选择不同工具</p></blockquote><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li><p>http</p></li><li><p>jdbc</p></li><li><p>soap</p></li><li><p>websocket</p></li><li><p>dubbo</p></li><li><p>MQ</p><span id="more"></span><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3></li><li><p> Jmeter「线程」</p></li><li><p>loadrunner「进程、线程（默认）」</p></li><li><p>wrk</p></li><li><p>ab</p></li><li><p>ngrinder「jpython、groovy」</p></li><li><p>locust「协程」</p></li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>Jmeter支持的语言：</p><ul><li>java</li><li>python</li><li>jython</li><li>groovy</li><li>javascript</li></ul><h2 id="性能知识面"><a href="#性能知识面" class="headerlink" title="性能知识面"></a>性能知识面</h2><h3 id="Vmware"><a href="#Vmware" class="headerlink" title="Vmware"></a>Vmware</h3><p>虚拟机管理软件，允许一台真实的电脑在一个操作系统中同时打开并运行多个不同的操作系统</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>偷工减料版操作系统「namespace」「vfs」「cgroup」</p><p>是一个简化版的操作系统，提供我们项目运行的基本依赖</p><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个 可移植的容器中,然后发布到任何流行的 Linux 机器或 Windows 机器上,也可以实现虚拟化, 容器是完全使用沙箱机制,相互之间不会有任何接口。</p><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。 Docker 容器通过 Docker 镜像来创建。</p><p>docker 是基于 LXC 的轻量及虚拟化，相比 KVM 启动更快，占用资源更少。 LXC:Linux Container 容器是一种操作系统层虚拟化技术，可以提供轻量级的虚拟化，以 便隔离进程和资源.</p><p>KVM:是 Kernel-based Virtual Machine 基于内核的虚拟机,是一种用于 Linux 内核中的虚拟 化基础设施，可将 Linux 内核转化为一个虚拟机监视器。 Docker 并不是全能的,也不是 KVM 之类虚拟化手段的替代品.Docker 是基于 Linux 64bit 的，无法在 32bit 的 linux/Windows/unix 环境下使用。 Docker 在本质上是一个附加系统。 Docker 有两种文件格式，Dockerfile 和 Compose file。Dockerfile 定义了单个容器的内容 和启动时候的行为。Compose file 定义了一个多容器应用。 Docker 可以按照 Dockerfile 的内容，构建镜像。 Compose file 是一个 YAML 文件，定义了服务（service）、网络、卷（volume）</p><h3 id="K8s"><a href="#K8s" class="headerlink" title="K8s"></a>K8s</h3><p>K8s 是 kubernetes 的简写。是一个开源的，用于管理云平台中多个主机上的容器化的应 用，Kubernetes 的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes 提供了 应用部署，规划，更新，维护的一种机制。Kubernetes 是 Google 开源的一个容器编排引擎， 它支持自动化部署、大规模可伸缩、应用容器化管理。</p><p><a href="https://www.kubernetes.org.cn/k8s">https://www.kubernetes.org.cn/k8s</a></p><h3 id="Linux基本技能"><a href="#Linux基本技能" class="headerlink" title="Linux基本技能"></a>Linux基本技能</h3><blockquote><p><strong>鸟哥的 Linux 私房菜</strong>:<a href="https://www.showapi.com/book/view/2089/0">https://www.showapi.com/book/view/2089/0</a></p></blockquote><h3 id="CPU工作原理"><a href="#CPU工作原理" class="headerlink" title="CPU工作原理"></a>CPU工作原理</h3><p>CPU， 中央处理器。影响 cpu 性能的主要因素分两大块：主频、架构； </p><p>CPU 的结构主要由运算器、控制器、寄存器三大块组成 控制单元：是整个 cpu 的指挥控制中心，由指令寄存器 IR(Instruction Register)、指 令译码器 ID(Instruction Decoder)和操作控制器 OC(Operation Controller)等 </p><p>运算单元：是运算器的核心，执行运算操作</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gozb7w4n9fj30jn0cgtbo.jpg" alt="CPU"></p><p><a href="https://baijiahao.baidu.com/s?id=1619812694399963397&amp;wfr=spider&amp;for=pc">CPU科普文：5分钟让你看懂CPU的结构和工作原理</a></p><p><a href="http://blog.chinaunix.net/uid-23069658-id-3563960.html">CPU的内部架构和工作原理</a></p><h3 id="内存知识"><a href="#内存知识" class="headerlink" title="内存知识"></a>内存知识</h3><p>内存 memory，是 cpu 与其他设备沟通的桥梁，主要用来临时存放数据，配合 cpu 工作， 协调 cpu 的处理速度。</p><p><a href="https://blog.csdn.net/qq_39312683/article/details/96026884">内存的基础知识</a></p><h3 id="JVM知识"><a href="#JVM知识" class="headerlink" title="JVM知识"></a>JVM知识</h3><p>JVM 是 Java Virtual Machine（Java 虚拟机）的缩写，JVM 是一种用于计算设备的规 范，它是一个虚构出来的能够运行 Java bytecode 的虚拟计算机，是通过在实际的计算 机上仿真模拟各种计算机功能来实现的。</p><p>Java 虚拟机有自己完善的硬体架构（如处理器、堆栈、寄存器等），还具有相应的指令系统。</p><p>Java 虚拟机本质上就是一个程序，当它在命令行上启动的时候，就开始执行保存在 文件中的字节码指令。Java 语言的可移植性正是建立在 Java 虚拟机的基础上。任何平 台只要装有针对于该平台的 Java 虚拟机，字节码文件（.class）就可以在该平台上运行。 Java 虚拟机主要分为五大模块：类装载器子系统、运行时数据区、执行引擎、本地方法接口和垃圾收集模块。</p><p>Java 虚拟机没有寄存器，所以指令集是使用 Java 栈来存储中间数据。 对于 Java 运行时涉及到的存储区域主要包括：程序计数器、Java 虚拟机栈(调用栈)、本地方法栈、java堆、方法区以及直接内存等等。 程序计数器：主要是取下一条指令，在 Java 里面主要是取下一条指令的字节码文件；</p><p>Java 虚拟机栈：主要是利用栈先进后出的特性存储局部变量表，动态链接等，主要 包括堆内存和栈内存，对于程序员内存分析而言是特别重要的。 本地方法栈：与上边的栈基本作用差不多，只不过这里是为 Java 方法而服务。 Java 堆：是内存管理中最大的一块，所有的线程共享这一块内容，同时该部分也是 垃圾收集器的主要区域。 Java 虚拟机的垃圾回收，动态分配和回收。 内存回收首先就是判断某一个部分是生存还是死亡，具体的算法常见的有二种：</p><p><a href="https://baijiahao.baidu.com/s?id=1651319476120132392&amp;wfr=spider&amp;for=pc">gc原理以及gc日志剖析</a></p><p><a href="https://www.jianshu.com/p/2f4a8e04c657">GC垃圾回收机制详解</a></p><h3 id="Apache基础知识"><a href="#Apache基础知识" class="headerlink" title="Apache基础知识"></a>Apache基础知识</h3><p>Apache HTTP Server（简称 Apache）是 Apache 软件基金会的一个开放源码的网页服务器 软件，可以在大多数电脑操作系统中运行。由于其跨平台和安全性，被广泛使用，是最流行 的 Web 服务器软件之一。它可以运行在几乎所有广泛使用的计算机平台上。 </p><p>LAMP 是 一 组 通 常 一 起 使 用 来 运 行 动 态 网 站 的 自 由 软 件 的 首 字 母 缩 写 ： Linux+Apache+Mysql(MariaDB)+PHP</p><p>官网：<a href="https://httpd.apache.org/">https://httpd.apache.org/</a></p><p>文档：<a href="https://httpd.apache.org/docs/2.4/">https://httpd.apache.org/docs/2.4/</a></p><p>Ubuntu 系统中 apache 安装指南： <a href="https://wiki.ubuntu.org.cn/Apache">https://wiki.ubuntu.org.cn/Apache</a></p><p>Centos 系统中搭建 apache 环境：</p><p><a href="https://blog.csdn.net/weixin_42199590/article/details/94410946">https://blog.csdn.net/weixin_42199590/article/details/94410946</a></p><p><a href="https://www.cnblogs.com/xiangqs/p/8663947.html">https://www.cnblogs.com/xiangqs/p/8663947.html</a></p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>一个轻量级的 web 应用服务区，使用于并发性不是很高的系统中。 Tomcat 中最顶层</p><p>的是 server， 代表整个服务器，一个 server 可以包含至少一个 service， 每个 service 可以包 含多个 connector 和一个 container。Connector 用于处理连接相关的事情，并提供 Socket 与 Request 和 Response 相关的转化;Container 用于封装和管理 Servlet， 以及具体处理 Request 请求；多个 connector 就可以配置多种类型连接，如 http\https。</p><p>Tomcat 的 conf 目录中的 server.xml 是其最重要的配置文件</p><h3 id="Dubbo-zookeeper"><a href="#Dubbo-zookeeper" class="headerlink" title="Dubbo + zookeeper"></a>Dubbo + zookeeper</h3><p>Dubbo 是一款高性能、轻量级的开源 java RPC 框架，它提供了三大核心能力：面 向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p><a href="http://dubbo.apache.org/zh-cn/">http://dubbo.apache.org/zh-cn/</a></p><p>Dubbo 缺省协议采用单一长连接和 NIO 异步通讯，适合小数量大并发的服务调用，以 及服务消费者机器数远大于服务提供者机器数的情况。</p><p>Dubbo 接口，手工测试时，可以使用 telnet 方式： <a href="http://dubbo.apache.org/zh-cn/docs/user/references/telnet.html">http://dubbo.apache.org/zh-cn/docs/user/references/telnet.html</a> </p><p>Zookeeper 注册中心：zookeeper 是一个树型的目录服务，支持变更推送，适合作为 dubbo 服务的注册中心，工业强度高，可用于生产环境，并推荐使用。</p><p> 参考学习材料：<a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html">http://dubbo.apache.org/zh-cn/docs/user/quick-start.html</a></p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx (engine x) 是一个采用 C 进行编写的高性能的 HTTP 和反向代理 web 服务器 其特点是占有内存少，并发能力强</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gozbmom73yj30ok0bfgs7.jpg" alt="Nginx"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gozbna4aouj30nd0bb7ac.jpg" alt="Nginx2"></p><p>Nginx 配置详解： <a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html">https://www.runoob.com/w3cnote/nginx-setup-intro.html</a></p><p>Nginx 服务器安装及配置文件详解： <a href="https://www.runoob.com/w3cnote/nginx-install-and-config.html">https://www.runoob.com/w3cnote/nginx-install-and-config.html</a></p><p>Linux 下 Nginx+Tomcat 负载均衡和动静分离配置要点 <a href="https://www.runoob.com/w3cnote/linux-nginx-tomcat.html">https://www.runoob.com/w3cnote/linux-nginx-tomcat.html</a></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡（Load balancing）是一种计算机技术，用来在多个计算机（计算机集群）、 网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐 率、最小化响应时间、同时避免过载的目的。 使用带有负载均衡的多个服务器组件，取代 单一的组件，可以通过冗余提高可靠性。负载均衡服务通常是由专用软件和硬件来完成。 主 要作用是将大量作业合理地分摊到多个操作单元上进行执行，用于解决互联网架构中的高并 发和高可用的问题。</p><p>负载均衡有软件和硬件负载均衡，硬件负载均衡 F5、软件负载均衡 nginx、阿里的 SLB。</p><p>负载均衡算法：主要分为静态和动态两类。静态负载均衡算法以固定的概率分配任务， 不考虑服务器的状态信息，如轮转算法、加权轮转算法等；动态负载均衡算法以服务器的实 时负载状态信息来决定任务的分配，如最小连接法、加权最小连接法等。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gozbo3yoi2j30nq0h6tet.jpg" alt="负载均衡"></p><p>参考学习材料：</p><p> <a href="https://www.sohu.com/a/277818965_411876">https://www.sohu.com/a/277818965_411876</a></p><p><a href="https://blog.csdn.net/bpb_cx/article/details/82771168">https://blog.csdn.net/bpb_cx/article/details/82771168</a></p><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>计算机集群（computer cluster）简称集群，是一种计算机系统， 它通过一组松散集成 的计算机软件或硬件连接起来高度紧密地协作完成计算工作。在某种意义上，他们可以被看 作是一台计算机。</p><p>负载均衡集群运行时一般通过一个或者多个前端负载均衡器将工作负载分发到后端的 一组服务器上，从而达到整个系统的高性能和高可用性。</p><p>参考学习资料：</p><p><a href="https://blog.csdn.net/qq_16116549/article/details/88551090">https://blog.csdn.net/qq_16116549/article/details/88551090</a></p><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>关系数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来 处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表 示。标准数据查询语言 SQL 就是一种基于关系数据库，这种语言执行对关系数据库中数据的 检索和操作。</p><p>关系模型由关系数据结构、关系操作集合、关系完整性约束三部分组成。 关系型数据库是由多张能互相联接的二维行列表格组成的数据库 主流的关系型数据库有 Oracle、DB2、Microsoft SQL Server、Microsoft Access、MySQL、 postgresql、 mariaDB、sqlite 等</p><p>参考学习资料： <a href="https://www.php.cn/sql/421899.html">https://www.php.cn/sql/421899.html</a></p><h3 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h3><p>MySQL 是一种开源的关系型数据库管理系统，关系数据库将数据保存在不同的表中， 而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。 MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。 MySQL 使用标准的 SQL 数据语言形式。 MySQL 可以运行于多个系统上，并且支持多种语言。</p><p>推荐学习地址：</p><p> <a href="https://www.showapi.com/book/view/2147/0">https://www.showapi.com/book/view/2147/0</a></p><p><a href="https://www.runoob.com/mysql/mysql-install.html">https://www.runoob.com/mysql/mysql-install.html</a></p><h3 id="Postgresql-数据库知识"><a href="#Postgresql-数据库知识" class="headerlink" title="Postgresql 数据库知识"></a>Postgresql 数据库知识</h3><p>PostgreSQL 是一个功能非常强大的、源代码开放的客户/服务器关系型数据库 管理系统。 </p><p>参考学习资料：</p><p><a href="https://www.runoob.com/postgresql/postgresql-tutorial.html">https://www.runoob.com/postgresql/postgresql-tutorial.html</a></p><p><a href="http://www.postgres.cn/v2/document">http://www.postgres.cn/v2/document</a></p><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><p>NoSQL(Not Only SQL)， 泛指非关系型的数据库。 NoSQL 数据库的产生就是为了解决大规 模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><p> NoSQL 有如下优点：易扩展， NoSQL 数据库种类繁多，但是一个共同的特点都是去掉关 系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间也在架构的层面上带来了可扩展的能力。大数据量，高性能， NoSQL 数据库都具有非常高的读写性能，尤其 在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。 </p><p>分类：</p><ul><li><p>键值(Key-Value)存储数据库，这一类数据库主要会使用到一个哈希表，这个表中 有一个特定的键和一个指针指向特定的数据。典型代表：Redis </p></li><li><p>列存储数据库：这部分数据库通常是用来应对分布式存储的海量数据，键仍然存在， 但是它们的特点是指向了多个列。这些列是由列家族来安排的。典型代表：HBase </p></li><li><p>文档型数据库：该类型的数据模型是版本化的文档，半结构化的文档以特定的格式 存储。典型代表：MongoDb、SequoiaDB </p></li><li><p>图形(Graph)数据库：它是使用灵活的图形模型，并且能够扩展到多个服务器上</p></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>Redis 是一个高性能的 key-value 数据库， redis 支持各种不同方式的排序。与 memcached 一样，为了保证效率，数据都是缓存在内存中，使用内存存储。区别的是 redis 会周期性的 把更新的数据写入磁盘或者把修改操作写入追加的记录文件， 并且在此基础上实现了 master-slave(主从)同步。</p><p>Redis 支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可 以是关联其他从服务器的主服务器。这使得 Redis 可执行单层树复制</p><p>推荐学习地址：</p><p><a href="https://www.runoob.com/redis/redis-tutorial.html">https://www.runoob.com/redis/redis-tutorial.html</a></p><p>Redis 设计与实现：<a href="https://www.showapi.com/book/view/2054/0">https://www.showapi.com/book/view/2054/0</a></p><h3 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h3><p>memcache 是一套分布式的高速缓存系统，将数据调用到内存中，然后从内存中读取， 从而大大提高读取速度。 </p><p>最 大 30 天 的 数 据 过 期 时 间 , 设 置 为 永 久 的 也 会 在 这 个 时 间 过 期 ， </p><p>常 量 REALTIME_MAXDELTA 最大键长为 250 字节，大于该长度无法存储，</p><p>常量 KEY_MAX_LENGTH 单个 item 最大数据是 1MB， 超过 1MB 数据不予存储，</p><p>常量 POWER_BLOCK 最大同时连接数是 200， 通过 conn_init()中的 freetotal 进行控制，最大软连接数是 1024， 通过 settings.maxconns=1024 进行控制</p><p>参考学习资料：</p><p><a href="https://www.runoob.com/memcached/memcached-tutorial.html">https://www.runoob.com/memcached/memcached-tutorial.html</a></p><h3 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h3><p>MongoDB 是一个基于分布式文件存储的数据库，介于关系数据库和非关系数据库之间 的产品。是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散， 是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。 Mongo 最大的特点是它支持 的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据 库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p>参考学习材料：<a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">https://www.runoob.com/mongodb/mongodb-tutorial.html</a></p><h3 id="时序型数据库"><a href="#时序型数据库" class="headerlink" title="时序型数据库"></a>时序型数据库</h3><p>时序数据库全称为时间序列数据库。时间序列数据库主要用于指处理带时间标签 （按照时间的顺序变化，即时间序列化）的数据，带时间标签的数据也称为时间序列数 据。时序大数据解决方案通过使用特殊的存储方式，使得时序大数据可以高效存储和快 速处理海量时序大数据，是解决海量数据处理的一项重要技术。该技术采用特殊数据存 储方式，极大提高了时间相关数据的处理能力，相对于关系型数据库它的存储空间减半， 查询速度极大的提高。</p><p>典型代表“influxdb、prometheus”</p><h3 id="Influxdb"><a href="#Influxdb" class="headerlink" title="Influxdb"></a>Influxdb</h3><p>InfluxDB 是一个由 InfluxData 开发的开源时序型数据库。它由 Go 写成，着力于高性能地 查询与存储时序型数据。InfluxDB 被广泛应用于存储系统的监控数据。 InfluxDB 存储的数据从逻辑上由 Measurement, tag 组以及 field 组以及一个时间戳组成的</p><ul><li>Measurement： 由一个字符串表示该条记录对应的含义 </li><li>tag 组： 由一组键值对组成，表示的是该条记录的一系列属性信息 </li><li>field 组：也是由一组键值对组成，表示的是该条记录具体的 value 信息(有名称) </li><li>时间戳：就是该条记录的时间属性</li></ul><p>参考学习资料： <a href="https://www.cntofu.com/book/118/readme.html">https://www.cntofu.com/book/118/readme.html</a></p><h3 id="Prometheus-基础知识"><a href="#Prometheus-基础知识" class="headerlink" title="Prometheus 基础知识"></a>Prometheus 基础知识</h3><p> Prometheus 它是由谷歌研发的一款开源的监控软件，目前已经被云计算本地基金会托管。</p><p>一个多维数据模型，其中包含通过度量标准名称和键/值对标识的时间序列数据 PromQL，一种灵活的查询语言 ，可利用此维度 不依赖分布式存储；单服务器节点是自治的 时间序列收集通过 HTTP 上的拉模型进行 通过中间网关支持推送时间序列 通过服务发现或静态配置发现目标 多种图形和仪表板支持模式 易于管理、轻易获取服务内部状态、高效灵活的查询语句、支持本地和远程存储、采用 http 协议，默认 pull 模式拉取数据，也可以通过中间网关 push 数据、支持自动发现、可扩 展、易集成</p><p>参考学习资料：</p><p><a href="https://prometheus.io/docs/introduction/overview/">https://prometheus.io/docs/introduction/overview/</a> </p><p><a href="https://www.cnblogs.com/fatyao/p/11007357.html">https://www.cnblogs.com/fatyao/p/11007357.html</a></p><p><a href="https://www.cnblogs.com/zqj-blog/p/10871033.html">https://www.cnblogs.com/zqj-blog/p/10871033.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;3-性能测试知识面&quot;&gt;&lt;a href=&quot;#3-性能测试知识面&quot; class=&quot;headerlink&quot; title=&quot;3-性能测试知识面&quot;&gt;&lt;/a&gt;3-性能测试知识面&lt;/h1&gt;&lt;h2 id=&quot;脚本开发相关&quot;&gt;&lt;a href=&quot;#脚本开发相关&quot; class=&quot;headerlink&quot; title=&quot;脚本开发相关&quot;&gt;&lt;/a&gt;脚本开发相关&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;根据不同协议，选择不同工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;协议&quot;&gt;&lt;a href=&quot;#协议&quot; class=&quot;headerlink&quot; title=&quot;协议&quot;&gt;&lt;/a&gt;协议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;http&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;jdbc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;soap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;websocket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dubbo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MQ&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2-性能测试知识面</title>
    <link href="http://zx490336534.github.io/article/260b04bf.html"/>
    <id>http://zx490336534.github.io/article/260b04bf.html</id>
    <published>2021-03-25T23:48:00.000Z</published>
    <updated>2021-04-22T14:34:11.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-性能测试知识面"><a href="#2-性能测试知识面" class="headerlink" title="2-性能测试知识面"></a>2-性能测试知识面</h1><h2 id="性能测试指标"><a href="#性能测试指标" class="headerlink" title="性能测试指标"></a>性能测试指标</h2><h3 id="响应时间RT（重要指标）"><a href="#响应时间RT（重要指标）" class="headerlink" title="响应时间RT（重要指标）"></a>响应时间RT（重要指标）</h3><blockquote><p>RT是一个非常重要的性能指标</p></blockquote><p>从发起请求的时间点，经过网络传输时间+服务器处理的时间+通过网络传输返回的时间</p><p>我们做性能测试时，尽可能的降低网络延迟时间，这样RT时间才会无限的接近我们的服务器处理时间</p><ul><li>带宽加宽</li><li>局域网</li><li>在性能测试中，不要使用无线网络（排除专门的无线网络测试）</li></ul><p>使用有线网络时要注意</p><ul><li>网络传输的带宽</li><li>降低网络传输的节点与距离（不能使用跳板机）</li><li>独立网络环境<span id="more"></span><h3 id="TPS-QPS（最主要指标）"><a href="#TPS-QPS（最主要指标）" class="headerlink" title="TPS/QPS（最主要指标）"></a>TPS/QPS（最主要指标）</h3></li></ul><h4 id="TPS-Transactions-per-Second"><a href="#TPS-Transactions-per-Second" class="headerlink" title="TPS(Transactions per Second)"></a>TPS(Transactions per Second)</h4><p><strong>服务器</strong>每秒处理事务数，衡量服务器处理能力的最主要指标</p><h4 id="QPS-Queries-per-Second"><a href="#QPS-Queries-per-Second" class="headerlink" title="QPS(Queries per Second)"></a>QPS(Queries per Second)</h4><p>每秒查询率</p><h4 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h4><p>一个TPS可能有多个QPS</p><h4 id="HPS-Hit-per-Second"><a href="#HPS-Hit-per-Second" class="headerlink" title="HPS(Hit per Second)"></a>HPS(Hit per Second)</h4><p>每秒点击数（用户端）</p><h4 id="RPS-request-per-Second"><a href="#RPS-request-per-Second" class="headerlink" title="RPS(request per Second)"></a>RPS(request per Second)</h4><p>每秒请求数</p><h4 id="衡量主体角度"><a href="#衡量主体角度" class="headerlink" title="衡量主体角度"></a>衡量主体角度</h4><p>TPS：服务器处理能力。响应时间小、tps可以增大</p><p>QPS：并发用户发起的查询 接口查询多+人多，qps可以增大</p><p>RPS：并发用户发起请求 人多，rps可以增大</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><blockquote><p>是衡量<strong>网络</strong>处理能力的</p></blockquote><p>单位时间内处理的请求数量（事务/s）</p><p>在没有网络影响时，吞吐量=TPS</p><h3 id="吞吐率"><a href="#吞吐率" class="headerlink" title="吞吐率"></a>吞吐率</h3><blockquote><p>网络传输速率</p></blockquote><p>单位时间通过的数据的平均速率（kB/s）</p><h3 id="点击率"><a href="#点击率" class="headerlink" title="点击率"></a>点击率</h3><p>每秒点击数</p><h3 id="资源利用率"><a href="#资源利用率" class="headerlink" title="资源利用率"></a>资源利用率</h3><p>服务器资源的使用率</p><ul><li>cpu利用率</li><li>内存利用率</li><li>磁盘I/O</li><li>网络带宽利用率</li><li>一般都不要超过80%</li></ul><h2 id="性能测试环境"><a href="#性能测试环境" class="headerlink" title="性能测试环境"></a>性能测试环境</h2><p>性能测试是要自己独立搭建性能环境，网络环境</p><ul><li>绝对不能用生产环境</li><li>不能用功能测试、自动化环境</li><li>这个性能环境，包括应用服务器和数据库服务器</li></ul><h3 id="性能环境硬件资源怎么确定"><a href="#性能环境硬件资源怎么确定" class="headerlink" title="性能环境硬件资源怎么确定"></a>性能环境硬件资源怎么确定</h3><ol><li><p>数量要和生产环境的数量一致吗？</p><p>不用和生产一样那么多服务器的数量，通过逐步增加服务器数量来评估大致的性能瓶颈</p><p>比如生产环境有8台服务器，性能测试从2台开始，增加到3台。可以大致评估增加数量提升的性能指标</p></li><li><p>每一台的硬件配置要和生产环境一致吗？</p><p>要和生产环境的配置一致</p><p>如果性能测试环境的硬件配置不如生产环境的硬件配置，性能测试结果得到的性能指标值，只能说 是否存在性能瓶颈，不能作为生产性能指标低的参考</p></li></ol><h2 id="性能测试流程"><a href="#性能测试流程" class="headerlink" title="性能测试流程"></a>性能测试流程</h2><p>性能测试准备=&gt;搭建性能测试环境-&gt;性能测试脚本开发-&gt;性能测试脚本执行-&gt;结果分析与调优-&gt;测试报告与结果跟踪</p><h3 id="性能测试准备"><a href="#性能测试准备" class="headerlink" title="性能测试准备"></a>性能测试准备</h3><ol><li>理解需求、测试计划、测试模型、工作量评估</li><li>了解架构(数据流)</li><li>要明确需求的性能指标</li></ol><p>例如500w访问量的并发</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照每天8小时有人访问</span></span><br><span class="line">500w/<span class="number">8</span>/<span class="number">3600</span>=<span class="number">174</span></span><br><span class="line"><span class="comment"># 按照二八原则</span></span><br><span class="line">500w*<span class="number">0.8</span>/（<span class="number">24</span>*<span class="number">0.2</span>*<span class="number">3600</span>)=<span class="number">232</span></span><br><span class="line"><span class="comment"># 一般需要1.2~1.5倍的TPS</span></span><br><span class="line"><span class="number">232</span>*（<span class="number">1.2</span>~<span class="number">1.5</span>) = <span class="number">278</span>~<span class="number">348</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="性能测试脚本开发"><a href="#性能测试脚本开发" class="headerlink" title="性能测试脚本开发"></a>性能测试脚本开发</h3><ul><li>选取协议</li><li>制作脚本</li><li>调试脚本</li><li>验证脚本</li></ul><p>先对接测试环境，开发调试脚本完成，再对接性能环境</p><h3 id="性能执行"><a href="#性能执行" class="headerlink" title="性能执行"></a>性能执行</h3><ul><li>试运行</li><li>场景执行</li></ul><h3 id="性能测试结果分析与调优"><a href="#性能测试结果分析与调优" class="headerlink" title="性能测试结果分析与调优"></a>性能测试结果分析与调优</h3><ul><li>分析思路：服务器硬件&gt;网络&gt;操作系统软件层的配置&gt;应用的瓶颈</li></ul><h3 id="性能测试报告与结果跟踪"><a href="#性能测试报告与结果跟踪" class="headerlink" title="性能测试报告与结果跟踪"></a>性能测试报告与结果跟踪</h3><ul><li>性能测试报告</li><li>性能测试问题跟踪</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;2-性能测试知识面&quot;&gt;&lt;a href=&quot;#2-性能测试知识面&quot; class=&quot;headerlink&quot; title=&quot;2-性能测试知识面&quot;&gt;&lt;/a&gt;2-性能测试知识面&lt;/h1&gt;&lt;h2 id=&quot;性能测试指标&quot;&gt;&lt;a href=&quot;#性能测试指标&quot; class=&quot;headerlink&quot; title=&quot;性能测试指标&quot;&gt;&lt;/a&gt;性能测试指标&lt;/h2&gt;&lt;h3 id=&quot;响应时间RT（重要指标）&quot;&gt;&lt;a href=&quot;#响应时间RT（重要指标）&quot; class=&quot;headerlink&quot; title=&quot;响应时间RT（重要指标）&quot;&gt;&lt;/a&gt;响应时间RT（重要指标）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;RT是一个非常重要的性能指标&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从发起请求的时间点，经过网络传输时间+服务器处理的时间+通过网络传输返回的时间&lt;/p&gt;
&lt;p&gt;我们做性能测试时，尽可能的降低网络延迟时间，这样RT时间才会无限的接近我们的服务器处理时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带宽加宽&lt;/li&gt;
&lt;li&gt;局域网&lt;/li&gt;
&lt;li&gt;在性能测试中，不要使用无线网络（排除专门的无线网络测试）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用有线网络时要注意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络传输的带宽&lt;/li&gt;
&lt;li&gt;降低网络传输的节点与距离（不能使用跳板机）&lt;/li&gt;
&lt;li&gt;独立网络环境&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>1-性能测试入门</title>
    <link href="http://zx490336534.github.io/article/cbb71895.html"/>
    <id>http://zx490336534.github.io/article/cbb71895.html</id>
    <published>2021-03-23T23:04:00.000Z</published>
    <updated>2021-04-22T14:34:11.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-性能测试入门"><a href="#1-性能测试入门" class="headerlink" title="1-性能测试入门"></a>1-性能测试入门</h1><h2 id="测试思维"><a href="#测试思维" class="headerlink" title="测试思维"></a>测试思维</h2><blockquote><p>性能测试思维和功能测试思维完全不一样。</p></blockquote><p>功能测试/自动化测试需要确定Bug</p><p>怎么确定是Bug？</p><ul><li>预期结果与实际结果进行比较，如果不一致则发现bug</li><li>潜在的一个前提：模拟<code>一个用户</code>对产品进行使用，能否正常</li></ul><p>性能测试：1+1不等于2</p><p>模拟多个人同时操作产品，关注点不再是功能是否正常</p><p>如果单人操作没有问题，多人操作出现异常，是出现了<strong>性能瓶颈</strong>而不是功能问题</p><p>1个人循环做10次，不是性能测试</p><p>10个人同时做一件事，是性能测试</p><span id="more"></span><h2 id="性能入门知识"><a href="#性能入门知识" class="headerlink" title="性能入门知识"></a>性能入门知识</h2><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>事务、物品的某些特性的评价值</p><h3 id="软件性能测试"><a href="#软件性能测试" class="headerlink" title="软件性能测试"></a>软件性能测试</h3><p>通过工具，<code>找出</code>或<code>获得</code>系统在不同工况下的性能指标值</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul><li>RT响应时间</li><li>错误率</li><li>服务器资源消耗</li></ul><blockquote><p>隐藏的前提：功能测试已经通过，才做性能测试</p></blockquote><p>性能测试，得到的都是性能指标值，不是功能的bug数量</p><h2 id="前端性能测试"><a href="#前端性能测试" class="headerlink" title="前端性能测试"></a>前端性能测试</h2><p>前端性能测试，影响因素非常多，而且不通用，所以测试工具很多，没有统一标准</p><ul><li>前端性能测试，并不一定是多用户</li><li>前端与端设备有直接关系</li><li>前端与设备配置有关系</li></ul><h3 id="常用的前端性能测试工具"><a href="#常用的前端性能测试工具" class="headerlink" title="常用的前端性能测试工具"></a>常用的前端性能测试工具</h3><ul><li>PageSpeed Insights:<a href="https://developers.google.cn/speed/pagespeed/insights/">https://developers.google.cn/speed/pagespeed/insights/</a></li></ul><p>谷歌开发的一个免费的<a href="https://developers.google.cn/speed/pagespeed/insights/?utm_source=testingpai.com">网页分析工具</a>，在地址栏中输入被分析的网站 url 地址，点击分析，</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goun20zgdbj30xr0u010f.jpg" alt="PageSpeed Insights"></p><ul><li>Lighthouse</li></ul><p>Lighthouse 是谷歌开源的一款 Web 前端性能测试工具，用于改进网络应用的质量，适用于网页版和移动端。能生成一个包括页面性能、PWA（Progressive Web apps，渐进式 Web 应用）、可访问性（无障碍）、最佳实践、SEO 的报告清单提供参考，看看可以采取哪些措施来改进您的应用。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g lighthouse</span><br></pre></td></tr></tbody></table></figure><ul><li>SiteSpeed:<a href="https://www.sitespeed.io/">https://www.sitespeed.io/</a></li></ul><p>SiteSpeed 是一款开源的，可以用于监控和检查网站性能的工具。可以通过 docker 镜像或 npm 方式来使用。这个工具，并不是单一的，而是一组工具集合，可以根据自己需要，选择适合自己的工具。</p><ul><li>Speedcurve:<a href="https://speedcurve.com/">https://speedcurve.com/</a></li></ul><p>Speedcurve 是一个前端性能综合监控网站，可以在网站输入被测网站的 url 地址，进行测试</p><ul><li>webpagetest:<a href="https://www.webpagetest.org/">https://www.webpagetest.org/</a></li></ul><p>webpagetest和上面的 speedcurve 相似，也是在一个网站中，输入被测试的网站 ip 地址，就可以对被测网站页面进行分析。但是，这个网站在国内，被友好的和谐了，会出现无法正常进行测试的情况。</p><h2 id="接口性能"><a href="#接口性能" class="headerlink" title="接口性能"></a>接口性能</h2><blockquote><p>有不同协议的http协议族</p></blockquote><p>协议：提供者和使用者之间的一个数据约束</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><blockquote><p>通过工具、找出或者验证，系统在不同工况下的性能指标</p></blockquote><h3 id="通过工具"><a href="#通过工具" class="headerlink" title="通过工具"></a>通过工具</h3><p>性能测试，不能靠手工</p><p>常用的工具：</p><ul><li>jmeter</li><li>loadrunner</li><li>python+locust</li><li>ngrinder</li></ul><h3 id="找出「基准测试」"><a href="#找出「基准测试」" class="headerlink" title="找出「基准测试」"></a>找出「基准测试」</h3><p>在完全没有性能指标可以做参考时，通过性能测试得到性能指标值</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在接口升级之后，对接口再次进行性能测试，对比基准测试结果</p><h2 id="压测-负载测试-性能测试-最大并发用户数下的性能指标"><a href="#压测-负载测试-性能测试-最大并发用户数下的性能指标" class="headerlink" title="压测=负载测试+性能测试=最大并发用户数下的性能指标"></a>压测=负载测试+性能测试=最大并发用户数下的性能指标</h2><h3 id="负载测试：逐步增加"><a href="#负载测试：逐步增加" class="headerlink" title="负载测试：逐步增加"></a>负载测试：逐步增加</h3><p>逐步增加：逐步增加同时请求的数量，来观察系统能承受的<strong>最大负载区间</strong></p><p>在逐步增加后 会得到一个<code>拐点</code>的区间</p><hr><p>问：一个系统完全没有做过性能测试，如何找出最大并发用户数</p><p>答：进行负载测试，逐步增加并发数</p><h3 id="压力测试：较长时间-较大压力"><a href="#压力测试：较长时间-较大压力" class="headerlink" title="压力测试：较长时间+较大压力"></a>压力测试：较长时间+较大压力</h3><p>在一定并发用户数请求下，持续运行一段时间，看系统服务及各资源利用情况，是否存在稳定性问题</p><ul><li>时间：较长，以小时为单位，一般是几个小时或几天</li><li>目的：看服务器是否稳定</li></ul><p>当服务器出现不稳定情况宕机，我们就要进行压力测试了</p><h3 id="可靠性测试"><a href="#可靠性测试" class="headerlink" title="可靠性测试"></a>可靠性测试</h3><p>在给定一定的业务压力下，持续运行一段时间，查看系统是否稳定</p><p>关键词：是否<code>稳定</code>，一定业务压力</p><h3 id="容量测试"><a href="#容量测试" class="headerlink" title="容量测试"></a>容量测试</h3><p>在一定的软、硬件条件下，在数据库不同数量级数据量的情况时，对系统中读/写比进行测试，从而获得不同数据量级下的性能指标值。</p><ul><li>要与生产的数据库的数量级别保持一致</li><li>如果产品没有上线，看数据库是什么数据库来评定量级。一般mysql为100w级</li></ul><p>问：为什么数据库要有这样一个数据量的数据准备？</p><p>答：数据库在10w、100w数据时，索引会对性能造成非常大的影响。百万级数据库，如果有索引，而且生效，sql的时间毫秒到秒之间，但是没有索引，或者索引无效，需要在几秒以上</p><p>性能测试环境的数据量要与生产一致。一定要注意数据脱敏/</p><h2 id="性能测试前提"><a href="#性能测试前提" class="headerlink" title="性能测试前提"></a>性能测试前提</h2><blockquote><p>性能测试，有前提，并不是什么时候，什么接口都可以做性能测试。</p></blockquote><h3 id="性能测试的必要性研究：关键项评估"><a href="#性能测试的必要性研究：关键项评估" class="headerlink" title="性能测试的必要性研究：关键项评估"></a>性能测试的必要性研究：关键项评估</h3><ul><li>主管部门、监管部门审核</li><li>设计生命财产安全</li><li>大型新系统</li><li>核心系统</li><li>架构调整</li><li>业务剧增</li><li>最大缺陷修复</li></ul><h3 id="可测性：可量化为性能指标值"><a href="#可测性：可量化为性能指标值" class="headerlink" title="可测性：可量化为性能指标值"></a>可测性：可量化为性能指标值</h3><h2 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h2><ul><li><p>Jmeter</p></li><li><p>loadrunner</p></li><li><p>python+locust</p></li></ul><h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><h3 id="企业关注"><a href="#企业关注" class="headerlink" title="企业关注"></a>企业关注</h3><ul><li>服务器利用情况：资源利用率</li><li>能支持的最大用户：系统容量</li><li>能支持的最大并发用户：并发用户数</li><li>是不是可以更换硬件提供性能：可扩展</li><li>能不能持续运行长时间不宕机：稳定性</li></ul><h3 id="开发人员"><a href="#开发人员" class="headerlink" title="开发人员"></a>开发人员</h3><ul><li>架构设计是否合理：系统架构</li><li>数据库设计：数据库</li><li>代码逻辑：代码</li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>狭义：同一时间多个人做同一件事情</p><p>广义：同一时间多个人发起请求，事情可能不一样</p><p>现在的性能测试都是广义并发</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>客户机向服务器发送请求，然后服务器做出反应的过程</p><p>jmeter中有两种事务</p><ul><li>一个请求就是一个事务</li><li>添加了事务控制器，把多个接口合并在一起作为一个事务</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-性能测试入门&quot;&gt;&lt;a href=&quot;#1-性能测试入门&quot; class=&quot;headerlink&quot; title=&quot;1-性能测试入门&quot;&gt;&lt;/a&gt;1-性能测试入门&lt;/h1&gt;&lt;h2 id=&quot;测试思维&quot;&gt;&lt;a href=&quot;#测试思维&quot; class=&quot;headerlink&quot; title=&quot;测试思维&quot;&gt;&lt;/a&gt;测试思维&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;性能测试思维和功能测试思维完全不一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;功能测试/自动化测试需要确定Bug&lt;/p&gt;
&lt;p&gt;怎么确定是Bug？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预期结果与实际结果进行比较，如果不一致则发现bug&lt;/li&gt;
&lt;li&gt;潜在的一个前提：模拟&lt;code&gt;一个用户&lt;/code&gt;对产品进行使用，能否正常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;性能测试：1+1不等于2&lt;/p&gt;
&lt;p&gt;模拟多个人同时操作产品，关注点不再是功能是否正常&lt;/p&gt;
&lt;p&gt;如果单人操作没有问题，多人操作出现异常，是出现了&lt;strong&gt;性能瓶颈&lt;/strong&gt;而不是功能问题&lt;/p&gt;
&lt;p&gt;1个人循环做10次，不是性能测试&lt;/p&gt;
&lt;p&gt;10个人同时做一件事，是性能测试&lt;/p&gt;</summary>
    
    
    
    <category term="性能测试" scheme="http://zx490336534.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试开发" scheme="http://zx490336534.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能测试" scheme="http://zx490336534.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
