<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>17-混合场景设计</title>
      <link href="article/307fc095.html"/>
      <url>article/307fc095.html</url>
      
        <content type="html"><![CDATA[<h1 id="17-混合场景设计"><a href="#17-混合场景设计" class="headerlink" title="17-混合场景设计"></a>17-混合场景设计</h1><h2 id="面向目标的场景"><a href="#面向目标的场景" class="headerlink" title="面向目标的场景"></a>面向目标的场景</h2><ul><li>Target Rate：TPS</li><li>Ramp Up Time：启动时间</li><li>Ramp-Up Steps Count：启动步长 总共可以调整的次数，如果少于总次数可以达到目标，那么后面剩余的次数就不会再调整。如果所有的调整次数都用完了，也无法达到目标，就是无法实现目标</li></ul><blockquote><p>调整次数，调整的是「并发用户数」</p></blockquote><p>在这个场景中，完全没有设置「并发用户数」的地方，是通过自动调整并发用户数来实现的</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqby7vn8ncj30t90dnwfj.jpg" alt="bzm - Arrivals Thread Group"></p><h2 id="混合场景"><a href="#混合场景" class="headerlink" title="混合场景"></a>混合场景</h2><h3 id="错误的混合场景"><a href="#错误的混合场景" class="headerlink" title="错误的混合场景"></a>错误的混合场景</h3><ol><li><p>一个线程组中，挂载多个接口，向服务器发起请求。但是这种严格意义上来说，属于伪混合场景</p></li><li><p>加吞吐量控制器当作混合场景：完全不知道如何做性能测试的思路</p></li><li><p>if条件控制器来做混合场景，也是伪混合场景</p></li></ol><h3 id="真正的混合场景"><a href="#真正的混合场景" class="headerlink" title="真正的混合场景"></a>真正的混合场景</h3><p>不同数量的并发用户，向服务器发起不同的接口请求</p><p>因为并发用户数量设置，是要使用线程组的。所以「不同数量的并发用户」需要使用多个线程组</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbypw2aomj303003c3yg.jpg" alt="多个线程组"></p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>jmeter中，写脚本，最难的技术点，是跨线程组传参</p><blockquote><p>用户定义变量：全局变量，可以跨线程组。在启动时获取一次，在运行过程中不会动态获取值</p><p>用户参数：局部变量，不能直接跨线程组</p></blockquote><ol><li>属性</li></ol><blockquote><p>jmeter属性</p><ul><li>静态属性：properties</li><li>动态属性：setPorperty</li></ul><p>系统属性：</p></blockquote><ul><li>前面线程组中的接口参数值，设置为jmeter的属性</li><li>后面的线程组，获取jmeter属性值</li><li>线程组设置不同的并发用户数 </li></ul><ol start="2"><li>文件嫁接：使用「数据库」方式比使用「csv」方式性能要好 消耗本机的资源要小</li></ol><h2 id="属性跨线程组"><a href="#属性跨线程组" class="headerlink" title="属性跨线程组"></a>属性跨线程组</h2><h3 id="线程1：注册"><a href="#线程1：注册" class="headerlink" title="线程1：注册"></a>线程1：注册</h3><p>为了让数据读取的比较整齐，将注册与属性设置放在一个「事务控制器」中</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbz9jp3e1j30qs05ft9n.jpg" alt="事务控制器"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzarpo2nj30tr0d9n00.jpg" alt="HTTP请求"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzawq9o1j30oh06kdgx.jpg" alt="用户参数"></p><p>使用JSON取样器将返回内容进行提取</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzb1qwz4j30w008c409.jpg" alt="JSON取样器"></p><p>编写两个「调试取样器」进行属性的设置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">${__setProperty(pro_mobile,${gmobile},)}</span><br><span class="line">${__setProperty(pro_gqid,${gqid},)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzc2derjj30m0062ab2.jpg" alt="设置手机号"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzc72mwkj30lb06bdgv.jpg" alt="设置gqid"></p><p>运行一次查看「属性显示」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzcu6n3qj313l0mhq7w.jpg" alt="image-20210509104547525"></p><h3 id="线程2：登录"><a href="#线程2：登录" class="headerlink" title="线程2：登录"></a>线程2：登录</h3><p>在HTTP请求中电话号码和gqid设置为</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">${__property(pro_mobile,,)}</span><br><span class="line">${__property(pro_gqid,,)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbzeyx8lnj30un0ayq5f.jpg" alt="HTTP请求"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>由于Jmeter中线程数同时运行的，所以会出现获取到的值为上一次的值</p><p>当并发数量增加后，会出现多个请求使用了同一个属性</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>属性名称设置时携带「线程号」</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">${__setProperty(pro_mobile_${__threadNum},${gmobile},)}</span><br><span class="line">${__setProperty(pro_gqid_${__threadNum},${gqid},)}</span><br><span class="line"></span><br><span class="line">登录接口</span><br><span class="line">{</span><br><span class="line">    <span class="string">"mobile"</span>: <span class="string">"${__property(pro_mobile_${__threadNum},,)}"</span>,</span><br><span class="line">    <span class="string">"gqid"</span>:<span class="string">"${__property(pro_gqid_${__threadNum},,)}"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="波浪场景"><a href="#波浪场景" class="headerlink" title="波浪场景"></a>波浪场景</h2><p>波浪：有一定的时间规律</p><p>x轴：时间</p><p>y轴：并发用户数</p><h3 id="jp-gc-Ultimate-Thread-Group"><a href="#jp-gc-Ultimate-Thread-Group" class="headerlink" title="jp@gc - Ultimate Thread Group"></a>jp@gc - Ultimate Thread Group</h3><p>终极线程组</p><p>添加三条：</p><ul><li>线程数100，开始时间0秒，起线程时间30秒，持续60秒，停止线程时间10秒</li><li>线程数100，开始时间110秒，起线程时间30秒，持续60秒，停止线程时间10秒</li><li>线程数100，开始时间220秒，起线程时间30秒，持续60秒，停止线程时间10秒</li></ul><p>110秒=第一条的30秒+60秒+10秒+ 10秒等待时间</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqc123eznnj31740r8qaf.jpg" alt="波浪"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-负载、压力、面向目标测试场景</title>
      <link href="article/b22971f7.html"/>
      <url>article/b22971f7.html</url>
      
        <content type="html"><![CDATA[<h1 id="16-负载、压力、面向目标测试场景"><a href="#16-负载、压力、面向目标测试场景" class="headerlink" title="16-负载、压力、面向目标测试场景"></a>16-负载、压力、面向目标测试场景</h1><h2 id="负载测试场景"><a href="#负载测试场景" class="headerlink" title="负载测试场景"></a>负载测试场景</h2><blockquote><p>负载测试：逐步增加并发用户数，拐点区间</p></blockquote><p>jmeter如何逐步增加并发用户数：</p><p>安装<code>jpgc - Standard Set</code>插件</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbc93qh02j30vk0oggpt.jpg" alt="jpgc"></p><p>在「测试计划」右键添加「线程」的时候可以发现多了很多项</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbcizds0qj30b605qt9a.jpg" alt="线程"></p><span id="more"></span><p>选择「jp@gc - Stepping Thread Group (deprecated)」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbcj7twwwj30xr0u046k.jpg" alt="jp@gc - Stepping Thread Group (deprecated)"></p><p>x轴：时间</p><p>y轴：用户数</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbckz1jy4j30p706jq3d.jpg" alt="配置"></p><ol><li>This group will start 「100」 threads：将启动100个线程数</li><li>First，wair for 「0」 seconds： 首先等待0秒</li><li>Then start 「0」threads：然后 启动0个用户</li><li>Next，add「10」 threads every 「30」seconds，using ramp-up 「5」 seconds：每5秒钟，增加10个线程数，然后运行30秒</li><li>Then hold load for 「60」seconds：然后持续运行60秒</li><li>Finally，stop「5」threads every 「1」 seconds：最后，没1秒停止5个线程数</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbd3r6xbdj30t20sg0vl.jpg" alt="图讲解"></p><p><strong>缓起步，快结束</strong></p><p>结束时间不能太短，也不能太长</p><ul><li>太短：可能导致出错，这个出错是场景设计的问题，不是性能问题</li><li>太长：导致性能指标值与实际值偏差太大</li></ul><p>如果330正常，在360出现异常，出现拐点区间。</p><p>所以拐点范围为<code>[330,360]</code>，通过缩小范围，找到拐点值</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdffo2y6j30p206o74q.jpg" alt="寻找拐点"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdexynrjj30xr0u0gty.jpg" alt="寻找拐点"></p><p>想要寻找某个接口的最大并发用户数，通过最大并发用户数，获取性能指标值？</p><ol><li>设置一个阶梯线程组，自己设置一个最大值</li><li>运行，找到拐点值</li><li>缩小拐点区间，找到最大并发用户数</li><li>进行性能测试</li></ol><h3 id="如何找到拐点值"><a href="#如何找到拐点值" class="headerlink" title="如何找到拐点值"></a>如何找到拐点值</h3><p>在添加插件后可以看到「监听器」中新增了部分内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdmbxnbbj309b0cxabi.jpg" alt="监听器"></p><ul><li>Active Threads Over Time：随着时间变化的活跃线程数</li><li>PerfMon Metrics Collecotr：性能监控器</li><li>Response Times Over Time：随着时间变化的响应时间</li><li>Transactions per Second：TPS</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdr9pladj30900510t5.jpg" alt="线程组"></p><h4 id="Active-Threads-Over-Time"><a href="#Active-Threads-Over-Time" class="headerlink" title="Active Threads Over Time"></a>Active Threads Over Time</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdrx556oj31240fxmyw.jpg" alt="Active Threads Over Time"></p><h4 id="Response-Times-Over-Time"><a href="#Response-Times-Over-Time" class="headerlink" title="Response Times Over Time"></a>Response Times Over Time</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbds3ncb6j313t0k1789.jpg" alt="Response Times Over Time"></p><h4 id="Transactions-per-Second"><a href="#Transactions-per-Second" class="headerlink" title="Transactions per Second]"></a>Transactions per Second]</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbdsa6ogkj313v0kftdi.jpg" alt="Transactions per Second"></p><ol><li><p>是否有报错</p></li><li><p>响应时间是否超过1.5s：用户满意度指数：500ms是可以接受，超过1.5s不能接受</p></li><li><p>tps 不上升，反而下降</p></li></ol><p>响应时间+活跃线程数=&gt;不同线程数时的平均响应时间</p><p>活跃线程数+TPS=&gt;不同线程数的平均tps</p><p>注意：一般不会在一个线程组下挂载多个接口，因为 监听器图标中，会把所有接口数据合并在一个图标中，数据太多，不利于分析</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbe6voyl3j31740pctic.jpg" alt="多个接口"></p><h2 id="压力测试场景"><a href="#压力测试场景" class="headerlink" title="压力测试场景"></a>压力测试场景</h2><ul><li>持续运行比较长时间，看服务器的稳定性</li><li>普通线程组：调度器持续运行时间，设置比较长</li><li>阶梯线程组：hold load时间设置比较长</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbecy8qw3j30q106rt96.jpg" alt="hold load"></p><h2 id="面向目标的场景"><a href="#面向目标的场景" class="headerlink" title="面向目标的场景"></a>面向目标的场景</h2><blockquote><p>需求：有一个页面，需要做性能测试。看能否支持一秒钟5000人访问</p></blockquote><p>相当于：1秒钟要处理500人的请求事务=&gt;500tps</p><p>一般的公司，接口tps范围数50～200</p><p>添加一个「bzm - Arrivals Thread Group」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqbehzyr2aj31740pc7al.jpg" alt="bzm - Arrivals Thread Group"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-性能测试场景</title>
      <link href="article/e64c544a.html"/>
      <url>article/e64c544a.html</url>
      
        <content type="html"><![CDATA[<h1 id="15-性能测试场景"><a href="#15-性能测试场景" class="headerlink" title="15-性能测试场景"></a>15-性能测试场景</h1><h2 id="全链路测试"><a href="#全链路测试" class="headerlink" title="全链路测试"></a>全链路测试</h2><blockquote><p>听起来，很高大上，但是没几家能落地</p><p>真正做全链路性能测试，只有大公司才可能落地</p></blockquote><p>全链路：就一个请求，从头到尾所有的环境，都进行性能测试</p><p>例如，公司中的一个登录业务，需要经过多少个服务，要调用多少个接口，这个接口的完整数据流是否清楚。</p><ol><li>一个一个接口把性能测试做下来。</li><li>每一个业务的性能测试做下来。</li><li>多个业务的性能测试做下来。</li></ol><p>需要解决单个接口，单个业务的性能瓶颈后，才可以开始全链路测试。</p><span id="more"></span><h3 id="模拟生产环境，真实用户对业务使用分配"><a href="#模拟生产环境，真实用户对业务使用分配" class="headerlink" title="模拟生产环境，真实用户对业务使用分配"></a>模拟生产环境，真实用户对业务使用分配</h3><ol><li>各种业务</li><li>各种业务的用户量不相同</li><li>业务覆盖广，深度深</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及系统多</li><li>如何模拟用户真实流量分配</li><li>接口业务多</li></ol><h3 id="如何开展"><a href="#如何开展" class="headerlink" title="如何开展"></a>如何开展</h3><ol><li>分析生产用户流量</li><li>各个业务接口性能测试脚本开发</li><li>压测环境要模拟生产环境</li><li>压测数据</li><li>实时全流程监控</li></ol><h3 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h3><ol><li>单系统优化</li><li>关键点优化</li><li>业务流程优化</li></ol><h2 id="性能场景设计"><a href="#性能场景设计" class="headerlink" title="性能场景设计"></a>性能场景设计</h2><ul><li>性能测试场景</li><li>负载测试场景</li><li>压力测试场景</li><li>面向目标场景</li><li>混合场景</li><li>波浪形场景</li></ul><h2 id="性能场景设计-性能测试场景"><a href="#性能场景设计-性能测试场景" class="headerlink" title="性能场景设计-性能测试场景"></a>性能场景设计-性能测试场景</h2><ol><li>普通线程组</li><li>服务器接口性能测试，一定要是多用户并发</li><li>多用户：jmeter线程组中的「线程数」</li></ol><ul><li><p>多用户并发=多个人</p></li><li><p>在性能测试中，这个「人」是如何模拟的？</p></li></ul><blockquote><p>一个软件、程序、代码运行起来，就会生产一个进程</p><p>一个进程中真正干活的是线程</p></blockquote><blockquote><p>性能测试中，模拟多用户并发，不同工具可能使用不同的方式。</p><p>jmeter使用的是线程</p><p>loadrunner可以使用进程、线程，默认是线程</p><p>locust使用的是协程</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqa7o1ac84j30x50c20u1.jpg" alt="线程组"></p><p><strong>线程数</strong>：相当于用户个数</p><p><strong>Ramp-Up时间（秒）</strong>：启动所有线程数的时间。在这个时间内，线程只要启动了，就去执行请求，是广义的并发</p><p>例如：当「Ramp-Up」设置为2，「线程数」设置为10：在2秒钟结束，10个用户都启动好。不保证在2秒钟过程中，到底是怎么启动的。</p><p>理论上 Jmeter没有显示线程数的数量，可以设置为任意大的数字。</p><p>实际上，受电脑本身的资源影响，不可能无限大。</p><p>一台电脑，cpu的频率直接影响线程数量，一般而言，一台电脑jmeter（http协议）能创建的线程数，大约在2000左右，保守在1000-1500</p><p>ramp-up设置：</p><ul><li>线程数&lt;100，1s</li><li>线程数&lt;200，2～3s</li><li>200&lt;线程数&lt;1000 3～5s</li></ul><p><strong>循环次数</strong>：至少设置为1</p><p><strong>永远</strong>：勾选后会持续运行直到手动停止</p><p><strong>调度器</strong>：需要配合「永远」一起使用。输入一个<strong>持续时间</strong>可以指定任务运行一段时间后停止</p><p><strong>启动延迟</strong>：线程起来后等待一段时间后再执行</p><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>配置「线程数」10，「Ramp-U」p为2，「循环次数」为「永远」，勾选「调度器」，设置「持续时间」为180秒</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqa8g6s2vqj306r07t74l.jpg" alt="线程属性"></p><p>运行后查看「聚合报告」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqa8gcpm4tj30ti09qjtb.jpg" alt="聚合报告"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-Dubbo测试</title>
      <link href="article/61019fc7.html"/>
      <url>article/61019fc7.html</url>
      
        <content type="html"><![CDATA[<h1 id="14-Dubbo测试"><a href="#14-Dubbo测试" class="headerlink" title="14-Dubbo测试"></a>14-Dubbo测试</h1><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><blockquote><p>目前是apache托管的开源项目，能够实现RPC</p></blockquote><ul><li><p>注册中心：zookeeper 默认端口2181</p></li><li><p>服务提供者：应用程序</p></li><li><p>服务消费者：使用服务方</p></li><li><p>服务监控：监控</p><span id="more"></span><h3 id="测试服务器环境"><a href="#测试服务器环境" class="headerlink" title="测试服务器环境"></a>测试服务器环境</h3></li></ul><blockquote><p>测试服务器IP：192.168.9.3</p><p>zookeeper端口20181</p><p>服务提供者：</p><ul><li><p>membet1:20882 </p></li><li><p>membet2:20883</p></li></ul></blockquote><h3 id="测试dubbo的方法"><a href="#测试dubbo的方法" class="headerlink" title="测试dubbo的方法"></a>测试dubbo的方法</h3><h4 id="1-使用Telnet的方式"><a href="#1-使用Telnet的方式" class="headerlink" title="1.使用Telnet的方式"></a>1.使用Telnet的方式</h4><blockquote><p>在mac上运行telnet需要环境</p><p>使用<code>Homebrew</code>安装一下</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install telnet</span></span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> telnet 192.168.9.3 20882</span></span><br></pre></td></tr></tbody></table></figure><p>使用<code>ls</code>可以查看提供的服务的名称也就是「接口」</p><p>使用<code>ls -l</code>可以查看接口的所有方法</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">ls</span></span><br><span class="line">com.lemon.member.service.MemberService</span><br><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">ls -l com.lemon.member.service.MemberService</span></span><br><span class="line">com.lemon.member.pojo.Member getMember(com.lemon.member.pojo.Member)</span><br><span class="line">void recharge(com.lemon.member.pojo.Recharger)</span><br><span class="line">void withdraw(com.lemon.member.pojo.WithDrawer)</span><br><span class="line">void add(com.lemon.member.pojo.Member)</span><br><span class="line">void update(com.lemon.member.pojo.Member)</span><br><span class="line">java.util.List list()</span><br></pre></td></tr></tbody></table></figure><p>方法括号中有内容，就是带有参数的方法</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq093hm27zj30tt10x7cz.jpg" alt="Telnet"></p><p>使用<code>cd</code>进入到服务的名称位置后</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">ls -l</span></span><br><span class="line">com.lemon.member.service.MemberService -&gt; dubbo://192.168.9.3:20882/com.lemon.member.service.MemberService?anyhost=true&amp;application=futureloan-member-service&amp;dubbo=2.5.3&amp;interface=com.lemon.member.service.MemberService&amp;methods=add,recharge,getMember,update,list,withdraw&amp;pid=2333&amp;retries=3&amp;revision=0.0.1-SNAPSHOT&amp;side=provider&amp;timestamp=1619651401859</span><br></pre></td></tr></tbody></table></figure><p>调用接口的方法：<code>invoke 接口.方法()</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo&gt;</span><span class="bash">invoke com.lemon.member.service.MemberService.list()</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09b8pyrqj30tt0tfgw7.jpg" alt="list方法"></p><h4 id="2-使用jmeter"><a href="#2-使用jmeter" class="headerlink" title="2.使用jmeter"></a>2.使用jmeter</h4><p>将<code>jmeter-plugins-dubbo-2.7.3-jar-with-dependencies.jar</code>放入<code>lib\ext</code>中后，重启Jmeter</p><p>添加「取样器」后可以看到增加了「Dubbo Sample」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09g6x548j309u0h5jt8.jpg" alt="取样器"></p><p>在「Registry Settings」填入服务器信息后点击「Get Provider List」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09j4xhyfj30xv0u0jxe.jpg" alt="填写"></p><p>可以看到我们可以查看相关方法。这些方法与刚才使用Telnet查看的一致</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09k8msbkj30t4058753.jpg" alt="查看方法"></p><p>我们选择「list」后点击运行</p><p>可以在「查看结果树」中查看与Telnet中一致的内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09l79zzoj30xr0u015i.jpg" alt="查看结果"></p><p>查看add的接口文档</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09qlk280j30gc03o74v.jpg" alt="add接口文档"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq09r49proj30sp0av752.jpg" alt="入参"></p><h2 id="其他性能测试工具"><a href="#其他性能测试工具" class="headerlink" title="其他性能测试工具"></a>其他性能测试工具</h2><blockquote><p>ab和wrk都是快速响应性能测试工具</p></blockquote><h3 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://gitee.com/mirrors/wrk.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> wrk/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:~ zhongxin$ mkdir wrk</span><br><span class="line">(base) 192:~ zhongxin$ cd wrk/</span><br><span class="line">(base) 192:wrk zhongxin$ ls</span><br><span class="line">(base) 192:wrk zhongxin$ git clone https://gitee.com/mirrors/wrk.git</span><br><span class="line">Cloning into 'wrk'...</span><br><span class="line">remote: Enumerating objects: 1103, done.</span><br><span class="line">remote: Total 1103 (delta 0), reused 0 (delta 0), pack-reused 1103</span><br><span class="line">Receiving objects: 100% (1103/1103), 37.83 MiB | 2.02 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (345/345), done.</span><br><span class="line">(base) 192:wrk zhongxin$ ls</span><br><span class="line">wrk</span><br><span class="line">(base) 192:wrk zhongxin$ cd wrk/</span><br><span class="line">(base) 192:wrk zhongxin$ make</span><br></pre></td></tr></tbody></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-c 连接数</span><br><span class="line">-d 持续运行失常</span><br><span class="line">-t 线程数</span><br><span class="line">-s Lua脚本</span><br><span class="line">-H 添加请求头</span><br><span class="line">-v 查看版本信息</span><br></pre></td></tr></tbody></table></figure><h4 id="测试语句"><a href="#测试语句" class="headerlink" title="测试语句"></a>测试语句</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./wrk -t4 -c100 -d30s --latency https://www.baidu.com/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ./wrk -t4 -c100 -d30s --latency https://www.baidu.com/</span><br><span class="line">Running 30s test @ https://www.baidu.com/</span><br><span class="line">  4 threads and 100 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   151.92ms  126.20ms   1.99s    95.29%</span><br><span class="line">    Req/Sec   170.01     43.17   333.00     81.93%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%  128.98ms</span><br><span class="line">     75%  137.80ms</span><br><span class="line">     90%  195.57ms</span><br><span class="line">     99%  802.22ms</span><br><span class="line">  19933 requests in 30.10s, 298.16MB read</span><br><span class="line">  Socket errors: connect 0, read 156, write 0, timeout 45</span><br><span class="line">Requests/sec:    662.23</span><br><span class="line">Transfer/sec:      9.91MB</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gq0a3ix9aoj30vh0gowim.jpg" alt="wrk"></p><ul><li>Avg 平均响应</li><li>Stdev 标准方差</li><li>Max 最大值</li><li>+/- Stdev 偏差比</li><li>Latency 响应时间分布</li><li>Req/sec 每秒请求数</li></ul><h3 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ab -V</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1879490 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ab -help</span><br><span class="line">Usage: ab [options] [http[s]://]hostname[:port]/path</span><br><span class="line">Options are:</span><br><span class="line">    -n requests     Number of requests to perform</span><br><span class="line">    -c concurrency  Number of multiple requests to make at a time</span><br><span class="line">    -t timelimit    Seconds to max. to spend on benchmarking</span><br><span class="line">                    This implies -n 50000</span><br><span class="line">    -s timeout      Seconds to max. wait for each response</span><br><span class="line">                    Default is 30 seconds</span><br><span class="line">    -b windowsize   Size of TCP send/receive buffer, in bytes</span><br><span class="line">    -B address      Address to bind to when making outgoing connections</span><br><span class="line">    -p postfile     File containing data to POST. Remember also to set -T</span><br><span class="line">    -u putfile      File containing data to PUT. Remember also to set -T</span><br><span class="line">    -T content-type Content-type header to use for POST/PUT data, eg.</span><br><span class="line">                    'application/x-www-form-urlencoded'</span><br><span class="line">                    Default is 'text/plain'</span><br><span class="line">    -v verbosity    How much troubleshooting info to print</span><br><span class="line">    -w              Print out results in HTML tables</span><br><span class="line">    -i              Use HEAD instead of GET</span><br><span class="line">    -x attributes   String to insert as table attributes</span><br><span class="line">    -y attributes   String to insert as tr attributes</span><br><span class="line">    -z attributes   String to insert as td or th attributes</span><br><span class="line">    -C attribute    Add cookie, eg. 'Apache=1234'. (repeatable)</span><br><span class="line">    -H attribute    Add Arbitrary header line, eg. 'Accept-Encoding: gzip'</span><br><span class="line">                    Inserted after all normal header lines. (repeatable)</span><br><span class="line">    -A attribute    Add Basic WWW Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -P attribute    Add Basic Proxy Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -X proxy:port   Proxyserver and port number to use</span><br><span class="line">    -V              Print version number and exit</span><br><span class="line">    -k              Use HTTP KeepAlive feature</span><br><span class="line">    -d              Do not show percentiles served table.</span><br><span class="line">    -S              Do not show confidence estimators and warnings.</span><br><span class="line">    -q              Do not show progress when doing more than 150 requests</span><br><span class="line">    -l              Accept variable document length (use this for dynamic pages)</span><br><span class="line">    -g filename     Output collected data to gnuplot format file.</span><br><span class="line">    -e filename     Output CSV file with percentages served</span><br><span class="line">    -r              Don't exit on socket receive errors.</span><br><span class="line">    -m method       Method name</span><br><span class="line">    -h              Display usage information (this message)</span><br><span class="line">    -I              Disable TLS Server Name Indication (SNI) extension</span><br><span class="line">    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)</span><br><span class="line">    -f protocol     Specify SSL/TLS protocol</span><br><span class="line">                    (TLS1, TLS1.1, TLS1.2 or ALL)</span><br><span class="line">    -E certfile     Specify optional client certificate chain and private key</span><br></pre></td></tr></tbody></table></figure><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c 并发用户数</span><br><span class="line">-n 总共请求数</span><br><span class="line">-t 持续运行时长</span><br><span class="line">-T 请求头Content-Type 默认text/plan</span><br><span class="line">-p post请求</span><br><span class="line">-m 请求方法名称</span><br><span class="line">-e 请求结果输出到csv文件</span><br><span class="line">-v 查看版本信息</span><br></pre></td></tr></tbody></table></figure><h4 id="测试语句-1"><a href="#测试语句-1" class="headerlink" title="测试语句"></a>测试语句</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -c 10 -n 10000 https://www.baidu.com/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">(base) 192:wrk zhongxin$ ab -c 10 -n 10000 https://www.baidu.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1879490 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.baidu.com (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        BWS/1.1</span><br><span class="line">Server Hostname:        www.baidu.com</span><br><span class="line">Server Port:            443</span><br><span class="line">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><span class="line">Server Temp Key:        ECDH P-256 256 bits</span><br><span class="line">TLS Server Name:        www.baidu.com</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        227 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken for tests:   107.936 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      10818825 bytes</span><br><span class="line">HTML transferred:       2270000 bytes</span><br><span class="line">Requests per second:    92.65 [#/sec] (mean)</span><br><span class="line">Time per request:       107.936 [ms] (mean)</span><br><span class="line">Time per request:       10.794 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          97.88 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       31   80  23.8     77    1375</span><br><span class="line">Processing:     9   28  14.1     24     172</span><br><span class="line">Waiting:        9   24  10.8     21     158</span><br><span class="line">Total:         47  108  29.4    103    1404</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">    103</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">    112</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">    119</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">    123</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">    139</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">    153</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">    177</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">    197</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">   1404 (longest request)</span></span><br><span class="line">(base) 192:wrk zhongxin$</span><br></pre></td></tr></tbody></table></figure><h2 id="ngrinder"><a href="#ngrinder" class="headerlink" title="ngrinder"></a>ngrinder</h2><blockquote><p>nGrinder 是基于 Grinder 开源项目，由 NHN 公司的开发团队进行了重新设计和完善。nGrinder 是一款非常易用，有简洁友好的用户界面和 controller-agent 分布式结构的强大的压力测试工具。</p><p>它的脚本，支持 Jython、Groovy 两种语言。</p><p><strong>官方网站</strong>：<a href="http://naver.github.io/ngrinder/">http://naver.github.io/ngrinder/</a></p><p><strong>GitHub 地址</strong>：<a href="https://github.com/naver/ngrinder">https://github.com/naver/ngrinder</a></p></blockquote><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>下载 war 包 <a href="https://github.com/naver/ngrinder/releases">https://github.com/naver/ngrinder/releases</a></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Java -jar ngrinder-controller-xx.war</span></span><br></pre></td></tr></tbody></table></figure><ol><li>登录 Web 管理界面，点击顶部导航用户信息，在下拉信息中，选择‘下载代理’，将会自动下载 Agent，选择‘下载监控’，将自动下载 monitor 监控</li><li>解压、启动 Agent：双击 run_agent.bat(windows) ‘./run_agent.sh’(linux mac)</li><li>代理服务启动后，在页面 admin &gt; 代理管理，就能看到代理服务器</li></ol><h3 id="制作脚本"><a href="#制作脚本" class="headerlink" title="制作脚本"></a>制作脚本</h3><p>在首页，Quick Start 文本框中输入 要录制脚本的地址，第二个文本框，选择生成脚本的语言类型，点击 <strong>开始测试</strong> 按钮，就可生成脚本。或者点击，菜单栏中的‘<strong>脚本</strong>’</p><p>点击‘<strong>新建脚本</strong>’按钮，弹窗中，选择脚本类型，填写脚本名称，被测 URL(可选)，点击‘创建’即可创建出一个对应脚本语言的脚本</p><p>点击脚本列表 ‘脚本名称’列中的脚本名称，即可打开对应的脚本详情</p><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><ol><li>点击顶部菜单栏中的‘<strong>性能测试</strong>’菜单</li><li>再点击 ‘<strong>创建测试</strong>’</li><li>在这个页面中，填写‘<strong>测试名称</strong>’，填写‘<strong>代理</strong>’数量(根据后面的提示)， 选择‘<strong>脚本</strong>’，如果脚本中有服务器地址，则可以不选择目标主机，如果没有，则需要添加‘<strong>目标主机</strong>’，然后点击右上角的‘<strong>保存 并运行</strong>’，这样就可以按照你的设计，进行性能测试了。</li><li>性能测试执行过程成功，状态为绿色(红色为执行过程中出错)，执行成功，会展示一份测试报告概要。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-Websocket协议与MQ协议</title>
      <link href="article/41dbfa05.html"/>
      <url>article/41dbfa05.html</url>
      
        <content type="html"><![CDATA[<h1 id="13-Websocket协议与MQ协议"><a href="#13-Websocket协议与MQ协议" class="headerlink" title="13-Websocket协议与MQ协议"></a>13-Websocket协议与MQ协议</h1><h2 id="Websocket协议"><a href="#Websocket协议" class="headerlink" title="Websocket协议"></a>Websocket协议</h2><blockquote><p>基于TCP全双工协议，即可以从客户端向服务器端发送请求，也可以从服务器端主动向客户端发送消息。</p></blockquote><blockquote><p> HTTP协议只能从客户端向服务器发送请求，服务器端收到请求后，做出响应，发送给客户端</p></blockquote><p>Websocket和HTTP都是基于TCP协议的，所以使用抓包工具可以抓到websocket的数据</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><ul><li>F12</li><li>Fiddler</li><li>Charles</li><li>Wireshark</li><li>Tcpdump</li></ul><p>HTTP协议簇：http、https协议。https=http+ssl数据加密传输</p><p>websocket：ws，wss协议。wss=ws+ssl数据加密传输</p><span id="more"></span><h2 id="Jmeter测试Websocket"><a href="#Jmeter测试Websocket" class="headerlink" title="Jmeter测试Websocket"></a>Jmeter测试Websocket</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><blockquote><p>jmeter本身不支持websocket，需要安装插件</p></blockquote><p>将「jmeter-plugins-manager-1.6.jar」放入「li b\ext」文件夹中，重启jmeter可以看到<code>Jmeter Plugins Manager</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv68qfwnaj30vk0oggpq.jpg" alt="Jmeter Plugins Manager"></p><p>在「Abaliable Plugins」搜索「websocket」选择「Websocket Samplers by Peter Doornbosch」后点击「Apply Changes and Restart Jmeter」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv6ddxecqj30vk0ogdkg.jpg" alt="安装"></p><p>插件「取样器」，可以发现新增了一些Websocket的取样器</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv6dytkr7j309u0fkq4m.jpg" alt="取样器"></p><ul><li>WebSocket Close 关闭连接</li><li>WebSocket Open Connection 建立连接</li><li>WebSocket Ping/Pong 检查网络是否通畅</li><li>WebSocket Single Read Sampler 相当于http中的response 读取响应信息</li><li>WebSocket Single Write Sampler 相当于http中的request 向服务器发起信息</li><li>WebSocket request-response Sampler 发送请求 同时获取响应信息</li></ul><h2 id="MQ协议"><a href="#MQ协议" class="headerlink" title="MQ协议"></a>MQ协议</h2><blockquote><p>消息队列，是一种先进先出的典型数据结构，一般用来解决应用解耦，异步消息，流量削峰等问题，实现高性能，高可用，可伸缩和最终一致性的架构</p></blockquote><p>MQ典型产品：「RabbitMQ」、「ActiveMQ」、「Kafka」、「RocketMQ」、「ZeroMQ」</p><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>「MQTT Protocol Support」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv7gbh2gej30vk0ogn0w.jpg" alt="MQTT Protocol Support"></p><p>安装插件后可以看到「取样器」中增加了如下内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv7rfh5fpj309u0gmwga.jpg" alt="安装插件后"></p><ul><li>MQTT Publisher 发布</li><li>MQTT Subscriber 消费</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv7q0hckqj30xr0u0wok.jpg" alt="EMQ"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv81n819lj30xv0u0dmx.jpg" alt="工具-Websocket"></p><ol><li>点击「连接」</li><li>新增「订阅」</li><li>修改「消息」</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv82fgi72j30wp0cldgz.jpg" alt="消息"></p><p>使用Jmeter发送</p><p>点击「Generate ID」创建一个随机ID</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv882dpy6j30xr0u0tfj.jpg" alt="Push"></p><p>可以从「订阅」中看到创建的ID</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv89ouy1tj30xr0u0ahd.jpg" alt="订阅"></p><p>从「主题」中可以看到，主题已经被推送过来了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv8dlqu54j30xr0u0dmt.jpg" alt="主题"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-使用JDBC读取与写入数据</title>
      <link href="article/b1e20de1.html"/>
      <url>article/b1e20de1.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-使用JDBC读取与写入数据"><a href="#12-使用JDBC读取与写入数据" class="headerlink" title="12-使用JDBC读取与写入数据"></a>12-使用JDBC读取与写入数据</h1><h2 id="JDBC注意点"><a href="#JDBC注意点" class="headerlink" title="JDBC注意点"></a>JDBC注意点</h2><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>建议不要带<code>;</code></p><p>一个jdbc request中不要写多个sql，默认只能支持一条sql</p><span id="more"></span><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="Variable-names"><a href="#Variable-names" class="headerlink" title="Variable names"></a>Variable names</h4><ul><li><p>定义变量，接收对应「列」的值</p></li><li><p>如果有不需要接收的列，则使用「空格+逗号」进行间隔</p></li><li><p>结果的值，使用「变量名称+_顺序数字」调用</p></li></ul><p><strong>实例</strong></p><p>定义一个<code>, mb</code>提取结果中的手机号码</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyh64a9sj313v0jract.jpg" alt="取值"></p><p>查看全部的运行结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyh9sjwaj313v0jrq7t.jpg" alt="结果查看"></p><p>使用「调试取样器」查看提取到的内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyhfcgvfj313v0jr0wu.jpg" alt="调试"></p><p>使用「ForEach控制器」输出全部结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptykt48tkj315w0luwig.jpg" alt="ForEach控制器"></p><ul><li>输入变量前缀：<code>mb</code></li><li>开始循环 0</li><li>结束循环 10</li><li>输出变量名称:<code>mbil</code></li></ul><p>添加一个「调试取样器」并修改它的名称为<code>${mbil}</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptym0ruavj31740n2ael.jpg" alt="调试取样器"></p><p>运行后查看结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptymji3uaj31740n2qac.jpg" alt="查看结果"></p><p>使用「循环控制器」获取</p><ul><li>循环次数填写<code>${mb_#}</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptytjbr8sj31740dydjj.jpg" alt="截屏2021-04-23 下午8.47.01"></p><p>「计数器」中</p><ul><li>开始值为1</li><li>递增为1</li><li>最大值为<code>${mb_#}</code></li><li>引用名称为<code>d</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptytosjnkj31740dygpo.jpg" alt="截屏2021-04-23 下午8.47.10"></p><p>将「调试取样器」名称修改为<code>${__V(mb_${d},)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptytt7irbj31740dyjv7.jpg" alt="截屏2021-04-23 下午8.47.17"></p><p>运行之后可以在结果中查看，每个值都打印出来了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyu00jzsj31740katg7.jpg" alt="截屏2021-04-23 下午8.47.26"></p><h4 id="Result-variable-name"><a href="#Result-variable-name" class="headerlink" title="Result variable name"></a>Result variable name</h4><blockquote><p>接收全部结果，并以列表展示</p></blockquote><p>添加一个名为「allvar」的变量接收</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptyo2meetj31740s57a2.jpg" alt="定义"></p><p>查看结果</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allvar=[{mobile=13527104953, id=25, gqid=126361, identity=1e7a82646a503f41, token=rjNWTXOSU8g68V62fcqgEMm4ivcNhvV/W7C/k2G8kc+qYRbmw53LuAfcwFRAuT8pxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13528223194, id=29, gqid=126182, identity=640d783c00a09e98, token=YeCOmrviJNaF6nhhSI4Lqq3sBrTRxAT4m0vZbrLALFDOiIl02I+7z//l7vPA/s5XxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13560693138, id=40, gqid=124571, identity=7f897d7fd70df90a, token=bu3nXFfaVsqCIZ2eKOQDu8Ah/UfTTez3iPyWRSH3hgFY5AQFvR7kcg9gGdxq/0kTxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13560696226, id=51, gqid=126474, identity=8a989d323fde98f1, token=pEOeKYMBmmPWnT+CkxUKCj249HbCPHFkgH6FoOjrDcWQtElKwuYUjVwvP1SaDvznxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13527104943, id=78, gqid=4000000, identity=0da609ddca720332, token=cwjgPJCiSp/zom1v/xG39CkpdxgjTKvts+NVk+sVMzMfEtHIhoe56Ch2gNFKjesdxRU/jxaEwo/fQbjJJq9BrA==}, {mobile=13527104143, id=79, gqid=4000001, identity=195006160bc11f4f, token=JTQBPw32Sq88b5MjfrsA/eErfhax5EHrvVdzumTtRV+yXd0odVFMF8N93QEbnLTYxRU/jxaEwo/fQbjJJq9BrA==}]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptynxpyg2j31740s5497.jpg" alt="结果"></p><h2 id="使用JDBC批量造数据"><a href="#使用JDBC批量造数据" class="headerlink" title="使用JDBC批量造数据"></a>使用JDBC批量造数据</h2><blockquote><p>思路：循环执行insert语句</p></blockquote><h3 id="使用SQLite存储数据"><a href="#使用SQLite存储数据" class="headerlink" title="使用SQLite存储数据"></a>使用<code>SQLite</code>存储数据</h3><p>先连接数据库</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0762o9kj31740s2jy7.jpg" alt="连接数据库"></p><p>创建一张表</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu07li9hvj31740s244t.jpg" alt="创建表"></p><p>调用注册接口</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu08jac88j31740s2agt.jpg" alt="注册接口"></p><p>将注册结果插入到数据库中</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu07xb1e3j31740s20z1.jpg" alt="插入表"></p><p>查看结果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu08zaryfj30xr0u0tev.jpg" alt="查看结果"></p><p>修改「线程组」的次数为1000次运行后查看数据库</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0c7veduj30xr0u0gus.jpg" alt="查看结果"></p><p>新建「JDBC Request」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0fy2cvlj31740s2wl1.jpg" alt="JDBC Request"></p><p>新建一个「保存响应到文件」</p><p>去除勾选「Dont add number to prefix」和「Dont add content type suffix」</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0fmwcl5j31740s2wkz.jpg" alt="保存响应到文件"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpu0jrnmdpj30ps0qpgrw.jpg" alt="查看结果"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>使用数据库的优势：可以指定读取n行，每次操作消耗小</p><p>使用csv文件每次需要打开整个文件后进行读取</p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-其他协议</title>
      <link href="article/49ec7e33.html"/>
      <url>article/49ec7e33.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-其他协议"><a href="#11-其他协议" class="headerlink" title="11-其他协议"></a>11-其他协议</h1><h2 id="CSV数据文件设置"><a href="#CSV数据文件设置" class="headerlink" title="CSV数据文件设置"></a>CSV数据文件设置</h2><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><ul><li><p>通过「浏览」来选择，这个路径是「绝对路径」</p></li><li><p>「相对路径」</p></li></ul><p>写法：</p><p>使用<code>./</code> 或<code>.\</code>开始。建议使用<code>.\</code>。因为这个是linux下的写法，并且在windows下也可以正常使用</p><p>从哪个地方相对开始：</p><p>从当前<code>jmx</code>文件保存的路径</p><span id="more"></span><h3 id="忽略首行"><a href="#忽略首行" class="headerlink" title="忽略首行"></a>忽略首行</h3><p>选择「True」，则从第二行开始</p><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>默认以「，」来进行分隔</p><p>当分隔出多列，但是其中某些列不需要使用。在「变量名称」中使用「空格+英文逗号」进行占位</p><h3 id="是否允许带引号（英文双引号）"><a href="#是否允许带引号（英文双引号）" class="headerlink" title="是否允许带引号（英文双引号）"></a>是否允许带引号（英文双引号）</h3><ul><li>True：引用变量携带引号</li><li>False：引用变量自动去除引号</li></ul><h3 id="遇到文件结束符再次循环"><a href="#遇到文件结束符再次循环" class="headerlink" title="遇到文件结束符再次循环"></a>遇到文件结束符再次循环</h3><p>比如文件有2行，循环6次，</p><ul><li>True：则2行2行的运行6次</li><li>False：运行2行后剩余4次运行失败</li></ul><h3 id="遇到文件结束符停止线程"><a href="#遇到文件结束符停止线程" class="headerlink" title="遇到文件结束符停止线程"></a>遇到文件结束符停止线程</h3><ul><li>True：文件读取完停止任务</li><li>False：运行到线程次数结束</li></ul><h2 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h2><blockquote><p>soap</p><p>jdbc</p><p>websocket</p><p>mq</p><p>dubbo</p></blockquote><h3 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h3><p><code>webservice</code>是一个web的应用程序，使用xml向外界暴露可供调用的API接口</p><p>SOAP以「http+xml」进行数据传输</p><p>测试地址：<a href="http://www.webxml.com.cn/zh_cn/web_services.aspx">http://www.webxml.com.cn/zh_cn/web_services.aspx</a></p><p> 获得中国省份、直辖市、地区和与之对应的ID：<a href="http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?op=getRegionProvince">http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?op=getRegionProvince</a></p><h4 id="soap1-1"><a href="#soap1-1" class="headerlink" title="soap1.1"></a>soap1.1</h4><blockquote><p>xml中为soap</p><p>头部中需要有：<code>SOAPAction</code></p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /WebServices/WeatherWS.asmx HTTP/1.1</span><br><span class="line">Host: ws.webxml.com.cn</span><br><span class="line">Content-Type: text/xml; charset=utf-8</span><br><span class="line">Content-Length: length</span><br><span class="line">SOAPAction: "http://WebXml.com.cn/getRegionProvince"</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soap</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">getRegionProvince</span> <span class="attr">xmlns</span>=<span class="string">"http://WebXml.com.cn/"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlmhps1aj313v0df75y.jpg" alt="请求头"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlmcplrpj313v0dfq5o.jpg" alt="请求"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlmsoi07j313v0rjte1.jpg" alt="结果"></p><h4 id="soap1-2"><a href="#soap1-2" class="headerlink" title="soap1.2"></a>soap1.2</h4><blockquote><p>xml中为soap12</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /WebServices/WeatherWS.asmx HTTP/1.1</span><br><span class="line">Host: ws.webxml.com.cn</span><br><span class="line">Content-Type: application/soap+xml; charset=utf-8</span><br><span class="line">Content-Length: length</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap12:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soap12</span>=<span class="string">"http://www.w3.org/2003/05/soap-envelope"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soap12:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">getRegionProvince</span> <span class="attr">xmlns</span>=<span class="string">"http://WebXml.com.cn/"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soap12:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap12:Envelope</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlr3sxh0j313v06f404.jpg" alt="请求头"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlralvq2j313v0cnn05.jpg" alt="请求体"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlrinj26j313v0r4q8h.jpg" alt="结果"></p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><blockquote><p>是一种用于执行SQL语句的JAVA API</p><p>通过这个api可以直接直接sql脚本</p></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><p>将<code>mysql-connector-java-***.jar</code>放到jmeter的<code>lib</code>目录下</p></li><li><p>重启jmeter</p></li><li><p>配置元件Config Element&gt;数据库连接配置JDBC Connection Configuration</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprlx69z6cj308k0bvjso.jpg" alt="截屏2021-04-21 下午7.49.36"></p><blockquote><p>jmeter中引入jar包，建议放入到<code>lib</code>路径下</p><p>不推荐使用引入的方式</p></blockquote><h3 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h3><ul><li>添加取样器&gt;JDBC Request</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprm32be3qj306c0ceq43.jpg" alt="取样器"></p><ul><li>添加数据库连接信息</li></ul><ol><li>Variable Name for created pool 创建一个连接池</li><li>database URL：不同数据库的连接方式不一样。</li></ol><p>sqLite:<code>jdbc:sqlite:c:\*.db</code></p><p>mysql:<code>jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt;</code></p><p>Oracle:<code>oracle:thin:@//&lt;host&gt;:&lt;port&gt;/ServiceName</code></p><p>Microsoft SQL Server:<code>jdbc:sqlserver://&lt;server_name&gt;:&lt;port&gt;</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmc27quoj30xr0u0wlr.jpg" alt="数据库连接"></p><ol start="3"><li>在取样器中填写上连接池的名字</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmeo3ddyj313v07y0ub.jpg" alt="取样器"></p><ol start="4"><li>运行后查看结果</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmfcvpz8j313v0tmahx.jpg" alt="运行结果"></p><h3 id="Query-Type"><a href="#Query-Type" class="headerlink" title="Query Type"></a>Query Type</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gprmmw1zj8j313v0ax76q.jpg" alt="查询方式"></p><p>不带参数：</p><ul><li>Select Statement 查询</li><li>Update Statement 更新</li></ul><p>携带参数：</p><ul><li>Prepared Select Statement</li><li>Prepared Update Statement</li></ul><h2 id="脚本性能转换"><a href="#脚本性能转换" class="headerlink" title="脚本性能转换"></a>脚本性能转换</h2><ul><li>逻辑控制器：事务控制器</li><li>造测试数据库：DDT数据驱动性能测试（CSV文件设置）</li><li>线程组配置（性能场景设计）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-逻辑控制器</title>
      <link href="article/ad741ca2.html"/>
      <url>article/ad741ca2.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-逻辑控制器"><a href="#10-逻辑控制器" class="headerlink" title="10-逻辑控制器"></a>10-逻辑控制器</h1><h2 id="IF条件控制器"><a href="#IF条件控制器" class="headerlink" title="IF条件控制器"></a>IF条件控制器</h2><ol><li><code>Interpret Condition as Variable Expression?</code>默认勾选：</li></ol><ul><li><p>条件结果为<code>true</code>才会执行子取样器</p></li><li><p>需要使用<code>${__jexl3(,)}</code>和<code>${__groovy(,)}</code>进行逻辑判断</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${__jexl3(<span class="string">"${var1}"</span>==<span class="string">"value"</span>,)}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppdhvqu4lj313u0cetbo.jpg" alt="如果（if）控制器"></p><ol start="2"><li>不勾选<code>Interpret Condition as Variable Expression?</code>会直接用<code>JavaScript</code>   语法</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"${var1}"</span>==<span class="string">"value"</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><code>Evaluate for all children?</code> 执行子节点前先计算表达式真假<span id="more"></span><h2 id="循环控制器"><a href="#循环控制器" class="headerlink" title="循环控制器"></a>循环控制器</h2></li></ol><p>循环次数 控制循环的次数</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppdxx7f5aj30tp04tjry.jpg" alt="循环控制器"></p><p>循环控制器+计数器=foreach控制器</p><p>循环完内容后还是会打印，直到达到循环次数</p><h2 id="foreach控制器"><a href="#foreach控制器" class="headerlink" title="foreach控制器"></a>foreach控制器</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppdyz9ssyj30tp084758.jpg" alt="foreach控制器"></p><p>假如有3个变量：<code>user_1</code>,<code>user_2</code>,<code>user_3</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppe1ub9qcj30tp084my4.jpg" alt="填写"></p><p>之后使用<code>${dr}</code>就可以使用这个变量了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)</span><br></pre></td></tr></tbody></table></figure><p>循环内容被循环完之后不再继续打印</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>jdbc协议，从数据库中，获取数据，进行循环使用</p><h2 id="仅一次控制器"><a href="#仅一次控制器" class="headerlink" title="仅一次控制器"></a>仅一次控制器</h2><p>每个用户都只执行一次</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppey4vzqhj30tp084jry.jpg" alt="仅一次控制器"></p><h2 id="临界部分控制器"><a href="#临界部分控制器" class="headerlink" title="临界部分控制器"></a>临界部分控制器</h2><p>把jmeter脚本的并行执行，强制变成串行执行</p><ul><li><p>固定锁，强制把多用户并行执行，变成单通道串行执行</p></li><li><p>动态锁，锁名称修改为<code>global_lock_${__threadNum}</code></p></li></ul><blockquote><h1 id="Critical-Section-Controller-临界部分控制器-到底该如何用"><a href="#Critical-Section-Controller-临界部分控制器-到底该如何用" class="headerlink" title="Critical Section Controller (临界部分控制器) 到底该如何用?"></a>Critical Section Controller (临界部分控制器) 到底该如何用?</h1><p>有同学在使用 jmeter 做性能测试的时候，有这样一个诉求，就是一个完整的业务包含多个接口请求，且有先后顺序。在做性能测试的时候，要求接口请求顺序永远按照自己定义好的请求顺序执行。</p><p>于是，他就在 jmeter 中线程组下按顺序添加了多个接口请求取样器，模拟并发请求调试。看到效果如下图(图一)：</p><p><img src="http://testingpai.com/upload/file/2020/5eed103b-4553-4591-8654-14e4accf7b97.gif" alt="image.png"></p><p>脚本调试是通了，但是，他看到查看结果树中显示请求结果数据好像不是按照顺序请求(没有仔细去分析，根据结果自认为的)，认为这样不符合自己的诉求，于是开始寻找新的办法。通过长时间的摸索，终于找到了一个貌似能解决的办法，增加一个 critical section controller(临界部分控制器)，认为增加一个锁，能控制执行顺序。于是修改脚本生成如图(图二):</p><p><img src="http://testingpai.com/upload/file/2020/2ed3450c-0ec3-4376-968c-bfb6be4c193c.gif" alt="image.png"></p><p>看到 查看结果树中显示的请求顺序与预期一致，是按照接口的顺序执行的，于是认为这样就是正确的。</p><p><strong>但是</strong>，不知道大家看了这两个图后，有没有注意一个细节？</p><p><em>第一种方式：</em></p><p><img src="http://testingpai.com/upload/file/2020/7dd05c73-246f-41a9-93ba-068e30cc979c.jpg" alt="image.png"></p><p>728 x 334 1199 x 550</p><p><img src="http://testingpai.com/upload/file/2020/ef1615be-70e6-46b9-8dfe-480bbf2f1f3a.jpg" alt="image.png"></p><p><em>第二种方式：</em></p><p><img src="http://testingpai.com/upload/file/2020/e8c17d01-0b4e-4f09-a386-07230731897e.jpg" alt="image.png"></p><p>728 x 338 1197 x 555</p><p><img src="http://testingpai.com/upload/file/2020/669f3afc-0226-4666-a430-ea1c7cdb61a9.jpg" alt="image.png"></p><p>第一种方式，整个执行过程只用了 4 秒种，第二种方式，执行过程耗时 13 秒，汇总报告中的吞吐量是按每分钟计算。*</p><p>这句话什么意思呢？就是说，第二种方式，虽然眼睛是看到了查看结果树中的数据是按照自定义的顺序执行的，但是执行时间远远大于第一种方式，换句话说，服务器的压力要远远小于第一种方式。<strong>人为的方式导致性能测试指标值错误</strong>。</p><p><strong>哪我们应该怎么做呢？</strong></p><p>首先，对于这样一种，遇到问题时，自主思考和学习的行为能力，还是值得表扬和肯定的。只是，需要学习的时候，再深入一点点，再细致一点点。</p><p>接下来，我们讲讲该怎么做。首先，我们要知道，在 jmeter 中，同层级无逻辑控制器控制的取样器，执行顺序是从上往下，顺序执行的。这句话，怎么理解？在我们单个用户脚本调试阶段，执行顺序是从上往下；在多用户并发时，每一个并发用户(线程)，也都是从上往下执行的，只是因为是并发，同一时刻，可能有不同用户(线程)做完了不同接口请求，查看结果树只是按照完成时间的先后显示请求结果。为了验证我说的这句话，我们可以再看下下图(图三)</p><p><img src="http://testingpai.com/upload/file/2020/5792442b-64e9-4965-b569-94793a97880b.gif" alt="image.png"></p><p>从查看结果树中，我们看 ThreadNum 号想同的请求，请求的顺序是不是都从 sample1 到 sample3。这样，其实已经满足了预期诉求。</p><p>哪 critical section controller(临界部分控制器)到底怎么用呢？我们先看下官方给我们的解答：</p><p><img src="http://testingpai.com/upload/file/2020/798642a1-cebb-4b3a-aefe-8e8d1825f959.jpg" alt="image.png"></p><p>临界部分控制器确保其子元素(采样器\控制器等)将仅由一个线程执行，在执行控制器的子元素之前先命名一个锁锁定。</p><p><img src="http://testingpai.com/upload/file/2020/f76f4d50-eab9-4e3a-b0a8-efc076372bfc.jpg" alt="image.png"></p><p>说直白点，就是并发请求(线程)这个控制器时，会先根据‘锁名称’生成一个‘锁’，锁定控制器下的所有子元素，等到所有子元素都执行完‘锁’才会释放，下一个请求(线程)才能执行，即，把原本的并发请求的并行处理方式，变成了串行处理。所以，就会看到上面我们说到的第二种方式的时间远远大于第一种方式。哪如何让 critical section controller 可以并行处理呢？我们再看看官方给的解释，它说的是，线程执行时，先根据‘锁名称’生成锁，串行，是因为锁名称相同，已经被占用，无法生成新的锁，所以只能等待锁的释放，哪我们是不是可以考虑让锁名称变成动态的呢？每个线程要用的时候，生成一个新的锁名称而且不重复，是不是就可以并行处理了。想要锁名称变成动态，方法很多，使用随机数函数、使用时间戳函数、使用线程数函数……, 是不是很多，只要用个自动生成值的函数就可以。</p><p><img src="http://testingpai.com/upload/file/2020/49d0dcc6-62d0-4023-adc7-342cd922e3fe.gif" alt="image.png"></p><p>这个，就是修改了 critical section controller 的锁名称为动态值，当某个线程调用时，就会自动生成一个新的锁名称。看最后执行的时间 5 秒，汇总报告中的吞吐量，是不是和第一种方式基本相同？</p><p>当然，有的同学比较追求完美，就是想看到最后的结果一定要按顺序展示。没问题，满足你的要求。</p><p><img src="http://testingpai.com/upload/file/2020/d924c77b-51eb-435f-932a-cdd02518e29b.gif" alt="image.png"></p><p>是不是，看到结果也是你指定的顺序，执行的时间也和第一种相同，最后的汇总报告中，看到了一个事务总数据。</p><p>好了，critical section controller(临界部分控制器)的使用，你是否已经掌握了呢？</p><p>作者：Allen<br>链接：<a href="http://testingpai.com/article/1595507267745">http://testingpai.com/article/1595507267745</a><br>来源：测试派<br>协议：CC BY-SA 4.0 <a href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></p></blockquote><h2 id="随机控制器"><a href="#随机控制器" class="headerlink" title="随机控制器"></a>随机控制器</h2><p>多个取样器中随机选一个</p><h2 id="随机顺序控制器"><a href="#随机顺序控制器" class="headerlink" title="随机顺序控制器"></a>随机顺序控制器</h2><p>多个取样器随机顺序执行</p><h2 id="吞吐量控制器"><a href="#吞吐量控制器" class="headerlink" title="吞吐量控制器"></a>吞吐量控制器</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppfcgse61j30tp084wf7.jpg" alt="吞吐量"></p><h1 id="DDT数据驱动性能测试"><a href="#DDT数据驱动性能测试" class="headerlink" title="DDT数据驱动性能测试"></a>DDT数据驱动性能测试</h1><h2 id="CSV文件"><a href="#CSV文件" class="headerlink" title="CSV文件"></a>CSV文件</h2><p>文本文件，是用英文逗号分隔的文本文件</p><h2 id="CSV数据文件设置"><a href="#CSV数据文件设置" class="headerlink" title="CSV数据文件设置"></a>CSV数据文件设置</h2><p>这个方法，是使用人数最多的数据驱动性能测试方法</p><p>但是，这个不是最优的数据驱性能测试方法</p><ul><li>文件名：必传，文本文件（txt，csv，xls）</li></ul><blockquote><p> 推荐用txt，是操作系统默认的文本文件格式</p><p>txt默认编码是utf8</p></blockquote><blockquote><p>csv文件，保存采用默认编码，不是utf8</p><p>csv文件打开比txt消耗大</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gppfuo16qdj30tp0csjt3.jpg" alt="csv数据文件设置"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-正则提取器</title>
      <link href="article/c04862c6.html"/>
      <url>article/c04862c6.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-正则提取器"><a href="#9-正则提取器" class="headerlink" title="9-正则提取器"></a>9-正则提取器</h1><h2 id="正则提取器"><a href="#正则提取器" class="headerlink" title="正则提取器"></a>正则提取器</h2><h3 id="apply-to"><a href="#apply-to" class="headerlink" title="apply to"></a>apply to</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl6zeymgoj30ti09bt9n.jpg" alt="apply to"></p><ul><li>Main sample and sub-samples 主取样器+子取样器</li><li>Main sample only 主取样器</li><li>Sub-sample only 子取样器</li><li>JMeter Variable Name to use：从一个变量中再提取想要的信息。直接写变量名称即可</li></ul><p>正则提取式的写法：左边界(正则式)右边界</p><p>「模版」的固定格式：<code>$数字$</code> 这个数字从1开始</p><span id="more"></span><h3 id="提取信息测试"><a href="#提取信息测试" class="headerlink" title="提取信息测试"></a>提取信息测试</h3><p>填写后进行测试：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl79zzutzj30ti09b3zj.jpg" alt="填写"></p><p>在「调试取样器」中可以看到<code>reg_msg</code>被正确赋值为我们正则匹配到的内容</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7awymsvj30ti0mctd7.jpg" alt="查看结果"></p><h3 id="进行二次提取"><a href="#进行二次提取" class="headerlink" title="进行二次提取"></a>进行二次提取</h3><p>使用「JMeter Variable Name to use」对「token」进行二次提取</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7ovralhj30ti099my7.jpg" alt="二次提取"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7q03i4jj30ti0o7gpt.jpg" alt="结果"></p><h3 id="提取响应头"><a href="#提取响应头" class="headerlink" title="提取响应头"></a>提取响应头</h3><p>选择「Request Headers」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7tv2q06j30ti09odgx.jpg" alt="响应头"></p><p>运行测试</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl7uqj0ocj30ti0qn433.jpg" alt="查看结果"></p><h2 id="脚本性能转换"><a href="#脚本性能转换" class="headerlink" title="脚本性能转换"></a>脚本性能转换</h2><p>在jmeter中，默认一个取样器的一次请求，就是一个事务</p><p>如果想要把多个接口<strong>合并</strong>成为一个事务，合计「tps」值。</p><p>需要添加「事务控制器」 一定要勾选「generate parent sample」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl8cxvhz5j30ti056t8z.jpg" alt="事务控制器"></p><h2 id="聚合报告"><a href="#聚合报告" class="headerlink" title="聚合报告"></a>聚合报告</h2><ul><li>样本：事务的总请求次数</li><li>平均值、中位数、90%、95%、99%、最小值、最大值：都是响应时间<ul><li>xx% 的时间都是小于xxx响应时间</li></ul></li><li>异常</li><li>吞吐量：在固定不变的并发用户数情况下，且没有网络瓶颈时，与tps相等</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpl8ffg929j313u0biact.jpg" alt="聚合报告"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-Json提取器</title>
      <link href="article/602b9665.html"/>
      <url>article/602b9665.html</url>
      
        <content type="html"><![CDATA[<h1 id="8-Json提取器"><a href="#8-Json提取器" class="headerlink" title="8-Json提取器"></a>8-Json提取器</h1><h2 id="属性函数"><a href="#属性函数" class="headerlink" title="属性函数"></a>属性函数</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>以<code>.properties</code>结尾的文件，都是属性配置文件</p><span id="more"></span><h3 id="变量与属性"><a href="#变量与属性" class="headerlink" title="变量与属性"></a>变量与属性</h3><ul><li><p>变量：变量是自己在脚本中定义的</p></li><li><p>属性：jmeter启动时获取</p><ul><li><p><strong>静态属性</strong>：在属性配置文件中配置</p></li><li><p><strong>动态属性</strong>：在jmeter运行过程中，动态设置的</p></li><li><p><strong>系统属性</strong>：Jmeter运行环境属性</p></li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjh464092j30gg09p76p.jpg" alt="属性显示"></p><ul><li>查看Jmeter属性</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjh4o1xvpj30xr0u0thj.jpg" alt="Jmeter属性"></p><ul><li>查看系统属性</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjh6p1g98j30xr0u0tjb.jpg" alt="系统属性"></p><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><ul><li><code>${__P(,)}</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhbqaxgqj30lv0hgwhe.jpg" alt="P"></p><ul><li><code>${__property(,,)}</code></li></ul><p>调用属性</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhcjsbruj30lv0hgmzq.jpg" alt="property"></p><p>在「函数助手」中设置属性名称为<code>jmeter.version</code>后点击生成。可以看到结果与「属性显示」中一致</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhf3wlepj30lb0feabq.jpg" alt="获取值"></p><h3 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h3><p><code>${__setProperty(,,)}</code></p><p>给内容或变量设置属性名称</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhdacxf3j30lv0d375w.jpg" alt="setProperty"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在DDT，混合场景时候会用到</p><h2 id="拼接函数"><a href="#拼接函数" class="headerlink" title="拼接函数"></a>拼接函数</h2><p><code>${__V(,)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjhoqlblaj30lb0eqtak.jpg" alt="V函数"></p><p>假如要拼接几个字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_1</span><br><span class="line">user_2</span><br><span class="line">user_3</span><br></pre></td></tr></tbody></table></figure><p>使用拼接函数<code>${__V(user_${__counter(,)},)}</code></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>在jdbc从数据库获取数据中，会使用到</p><h2 id="Json提取器"><a href="#Json提取器" class="headerlink" title="Json提取器"></a>Json提取器</h2><p><code>Match No.</code>:提取内容的索引，-1表示全部</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjii1v3k0j30ti07u3z7.jpg" alt="Json提取器"></p><p>提取式：<code>$.</code>开头</p><p>可以在「查看结果树」中调试</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjij20b2wj30ti0ftq5h.jpg" alt="查看结果树"></p><p>采用<code>$..</code>+末梢节点名称：相对路径提取方法</p><p>如果末梢节点存在多个，会返回数组「多个结果」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjikk5cpgj30ti0ftwh1.jpg" alt="相对位置"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjily0rmjj30ti0gpacl.jpg" alt="多个结果"></p><h3 id="提取多个值"><a href="#提取多个值" class="headerlink" title="提取多个值"></a>提取多个值</h3><p>每个内容之间都需要使用<code>;</code>来分隔</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjiwzdzynj30ti081q3o.jpg" alt="提取多个"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpjiwev1oej30ti0iljuq.jpg" alt="查看结果"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-Jmeter函数</title>
      <link href="article/13f41b93.html"/>
      <url>article/13f41b93.html</url>
      
        <content type="html"><![CDATA[<h1 id="7-Jmeter函数"><a href="#7-Jmeter函数" class="headerlink" title="7-Jmeter函数"></a>7-Jmeter函数</h1><h2 id="用户参数"><a href="#用户参数" class="headerlink" title="用户参数"></a>用户参数</h2><h3 id="每次迭代更新一次"><a href="#每次迭代更新一次" class="headerlink" title="每次迭代更新一次"></a>每次迭代更新一次</h3><p><code>每次迭代更新一次</code>：勾选的话，在当前线程组中，所有取样器执行完一轮请求，才会更新一次，没有执行完不会更新值</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpen4zlozbj30x406ymz5.jpg" alt="每次跌打更新一次"></p><span id="more"></span><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>做性能测试时，先注册随机账号，然后再用账号登录，不需要提前准备测试数据</p><p>如果使用<code>用户定义变量</code>的话，生成的手机号，一直不发生改变，只有第一次注册成功，之后都是注册失败。但是登录可以一直成功。</p><h2 id="变量的引用与定义"><a href="#变量的引用与定义" class="headerlink" title="变量的引用与定义"></a>变量的引用与定义</h2><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p>字母、数字、下划线</p><h2 id="函数助手"><a href="#函数助手" class="headerlink" title="函数助手"></a>函数助手</h2><p>写法：双下划线开头+函数名称(区分大小写)+小括号+括号中以逗号分隔的参数</p><h3 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${__counter(,)} </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenhv0bchj30q40icdi8.jpg" alt="函数例子"></p><p>新建一个「调试取样器」，并将名称修改为<code>${__counter(,)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenphxn32j30x406y0uh.jpg" alt="调试取样器"></p><p>修改「线程组」循环次数为5次</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenq1kybaj30y40aqdi4.jpg" alt="线程组"></p><p>运行后查看「查看结果树」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenrcucbuj30z70c8di7.jpg" alt="查看结果树"></p><h3 id="统计函数类似元件-计数器"><a href="#统计函数类似元件-计数器" class="headerlink" title="统计函数类似元件-计数器"></a>统计函数类似元件-计数器</h3><p>新建一个「计数器」</p><ul><li>设置它的引用名称为<code>${d}</code></li><li>开始值为1</li><li>递增值为2</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenx104m7j30z70c8q58.jpg" alt="计数器"></p><p>新建一个「调试取样器」，并将名称修改为<code>${d}</code></p><p>运行后查看「查看结果树」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpenxv0rabj30z70c8mzk.jpg" alt="查看结果树"></p><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeoy1ibfbj30um092q4n.jpg" alt="时间"></p><ul><li><p><code>${__time(,)}</code>：获取当前时间戳</p></li><li><p><code>${__timeShift(,,,,)}</code>：时间位移</p></li><li><p><code>${__dateTimeConvert(,,,)}</code>：时间戳转为本地时间</p></li><li><p><code>${__RandomDate(,,,,)}</code>：随机时间</p></li></ul><h4 id="获取当前时间戳函数-time"><a href="#获取当前时间戳函数-time" class="headerlink" title="获取当前时间戳函数${__time(,)}"></a>获取当前时间戳函数<code>${__time(,)}</code></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeo6bbawtj30lr0nrq6i.jpg" alt="time"></p><p>可能用的最多的就是通过这个函数，可以生成<strong>当前时间的时间戳</strong>，或者<strong>格式化当前时间</strong>。</p><p>常用于接口参数需要时间时的参数。</p><p>这个函数，有两个可填参数。</p><ul><li>如果都不填，那么获得的是当前时间的时间戳；</li><li>如果填第一个参数，就是<strong>格式化当前时间</strong>，填写对应的时间格式，把当前时间用对应的格式返回；如果想要格式化时间精确到毫秒：<code>${__time(yyyy-MM-dd HH:mm:ss:SSS,)}</code></li><li>如果填第二个参数，就是把时间结果用一个<strong>变量</strong>接收</li></ul><p>但是，不管怎么用，都只能<strong>获取当前时间</strong>。</p><h4 id="时间位移-timeShift"><a href="#时间位移-timeShift" class="headerlink" title="时间位移${__timeShift(,,,,)}"></a>时间位移<code>${__timeShift(,,,,)}</code></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeo5sztc1j30lr0qijw3.jpg" alt="timeShift"></p><p>这个函数，是离获取当前时间的 time 函数最近的一个函数，也是大家最容易与 time 函数混淆的函数。是<strong>时间位移</strong>函数。</p><p>常见于脚本中需要做时间偏移计算时用。</p><p>这个函数，它有五个可选参数：</p><p>如果所有的都不填，哪也是获取当前的时间戳；</p><p>第 1 个参数，是<strong>格式化时间</strong>，如果不填，时间戳精确到毫秒，如果填了，就格式化输出时间；</p><p>第 2 个参数，<strong>日期</strong>，上一个参数的格式返回这个日期，如：<code>${__timeShift(yyyy-MM-dd,20200915,,,)}</code> 如果未填，则为当前日期；</p><p>第 3 个参数，<strong>时间位移</strong>，以可选的正号‘+’ 和负号‘-’开头，负号‘-’开头，表示整个时间相减；再以大小写 p 为前缀，后面跟具体位移数和单位，单位’D’为天，’H’为小时，’M’为分钟， ‘S’为秒，而’T’必须在任意一个 H\M\S 出现之前，数字可以是正数或负数；天\时\分，前的数字为整数，秒，可以是小数。如在当前日期上增加 2 天 4 小数 6 分 10.234 秒：<code>${__timeShift(yyyy-MM-dd HH:mm:ss:SSS,,p2dt4h6m10.234s,,)}</code></p><p>第 4 个参数，<strong>区域语言设置</strong></p><p>第 5 个参数，定义<strong>存储结果的变量名</strong></p><h4 id="时间戳转为本地时间-dateTimeConvert"><a href="#时间戳转为本地时间-dateTimeConvert" class="headerlink" title="时间戳转为本地时间${__dateTimeConvert(,,,)}"></a>时间戳转为本地时间<code>${__dateTimeConvert(,,,)}</code></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeo7bsjp0j30lr0j6wha.jpg" alt="dateTimeConvert"></p><p><strong>将时间戳转换为本地时间</strong>。</p><p>常用于对接口响应结果中的时间戳进行转换。</p><p>这个函数，有四个参数</p><p>第 1 个参数，<strong>被转换的时间</strong>，为空时，表示当前时间戳，精确到毫秒</p><p>第 2 个参数，被转换时间的<strong>时间格式</strong>，上面时间的格式</p><p>第 3 个参数，<strong>转换后的时间格式</strong>，   </p><ul><li>例：<code>${__dateTimeConvert(09102020011034,MMddyyyyHHmmss,yyyyMMddHHmmss,)}</code> 原始时间格式为：月日年时分秒，转换后为：年月日时分秒</li><li>例 2：<code>${__dateTimeConvert(1599723255000,,yyyyMMdd HHmmss,)}</code> 一个精确到毫秒的时间戳，转换为：年月日 时分秒 格式时间</li></ul><p>第 4 个参数，定义<strong>存储结果的变量名称</strong></p><h4 id="随机时间-RandomDate"><a href="#随机时间-RandomDate" class="headerlink" title="随机时间${__RandomDate(,,,,)}"></a>随机时间<code>${__RandomDate(,,,,)}</code></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeo8nijzzj30li0jv0vs.jpg" alt="RandomDate"></p><p>它是<strong>随机日期函数</strong>。可以在一个随机日期之间，随机选一个日期返回。注意，这个函数操作的是 <strong>日期</strong>。</p><p>这个函数，有五个参数</p><p>第 1 个参数，<strong>日期格式</strong>，默认为 年-月-日</p><p>第 2 个参数，<strong>起始日期</strong>，随机日期区间起始值，包含起始值，空时，默认为当前日期</p><p>第 3 个参数，<strong>结束日期</strong>，随机日期区间结束值，不包含结束值   </p><ul><li>例：<code>${__RandomDate(yyyyMMdd,20200718,20200918,,)}</code> 从一个日期格式为 yyyyMMdd 日期区间随机区一个日期</li></ul><p>第 4 个参数，<strong>区域语言设置</strong></p><p>第 5 个参数，定义<strong>存储的变量名称</strong></p><h3 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpep0j2gxzj30lr0o7n0i.jpg" alt="简单加密"></p><p><code>${__digest(,,,,)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpeozt8yxvj30o40jj41v.jpg" alt="加密"></p><h3 id="整数java运算"><a href="#整数java运算" class="headerlink" title="整数java运算"></a>整数java运算</h3><p><code>${__intSum(1,2,)}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpep26id01j30ql0jcq5o.jpg" alt="运算"></p><h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><p><code>__jexl3</code>：支持jython、groovy、javascript</p><h3 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h3><p><code>__log</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpep3s564lj30qo0jn0vy.jpg" alt="打印日志"></p><h3 id="获取当前IP"><a href="#获取当前IP" class="headerlink" title="获取当前IP"></a>获取当前IP</h3><p><code>${__machineIP()}</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpep453i8vj30o40gt773.jpg" alt="当前IP"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-手写Jmeter与录制</title>
      <link href="article/a44ae78a.html"/>
      <url>article/a44ae78a.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-手写Jmeter与录制"><a href="#6-手写Jmeter与录制" class="headerlink" title="6-手写Jmeter与录制"></a>6-手写Jmeter与录制</h1><h2 id="元件作用域"><a href="#元件作用域" class="headerlink" title="元件作用域"></a>元件作用域</h2><h3 id="「取样器」"><a href="#「取样器」" class="headerlink" title="「取样器」"></a>「取样器」</h3><p>作用：只作用于自身</p><p>作用域：无作用域</p><span id="more"></span><h3 id="「逻辑控制器」"><a href="#「逻辑控制器」" class="headerlink" title="「逻辑控制器」"></a>「逻辑控制器」</h3><p>作用：控制子节点</p><p>作用域：作用于子节点</p><h3 id="「前置处理器」"><a href="#「前置处理器」" class="headerlink" title="「前置处理器」"></a>「前置处理器」</h3><p>作用：在取样器执行前执行</p><p>作用域：影响所有取样器</p><h3 id="「后置处理器」"><a href="#「后置处理器」" class="headerlink" title="「后置处理器」"></a>「后置处理器」</h3><p>作用：在取样器之后执行，影响在此之后的取样器</p><p>作用域：后续取样器</p><h3 id="「断言」"><a href="#「断言」" class="headerlink" title="「断言」"></a>「断言」</h3><p>作用：取样器之后执行</p><p>作用域：当前取样器</p><h3 id="「定时器」"><a href="#「定时器」" class="headerlink" title="「定时器」"></a>「定时器」</h3><p>作用：影响同级及子级取样器</p><p>作用域：同级及子级</p><h3 id="「配置元件」"><a href="#「配置元件」" class="headerlink" title="「配置元件」"></a>「配置元件」</h3><p>作用：影响同级及子级元件</p><p>作用域：同级及子级</p><h3 id="「监听器」"><a href="#「监听器」" class="headerlink" title="「监听器」"></a>「监听器」</h3><p>作用：收集取样器执行数据</p><p>作用域：同级</p><h2 id="取样器执行顺序"><a href="#取样器执行顺序" class="headerlink" title="取样器执行顺序"></a>取样器执行顺序</h2><p>在没有<strong>逻辑控制器</strong>控制时，执行顺序为「从上往下」</p><p><strong>查看结果树</strong>中显示的顺序是根据「收到响应的时间先后」排序的</p><h2 id="狭义并发与广义并发"><a href="#狭义并发与广义并发" class="headerlink" title="狭义并发与广义并发"></a>狭义并发与广义并发</h2><p>一般情况下，不会加集合点，不加集合点，是广义并发，请求量相对更大，更能体现服务器的性能</p><p>狭义的并发：需要加上集合点，总请求量会被强制降低，服务器的性能结果就不一定准确       </p><h2 id="手写脚本"><a href="#手写脚本" class="headerlink" title="手写脚本"></a>手写脚本</h2><h3 id="HTTP请求默认值"><a href="#HTTP请求默认值" class="headerlink" title="HTTP请求默认值"></a>HTTP请求默认值</h3><p>写一次「服务器名称或IP」，其他HTTP取样器可以不用填写</p><p>取样器填写后会覆盖默认值</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd4grd6xfj313u0bv0w0.jpg" alt="HTTP请求默认值"></p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>当有登录接口，和需要登录之后才能正常请求的接口时，<strong>一定要加上</strong></p><p>cookie管理器，特殊情况下才需要修改</p><h3 id="缓存管理器"><a href="#缓存管理器" class="headerlink" title="缓存管理器"></a>缓存管理器</h3><p>大多数情况下不使用</p><h2 id="录制脚本"><a href="#录制脚本" class="headerlink" title="录制脚本"></a>录制脚本</h2><h3 id="badboy录制"><a href="#badboy录制" class="headerlink" title="badboy录制"></a>badboy录制</h3><ol><li>打开badboy，url地址输入访问的网址，进行相关操作</li><li>工具 file-&gt;export to jmeter</li><li>jmeter打开导出文件</li></ol><p>不推荐使用</p><ul><li>工具不再维护</li><li>这个工具，对应新的前端写法不兼容</li></ul><h3 id="http代理服务器"><a href="#http代理服务器" class="headerlink" title="http代理服务器"></a>http代理服务器</h3><ol><li>新建一个项目</li><li>「测试计划」下添加「线程组」</li><li>添加「非测试元件-&gt;http代理服务器」</li><li>目标控制器选择 「测试计划-&gt;线程组」</li><li>点击「启动」，出现一个证书弹窗，自动生成证书</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd4zjykz2j30po0betba.jpg" alt="证书"></p><ol start="6"><li><p>打开计算机的代理设置或者配置浏览器代理</p></li><li><p>操作网页</p></li></ol><h4 id="配置浏览器代理"><a href="#配置浏览器代理" class="headerlink" title="配置浏览器代理"></a>配置浏览器代理</h4><p>使用「SwitchyOmega」</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd54scy8cj30bh064mxj.jpg" alt="浏览器代理"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd5b0tgmyj313k0gymz8.jpg" alt="添加情景模式"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpdr6rcg06j31h40u0q9f.jpg" alt="录制结果"></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>新建一个「用户参数」</p><p>点击「添加变量」，名称为<code>myuser</code>,用户_1为：<code>15168230666</code></p><p>变量引用:<code>${muser}</code></p><h2 id="函数助手"><a href="#函数助手" class="headerlink" title="函数助手"></a>函数助手</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpdqu1anksj30x4035q40.jpg" alt="函数助手"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd5wl0wotj30o40gtacy.jpg" alt="函数助手"></p><p>修改我们的变量</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd5y0mpg8j313l04sjsc.jpg" alt="修改变量"></p><p>修改使用处</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd60r6k1ej313l0h6goi.jpg" alt="修改入参"></p><p>查看运行结果</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpd6087espj313l0h6gpe.jpg" alt="查看结果"></p><h3 id="用户定义变量与用户参数"><a href="#用户定义变量与用户参数" class="headerlink" title="用户定义变量与用户参数"></a>用户定义变量与用户参数</h3><ul><li>「用户定义变量」是全局变量，启动运行时，调用一次，在运行过程中不再调用</li><li>「用户参数」是局部变量，在启动时调用一次，在运行过程中，使用时也会再次调用</li></ul><p>全局变量，只要在作用域范围内，都可以使用</p><p>局部变量，在线程组之外，是不能被使用的</p><p>jmeter的线程组之间，不能直接传递参数（局部变量）。</p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-HTTP请求注意事项</title>
      <link href="article/3afe7420.html"/>
      <url>article/3afe7420.html</url>
      
        <content type="html"><![CDATA[<h1 id="5-HTTP请求注意事项"><a href="#5-HTTP请求注意事项" class="headerlink" title="5-HTTP请求注意事项"></a>5-HTTP请求注意事项</h1><h2 id="HTTP请求注意事项"><a href="#HTTP请求注意事项" class="headerlink" title="HTTP请求注意事项"></a>HTTP请求注意事项</h2><h3 id="Web服务器-协议"><a href="#Web服务器-协议" class="headerlink" title="Web服务器-协议"></a>Web服务器-协议</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpasx263h6j30tf0dataa.jpg" alt="协议"></p><p><code>http</code>可以写，可以不写</p><p><code>https</code>必须写</p><span id="more"></span><h3 id="Web服务器-服务器名称或IP"><a href="#Web服务器-服务器名称或IP" class="headerlink" title="Web服务器-服务器名称或IP"></a>Web服务器-服务器名称或IP</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpasz3addcj30tf0dataa.jpg" alt="服务器名称或IP"></p><p>只能写域名或者IP。不能有<code>/</code></p><h3 id="Web服务器-端口"><a href="#Web服务器-端口" class="headerlink" title="Web服务器-端口"></a>Web服务器-端口</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpaszs5l11j30tf0dataa.jpg" alt="端口"></p><p>不写默认为80端口</p><h3 id="HTTP请求-方法"><a href="#HTTP请求-方法" class="headerlink" title="HTTP请求-方法"></a>HTTP请求-方法</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpat3hk85uj30tf0dataa.jpg" alt="方法"></p><p>根据接口文档选择</p><blockquote><p>浏览器地址栏中，只能执行get方法，不能执行post方法</p></blockquote><h3 id="HTTP请求-路径"><a href="#HTTP请求-路径" class="headerlink" title="HTTP请求-路径"></a>HTTP请求-路径</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpat597w8sj30tf0dataa.jpg" alt="路径"></p><p>不要在这个地址中写<code>domain</code>和<code>端口</code>信息，只写路径信息</p><p>不要忘记开头的<code>/</code></p><p>前后的空格要删除。如果没有删除，请求的时候会多<code>%20</code></p><h3 id="HTTP请求-内容编码"><a href="#HTTP请求-内容编码" class="headerlink" title="HTTP请求-内容编码"></a>HTTP请求-内容编码</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpat7a5jouj30tf0dataa.jpg" alt="内容编码"></p><p>默认<code>utf-8</code></p><p>只对<strong>请求体</strong>进行编码，对<strong>响应体</strong>无效</p><p>http请求的四部分：</p><ul><li>请求行</li><li>请求头 request-header</li><li>空行</li><li>请求体 request-body</li></ul><p>http响应的四部分</p><ul><li>响应头</li><li>响应体 response-header</li><li>空行</li><li>响应体 response-body</li></ul><h4 id="当请求中出现乱码"><a href="#当请求中出现乱码" class="headerlink" title="当请求中出现乱码"></a>当请求中出现乱码</h4><ol><li>内容编码设置为utf-8</li><li>消息头<code>Content-Type:;charset=utf-8</code></li><li>参数格式中的<code>编码</code>复选框<ol><li>当参数为中文时一定要勾选编码</li><li>当参数为<code>+=</code>等特殊符号时「常见于密码被加密」一定要勾选编码</li></ol></li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpatdimb18j30tf0daq4a.jpg" alt="编码"></p><h4 id="当响应中出现乱码"><a href="#当响应中出现乱码" class="headerlink" title="当响应中出现乱码"></a>当响应中出现乱码</h4><blockquote><p>原因：jmeter的gui图形界面，默认的编码是操作系统的编码</p><p>国内Windows系统的编码是 936gbk</p></blockquote><p>解决办法</p><p>打开<code>/apache-jmeter-5.1.1/bin/jmeter.properties</code></p><p>找到</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The encoding to be used if none is provided (default ISO-8859-1)</span><br><span class="line">#sampleresult.default.encoding=ISO-8859-1</span><br></pre></td></tr></tbody></table></figure><p>根据响应信息中的编码修改<code>sampleresult.default.encoding</code>值。修改后保存重启Jmeter</p><p>查看方法：</p><p>请求相应地址后查看<code>网页源代码</code>在头部找到「meta-content」</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"always"</span> <span class="attr">name</span>=<span class="string">"referrer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#2932e1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">sizes</span>=<span class="string">"any"</span> <span class="attr">mask</span> <span class="attr">href</span>=<span class="string">"//www.baidu.com/img/baidu_85beaf5496f291521eb75ba38eacbd87.svg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"search"</span> <span class="attr">type</span>=<span class="string">"application/opensearchdescription+xml"</span> <span class="attr">href</span>=<span class="string">"/content-search.xml"</span> <span class="attr">title</span>=<span class="string">"百度搜索"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以看出上面这段代码的编码为<code>utf-8</code></p><h3 id="HTTP请求-自动重定向"><a href="#HTTP请求-自动重定向" class="headerlink" title="HTTP请求-自动重定向"></a>HTTP请求-自动重定向</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpatx8rw59j30tf0dataa.jpg" alt="重定向"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpav09nqirj30xv0u0doc.jpg" alt="自动重定向"></p><p>都是重定向。HTTP响应码都是300系列</p><p>没有中间过程，无法进行中间数据提取</p><h3 id="HTTP请求-跟随重定向"><a href="#HTTP请求-跟随重定向" class="headerlink" title="HTTP请求-跟随重定向"></a>HTTP请求-跟随重定向</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpauz1yru4j30xr0u0dpl.jpg" alt="跟随重定向"></p><p>默认勾选</p><p>可以提取中间过程，用于后续关联</p><p>从图中可以看到，它将每次跳转都展示给了我们，可以展开查看每次跳转情况</p><h3 id="HTTP请求-使用KeepAlive"><a href="#HTTP请求-使用KeepAlive" class="headerlink" title="HTTP请求-使用KeepAlive"></a>HTTP请求-使用KeepAlive</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpatyd3k5xj30tf0dataa.jpg" alt="使用KeepAlive"></p><p>默认都是长连接</p><h3 id="HTTP请求-消息体数据"><a href="#HTTP请求-消息体数据" class="headerlink" title="HTTP请求-消息体数据"></a>HTTP请求-消息体数据</h3><p>参数-消息体数据是互斥的，写了之后无法写另一个</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><blockquote><p>优先级越高，越先执行</p></blockquote><p>配置元件中的所有元件，优先级是最高的</p><p>前置处理器-取样器-后置处理器 </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpauq2qwq7j309y06wgm6.jpg" alt="优先级"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-使用Jmeter编写第一个脚本</title>
      <link href="article/8aebc491.html"/>
      <url>article/8aebc491.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-使用Jmeter编写第一个脚本"><a href="#4-使用Jmeter编写第一个脚本" class="headerlink" title="4-使用Jmeter编写第一个脚本"></a>4-使用Jmeter编写第一个脚本</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>java编写的开源、免费、接口、自动化、性能测试工具</p><p>它的运行环境：<code>jre</code> 我们必须安装jdk才能运行jmeter</p><h3 id="查看java版本"><a href="#查看java版本" class="headerlink" title="查看java版本"></a>查看java版本</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br></pre></td></tr></tbody></table></figure><p>需要使用的jdk大版本是<code>1.8</code></p><p>官方只在1.8下进行开发和测试，其他jdk版本，可能存在兼容性问题</p><span id="more"></span><h3 id="jmeter版本"><a href="#jmeter版本" class="headerlink" title="jmeter版本"></a>jmeter版本</h3><p>使用的是<code>apache-jmeter-5.1.1</code></p><p>链接: <a href="https://pan.baidu.com/s/1DxiOyzo8VxFJGrFhJQKPaQ">https://pan.baidu.com/s/1DxiOyzo8VxFJGrFhJQKPaQ</a>  密码: fws3</p><h3 id="切换中文"><a href="#切换中文" class="headerlink" title="切换中文"></a>切换中文</h3><h4 id="临时切换中文"><a href="#临时切换中文" class="headerlink" title="临时切换中文"></a>临时切换中文</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp39vg304rj30ka0bhdij.jpg" alt="临时切换中文"></p><h3 id="永久修改中文"><a href="#永久修改中文" class="headerlink" title="永久修改中文"></a>永久修改中文</h3><p>修改<code>jmeter.properties</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第37行</span><br><span class="line">language=en</span><br><span class="line">修改为</span><br><span class="line">language=zh_CN</span><br></pre></td></tr></tbody></table></figure><h2 id="使用Jmeter写脚本"><a href="#使用Jmeter写脚本" class="headerlink" title="使用Jmeter写脚本"></a>使用Jmeter写脚本</h2><h3 id="写脚本的依赖"><a href="#写脚本的依赖" class="headerlink" title="写脚本的依赖"></a>写脚本的依赖</h3><ul><li>接口文档</li><li>API文档</li><li>swagger：接口管理平台</li><li>抓包：F12，Fiddler，Charles，Wireshark，Tcpdump</li></ul><h3 id="Jmeter文件夹"><a href="#Jmeter文件夹" class="headerlink" title="Jmeter文件夹"></a>Jmeter文件夹</h3><h4 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h4><ul><li>启动jmeter的所有文件</li><li>properties结尾的文件，都是jmeter的属性配置文件，最主要的是<code>jmeter.properties</code></li><li>create-rmi-keystore：创建证书</li><li>jmeter.log：日志打印</li></ul><h4 id="docs"><a href="#docs" class="headerlink" title="docs"></a>docs</h4><p>开发人员使用的api文档</p><p>有java能力相对Jmeter进行二次开发的API文档</p><h4 id="extras"><a href="#extras" class="headerlink" title="extras"></a>extras</h4><p>持续集成CI/CD使用</p><h4 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h4><p>jmeter工具的源码二进制jar包</p><p><code>/ext</code>：使用第三方插件时，把第三方jar放到该目录</p><h4 id="printable-docs"><a href="#printable-docs" class="headerlink" title="printable_docs"></a>printable_docs</h4><p>jmeter工具，<code>离线</code>帮助文档</p><p>在线、离线文档的差异</p><ul><li><code>离线文档</code>：当前jmeter版本的帮助文档</li><li><code>在线文档</code>：永远都是最新版本的</li></ul><h3 id="jmeter-GUI"><a href="#jmeter-GUI" class="headerlink" title="jmeter-GUI"></a>jmeter-GUI</h3><h4 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h4><p>并不包含Jmeter的主要功能，只包含必要的辅助功能</p><h4 id="左侧结构树"><a href="#左侧结构树" class="headerlink" title="左侧结构树"></a>左侧结构树</h4><blockquote><p>元件：通过右键添加的 所有可选定的内容，都是元件</p></blockquote><p>测试计划TestPlan：脚本根目录</p><p>选中某个元件，从右键中，选择功能</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp50tghocgj30f708f75x.jpg" alt="脚本根目录"></p><h4 id="右侧的编辑区"><a href="#右侧的编辑区" class="headerlink" title="右侧的编辑区"></a>右侧的编辑区</h4><p>脚本编辑区，不同的元件，内容不一样</p><h4 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h4><ul><li>线程组</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp50zx7k4zj308401s74h.jpg" alt="线程组"></p><blockquote><p>性能测试中，进行性能场景设计，在功能测试时，一般不做任何修改</p></blockquote><p>线程组：普通性能场景设计用的线程组，也是用的最多的线程</p><p>setUp线程、teardown线程组：和线程组差别不大，一般用作环境准备与清理</p><ul><li>配置元件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp510k6u4ej30b00bddhc.jpg" alt="配置元件"></p><blockquote><p>请求内容的头</p></blockquote><p>最大的特点：优先级<code>最高</code></p><p>重点关注：用户定义变量</p><ul><li>监听器</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp5122y6l8j308c0ahgmw.jpg" alt="监听器"></p><blockquote><p>结果监听与处理</p></blockquote><ul><li>定时器</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp512lhflcj308m07ijsb.jpg" alt="定时器"></p><blockquote><p>集合点，狭义并发</p></blockquote><p>现在 性能测试一般不再使用</p><p>设置<code>思考时间</code></p><ul><li>前置处理器</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp514kdn3oj309007vq3x.jpg" alt="前置处理器"></p><p>重点关注：用户参数</p><ul><li>后置处理器</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp5172muh8j309j09x75k.jpg" alt="后置处理器"></p><p>response结果提取</p><ul><li>断言</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp517ls6ubj308e0blmyb.jpg" alt="断言"></p><p>测试结果与预期结果进行比较</p><ul><li>测试片段</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp519b7l8mj308e06cdgg.jpg" alt="测试片段"></p><p>管理测试用例</p><ul><li>非测试元件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp519vphyyj308707iaat.jpg" alt="非测试元件"></p><p>设置代理服务器等环境</p><h3 id="编写http脚本"><a href="#编写http脚本" class="headerlink" title="编写http脚本"></a>编写http脚本</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51j2hez0j30nx0jutb1.jpg" alt="注册接口"></p><ol><li>添加线程组</li><li>添加取样器：HTTP请求</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51e3mwacj30f60cpad5.jpg" alt="取样器"></p><ol start="3"><li>添加HTTP信息头管理器</li></ol><p>从文档中:请求头：Content-Type：application/json;charset=utf-8 </p><p>点击<code>添加</code>按钮后输入它的请求头</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51l0coz6j30xr0u00yl.jpg" alt="添加HTTP信息头管理器"></p><ol start="4"><li>编辑HTTP请求</li></ol><p>输入协议<code>HTTP</code></p><p>IP:<code>192.168.9.2</code></p><p>端口号:<code>8080</code></p><p>方法:<code>POST</code></p><p>路径:<code>/app/mobile/api/user/register</code></p><p>消息体数据</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"mobile"</span>: <span class="string">"15800000001"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"3367"</span>,</span><br><span class="line">    <span class="attr">"platform"</span>: <span class="string">"w indows"</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"test11"</span>,</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"158000000011@test. com"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51n40bg5j30xr0u0q9u.jpg" alt="编辑HTTP请求"></p><ol start="5"><li>添加 监听器-查看结果树</li><li>运行</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51s1x2o3j30na04wjsg.jpg" alt="运行"></p><p>运行的时候它会提示让你先保存</p><ol start="7"><li>查看结果</li></ol><ul><li>绿色：仅代表网络是通的</li><li>红色：代表失败，但是具体是什么原因失败，要去分析</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp51wkzqhtj30xr0u0dnj.jpg" alt="查看结果"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>1、请求体为json时，一定要加上消息头管理器</p><p>2、请求体，写在消息体数据中，是json格式</p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-性能测试知识面</title>
      <link href="article/bd78ee6b.html"/>
      <url>article/bd78ee6b.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-性能测试知识面"><a href="#3-性能测试知识面" class="headerlink" title="3-性能测试知识面"></a>3-性能测试知识面</h1><h2 id="脚本开发相关"><a href="#脚本开发相关" class="headerlink" title="脚本开发相关"></a>脚本开发相关</h2><blockquote><p>根据不同协议，选择不同工具</p></blockquote><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li><p>http</p></li><li><p>jdbc</p></li><li><p>soap</p></li><li><p>websocket</p></li><li><p>dubbo</p></li><li><p>MQ</p><span id="more"></span><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3></li><li><p> Jmeter「线程」</p></li><li><p>loadrunner「进程、线程（默认）」</p></li><li><p>wrk</p></li><li><p>ab</p></li><li><p>ngrinder「jpython、groovy」</p></li><li><p>locust「协程」</p></li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>Jmeter支持的语言：</p><ul><li>java</li><li>python</li><li>jython</li><li>groovy</li><li>javascript</li></ul><h2 id="性能知识面"><a href="#性能知识面" class="headerlink" title="性能知识面"></a>性能知识面</h2><h3 id="Vmware"><a href="#Vmware" class="headerlink" title="Vmware"></a>Vmware</h3><p>虚拟机管理软件，允许一台真实的电脑在一个操作系统中同时打开并运行多个不同的操作系统</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>偷工减料版操作系统「namespace」「vfs」「cgroup」</p><p>是一个简化版的操作系统，提供我们项目运行的基本依赖</p><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个 可移植的容器中,然后发布到任何流行的 Linux 机器或 Windows 机器上,也可以实现虚拟化, 容器是完全使用沙箱机制,相互之间不会有任何接口。</p><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。 Docker 容器通过 Docker 镜像来创建。</p><p>docker 是基于 LXC 的轻量及虚拟化，相比 KVM 启动更快，占用资源更少。 LXC:Linux Container 容器是一种操作系统层虚拟化技术，可以提供轻量级的虚拟化，以 便隔离进程和资源.</p><p>KVM:是 Kernel-based Virtual Machine 基于内核的虚拟机,是一种用于 Linux 内核中的虚拟 化基础设施，可将 Linux 内核转化为一个虚拟机监视器。 Docker 并不是全能的,也不是 KVM 之类虚拟化手段的替代品.Docker 是基于 Linux 64bit 的，无法在 32bit 的 linux/Windows/unix 环境下使用。 Docker 在本质上是一个附加系统。 Docker 有两种文件格式，Dockerfile 和 Compose file。Dockerfile 定义了单个容器的内容 和启动时候的行为。Compose file 定义了一个多容器应用。 Docker 可以按照 Dockerfile 的内容，构建镜像。 Compose file 是一个 YAML 文件，定义了服务（service）、网络、卷（volume）</p><h3 id="K8s"><a href="#K8s" class="headerlink" title="K8s"></a>K8s</h3><p>K8s 是 kubernetes 的简写。是一个开源的，用于管理云平台中多个主机上的容器化的应 用，Kubernetes 的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes 提供了 应用部署，规划，更新，维护的一种机制。Kubernetes 是 Google 开源的一个容器编排引擎， 它支持自动化部署、大规模可伸缩、应用容器化管理。</p><p><a href="https://www.kubernetes.org.cn/k8s">https://www.kubernetes.org.cn/k8s</a></p><h3 id="Linux基本技能"><a href="#Linux基本技能" class="headerlink" title="Linux基本技能"></a>Linux基本技能</h3><blockquote><p><strong>鸟哥的 Linux 私房菜</strong>:<a href="https://www.showapi.com/book/view/2089/0">https://www.showapi.com/book/view/2089/0</a></p></blockquote><h3 id="CPU工作原理"><a href="#CPU工作原理" class="headerlink" title="CPU工作原理"></a>CPU工作原理</h3><p>CPU， 中央处理器。影响 cpu 性能的主要因素分两大块：主频、架构； </p><p>CPU 的结构主要由运算器、控制器、寄存器三大块组成 控制单元：是整个 cpu 的指挥控制中心，由指令寄存器 IR(Instruction Register)、指 令译码器 ID(Instruction Decoder)和操作控制器 OC(Operation Controller)等 </p><p>运算单元：是运算器的核心，执行运算操作</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gozb7w4n9fj30jn0cgtbo.jpg" alt="CPU"></p><p><a href="https://baijiahao.baidu.com/s?id=1619812694399963397&amp;wfr=spider&amp;for=pc">CPU科普文：5分钟让你看懂CPU的结构和工作原理</a></p><p><a href="http://blog.chinaunix.net/uid-23069658-id-3563960.html">CPU的内部架构和工作原理</a></p><h3 id="内存知识"><a href="#内存知识" class="headerlink" title="内存知识"></a>内存知识</h3><p>内存 memory，是 cpu 与其他设备沟通的桥梁，主要用来临时存放数据，配合 cpu 工作， 协调 cpu 的处理速度。</p><p><a href="https://blog.csdn.net/qq_39312683/article/details/96026884">内存的基础知识</a></p><h3 id="JVM知识"><a href="#JVM知识" class="headerlink" title="JVM知识"></a>JVM知识</h3><p>JVM 是 Java Virtual Machine（Java 虚拟机）的缩写，JVM 是一种用于计算设备的规 范，它是一个虚构出来的能够运行 Java bytecode 的虚拟计算机，是通过在实际的计算 机上仿真模拟各种计算机功能来实现的。</p><p>Java 虚拟机有自己完善的硬体架构（如处理器、堆栈、寄存器等），还具有相应的指令系统。</p><p>Java 虚拟机本质上就是一个程序，当它在命令行上启动的时候，就开始执行保存在 文件中的字节码指令。Java 语言的可移植性正是建立在 Java 虚拟机的基础上。任何平 台只要装有针对于该平台的 Java 虚拟机，字节码文件（.class）就可以在该平台上运行。 Java 虚拟机主要分为五大模块：类装载器子系统、运行时数据区、执行引擎、本地方法接口和垃圾收集模块。</p><p>Java 虚拟机没有寄存器，所以指令集是使用 Java 栈来存储中间数据。 对于 Java 运行时涉及到的存储区域主要包括：程序计数器、Java 虚拟机栈(调用栈)、本地方法栈、java堆、方法区以及直接内存等等。 程序计数器：主要是取下一条指令，在 Java 里面主要是取下一条指令的字节码文件；</p><p>Java 虚拟机栈：主要是利用栈先进后出的特性存储局部变量表，动态链接等，主要 包括堆内存和栈内存，对于程序员内存分析而言是特别重要的。 本地方法栈：与上边的栈基本作用差不多，只不过这里是为 Java 方法而服务。 Java 堆：是内存管理中最大的一块，所有的线程共享这一块内容，同时该部分也是 垃圾收集器的主要区域。 Java 虚拟机的垃圾回收，动态分配和回收。 内存回收首先就是判断某一个部分是生存还是死亡，具体的算法常见的有二种：</p><p><a href="https://baijiahao.baidu.com/s?id=1651319476120132392&amp;wfr=spider&amp;for=pc">gc原理以及gc日志剖析</a></p><p><a href="https://www.jianshu.com/p/2f4a8e04c657">GC垃圾回收机制详解</a></p><h3 id="Apache基础知识"><a href="#Apache基础知识" class="headerlink" title="Apache基础知识"></a>Apache基础知识</h3><p>Apache HTTP Server（简称 Apache）是 Apache 软件基金会的一个开放源码的网页服务器 软件，可以在大多数电脑操作系统中运行。由于其跨平台和安全性，被广泛使用，是最流行 的 Web 服务器软件之一。它可以运行在几乎所有广泛使用的计算机平台上。 </p><p>LAMP 是 一 组 通 常 一 起 使 用 来 运 行 动 态 网 站 的 自 由 软 件 的 首 字 母 缩 写 ： Linux+Apache+Mysql(MariaDB)+PHP</p><p>官网：<a href="https://httpd.apache.org/">https://httpd.apache.org/</a></p><p>文档：<a href="https://httpd.apache.org/docs/2.4/">https://httpd.apache.org/docs/2.4/</a></p><p>Ubuntu 系统中 apache 安装指南： <a href="https://wiki.ubuntu.org.cn/Apache">https://wiki.ubuntu.org.cn/Apache</a></p><p>Centos 系统中搭建 apache 环境：</p><p><a href="https://blog.csdn.net/weixin_42199590/article/details/94410946">https://blog.csdn.net/weixin_42199590/article/details/94410946</a></p><p><a href="https://www.cnblogs.com/xiangqs/p/8663947.html">https://www.cnblogs.com/xiangqs/p/8663947.html</a></p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>一个轻量级的 web 应用服务区，使用于并发性不是很高的系统中。 Tomcat 中最顶层</p><p>的是 server， 代表整个服务器，一个 server 可以包含至少一个 service， 每个 service 可以包 含多个 connector 和一个 container。Connector 用于处理连接相关的事情，并提供 Socket 与 Request 和 Response 相关的转化;Container 用于封装和管理 Servlet， 以及具体处理 Request 请求；多个 connector 就可以配置多种类型连接，如 http\https。</p><p>Tomcat 的 conf 目录中的 server.xml 是其最重要的配置文件</p><h3 id="Dubbo-zookeeper"><a href="#Dubbo-zookeeper" class="headerlink" title="Dubbo + zookeeper"></a>Dubbo + zookeeper</h3><p>Dubbo 是一款高性能、轻量级的开源 java RPC 框架，它提供了三大核心能力：面 向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p><a href="http://dubbo.apache.org/zh-cn/">http://dubbo.apache.org/zh-cn/</a></p><p>Dubbo 缺省协议采用单一长连接和 NIO 异步通讯，适合小数量大并发的服务调用，以 及服务消费者机器数远大于服务提供者机器数的情况。</p><p>Dubbo 接口，手工测试时，可以使用 telnet 方式： <a href="http://dubbo.apache.org/zh-cn/docs/user/references/telnet.html">http://dubbo.apache.org/zh-cn/docs/user/references/telnet.html</a> </p><p>Zookeeper 注册中心：zookeeper 是一个树型的目录服务，支持变更推送，适合作为 dubbo 服务的注册中心，工业强度高，可用于生产环境，并推荐使用。</p><p> 参考学习材料：<a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html">http://dubbo.apache.org/zh-cn/docs/user/quick-start.html</a></p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx (engine x) 是一个采用 C 进行编写的高性能的 HTTP 和反向代理 web 服务器 其特点是占有内存少，并发能力强</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gozbmom73yj30ok0bfgs7.jpg" alt="Nginx"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gozbna4aouj30nd0bb7ac.jpg" alt="Nginx2"></p><p>Nginx 配置详解： <a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html">https://www.runoob.com/w3cnote/nginx-setup-intro.html</a></p><p>Nginx 服务器安装及配置文件详解： <a href="https://www.runoob.com/w3cnote/nginx-install-and-config.html">https://www.runoob.com/w3cnote/nginx-install-and-config.html</a></p><p>Linux 下 Nginx+Tomcat 负载均衡和动静分离配置要点 <a href="https://www.runoob.com/w3cnote/linux-nginx-tomcat.html">https://www.runoob.com/w3cnote/linux-nginx-tomcat.html</a></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡（Load balancing）是一种计算机技术，用来在多个计算机（计算机集群）、 网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐 率、最小化响应时间、同时避免过载的目的。 使用带有负载均衡的多个服务器组件，取代 单一的组件，可以通过冗余提高可靠性。负载均衡服务通常是由专用软件和硬件来完成。 主 要作用是将大量作业合理地分摊到多个操作单元上进行执行，用于解决互联网架构中的高并 发和高可用的问题。</p><p>负载均衡有软件和硬件负载均衡，硬件负载均衡 F5、软件负载均衡 nginx、阿里的 SLB。</p><p>负载均衡算法：主要分为静态和动态两类。静态负载均衡算法以固定的概率分配任务， 不考虑服务器的状态信息，如轮转算法、加权轮转算法等；动态负载均衡算法以服务器的实 时负载状态信息来决定任务的分配，如最小连接法、加权最小连接法等。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gozbo3yoi2j30nq0h6tet.jpg" alt="负载均衡"></p><p>参考学习材料：</p><p> <a href="https://www.sohu.com/a/277818965_411876">https://www.sohu.com/a/277818965_411876</a></p><p><a href="https://blog.csdn.net/bpb_cx/article/details/82771168">https://blog.csdn.net/bpb_cx/article/details/82771168</a></p><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>计算机集群（computer cluster）简称集群，是一种计算机系统， 它通过一组松散集成 的计算机软件或硬件连接起来高度紧密地协作完成计算工作。在某种意义上，他们可以被看 作是一台计算机。</p><p>负载均衡集群运行时一般通过一个或者多个前端负载均衡器将工作负载分发到后端的 一组服务器上，从而达到整个系统的高性能和高可用性。</p><p>参考学习资料：</p><p><a href="https://blog.csdn.net/qq_16116549/article/details/88551090">https://blog.csdn.net/qq_16116549/article/details/88551090</a></p><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>关系数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来 处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表 示。标准数据查询语言 SQL 就是一种基于关系数据库，这种语言执行对关系数据库中数据的 检索和操作。</p><p>关系模型由关系数据结构、关系操作集合、关系完整性约束三部分组成。 关系型数据库是由多张能互相联接的二维行列表格组成的数据库 主流的关系型数据库有 Oracle、DB2、Microsoft SQL Server、Microsoft Access、MySQL、 postgresql、 mariaDB、sqlite 等</p><p>参考学习资料： <a href="https://www.php.cn/sql/421899.html">https://www.php.cn/sql/421899.html</a></p><h3 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h3><p>MySQL 是一种开源的关系型数据库管理系统，关系数据库将数据保存在不同的表中， 而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。 MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。 MySQL 使用标准的 SQL 数据语言形式。 MySQL 可以运行于多个系统上，并且支持多种语言。</p><p>推荐学习地址：</p><p> <a href="https://www.showapi.com/book/view/2147/0">https://www.showapi.com/book/view/2147/0</a></p><p><a href="https://www.runoob.com/mysql/mysql-install.html">https://www.runoob.com/mysql/mysql-install.html</a></p><h3 id="Postgresql-数据库知识"><a href="#Postgresql-数据库知识" class="headerlink" title="Postgresql 数据库知识"></a>Postgresql 数据库知识</h3><p>PostgreSQL 是一个功能非常强大的、源代码开放的客户/服务器关系型数据库 管理系统。 </p><p>参考学习资料：</p><p><a href="https://www.runoob.com/postgresql/postgresql-tutorial.html">https://www.runoob.com/postgresql/postgresql-tutorial.html</a></p><p><a href="http://www.postgres.cn/v2/document">http://www.postgres.cn/v2/document</a></p><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><p>NoSQL(Not Only SQL)， 泛指非关系型的数据库。 NoSQL 数据库的产生就是为了解决大规 模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><p> NoSQL 有如下优点：易扩展， NoSQL 数据库种类繁多，但是一个共同的特点都是去掉关 系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间也在架构的层面上带来了可扩展的能力。大数据量，高性能， NoSQL 数据库都具有非常高的读写性能，尤其 在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。 </p><p>分类：</p><ul><li><p>键值(Key-Value)存储数据库，这一类数据库主要会使用到一个哈希表，这个表中 有一个特定的键和一个指针指向特定的数据。典型代表：Redis </p></li><li><p>列存储数据库：这部分数据库通常是用来应对分布式存储的海量数据，键仍然存在， 但是它们的特点是指向了多个列。这些列是由列家族来安排的。典型代表：HBase </p></li><li><p>文档型数据库：该类型的数据模型是版本化的文档，半结构化的文档以特定的格式 存储。典型代表：MongoDb、SequoiaDB </p></li><li><p>图形(Graph)数据库：它是使用灵活的图形模型，并且能够扩展到多个服务器上</p></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>Redis 是一个高性能的 key-value 数据库， redis 支持各种不同方式的排序。与 memcached 一样，为了保证效率，数据都是缓存在内存中，使用内存存储。区别的是 redis 会周期性的 把更新的数据写入磁盘或者把修改操作写入追加的记录文件， 并且在此基础上实现了 master-slave(主从)同步。</p><p>Redis 支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可 以是关联其他从服务器的主服务器。这使得 Redis 可执行单层树复制</p><p>推荐学习地址：</p><p><a href="https://www.runoob.com/redis/redis-tutorial.html">https://www.runoob.com/redis/redis-tutorial.html</a></p><p>Redis 设计与实现：<a href="https://www.showapi.com/book/view/2054/0">https://www.showapi.com/book/view/2054/0</a></p><h3 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h3><p>memcache 是一套分布式的高速缓存系统，将数据调用到内存中，然后从内存中读取， 从而大大提高读取速度。 </p><p>最 大 30 天 的 数 据 过 期 时 间 , 设 置 为 永 久 的 也 会 在 这 个 时 间 过 期 ， </p><p>常 量 REALTIME_MAXDELTA 最大键长为 250 字节，大于该长度无法存储，</p><p>常量 KEY_MAX_LENGTH 单个 item 最大数据是 1MB， 超过 1MB 数据不予存储，</p><p>常量 POWER_BLOCK 最大同时连接数是 200， 通过 conn_init()中的 freetotal 进行控制，最大软连接数是 1024， 通过 settings.maxconns=1024 进行控制</p><p>参考学习资料：</p><p><a href="https://www.runoob.com/memcached/memcached-tutorial.html">https://www.runoob.com/memcached/memcached-tutorial.html</a></p><h3 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h3><p>MongoDB 是一个基于分布式文件存储的数据库，介于关系数据库和非关系数据库之间 的产品。是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散， 是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。 Mongo 最大的特点是它支持 的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据 库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p>参考学习材料：<a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">https://www.runoob.com/mongodb/mongodb-tutorial.html</a></p><h3 id="时序型数据库"><a href="#时序型数据库" class="headerlink" title="时序型数据库"></a>时序型数据库</h3><p>时序数据库全称为时间序列数据库。时间序列数据库主要用于指处理带时间标签 （按照时间的顺序变化，即时间序列化）的数据，带时间标签的数据也称为时间序列数 据。时序大数据解决方案通过使用特殊的存储方式，使得时序大数据可以高效存储和快 速处理海量时序大数据，是解决海量数据处理的一项重要技术。该技术采用特殊数据存 储方式，极大提高了时间相关数据的处理能力，相对于关系型数据库它的存储空间减半， 查询速度极大的提高。</p><p>典型代表“influxdb、prometheus”</p><h3 id="Influxdb"><a href="#Influxdb" class="headerlink" title="Influxdb"></a>Influxdb</h3><p>InfluxDB 是一个由 InfluxData 开发的开源时序型数据库。它由 Go 写成，着力于高性能地 查询与存储时序型数据。InfluxDB 被广泛应用于存储系统的监控数据。 InfluxDB 存储的数据从逻辑上由 Measurement, tag 组以及 field 组以及一个时间戳组成的</p><ul><li>Measurement： 由一个字符串表示该条记录对应的含义 </li><li>tag 组： 由一组键值对组成，表示的是该条记录的一系列属性信息 </li><li>field 组：也是由一组键值对组成，表示的是该条记录具体的 value 信息(有名称) </li><li>时间戳：就是该条记录的时间属性</li></ul><p>参考学习资料： <a href="https://www.cntofu.com/book/118/readme.html">https://www.cntofu.com/book/118/readme.html</a></p><h3 id="Prometheus-基础知识"><a href="#Prometheus-基础知识" class="headerlink" title="Prometheus 基础知识"></a>Prometheus 基础知识</h3><p> Prometheus 它是由谷歌研发的一款开源的监控软件，目前已经被云计算本地基金会托管。</p><p>一个多维数据模型，其中包含通过度量标准名称和键/值对标识的时间序列数据 PromQL，一种灵活的查询语言 ，可利用此维度 不依赖分布式存储；单服务器节点是自治的 时间序列收集通过 HTTP 上的拉模型进行 通过中间网关支持推送时间序列 通过服务发现或静态配置发现目标 多种图形和仪表板支持模式 易于管理、轻易获取服务内部状态、高效灵活的查询语句、支持本地和远程存储、采用 http 协议，默认 pull 模式拉取数据，也可以通过中间网关 push 数据、支持自动发现、可扩 展、易集成</p><p>参考学习资料：</p><p><a href="https://prometheus.io/docs/introduction/overview/">https://prometheus.io/docs/introduction/overview/</a> </p><p><a href="https://www.cnblogs.com/fatyao/p/11007357.html">https://www.cnblogs.com/fatyao/p/11007357.html</a></p><p><a href="https://www.cnblogs.com/zqj-blog/p/10871033.html">https://www.cnblogs.com/zqj-blog/p/10871033.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-性能测试知识面</title>
      <link href="article/260b04bf.html"/>
      <url>article/260b04bf.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-性能测试知识面"><a href="#2-性能测试知识面" class="headerlink" title="2-性能测试知识面"></a>2-性能测试知识面</h1><h2 id="性能测试指标"><a href="#性能测试指标" class="headerlink" title="性能测试指标"></a>性能测试指标</h2><h3 id="响应时间RT（重要指标）"><a href="#响应时间RT（重要指标）" class="headerlink" title="响应时间RT（重要指标）"></a>响应时间RT（重要指标）</h3><blockquote><p>RT是一个非常重要的性能指标</p></blockquote><p>从发起请求的时间点，经过网络传输时间+服务器处理的时间+通过网络传输返回的时间</p><p>我们做性能测试时，尽可能的降低网络延迟时间，这样RT时间才会无限的接近我们的服务器处理时间</p><ul><li>带宽加宽</li><li>局域网</li><li>在性能测试中，不要使用无线网络（排除专门的无线网络测试）</li></ul><p>使用有线网络时要注意</p><ul><li>网络传输的带宽</li><li>降低网络传输的节点与距离（不能使用跳板机）</li><li>独立网络环境<span id="more"></span><h3 id="TPS-QPS（最主要指标）"><a href="#TPS-QPS（最主要指标）" class="headerlink" title="TPS/QPS（最主要指标）"></a>TPS/QPS（最主要指标）</h3></li></ul><h4 id="TPS-Transactions-per-Second"><a href="#TPS-Transactions-per-Second" class="headerlink" title="TPS(Transactions per Second)"></a>TPS(Transactions per Second)</h4><p><strong>服务器</strong>每秒处理事务数，衡量服务器处理能力的最主要指标</p><h4 id="QPS-Queries-per-Second"><a href="#QPS-Queries-per-Second" class="headerlink" title="QPS(Queries per Second)"></a>QPS(Queries per Second)</h4><p>每秒查询率</p><h4 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h4><p>一个TPS可能有多个QPS</p><h4 id="HPS-Hit-per-Second"><a href="#HPS-Hit-per-Second" class="headerlink" title="HPS(Hit per Second)"></a>HPS(Hit per Second)</h4><p>每秒点击数（用户端）</p><h4 id="RPS-request-per-Second"><a href="#RPS-request-per-Second" class="headerlink" title="RPS(request per Second)"></a>RPS(request per Second)</h4><p>每秒请求数</p><h4 id="衡量主体角度"><a href="#衡量主体角度" class="headerlink" title="衡量主体角度"></a>衡量主体角度</h4><p>TPS：服务器处理能力。响应时间小、tps可以增大</p><p>QPS：并发用户发起的查询 接口查询多+人多，qps可以增大</p><p>RPS：并发用户发起请求 人多，rps可以增大</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><blockquote><p>是衡量<strong>网络</strong>处理能力的</p></blockquote><p>单位时间内处理的请求数量（事务/s）</p><p>在没有网络影响时，吞吐量=TPS</p><h3 id="吞吐率"><a href="#吞吐率" class="headerlink" title="吞吐率"></a>吞吐率</h3><blockquote><p>网络传输速率</p></blockquote><p>单位时间通过的数据的平均速率（kB/s）</p><h3 id="点击率"><a href="#点击率" class="headerlink" title="点击率"></a>点击率</h3><p>每秒点击数</p><h3 id="资源利用率"><a href="#资源利用率" class="headerlink" title="资源利用率"></a>资源利用率</h3><p>服务器资源的使用率</p><ul><li>cpu利用率</li><li>内存利用率</li><li>磁盘I/O</li><li>网络带宽利用率</li><li>一般都不要超过80%</li></ul><h2 id="性能测试环境"><a href="#性能测试环境" class="headerlink" title="性能测试环境"></a>性能测试环境</h2><p>性能测试是要自己独立搭建性能环境，网络环境</p><ul><li>绝对不能用生产环境</li><li>不能用功能测试、自动化环境</li><li>这个性能环境，包括应用服务器和数据库服务器</li></ul><h3 id="性能环境硬件资源怎么确定"><a href="#性能环境硬件资源怎么确定" class="headerlink" title="性能环境硬件资源怎么确定"></a>性能环境硬件资源怎么确定</h3><ol><li><p>数量要和生产环境的数量一致吗？</p><p>不用和生产一样那么多服务器的数量，通过逐步增加服务器数量来评估大致的性能瓶颈</p><p>比如生产环境有8台服务器，性能测试从2台开始，增加到3台。可以大致评估增加数量提升的性能指标</p></li><li><p>每一台的硬件配置要和生产环境一致吗？</p><p>要和生产环境的配置一致</p><p>如果性能测试环境的硬件配置不如生产环境的硬件配置，性能测试结果得到的性能指标值，只能说 是否存在性能瓶颈，不能作为生产性能指标低的参考</p></li></ol><h2 id="性能测试流程"><a href="#性能测试流程" class="headerlink" title="性能测试流程"></a>性能测试流程</h2><p>性能测试准备=&gt;搭建性能测试环境-&gt;性能测试脚本开发-&gt;性能测试脚本执行-&gt;结果分析与调优-&gt;测试报告与结果跟踪</p><h3 id="性能测试准备"><a href="#性能测试准备" class="headerlink" title="性能测试准备"></a>性能测试准备</h3><ol><li>理解需求、测试计划、测试模型、工作量评估</li><li>了解架构(数据流)</li><li>要明确需求的性能指标</li></ol><p>例如500w访问量的并发</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照每天8小时有人访问</span></span><br><span class="line">500w/<span class="number">8</span>/<span class="number">3600</span>=<span class="number">174</span></span><br><span class="line"><span class="comment"># 按照二八原则</span></span><br><span class="line">500w*<span class="number">0.8</span>/（<span class="number">24</span>*<span class="number">0.2</span>*<span class="number">3600</span>)=<span class="number">232</span></span><br><span class="line"><span class="comment"># 一般需要1.2~1.5倍的TPS</span></span><br><span class="line"><span class="number">232</span>*（<span class="number">1.2</span>~<span class="number">1.5</span>) = <span class="number">278</span>~<span class="number">348</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="性能测试脚本开发"><a href="#性能测试脚本开发" class="headerlink" title="性能测试脚本开发"></a>性能测试脚本开发</h3><ul><li>选取协议</li><li>制作脚本</li><li>调试脚本</li><li>验证脚本</li></ul><p>先对接测试环境，开发调试脚本完成，再对接性能环境</p><h3 id="性能执行"><a href="#性能执行" class="headerlink" title="性能执行"></a>性能执行</h3><ul><li>试运行</li><li>场景执行</li></ul><h3 id="性能测试结果分析与调优"><a href="#性能测试结果分析与调优" class="headerlink" title="性能测试结果分析与调优"></a>性能测试结果分析与调优</h3><ul><li>分析思路：服务器硬件&gt;网络&gt;操作系统软件层的配置&gt;应用的瓶颈</li></ul><h3 id="性能测试报告与结果跟踪"><a href="#性能测试报告与结果跟踪" class="headerlink" title="性能测试报告与结果跟踪"></a>性能测试报告与结果跟踪</h3><ul><li>性能测试报告</li><li>性能测试问题跟踪</li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-性能测试入门</title>
      <link href="article/cbb71895.html"/>
      <url>article/cbb71895.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-性能测试入门"><a href="#1-性能测试入门" class="headerlink" title="1-性能测试入门"></a>1-性能测试入门</h1><h2 id="测试思维"><a href="#测试思维" class="headerlink" title="测试思维"></a>测试思维</h2><blockquote><p>性能测试思维和功能测试思维完全不一样。</p></blockquote><p>功能测试/自动化测试需要确定Bug</p><p>怎么确定是Bug？</p><ul><li>预期结果与实际结果进行比较，如果不一致则发现bug</li><li>潜在的一个前提：模拟<code>一个用户</code>对产品进行使用，能否正常</li></ul><p>性能测试：1+1不等于2</p><p>模拟多个人同时操作产品，关注点不再是功能是否正常</p><p>如果单人操作没有问题，多人操作出现异常，是出现了<strong>性能瓶颈</strong>而不是功能问题</p><p>1个人循环做10次，不是性能测试</p><p>10个人同时做一件事，是性能测试</p><span id="more"></span><h2 id="性能入门知识"><a href="#性能入门知识" class="headerlink" title="性能入门知识"></a>性能入门知识</h2><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>事务、物品的某些特性的评价值</p><h3 id="软件性能测试"><a href="#软件性能测试" class="headerlink" title="软件性能测试"></a>软件性能测试</h3><p>通过工具，<code>找出</code>或<code>获得</code>系统在不同工况下的性能指标值</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul><li>RT响应时间</li><li>错误率</li><li>服务器资源消耗</li></ul><blockquote><p>隐藏的前提：功能测试已经通过，才做性能测试</p></blockquote><p>性能测试，得到的都是性能指标值，不是功能的bug数量</p><h2 id="前端性能测试"><a href="#前端性能测试" class="headerlink" title="前端性能测试"></a>前端性能测试</h2><p>前端性能测试，影响因素非常多，而且不通用，所以测试工具很多，没有统一标准</p><ul><li>前端性能测试，并不一定是多用户</li><li>前端与端设备有直接关系</li><li>前端与设备配置有关系</li></ul><h3 id="常用的前端性能测试工具"><a href="#常用的前端性能测试工具" class="headerlink" title="常用的前端性能测试工具"></a>常用的前端性能测试工具</h3><ul><li>PageSpeed Insights:<a href="https://developers.google.cn/speed/pagespeed/insights/">https://developers.google.cn/speed/pagespeed/insights/</a></li></ul><p>谷歌开发的一个免费的<a href="https://developers.google.cn/speed/pagespeed/insights/?utm_source=testingpai.com">网页分析工具</a>，在地址栏中输入被分析的网站 url 地址，点击分析，</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goun20zgdbj30xr0u010f.jpg" alt="PageSpeed Insights"></p><ul><li>Lighthouse</li></ul><p>Lighthouse 是谷歌开源的一款 Web 前端性能测试工具，用于改进网络应用的质量，适用于网页版和移动端。能生成一个包括页面性能、PWA（Progressive Web apps，渐进式 Web 应用）、可访问性（无障碍）、最佳实践、SEO 的报告清单提供参考，看看可以采取哪些措施来改进您的应用。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g lighthouse</span><br></pre></td></tr></tbody></table></figure><ul><li>SiteSpeed:<a href="https://www.sitespeed.io/">https://www.sitespeed.io/</a></li></ul><p>SiteSpeed 是一款开源的，可以用于监控和检查网站性能的工具。可以通过 docker 镜像或 npm 方式来使用。这个工具，并不是单一的，而是一组工具集合，可以根据自己需要，选择适合自己的工具。</p><ul><li>Speedcurve:<a href="https://speedcurve.com/">https://speedcurve.com/</a></li></ul><p>Speedcurve 是一个前端性能综合监控网站，可以在网站输入被测网站的 url 地址，进行测试</p><ul><li>webpagetest:<a href="https://www.webpagetest.org/">https://www.webpagetest.org/</a></li></ul><p>webpagetest和上面的 speedcurve 相似，也是在一个网站中，输入被测试的网站 ip 地址，就可以对被测网站页面进行分析。但是，这个网站在国内，被友好的和谐了，会出现无法正常进行测试的情况。</p><h2 id="接口性能"><a href="#接口性能" class="headerlink" title="接口性能"></a>接口性能</h2><blockquote><p>有不同协议的http协议族</p></blockquote><p>协议：提供者和使用者之间的一个数据约束</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><blockquote><p>通过工具、找出或者验证，系统在不同工况下的性能指标</p></blockquote><h3 id="通过工具"><a href="#通过工具" class="headerlink" title="通过工具"></a>通过工具</h3><p>性能测试，不能靠手工</p><p>常用的工具：</p><ul><li>jmeter</li><li>loadrunner</li><li>python+locust</li><li>ngrinder</li></ul><h3 id="找出「基准测试」"><a href="#找出「基准测试」" class="headerlink" title="找出「基准测试」"></a>找出「基准测试」</h3><p>在完全没有性能指标可以做参考时，通过性能测试得到性能指标值</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在接口升级之后，对接口再次进行性能测试，对比基准测试结果</p><h2 id="压测-负载测试-性能测试-最大并发用户数下的性能指标"><a href="#压测-负载测试-性能测试-最大并发用户数下的性能指标" class="headerlink" title="压测=负载测试+性能测试=最大并发用户数下的性能指标"></a>压测=负载测试+性能测试=最大并发用户数下的性能指标</h2><h3 id="负载测试：逐步增加"><a href="#负载测试：逐步增加" class="headerlink" title="负载测试：逐步增加"></a>负载测试：逐步增加</h3><p>逐步增加：逐步增加同时请求的数量，来观察系统能承受的<strong>最大负载区间</strong></p><p>在逐步增加后 会得到一个<code>拐点</code>的区间</p><hr><p>问：一个系统完全没有做过性能测试，如何找出最大并发用户数</p><p>答：进行负载测试，逐步增加并发数</p><h3 id="压力测试：较长时间-较大压力"><a href="#压力测试：较长时间-较大压力" class="headerlink" title="压力测试：较长时间+较大压力"></a>压力测试：较长时间+较大压力</h3><p>在一定并发用户数请求下，持续运行一段时间，看系统服务及各资源利用情况，是否存在稳定性问题</p><ul><li>时间：较长，以小时为单位，一般是几个小时或几天</li><li>目的：看服务器是否稳定</li></ul><p>当服务器出现不稳定情况宕机，我们就要进行压力测试了</p><h3 id="可靠性测试"><a href="#可靠性测试" class="headerlink" title="可靠性测试"></a>可靠性测试</h3><p>在给定一定的业务压力下，持续运行一段时间，查看系统是否稳定</p><p>关键词：是否<code>稳定</code>，一定业务压力</p><h3 id="容量测试"><a href="#容量测试" class="headerlink" title="容量测试"></a>容量测试</h3><p>在一定的软、硬件条件下，在数据库不同数量级数据量的情况时，对系统中读/写比进行测试，从而获得不同数据量级下的性能指标值。</p><ul><li>要与生产的数据库的数量级别保持一致</li><li>如果产品没有上线，看数据库是什么数据库来评定量级。一般mysql为100w级</li></ul><p>问：为什么数据库要有这样一个数据量的数据准备？</p><p>答：数据库在10w、100w数据时，索引会对性能造成非常大的影响。百万级数据库，如果有索引，而且生效，sql的时间毫秒到秒之间，但是没有索引，或者索引无效，需要在几秒以上</p><p>性能测试环境的数据量要与生产一致。一定要注意数据脱敏/</p><h2 id="性能测试前提"><a href="#性能测试前提" class="headerlink" title="性能测试前提"></a>性能测试前提</h2><blockquote><p>性能测试，有前提，并不是什么时候，什么接口都可以做性能测试。</p></blockquote><h3 id="性能测试的必要性研究：关键项评估"><a href="#性能测试的必要性研究：关键项评估" class="headerlink" title="性能测试的必要性研究：关键项评估"></a>性能测试的必要性研究：关键项评估</h3><ul><li>主管部门、监管部门审核</li><li>设计生命财产安全</li><li>大型新系统</li><li>核心系统</li><li>架构调整</li><li>业务剧增</li><li>最大缺陷修复</li></ul><h3 id="可测性：可量化为性能指标值"><a href="#可测性：可量化为性能指标值" class="headerlink" title="可测性：可量化为性能指标值"></a>可测性：可量化为性能指标值</h3><h2 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h2><ul><li><p>Jmeter</p></li><li><p>loadrunner</p></li><li><p>python+locust</p></li></ul><h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><h3 id="企业关注"><a href="#企业关注" class="headerlink" title="企业关注"></a>企业关注</h3><ul><li>服务器利用情况：资源利用率</li><li>能支持的最大用户：系统容量</li><li>能支持的最大并发用户：并发用户数</li><li>是不是可以更换硬件提供性能：可扩展</li><li>能不能持续运行长时间不宕机：稳定性</li></ul><h3 id="开发人员"><a href="#开发人员" class="headerlink" title="开发人员"></a>开发人员</h3><ul><li>架构设计是否合理：系统架构</li><li>数据库设计：数据库</li><li>代码逻辑：代码</li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>狭义：同一时间多个人做同一件事情</p><p>广义：同一时间多个人发起请求，事情可能不一样</p><p>现在的性能测试都是广义并发</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>客户机向服务器发送请求，然后服务器做出反应的过程</p><p>jmeter中有两种事务</p><ul><li>一个请求就是一个事务</li><li>添加了事务控制器，把多个接口合并在一起作为一个事务</li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(Hybrid应用自动化 35)</title>
      <link href="article/cb028af5.html"/>
      <url>article/cb028af5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-Hybrid应用自动化-35"><a href="#Java自动化测试-Hybrid应用自动化-35" class="headerlink" title="Java自动化测试(Hybrid应用自动化 35)"></a>Java自动化测试(Hybrid应用自动化 35)</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>准备android4.4+版本以上的手机/模拟器</li><li>在app源码中将webview调试模式打开</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebContentsDebuggingEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><ul><li>安装UC开发者工具</li></ul><h2 id="查看ChromeDriver版本"><a href="#查看ChromeDriver版本" class="headerlink" title="查看ChromeDriver版本"></a>查看ChromeDriver版本</h2><p>进入<code>设置</code>-&gt;<code>应用</code>，点击<code>显示系统进程</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjslu6oar3j30sg1bm45n.jpg" alt="显示系统进程"></p><p>找到<code>Android System WebView</code>,它的版本也就是<code>75.0.3770.143</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjslurkg7ej30u01cktia.jpg" alt="Android System WebView"></p><blockquote><p>在chromedriver中找到对应的版本</p><p><a href="https://npm.taobao.org/mirrors/chromedriver/?utm_source=testingpai.com">https://npm.taobao.org/mirrors/chromedriver/?utm_source=testingpai.com</a></p></blockquote><h2 id="使用UC-开发者调试工具定位页面"><a href="#使用UC-开发者调试工具定位页面" class="headerlink" title="使用UC 开发者调试工具定位页面"></a>使用UC 开发者调试工具定位页面</h2><blockquote><p><a href="https://dev.ucweb.com/docs/pwa/docs-zh/xy3whu">https://dev.ucweb.com/docs/pwa/docs-zh/xy3whu</a></p></blockquote><h3 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjsmtrtlehj312f0u0n8g.jpg" alt="设置"></p><h3 id="查看当前页面"><a href="#查看当前页面" class="headerlink" title="查看当前页面"></a>查看当前页面</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjsmulb91fj31a40u01dl.jpg" alt="查看Home"></p><h2 id="进入网页"><a href="#进入网页" class="headerlink" title="进入网页"></a>进入网页</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">    androidDriver.findElement(MobileBy.xpath(<span class="string">"//*[@text='柠檬社区']"</span>)).click();</span><br><span class="line">    System.out.println(androidDriver.getContextHandles());<span class="comment">//[NATIVE_APP, WEBVIEW_com.lemon.lemonban]</span></span><br><span class="line">    <span class="comment">//切换到WEBVIEW_com.lemon.lemonban</span></span><br><span class="line">    androidDriver.context(<span class="string">"WEBVIEW_com.lemon.lemonban"</span>);</span><br><span class="line">    <span class="comment">//进入web页面点击注册按钮</span></span><br><span class="line">    androidDriver.findElement(MobileBy.xpath(<span class="string">"//span[contains(text(),'注册')]"</span>)).click();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><p>由于腾讯系QQ/微信是基于腾讯自研的X5内核，不是谷歌原生webview，所以调试会有差异</p><p>微信小程序只能够支持手机，模拟器是不行的。</p><h3 id="Step1-打开微信小程序webview开关"><a href="#Step1-打开微信小程序webview开关" class="headerlink" title="Step1:打开微信小程序webview开关"></a>Step1:打开微信小程序webview开关</h3><blockquote><p><a href="https://debugx5.qq.com/">https://debugx5.qq.com/</a></p><p><a href="http://debugmm.qq.com/?forcex5=true">http://debugmm.qq.com/?forcex5=true</a></p></blockquote><h3 id="Step2-UC开发者工具识别小程序的web元素信息"><a href="#Step2-UC开发者工具识别小程序的web元素信息" class="headerlink" title="Step2:UC开发者工具识别小程序的web元素信息"></a>Step2:UC开发者工具识别小程序的web元素信息</h3><h3 id="Step3-确认微信小程序对应的进程名"><a href="#Step3-确认微信小程序对应的进程名" class="headerlink" title="Step3:确认微信小程序对应的进程名"></a>Step3:确认微信小程序对应的进程名</h3><h3 id="Step4-X5内核启动参数配置"><a href="#Step4-X5内核启动参数配置" class="headerlink" title="Step4:X5内核启动参数配置"></a>Step4:X5内核启动参数配置</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支持X5内核应用自动化配置</span></span><br><span class="line">desiredCapabilities.setCapability(<span class="string">"recreateChromeDriverSession"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// ChromeOptions 使用来定制启动选项，因为在appium中切换context识别webview的时候，</span></span><br><span class="line"><span class="comment">// 把com.tencent.mm:toolsmp的webview识别成com.tencent.mm的webview</span></span><br><span class="line"><span class="comment">// 为了规避这个问题，加上androidProcess: com.tencent.mm:toolsmp</span></span><br><span class="line">ChromeOptions options = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line">options.setExperimentalOption(<span class="string">"androidProcess"</span>,<span class="string">"com.tencent.mm:appbrand0"</span>);</span><br><span class="line">desiredCapabilities.setCapability(ChromeOptions.CAPABILITY,options);</span><br><span class="line"><span class="comment">// 初始化会默认将chrome浏览器打开，需要将Browser置为空</span></span><br><span class="line">desiredCapabilities.setBrowserName(<span class="string">""</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="Step5-编写脚本实现自动化测试用例"><a href="#Step5-编写脚本实现自动化测试用例" class="headerlink" title="Step5:编写脚本实现自动化测试用例"></a>Step5:编写脚本实现自动化测试用例</h3><blockquote><p>注意：不清除微信的数据的方法</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capabilities.setCapability(<span class="string">"noReset"</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(App特殊元素定位 34)</title>
      <link href="article/f873292f.html"/>
      <url>article/f873292f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-App特殊元素定位-34"><a href="#Java自动化测试-App特殊元素定位-34" class="headerlink" title="Java自动化测试(App特殊元素定位 34)"></a>Java自动化测试(App特殊元素定位 34)</h1><h2 id="手势操作-滑动"><a href="#手势操作-滑动" class="headerlink" title="手势操作-滑动"></a>手势操作-滑动</h2><blockquote><p>滑动操作 = 点击屏幕某一点 + 移动 + 松开</p></blockquote><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 滑动操作 = 点击屏幕某一点 + 移动 + 松开</span></span><br><span class="line">    <span class="comment">// 点击 (365,170) 拖动(365,966)</span></span><br><span class="line">    TouchAction touchAction = <span class="keyword">new</span> TouchAction(androidDriver);</span><br><span class="line">    PointOption startPoint = PointOption.point(<span class="number">365</span>, <span class="number">170</span>);</span><br><span class="line">    PointOption endPoint = PointOption.point(<span class="number">365</span>, <span class="number">966</span>);</span><br><span class="line">    touchAction.press(startPoint).moveTo(endPoint).release().perform();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如上操作不会出现下拉刷新的情况</p><h2 id="滑动决定因素：距离-时间"><a href="#滑动决定因素：距离-时间" class="headerlink" title="滑动决定因素：距离/时间"></a>滑动决定因素：距离/时间</h2><ul><li>滑动距离</li><li>滑动时间</li></ul><p>现在增加滑动的时间</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Duration duration = Duration.ofMillis(<span class="number">2000</span>);</span><br><span class="line">WaitOptions waitOptions = WaitOptions.waitOptions(duration);</span><br><span class="line">touchAction.press(startPoint).waitAction(waitOptions).moveTo(endPoint).release().perform();</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjo2pqc5s0g30ea0msb2d.gif" alt="下拉刷新"></p><p>为了使它更通用使用屏幕的分辨率来计算坐标</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> width = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line"><span class="keyword">int</span> height = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">TouchAction touchAction = <span class="keyword">new</span> TouchAction(androidDriver);</span><br><span class="line">PointOption startPoint = PointOption.point(width / <span class="number">2</span>, height / <span class="number">4</span>);</span><br><span class="line">PointOption endPoint = PointOption.point(width / <span class="number">2</span>, <span class="number">3</span> * height / <span class="number">4</span>);</span><br></pre></td></tr></tbody></table></figure><p>对滑动进行封装</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向下滑动</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> times：等待时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeDown</span><span class="params">(<span class="keyword">long</span> times)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> width = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">    TouchAction touchAction = <span class="keyword">new</span> TouchAction(androidDriver);</span><br><span class="line">    PointOption startPoint = PointOption.point(width / <span class="number">2</span>, height / <span class="number">4</span>);</span><br><span class="line">    PointOption endPoint = PointOption.point(width / <span class="number">2</span>, <span class="number">3</span> * height / <span class="number">4</span>);</span><br><span class="line">    Duration duration = Duration.ofMillis(times);</span><br><span class="line">    WaitOptions waitOptions = WaitOptions.waitOptions(duration);</span><br><span class="line">    touchAction.press(startPoint).waitAction(waitOptions).moveTo(endPoint).release().perform();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向上滑动</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> times：等待时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeUp</span><span class="params">(<span class="keyword">long</span> times)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> width = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">    TouchAction touchAction = <span class="keyword">new</span> TouchAction(androidDriver);</span><br><span class="line">    PointOption startPoint = PointOption.point(width / <span class="number">2</span>, <span class="number">3</span> * height / <span class="number">4</span>);</span><br><span class="line">    PointOption endPoint = PointOption.point(width / <span class="number">2</span>, height / <span class="number">4</span>);</span><br><span class="line">    Duration duration = Duration.ofMillis(times);</span><br><span class="line">    WaitOptions waitOptions = WaitOptions.waitOptions(duration);</span><br><span class="line">    touchAction.press(startPoint).waitAction(waitOptions).moveTo(endPoint).release().perform();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向左滑动</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> times：等待时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeLeft</span><span class="params">(<span class="keyword">long</span> times)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> width = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">    TouchAction touchAction = <span class="keyword">new</span> TouchAction(androidDriver);</span><br><span class="line">    PointOption startPoint = PointOption.point(width / <span class="number">4</span>, height / <span class="number">2</span>);</span><br><span class="line">    PointOption endPoint = PointOption.point(<span class="number">3</span> * width / <span class="number">4</span>, height / <span class="number">2</span>);</span><br><span class="line">    Duration duration = Duration.ofMillis(times);</span><br><span class="line">    WaitOptions waitOptions = WaitOptions.waitOptions(duration);</span><br><span class="line">    touchAction.press(startPoint).waitAction(waitOptions).moveTo(endPoint).release().perform();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向右滑动</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> times：等待时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeRight</span><span class="params">(<span class="keyword">long</span> times)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> width = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">    TouchAction touchAction = <span class="keyword">new</span> TouchAction(androidDriver);</span><br><span class="line">    PointOption startPoint = PointOption.point(<span class="number">3</span> * width / <span class="number">4</span>, height / <span class="number">2</span>);</span><br><span class="line">    PointOption endPoint = PointOption.point(width / <span class="number">4</span>, height / <span class="number">2</span>);</span><br><span class="line">    Duration duration = Duration.ofMillis(times);</span><br><span class="line">    WaitOptions waitOptions = WaitOptions.waitOptions(duration);</span><br><span class="line">    touchAction.press(startPoint).waitAction(waitOptions).moveTo(endPoint).release().perform();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="手势操作-多点触摸"><a href="#手势操作-多点触摸" class="headerlink" title="手势操作-多点触摸"></a>手势操作-多点触摸</h2><p><code>MultiTouchAction</code>可以模拟用户多点触摸操作</p><ul><li>add:添加</li><li>perform:执行</li></ul><p>实现<code>放大</code>操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">    <span class="comment">//手指1</span></span><br><span class="line">    TouchAction action1 = <span class="keyword">new</span> TouchAction(androidDriver);</span><br><span class="line">    <span class="comment">//手指2</span></span><br><span class="line">    TouchAction action2 = <span class="keyword">new</span> TouchAction(androidDriver);</span><br><span class="line">    <span class="keyword">int</span> y = androidDriver.manage().window().getSize().getHeight();</span><br><span class="line">    <span class="keyword">int</span> x = androidDriver.manage().window().getSize().getWidth();</span><br><span class="line">    PointOption pointA = PointOption.point(x / <span class="number">5</span>, y / <span class="number">5</span>);</span><br><span class="line">    PointOption pointB = PointOption.point(x * <span class="number">2</span> / <span class="number">5</span>, y * <span class="number">2</span> / <span class="number">5</span>);</span><br><span class="line">    PointOption pointC = PointOption.point(x * <span class="number">3</span> / <span class="number">5</span>, y * <span class="number">3</span> / <span class="number">5</span>);</span><br><span class="line">    PointOption pointD = PointOption.point(x * <span class="number">4</span> / <span class="number">5</span>, y * <span class="number">4</span> / <span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 放大 B-&gt;A C-&gt;D</span></span><br><span class="line">    action1.press(pointB).moveTo(pointA).release();</span><br><span class="line">    action2.press(pointC).moveTo(pointD).release();</span><br><span class="line">    MultiTouchAction multiTouchAction = <span class="keyword">new</span> MultiTouchAction(androidDriver);</span><br><span class="line">    multiTouchAction.add(action1);</span><br><span class="line">    multiTouchAction.add(action2);</span><br><span class="line">    multiTouchAction.perform();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(Android app界面元素 33)</title>
      <link href="article/86e4f985.html"/>
      <url>article/86e4f985.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-Android-app界面元素-33"><a href="#Java自动化测试-Android-app界面元素-33" class="headerlink" title="Java自动化测试(Android app界面元素 33)"></a>Java自动化测试(Android app界面元素 33)</h1><h2 id="App分类"><a href="#App分类" class="headerlink" title="App分类"></a>App分类</h2><h3 id="Native-App"><a href="#Native-App" class="headerlink" title="Native App"></a>Native App</h3><p>原生App</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>直接依托于操作系统，交互性最强，性能最好，功能最为强大</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>开发成本高，更新缓慢，审核周期慢，维护成本高</p><span id="more"></span><h3 id="Hybrid-App"><a href="#Hybrid-App" class="headerlink" title="Hybrid App"></a>Hybrid App</h3><p>混合型App</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>开发成本较低，可以跨平台，调试方便，维护成本低，功能可复用，性能和体验要比web app好，更新较自由</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>相比原生性能仍有较大损耗，不适用于交互性较强的app</p><h3 id="Web-App"><a href="#Web-App" class="headerlink" title="Web App"></a>Web App</h3><p>使用浏览器展示</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>开发成本低，可以跨平台，调试方便，更新无需通知用户，不需要手动升级，无需安装App，不会占用手机存储空间</p><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>无法获取系统级别的通知/提醒/动效等，用户留存率低，体验差，设计受限较多</p><h3 id="如何区分"><a href="#如何区分" class="headerlink" title="如何区分"></a>如何区分</h3><p>开启<code>显示布局界面</code>，当看到出现<code>方框</code>则使用的是原生</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjhn91yla7j30sg1bm45f.jpg" alt="定位"></p><h2 id="ActivityName-amp-PackageName"><a href="#ActivityName-amp-PackageName" class="headerlink" title="ActivityName &amp; PackageName"></a>ActivityName &amp; PackageName</h2><h3 id="PackageName「包名」"><a href="#PackageName「包名」" class="headerlink" title="PackageName「包名」"></a>PackageName「包名」</h3><p>应用的唯一身份标示，系统通过包名识别不同的应用，如两个相同包名的应用在安装时会提示覆盖</p><h3 id="ActivityName「类名」"><a href="#ActivityName「类名」" class="headerlink" title="ActivityName「类名」"></a>ActivityName「类名」</h3><p>Activity：android四大组件之一，就是一个和用户交互的界面</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell dumpsys activity | grep <span class="string">"mFocusedActivity"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Android8以上</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb shell dumpsys activity | grep <span class="string">"mResumedActivity"</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjhnuilwmgj311q0u0dyo.jpg" alt="查找当前Activity"></p><p>启动入口appActivity和Activity的区别：</p><p><code>appActivity</code>在App中是唯一的，它的作用是用来启动app的</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> aapt dump badging D:\apk\base.apk | find <span class="string">"launchable-activity"</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="App页面布局"><a href="#App页面布局" class="headerlink" title="App页面布局"></a>App页面布局</h2><h3 id="布局类型"><a href="#布局类型" class="headerlink" title="布局类型"></a>布局类型</h3><ul><li>框架布局</li></ul><p>所有控件都被放置在左上的区域</p><p>下一个子控件会重叠覆盖上一个控件</p><ul><li>线性布局</li></ul><p>控件的排序方式：垂直/水平</p><ul><li>绝对布局</li></ul><p>采用坐标轴的方式定位控件</p><p>左上角(0,0) </p><p>往右<code>x+</code></p><p>往下<code>y+</code></p><ul><li>相对布局</li></ul><p>根据参照物的位置，来确定控件的位置</p><ul><li>表格布局</li></ul><p>通过表格的行列布局控件位置</p><h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><p>打开<code>uiautomatorviewer</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /Users/zhongxin/Library/Android/sdk/tools/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh uiautomatorviewer</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjho0t5rixj313u0u0b29.jpg" alt="uiautomatorviewer"></p><h3 id="id定位"><a href="#id定位" class="headerlink" title="id定位"></a>id定位</h3><p><code>resource-id</code>定位，App是允许「resource-id」相同，如果有相同的resource-id，那么获取第一个元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">androidDriver.findElement(MobileBy.id(<span class="string">"com.lemon.lemonban:id/category_title"</span>)).click();</span><br></pre></td></tr></tbody></table></figure><h3 id="text定位"><a href="#text定位" class="headerlink" title="text定位"></a>text定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">androidDriver.findElement(MobileBy.AndroidUIAutomator(<span class="string">"new UiSelector().text(\"全程班\")"</span>)).click();</span><br></pre></td></tr></tbody></table></figure><h3 id="className定位"><a href="#className定位" class="headerlink" title="className定位"></a>className定位</h3><p>类似web tagName找到元素类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">androidDriver.findElement(MobileBy.className(<span class="string">"android.widget.TextView"</span>)).click();</span><br></pre></td></tr></tbody></table></figure><h3 id="Xpath定位"><a href="#Xpath定位" class="headerlink" title="Xpath定位"></a>Xpath定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">androidDriver.findElement(MobileBy.xpath(<span class="string">"//android.widget.TextView[@text='全程班']"</span>)).click();</span><br><span class="line">androidDriver.findElement(MobileBy.xpath(<span class="string">"//android.widget.FrameLayout[@resource-id='com.lemon.lemonban:id/navigation_tiku']"</span>)).click();</span><br></pre></td></tr></tbody></table></figure><h3 id="坐标定位"><a href="#坐标定位" class="headerlink" title="坐标定位"></a>坐标定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TouchAction touchAction = <span class="keyword">new</span> TouchAction(androidDriver);</span><br><span class="line">PointOption pointOption = PointOption.point(<span class="number">445</span>, <span class="number">1539</span>);</span><br><span class="line">touchAction.press(pointOption).release().perform();</span><br></pre></td></tr></tbody></table></figure><h3 id="toast元素定位"><a href="#toast元素定位" class="headerlink" title="toast元素定位"></a>toast元素定位</h3><p><code>Toast</code>是一种简单的消息提示框。当视图显示给用户，在应用程序中显示为浮动。和Dialog不一样的是，它永远不会获得焦点，无法被点击。</p><ul><li>获取方式1:隐式等待</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">androidDriver.manage().timeouts().implicitlyWait(<span class="number">8</span>, TimeUnit.SECONDS);</span><br><span class="line">androidDriver.findElement(MobileBy.xpath(<span class="string">"//*[contains(@text,'错误的账号信息')]"</span>));</span><br></pre></td></tr></tbody></table></figure><ul><li>获取方式2:显式等待</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebDriverWait wait = <span class="keyword">new</span> WebDriverWait(androidDriver, <span class="number">5</span>);</span><br><span class="line">WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(MobileBy.xpath(<span class="string">"//*[contains(@text,'错误的账号信息')]"</span>)));</span><br><span class="line">element.getText();</span><br></pre></td></tr></tbody></table></figure><h2 id="使用Appium定位"><a href="#使用Appium定位" class="headerlink" title="使用Appium定位"></a>使用Appium定位</h2><h3 id="1-填写连接信息"><a href="#1-填写连接信息" class="headerlink" title="1.填写连接信息"></a>1.填写连接信息</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjhp3t9j59j31gg0u0wsc.jpg" alt="填写连接信息"></p><h3 id="2-启动会话"><a href="#2-启动会话" class="headerlink" title="2. 启动会话"></a>2. 启动会话</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjhp1bfh6tj31gg0u0x3g.jpg" alt="Appium"></p><h2 id="调试代码"><a href="#调试代码" class="headerlink" title="调试代码"></a>调试代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.appium.java_client.MobileBy;</span><br><span class="line"><span class="keyword">import</span> io.appium.java_client.TouchAction;</span><br><span class="line"><span class="keyword">import</span> io.appium.java_client.android.AndroidDriver;</span><br><span class="line"><span class="keyword">import</span> io.appium.java_client.touch.offset.PointOption;</span><br><span class="line"><span class="keyword">import</span> org.apache.tools.ant.taskdefs.Touch;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.apache.bcel.ExceptionConstants;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebElement;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.ExpectedConditions;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.WebDriverWait;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.AfterTest;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.BeforeTest;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElementLocator</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> AndroidDriver androidDriver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeTest</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> MalformedURLException </span>{</span><br><span class="line">        DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">        capabilities.setCapability(<span class="string">"platformName"</span>, <span class="string">"Android"</span>);</span><br><span class="line">        capabilities.setCapability(<span class="string">"deviceName"</span>, <span class="string">"127.0.0.1:62001"</span>);</span><br><span class="line">        capabilities.setCapability(<span class="string">"appPackage"</span>, <span class="string">"com.lemon.lemonban"</span>);</span><br><span class="line">        capabilities.setCapability(<span class="string">"appActivity"</span>, <span class="string">"com.lemon.lemonban.activity.WelcomeActivity"</span>);</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://127.0.0.1:4723/wd/hub"</span>);</span><br><span class="line">        androidDriver = <span class="keyword">new</span> AndroidDriver(url, capabilities);</span><br><span class="line">        androidDriver.manage().timeouts().implicitlyWait(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">//        androidDriver.findElement(MobileBy.id("com.lemon.lemonban:id/category_title")).click();</span></span><br><span class="line"><span class="comment">//        androidDriver.findElement(MobileBy.AndroidUIAutomator("new UiSelector().text(\"全程班\")")).click();</span></span><br><span class="line"><span class="comment">//        androidDriver.findElement(MobileBy.className("android.widget.TextView")).click();</span></span><br><span class="line"><span class="comment">//        androidDriver.findElement(MobileBy.xpath("//android.widget.TextView[@text='全程班']")).click();</span></span><br><span class="line"><span class="comment">//        androidDriver.findElement(MobileBy.xpath("//android.widget.FrameLayout[@resource-id='com.lemon.lemonban:id/navigation_tiku']")).click();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        TouchAction touchAction = new TouchAction(androidDriver);</span></span><br><span class="line"><span class="comment">//        PointOption pointOption = PointOption.point(445, 1539);</span></span><br><span class="line"><span class="comment">//        touchAction.press(pointOption).release().perform();</span></span><br><span class="line"></span><br><span class="line">        androidDriver.manage().timeouts().implicitlyWait(<span class="number">8</span>, TimeUnit.SECONDS);</span><br><span class="line">        androidDriver.findElement(MobileBy.xpath(<span class="string">"//*[contains(@text,'错误的账号信息')]"</span>));</span><br><span class="line"></span><br><span class="line">        WebDriverWait wait = <span class="keyword">new</span> WebDriverWait(androidDriver, <span class="number">5</span>);</span><br><span class="line">        WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(MobileBy.xpath(<span class="string">"//*[contains(@text,'错误的账号信息')]"</span>)));</span><br><span class="line">        String text = element.getText();</span><br><span class="line">        System.out.println(text);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterTest</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        androidDriver.quit();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(adb常用命令 32)</title>
      <link href="article/d988ab56.html"/>
      <url>article/d988ab56.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-adb常用命令-32"><a href="#Java自动化测试-adb常用命令-32" class="headerlink" title="Java自动化测试(adb常用命令 32)"></a>Java自动化测试(adb常用命令 32)</h1><h1 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h1><p>adb「Android Bebug Bridge」是用来连接安卓和PC的桥梁</p><p>常用操作：</p><ul><li>安装卸载apk</li><li>推送拷贝文件</li><li>查看设备硬件信息</li><li>查看应用程序占用资源</li><li>在设备执行shell命令<span id="more"></span><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2></li></ul><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb <span class="built_in">help</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="检测连接到电脑的安卓设备"><a href="#检测连接到电脑的安卓设备" class="headerlink" title="检测连接到电脑的安卓设备"></a>检测连接到电脑的安卓设备</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb devices</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb connect 127.0.0.1:62001</span></span><br></pre></td></tr></tbody></table></figure><h3 id="从手机上拉取信息到电脑上"><a href="#从手机上拉取信息到电脑上" class="headerlink" title="从手机上拉取信息到电脑上"></a>从手机上拉取信息到电脑上</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb pull &lt;手机路径&gt; &lt;本地路径&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="从电脑上提交信息到手机上"><a href="#从电脑上提交信息到手机上" class="headerlink" title="从电脑上提交信息到手机上"></a>从电脑上提交信息到手机上</h3><p>路径不能有中文和特殊字符</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb push &lt;本地路径&gt; &lt;手机路径&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb install &lt;本地软件路径&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb uninstall &lt;包名&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="登录设备进入shell"><a href="#登录设备进入shell" class="headerlink" title="登录设备进入shell"></a>登录设备进入shell</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell</span></span><br></pre></td></tr></tbody></table></figure><h3 id="终止adb服务"><a href="#终止adb服务" class="headerlink" title="终止adb服务"></a>终止adb服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb kill-server</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动adb服务"><a href="#启动adb服务" class="headerlink" title="启动adb服务"></a>启动adb服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb start-server</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动App"><a href="#启动App" class="headerlink" title="启动App"></a>启动App</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell am start -n &lt;包名&gt;/&lt;入口&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="清除应用数据和缓存"><a href="#清除应用数据和缓存" class="headerlink" title="清除应用数据和缓存"></a>清除应用数据和缓存</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell pm clear &lt;包名&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="坐标点击"><a href="#坐标点击" class="headerlink" title="坐标点击"></a>坐标点击</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell input tap x坐标 y坐标</span></span><br></pre></td></tr></tbody></table></figure><h3 id="列出所有包名"><a href="#列出所有包名" class="headerlink" title="列出所有包名"></a>列出所有包名</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell pm list packages</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> -s 系统apk路径及包名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> -3 用户apk路径及包名</span></span><br></pre></td></tr></tbody></table></figure><h3 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb logcat</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb logcat &gt; &lt;本地路径&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell screencap -p /sdcard/Pictures/Screenshots/a.png</span></span><br></pre></td></tr></tbody></table></figure><h2 id="appium打印内容解析-了解"><a href="#appium打印内容解析-了解" class="headerlink" title="appium打印内容解析(了解)"></a>appium打印内容解析(了解)</h2><h3 id="启动Appium的欢迎信息"><a href="#启动Appium的欢迎信息" class="headerlink" title="启动Appium的欢迎信息"></a>启动Appium的欢迎信息</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[Appium] Welcome to Appium v1.17.1</span><br><span class="line">[Appium] Non-default server args:</span><br><span class="line">[Appium]   address: 127.0.0.1</span><br><span class="line">[Appium]   allowInsecure: {</span><br><span class="line">[Appium]   }</span><br><span class="line">[Appium]   denyInsecure: {</span><br><span class="line">[Appium]   }</span><br><span class="line">[Appium] Appium REST http interface listener started on 127.0.0.1:4723</span><br><span class="line">[HTTP] --&gt; POST /wd/hub/session</span><br><span class="line">[HTTP] {"desiredCapabilities":{"appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","platformName":"Android","deviceName":"127.0.0.1:62001"},"capabilities":{"firstMatch":[{"appium:appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appium:appPackage":"com.lemon.lemonban","appium:deviceName":"127.0.0.1:62001","platformName":"android"}]}}</span><br><span class="line">[W3C] Calling AppiumDriver.createSession() with args: [{"appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","platformName":"Android","deviceName":"127.0.0.1:62001"},null,{"firstMatch":[{"appium:appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appium:appPackage":"com.lemon.lemonban","appium:deviceName":"127.0.0.1:62001","platformName":"android"}]}]</span><br><span class="line">[BaseDriver] Event 'newSessionRequested' logged at 1601112368099 (17:26:08 GMT+0800 (中国标准时间))</span><br><span class="line">[Appium] </span><br><span class="line">[Appium] ======================================================================</span><br><span class="line">[Appium]   DEPRECATION WARNING:</span><br><span class="line">[Appium] </span><br><span class="line">[Appium]   The 'automationName' capability was not provided in the desired </span><br><span class="line">[Appium]   capabilities for this Android session</span><br><span class="line">[Appium] </span><br><span class="line">[Appium]   Setting 'automationName=UiAutomator2' by default and using the </span><br><span class="line">[Appium]   UiAutomator2 Driver</span><br><span class="line">[Appium] </span><br><span class="line">[Appium]   The next major version of Appium (2.x) will **require** the </span><br><span class="line">[Appium]   'automationName' capability to be set for all sessions on all </span><br><span class="line">[Appium]   platforms</span><br><span class="line">[Appium] </span><br><span class="line">[Appium]   In previous versions (Appium &lt;= 1.13.x), the default was </span><br><span class="line">[Appium]   'automationName=UiAutomator1'</span><br><span class="line">[Appium] </span><br><span class="line">[Appium]   If you wish to use that automation instead of UiAutomator2, please </span><br><span class="line">[Appium]   add 'automationName=UiAutomator1' to your desired capabilities</span><br><span class="line">[Appium] </span><br><span class="line">[Appium]   For more information about drivers, please visit </span><br><span class="line">[Appium]   http://appium.io/docs/en/about-appium/intro/ and explore the </span><br><span class="line">[Appium]   'Drivers' menu</span><br><span class="line">[Appium] </span><br><span class="line">[Appium] ======================================================================</span><br><span class="line">[Appium] </span><br><span class="line">[Appium] Appium v1.17.1 creating new AndroidUiautomator2Driver (v1.44.2) session</span><br><span class="line">[BaseDriver] W3C capabilities and MJSONWP desired capabilities were provided</span><br><span class="line">[BaseDriver] Creating session with W3C capabilities: {</span><br><span class="line">[BaseDriver]   "alwaysMatch": {</span><br><span class="line">[BaseDriver]     "platformName": "android",</span><br><span class="line">[BaseDriver]     "appium:appActivity": "com.lemon.lemonban.activity.WelcomeActivity",</span><br><span class="line">[BaseDriver]     "appium:appPackage": "com.lemon.lemonban",</span><br><span class="line">[BaseDriver]     "appium:deviceName": "127.0.0.1:62001"</span><br><span class="line">[BaseDriver]   },</span><br><span class="line">[BaseDriver]   "firstMatch": [</span><br><span class="line">[BaseDriver]     {}</span><br><span class="line">[BaseDriver]   ]</span><br><span class="line">[BaseDriver] }</span><br><span class="line">[BaseDriver] Session created with session id: 56b02400-065d-4d7e-8a8f-a074c85ef643</span><br><span class="line">[UiAutomator2] Starting 'com.lemon.lemonban' directly on the device</span><br></pre></td></tr></tbody></table></figure><h3 id="使用环境变量中配置的adb-exe"><a href="#使用环境变量中配置的adb-exe" class="headerlink" title="使用环境变量中配置的adb.exe"></a>使用环境变量中配置的adb.exe</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ADB] Found 1 'build-tools' folders under '/Users/zhongxin/Library/Android/sdk' (newest first):</span><br><span class="line">[ADB]     /Users/zhongxin/Library/Android/sdk/build-tools/30.0.2</span><br><span class="line">[ADB] Using 'adb' from '/Users/zhongxin/Library/Android/sdk/platform-tools/adb'</span><br><span class="line"></span><br><span class="line">[AndroidDriver] Retrieving device list</span><br><span class="line">[ADB] Trying to find a connected android device</span><br><span class="line">[ADB] Getting connected devices...</span><br><span class="line">[ADB] Connected devices: [{"udid":"127.0.0.1:62001","state":"device"}]</span><br><span class="line">[AndroidDriver] Using device: 127.0.0.1:62001</span><br></pre></td></tr></tbody></table></figure><h3 id="连接设备，并检测设备API版本号"><a href="#连接设备，并检测设备API版本号" class="headerlink" title="连接设备，并检测设备API版本号"></a>连接设备，并检测设备API版本号</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ADB] Using 'adb' from '/Users/zhongxin/Library/Android/sdk/platform-tools/adb'</span><br><span class="line">[ADB] Setting device id to 127.0.0.1:62001</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell getprop ro.build.version.sdk'</span><br><span class="line">[ADB] Current device property 'ro.build.version.sdk': 25</span><br><span class="line">[ADB] Device API level: 25</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[AndroidDriver] No app sent in, not parsing package/activity</span><br></pre></td></tr></tbody></table></figure><h3 id="等待设备连接"><a href="#等待设备连接" class="headerlink" title="等待设备连接"></a>等待设备连接</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 wait-for-device'</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell echo ping'</span><br><span class="line"></span><br><span class="line">[AndroidDriver] Pushing settings apk to device...</span><br><span class="line">[ADB] Getting install status for io.appium.settings</span><br></pre></td></tr></tbody></table></figure><h3 id="检测Appium-Setting安装状态"><a href="#检测Appium-Setting安装状态" class="headerlink" title="检测Appium Setting安装状态"></a>检测Appium Setting安装状态</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell dumpsys package io.appium.settings'</span><br><span class="line">[ADB] 'io.appium.settings' is installed</span><br><span class="line"></span><br><span class="line">[ADB] Getting package info for 'io.appium.settings'</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell dumpsys package io.appium.settings'</span><br><span class="line">[ADB] The version name of the installed 'io.appium.settings' is greater or equal to the application version name ('3.1.0' &gt;= '3.1.0')</span><br><span class="line">[ADB] There is no need to install/upgrade '/Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/io.appium.settings/apks/settings_apk-debug.apk'</span><br><span class="line">[ADB] Getting IDs of all 'io.appium.settings' processes</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell 'pgrep --help; echo $?''</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell 'pgrep ^appium\\.settings$ || pgrep ^io\\.appium\\.setti$''</span><br><span class="line">[AndroidDriver] io.appium.settings is already running. There is no need to reset its permissions.</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell appops set io.appium.settings android\:mock_location allow'</span><br><span class="line">[Logcat] Starting logcat capture</span><br></pre></td></tr></tbody></table></figure><h3 id="端口转发Appium-Server端口8200连接到设备部中UiAutomator2-Server-6790"><a href="#端口转发Appium-Server端口8200连接到设备部中UiAutomator2-Server-6790" class="headerlink" title="端口转发Appium Server端口8200连接到设备部中UiAutomator2 Server 6790"></a>端口转发Appium Server端口8200连接到设备部中UiAutomator2 Server 6790</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[UiAutomator2] Forwarding UiAutomator2 Server port 6790 to 8200</span><br><span class="line">[ADB] Forwarding system: 8200 to device: 6790</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 forward tcp\:8200 tcp\:6790'</span><br></pre></td></tr></tbody></table></figure><h3 id="检测uiautomator2-server-uiautomator2-server-test安装状态"><a href="#检测uiautomator2-server-uiautomator2-server-test安装状态" class="headerlink" title="检测uiautomator2.server\uiautomator2.server.test安装状态"></a>检测uiautomator2.server\uiautomator2.server.test安装状态</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ADB] Getting install status for io.appium.uiautomator2.server</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell dumpsys package io.appium.uiautomator2.server'</span><br><span class="line">[ADB] 'io.appium.uiautomator2.server' is installed</span><br><span class="line">[ADB] Getting package info for 'io.appium.uiautomator2.server'</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell dumpsys package io.appium.uiautomator2.server'</span><br><span class="line">[ADB] The version name of the installed 'io.appium.uiautomator2.server' is greater or equal to the application version name ('4.5.5' &gt;= '4.5.5')</span><br><span class="line">[UiAutomator2] io.appium.uiautomator2.server installation state: sameVersionInstalled</span><br></pre></td></tr></tbody></table></figure><h3 id="验证uiautomator2-server-uiautomator2-server-test证书"><a href="#验证uiautomator2-server-uiautomator2-server-test证书" class="headerlink" title="验证uiautomator2.server\uiautomator2.server.test证书"></a>验证uiautomator2.server\uiautomator2.server.test证书</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[ADB] Checking app cert for /Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-uiautomator2-server/apks/appium-uiautomator2-server-v4.5.5.apk</span><br><span class="line">[ADB] Using 'apksigner.jar' from '/Users/zhongxin/Library/Android/sdk/build-tools/30.0.2/lib/apksigner.jar'</span><br><span class="line">[ADB] Starting apksigner: /Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home/bin/java -Xmx1024M -Xss1m -jar /Users/zhongxin/Library/Android/sdk/build-tools/30.0.2/lib/apksigner.jar verify --print-certs /Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-uiautomator2-server/apks/appium-uiautomator2-server-v4.5.5.apk</span><br><span class="line">[ADB] apksigner stdout: Signer #1 certificate DN: EMAILADDRESS=android@android.com, CN=Android, OU=Android, O=Android, L=Mountain View, ST=California, C=US</span><br><span class="line">[ADB] Signer #1 certificate SHA-256 digest: a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc</span><br><span class="line">[ADB] Signer #1 certificate SHA-1 digest: 61ed377e85d386a8dfee6b864bd85b0bfaa5af81</span><br><span class="line">[ADB] Signer #1 certificate MD5 digest: e89b158e4bcf988ebd09eb83f5378e87</span><br><span class="line">[ADB] </span><br><span class="line">[ADB] '/Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-uiautomator2-server/apks/appium-uiautomator2-server-v4.5.5.apk' is signed with the default certificate</span><br><span class="line">[ADB] Getting install status for io.appium.uiautomator2.server.test</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell dumpsys package io.appium.uiautomator2.server.test'</span><br><span class="line">[ADB] 'io.appium.uiautomator2.server.test' is installed</span><br><span class="line">[ADB] Checking app cert for /Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-uiautomator2-server/apks/appium-uiautomator2-server-debug-androidTest.apk</span><br><span class="line">[ADB] Starting apksigner: /Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home/bin/java -Xmx1024M -Xss1m -jar /Users/zhongxin/Library/Android/sdk/build-tools/30.0.2/lib/apksigner.jar verify --print-certs /Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-uiautomator2-server/apks/appium-uiautomator2-server-debug-androidTest.apk</span><br><span class="line">[ADB] apksigner stdout: Signer #1 certificate DN: EMAILADDRESS=android@android.com, CN=Android, OU=Android, O=Android, L=Mountain View, ST=California, C=US</span><br><span class="line">[ADB] Signer #1 certificate SHA-256 digest: a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc</span><br><span class="line">[ADB] Signer #1 certificate SHA-1 digest: 61ed377e85d386a8dfee6b864bd85b0bfaa5af81</span><br><span class="line">[ADB] Signer #1 certificate MD5 digest: e89b158e4bcf988ebd09eb83f5378e87</span><br><span class="line">[ADB] </span><br><span class="line">[ADB] '/Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-uiautomator2-server/apks/appium-uiautomator2-server-debug-androidTest.apk' is signed with the default certificate</span><br><span class="line">[UiAutomator2] Server packages are not going to be (re)installed</span><br><span class="line">[UiAutomator2] Waiting up to 30000ms for services to be available</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell pm list instrumentation'</span><br><span class="line">[UiAutomator2] Instrumentation target 'io.appium.uiautomator2.server.test/androidx.test.runner.AndroidJUnitRunner' is available</span><br><span class="line">[UiAutomator2] No app capability. Assuming it is already on the device</span><br></pre></td></tr></tbody></table></figure><h3 id="检测柠檬班App安装状态"><a href="#检测柠檬班App安装状态" class="headerlink" title="检测柠檬班App安装状态"></a>检测柠檬班App安装状态</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ADB] Getting install status for com.lemon.lemonban</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell dumpsys package com.lemon.lemonban'</span><br><span class="line">[ADB] 'com.lemon.lemonban' is installed</span><br></pre></td></tr></tbody></table></figure><h3 id="强制关闭和清空柠檬班app的缓存"><a href="#强制关闭和清空柠檬班app的缓存" class="headerlink" title="强制关闭和清空柠檬班app的缓存"></a>强制关闭和清空柠檬班app的缓存</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell am force-stop com.lemon.lemonban'</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell pm clear com.lemon.lemonban'</span><br><span class="line">[AndroidDriver] Performed fast reset on the installed 'com.lemon.lemonban' application (stop and clear)</span><br><span class="line">[UiAutomator2] Performing shallow cleanup of automation leftovers</span><br><span class="line">[UiAutomator2] No obsolete sessions have been detected (Error: socket hang up)</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell am force-stop io.appium.uiautomator2.server.test'</span><br><span class="line">[UiAutomator2] Starting UIAutomator2 server 4.5.5</span><br><span class="line">[UiAutomator2] Using UIAutomator2 server from '/Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-uiautomator2-server/apks/appium-uiautomator2-server-v4.5.5.apk' and test from '/Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-uiautomator2-server/apks/appium-uiautomator2-server-debug-androidTest.apk'</span><br><span class="line">[UiAutomator2] Waiting up to 30000ms for UiAutomator2 to be online...</span><br><span class="line">[ADB] Creating ADB subprocess with args: ["-P",5037,"-s","127.0.0.1:62001","shell","am","instrument","-w","io.appium.uiautomator2.server.test/androidx.test.runner.AndroidJUnitRunner"]</span><br><span class="line">[Instrumentation] io.appium.uiautomator2.server.test.AppiumUiAutomator2Server:</span><br><span class="line">[WD Proxy] Matched '/status' to command name 'getStatus'</span><br><span class="line">[WD Proxy] Proxying [GET /status] to [GET http://127.0.0.1:8200/wd/hub/status] with no body</span><br><span class="line">[WD Proxy] Got response with unknown status: {"code":"ECONNRESET"}</span><br><span class="line">[WD Proxy] Matched '/status' to command name 'getStatus'</span><br><span class="line">[WD Proxy] Proxying [GET /status] to [GET http://127.0.0.1:8200/wd/hub/status] with no body</span><br><span class="line">[WD Proxy] Got response with status 200: {"sessionId":"None","value":{"ready":true,"message":"UiAutomator2 Server is ready to accept commands"}}</span><br><span class="line">[UiAutomator2] The initialization of the instrumentation process took 2035ms</span><br><span class="line">[WD Proxy] Matched '/session' to command name 'createSession'</span><br><span class="line">[WD Proxy] Proxying [POST /session] to [POST http://127.0.0.1:8200/wd/hub/session] with body: {"capabilities":{"firstMatch":[{"platform":"LINUX","webStorageEnabled":false,"takesScreenshot":true,"javascriptEnabled":true,"databaseEnabled":false,"networkConnectionEnabled":true,"locationContextEnabled":false,"warnings":{},"desired":{"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001"},"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001","deviceUDID":"127.0.0.1:62001"}],"alwaysMatch":{}}}</span><br><span class="line">[WD Proxy] Got response with status 200: {"sessionId":"9d7c96d1-9a56-41dc-ae9a-82078c4f7597","value":{"sessionId":"9d7c96d1-9a56-41dc-ae9a-82078c4f7597","capabilities":{"firstMatch":[{"platform":"LINUX","webStorageEnabled":false,"takesScreenshot":true,"javascriptEnabled":true,"databaseEnabled":false,"networkConnectionEnabled":true,"locationContextEnabled":false,"warnings":{},"desired":{"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001"},"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001","deviceUDID":"127.0.0.1:62001"}],"alwaysMatch":{}}}}</span><br><span class="line">[WD Proxy] Determined the downstream protocol as 'W3C'</span><br><span class="line">[WD Proxy] Proxying [GET /appium/device/info] to [GET http://127.0.0.1:8200/wd/hub/session/9d7c96d1-9a56-41dc-ae9a-82078c4f7597/appium/device/info] with no body</span><br><span class="line">[WD Proxy] Got response with status 200: {"sessionId":"9d7c96d1-9a56-41dc-ae9a-82078c4f7597","value":{"androidId":"784F438584880000","manufacturer":"samsung","model":"SM-N950N","brand":"samsung","apiVersion":"25","platformVersion":"7.1.2","carrierName":"CMCC","realDisplaySize":"900x1600","displayDensity":320,"networks":[{"type":1,"typeName":"WIFI","subtype":0,"subtypeName":"","isConnected":true,"detailedState":"CONNECTED","state":"CONNECTED","extraInfo":"\"WiredSSID\"","isAvailable":true,"isFailover":false,"isRoaming":false,"capabilities":{"transportTypes":"TRANSPORT_WIFI","networkCapabilities":"NET_CAPABILITY_NOT_METERED,NET_CAPABILITY_NOT_RESTRICTED,NET_CAPABILITY_NOT_VPN,NET_CAPABILITY_NOT_ROAMING,NET_CAPABILITY_INTERNET,NET_CAPABILITY_TRUSTED,NET_CAPABILITY_VALIDATED","linkUpstreamBandwidthKbps":1048576,"linkDownBandwidthKbps":1048576,"signalStrength":-55,"networkSpecifier":null,"SSID":null}}],"locale":"zh_CN","timeZone":"Asia\/Shanghai","bluetooth":{"state":"OFF"}}}</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell dumpsys window'</span><br><span class="line">[AndroidDriver] Screen already unlocked, doing nothing</span><br><span class="line">[UiAutomator2] Starting 'com.lemon.lemonban/com.lemon.lemonban.activity.WelcomeActivity and waiting for 'com.lemon.lemonban/com.lemon.lemonban.activity.WelcomeActivity'</span><br></pre></td></tr></tbody></table></figure><h3 id="启动柠檬班App"><a href="#启动柠檬班App" class="headerlink" title="启动柠檬班App"></a>启动柠檬班App</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell am start -W -n com.lemon.lemonban/com.lemon.lemonban.activity.WelcomeActivity -S'</span><br><span class="line">[WD Proxy] Proxying [GET /appium/device/pixel_ratio] to [GET http://127.0.0.1:8200/wd/hub/session/9d7c96d1-9a56-41dc-ae9a-82078c4f7597/appium/device/pixel_ratio] with body: {}</span><br><span class="line">[WD Proxy] Got response with status 200: {"sessionId":"9d7c96d1-9a56-41dc-ae9a-82078c4f7597","value":2}</span><br><span class="line">[WD Proxy] Matched '/appium/device/system_bars' to command name 'getSystemBars'</span><br><span class="line">[WD Proxy] Proxying [GET /appium/device/system_bars] to [GET http://127.0.0.1:8200/wd/hub/session/9d7c96d1-9a56-41dc-ae9a-82078c4f7597/appium/device/system_bars] with body: {}</span><br><span class="line">[WD Proxy] Got response with status 200: {"sessionId":"9d7c96d1-9a56-41dc-ae9a-82078c4f7597","value":{"statusBar":48}}</span><br><span class="line">[WD Proxy] Matched '/window/current/size' to command name 'getWindowSize'</span><br><span class="line">[WD Proxy] Proxying [GET /window/current/size] to [GET http://127.0.0.1:8200/wd/hub/session/9d7c96d1-9a56-41dc-ae9a-82078c4f7597/window/current/size] with body: {}</span><br><span class="line">[WD Proxy] Got response with status 200: {"sessionId":"9d7c96d1-9a56-41dc-ae9a-82078c4f7597","value":{"height":1600,"width":900}}</span><br><span class="line">[Appium] New AndroidUiautomator2Driver session created successfully, session 56b02400-065d-4d7e-8a8f-a074c85ef643 added to master session list</span><br><span class="line">[BaseDriver] Event 'newSessionStarted' logged at 1601112375537 (17:26:15 GMT+0800 (中国标准时间))</span><br><span class="line">[W3C (56b02400)] Cached the protocol value 'W3C' for the new session 56b02400-065d-4d7e-8a8f-a074c85ef643</span><br><span class="line">[W3C (56b02400)] Responding to client with driver.createSession() result: {"capabilities":{"platform":"LINUX","webStorageEnabled":false,"takesScreenshot":true,"javascriptEnabled":true,"databaseEnabled":false,"networkConnectionEnabled":true,"locationContextEnabled":false,"warnings":{},"desired":{"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001"},"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001","deviceUDID":"127.0.0.1:62001","deviceApiLevel":25,"platformVersion":"7.1.2","deviceScreenSize":"900x1600","deviceScreenDensity":320,"deviceModel":"SM-N950N","deviceManufacturer":"samsung","pixelRatio":2,"statBarHeight":48,"viewportRect":{"left":0,"top":48,"width":900,"height":1552}}}</span><br><span class="line">[HTTP] &lt;-- POST /wd/hub/session 200 7445 ms - 869</span><br><span class="line">[HTTP] </span><br><span class="line">[HTTP] --&gt; GET /wd/hub/session/56b02400-065d-4d7e-8a8f-a074c85ef643</span><br><span class="line">[HTTP] {}</span><br><span class="line">[W3C (56b02400)] Calling AppiumDriver.getSession() with args: ["56b02400-065d-4d7e-8a8f-a074c85ef643"]</span><br><span class="line">[UiAutomator2] Getting session details from server to mix in</span><br><span class="line">[WD Proxy] Matched '/' to command name 'getSession'</span><br><span class="line">[WD Proxy] Proxying [GET /] to [GET http://127.0.0.1:8200/wd/hub/session/9d7c96d1-9a56-41dc-ae9a-82078c4f7597] with body: {}</span><br><span class="line">[WD Proxy] Got response with status 200: {"sessionId":"9d7c96d1-9a56-41dc-ae9a-82078c4f7597","value":{}}</span><br><span class="line">[W3C (56b02400)] Responding to client with driver.getSession() result: {"platform":"LINUX","webStorageEnabled":false,"takesScreenshot":true,"javascriptEnabled":true,"databaseEnabled":false,"networkConnectionEnabled":true,"locationContextEnabled":false,"warnings":{},"desired":{"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001"},"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001","deviceUDID":"127.0.0.1:62001","deviceApiLevel":25,"platformVersion":"7.1.2","deviceScreenSize":"900x1600","deviceScreenDensity":320,"deviceModel":"SM-N950N","deviceManufacturer":"samsung","pixelRatio":2,"statBarHeight":48,"viewportRect":{"left":0,"top":48,"width":900,"height":1552}}</span><br><span class="line">[HTTP] &lt;-- GET /wd/hub/session/56b02400-065d-4d7e-8a8f-a074c85ef643 200 8 ms - 801</span><br><span class="line">[HTTP] </span><br><span class="line">[HTTP] --&gt; GET /wd/hub/session/56b02400-065d-4d7e-8a8f-a074c85ef643</span><br><span class="line">[HTTP] {}</span><br><span class="line">[W3C (56b02400)] Calling AppiumDriver.getSession() with args: ["56b02400-065d-4d7e-8a8f-a074c85ef643"]</span><br><span class="line">[UiAutomator2] Getting session details from server to mix in</span><br><span class="line">[WD Proxy] Matched '/' to command name 'getSession'</span><br><span class="line">[WD Proxy] Proxying [GET /] to [GET http://127.0.0.1:8200/wd/hub/session/9d7c96d1-9a56-41dc-ae9a-82078c4f7597] with body: {}</span><br><span class="line">[WD Proxy] Got response with status 200: {"sessionId":"9d7c96d1-9a56-41dc-ae9a-82078c4f7597","value":{}}</span><br><span class="line">[W3C (56b02400)] Responding to client with driver.getSession() result: {"platform":"LINUX","webStorageEnabled":false,"takesScreenshot":true,"javascriptEnabled":true,"databaseEnabled":false,"networkConnectionEnabled":true,"locationContextEnabled":false,"warnings":{},"desired":{"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001"},"platformName":"android","appActivity":"com.lemon.lemonban.activity.WelcomeActivity","appPackage":"com.lemon.lemonban","deviceName":"127.0.0.1:62001","deviceUDID":"127.0.0.1:62001","deviceApiLevel":25,"platformVersion":"7.1.2","deviceScreenSize":"900x1600","deviceScreenDensity":320,"deviceModel":"SM-N950N","deviceManufacturer":"samsung","pixelRatio":2,"statBarHeight":48,"viewportRect":{"left":0,"top":48,"width":900,"height":1552}}</span><br><span class="line">[HTTP] &lt;-- GET /wd/hub/session/56b02400-065d-4d7e-8a8f-a074c85ef643 200 10 ms - 801</span><br><span class="line">[HTTP] </span><br><span class="line">[BaseDriver] Shutting down because we waited 60 seconds for a command</span><br><span class="line">[Appium] Closing session, cause was 'New Command Timeout of 60 seconds expired. Try customizing the timeout using the 'newCommandTimeout' desired capability'</span><br><span class="line">[Appium] Removing session '56b02400-065d-4d7e-8a8f-a074c85ef643' from our master session list</span><br><span class="line">[UiAutomator2] Deleting UiAutomator2 session</span><br><span class="line">[UiAutomator2] Deleting UiAutomator2 server session</span><br><span class="line">[WD Proxy] Matched '/' to command name 'deleteSession'</span><br><span class="line">[WD Proxy] Proxying [DELETE /] to [DELETE http://127.0.0.1:8200/wd/hub/session/9d7c96d1-9a56-41dc-ae9a-82078c4f7597] with no body</span><br><span class="line">[WD Proxy] Got response with status 200: {"sessionId":"9d7c96d1-9a56-41dc-ae9a-82078c4f7597","value":null}</span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 shell am force-stop com.lemon.lemonban'</span><br><span class="line">[Instrumentation] .</span><br><span class="line">[Instrumentation] Time: 63.052</span><br><span class="line">[Instrumentation] </span><br><span class="line">[Instrumentation] OK (1 test)</span><br><span class="line">[Instrumentation] The process has exited with code 0</span><br><span class="line">[Logcat] Stopping logcat capture</span><br><span class="line">[ADB] Removing forwarded port socket connection: 8200 </span><br><span class="line">[ADB] Running '/Users/zhongxin/Library/Android/sdk/platform-tools/adb -P 5037 -s 127.0.0.1\:62001 forward --remove tcp\:8200'</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(app自动化环境搭建 31)</title>
      <link href="article/e9b41654.html"/>
      <url>article/e9b41654.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-app自动化环境搭建-31"><a href="#Java自动化测试-app自动化环境搭建-31" class="headerlink" title="Java自动化测试(app自动化环境搭建 31)"></a>Java自动化测试(app自动化环境搭建 31)</h1><h2 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h2><blockquote><p>官网：<a href="http://appium.io/">http://appium.io/</a></p><p>github：<a href="https://github.com/appium/appium">https://github.com/appium/appium</a></p><p>Appium is an open source test automation framework for use with native, <a href="http://appium.io/docs/en/writing-running-appium/web/hybrid/">hybrid</a> and mobile web apps.<br>It drives iOS, Android, and Windows apps using the WebDriver protocol.</p></blockquote><p>第三方自动化工具，扩充了Selenium WebDriver协议，在原有的基础上添加了移动端测试API</p><p>是一个开源的，跨平台的自动化测试工具，可以用于app的自动化测试</p><p>支持<code>android</code>，<code>ios</code>，<code>firefox os</code>等操作系统下的app测试</p><span id="more"></span><h2 id="Appium组件"><a href="#Appium组件" class="headerlink" title="Appium组件"></a>Appium组件</h2><h3 id="Appium-Server"><a href="#Appium-Server" class="headerlink" title="Appium Server"></a>Appium Server</h3><p>Appium的核心，实质上是一个web接口服务器，使用node.js实现</p><h3 id="Appium-GUI"><a href="#Appium-GUI" class="headerlink" title="Appium GUI"></a>Appium GUI</h3><p>Appium Desktop前身，已经停止维护，封装的Appium Server 是1.4.16</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj1e0b8l2xj30w40u0akx.jpg" alt="Appium GUI"></p><h3 id="Appium-Desktop"><a href="#Appium-Desktop" class="headerlink" title="Appium Desktop"></a>Appium Desktop</h3><p>内嵌了 Appium Server，提供GUI界面，还包括其他工具的整合（如Appium Inspector）</p><h3 id="Appium-Client"><a href="#Appium-Client" class="headerlink" title="Appium Client"></a>Appium Client</h3><p>客户端向Appium Server发起请求，可以用不同语言来实现</p><p>例如java：<a href="https://github.com/appium/java-client">https://github.com/appium/java-client</a></p><h2 id="App自动化测试环境搭建"><a href="#App自动化测试环境搭建" class="headerlink" title="App自动化测试环境搭建"></a>App自动化测试环境搭建</h2><p>配置Android sdk环境</p><ol><li>SDK：软件开发套件</li><li>adb：是android sdk的一个工具，用来连接安卓手机和PC端端桥梁</li></ol><p>在mac上安装：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew cask install android-platform-tools</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'export PATH=$PATH:~/.android-sdk-macosx/platform-tools/'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_profile</span></span><br></pre></td></tr></tbody></table></figure><p>检查一下是否安装完成：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb version</span></span><br></pre></td></tr></tbody></table></figure><p>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj1efk3daej311q0u0qpg.jpg" alt="检查环境"></p><h2 id="模拟器下载"><a href="#模拟器下载" class="headerlink" title="模拟器下载"></a>模拟器下载</h2><blockquote><p><a href="https://www.yeshen.com/">https://www.yeshen.com/</a></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj1ekwvamqj30u01cke81.jpg" alt="模拟器"></p><h2 id="Appium-桌面版下载"><a href="#Appium-桌面版下载" class="headerlink" title="Appium 桌面版下载"></a>Appium 桌面版下载</h2><blockquote><p><a href="https://github.com/appium/appium-desktop/releases/tag/v1.18.0-2">https://github.com/appium/appium-desktop/releases/tag/v1.18.0-2</a></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj1epl0irhj30w40u07f5.jpg" alt="Appium 桌面版"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj1eq9gemij30w40u0gwm.jpg" alt="启动"></p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h3><h4 id="下载-java-client"><a href="#下载-java-client" class="headerlink" title="下载 java-client"></a>下载 java-client</h4><blockquote><p><a href="https://mvnrepository.com/artifact/io.appium/java-client">https://mvnrepository.com/artifact/io.appium/java-client</a></p></blockquote><h3 id="配置设备信息"><a href="#配置设备信息" class="headerlink" title="配置设备信息"></a>配置设备信息</h3><ol><li>设备平台</li><li>设备名称</li><li>APP包名</li><li>App activity名称</li></ol><p>使用<code>adb connect 127.0.0.1:62001</code>连接设备</p><p>其中<code>62001</code>是夜神模拟器的端口</p><h4 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj1f3ne2vhj311q0u01kx.jpg" alt="连接设备"></p><h4 id="查看包名"><a href="#查看包名" class="headerlink" title="查看包名"></a>查看包名</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> aapt dump badging xxxx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> aapt dump badging /Users/zhongxin/Downloads/app自动化工具包/APK包/lemonban_release_v2.1.2_finally.apk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /Applications/NoxAppPlayer.app/Contents/MacOS/aapt dump badging /Users/zhongxin/Downloads/app自动化工具包/APK包/lemonban_release_v2.1.2_finally.apk</span></span><br><span class="line">package: name='com.lemon.lemonban' versionCode='20181113' versionName='2.1.2' platformBuildVersionName='7.1.1'</span><br><span class="line">sdkVersion:'15'</span><br><span class="line">targetSdkVersion:'25'</span><br><span class="line">uses-permission: name='android.permission.ACCESS_NETWORK_STATE'</span><br><span class="line">uses-permission: name='android.permission.INTERNET'</span><br><span class="line">uses-permission: name='android.permission.WRITE_EXTERNAL_STORAGE'</span><br><span class="line">uses-permission: name='android.permission.READ_EXTERNAL_STORAGE'</span><br><span class="line">uses-permission: name='android.permission.CAMERA'</span><br><span class="line">uses-permission: name='android.permission.INTERNET'</span><br><span class="line">uses-permission: name='android.permission.READ_PHONE_STATE'</span><br><span class="line">uses-permission: name='android.permission.ACCESS_NETWORK_STATE'</span><br><span class="line">uses-permission: name='android.permission.CHANGE_WIFI_STATE'</span><br><span class="line">uses-permission: name='android.permission.ACCESS_WIFI_STATE'</span><br><span class="line">uses-permission: name='android.permission.WAKE_LOCK'</span><br><span class="line">uses-permission: name='android.permission.RECEIVE_BOOT_COMPLETED'</span><br><span class="line">uses-permission: name='android.permission.WRITE_EXTERNAL_STORAGE'</span><br><span class="line">uses-permission: name='android.permission.VIBRATE'</span><br><span class="line">uses-permission: name='android.permission.GET_TASKS'</span><br><span class="line">uses-permission: name='android.permission.BLUETOOTH'</span><br><span class="line">uses-permission: name='android.permission.BLUETOOTH_ADMIN'</span><br><span class="line">uses-permission: name='android.permission.ACCESS_FINE_LOCATION'</span><br><span class="line">uses-permission: name='android.permission.ACCESS_COARSE_LOCATION'</span><br><span class="line">uses-permission: name='android.permission.SYSTEM_ALERT_WINDOW'</span><br><span class="line">uses-permission: name='getui.permission.GetuiService.com.lemon.lemonban'</span><br><span class="line">uses-permission: name='android.permission.MOUNT_UNMOUNT_FILESYSTEMS'</span><br><span class="line">application-label:'柠檬班'</span><br><span class="line">application-label-af:'柠檬班'</span><br><span class="line">application-label-am:'柠檬班'</span><br><span class="line">application-label-ar:'柠檬班'</span><br><span class="line">application-label-az-AZ:'柠檬班'</span><br><span class="line">application-label-be-BY:'柠檬班'</span><br><span class="line">application-label-bg:'柠檬班'</span><br><span class="line">application-label-bn-BD:'柠檬班'</span><br><span class="line">application-label-bs-BA:'柠檬班'</span><br><span class="line">application-label-ca:'柠檬班'</span><br><span class="line">application-label-cs:'柠檬班'</span><br><span class="line">application-label-da:'柠檬班'</span><br><span class="line">application-label-de:'柠檬班'</span><br><span class="line">application-label-el:'柠檬班'</span><br><span class="line">application-label-en-AU:'柠檬班'</span><br><span class="line">application-label-en-GB:'柠檬班'</span><br><span class="line">application-label-en-IN:'柠檬班'</span><br><span class="line">application-label-es:'柠檬班'</span><br><span class="line">application-label-es-US:'柠檬班'</span><br><span class="line">application-label-et-EE:'柠檬班'</span><br><span class="line">application-label-eu-ES:'柠檬班'</span><br><span class="line">application-label-fa:'柠檬班'</span><br><span class="line">application-label-fi:'柠檬班'</span><br><span class="line">application-label-fr:'柠檬班'</span><br><span class="line">application-label-fr-CA:'柠檬班'</span><br><span class="line">application-label-gl-ES:'柠檬班'</span><br><span class="line">application-label-gu-IN:'柠檬班'</span><br><span class="line">application-label-hi:'柠檬班'</span><br><span class="line">application-label-hr:'柠檬班'</span><br><span class="line">application-label-hu:'柠檬班'</span><br><span class="line">application-label-hy-AM:'柠檬班'</span><br><span class="line">application-label-in:'柠檬班'</span><br><span class="line">application-label-is-IS:'柠檬班'</span><br><span class="line">application-label-it:'柠檬班'</span><br><span class="line">application-label-iw:'柠檬班'</span><br><span class="line">application-label-ja:'柠檬班'</span><br><span class="line">application-label-ka-GE:'柠檬班'</span><br><span class="line">application-label-kk-KZ:'柠檬班'</span><br><span class="line">application-label-km-KH:'柠檬班'</span><br><span class="line">application-label-kn-IN:'柠檬班'</span><br><span class="line">application-label-ko:'柠檬班'</span><br><span class="line">application-label-ky-KG:'柠檬班'</span><br><span class="line">application-label-lo-LA:'柠檬班'</span><br><span class="line">application-label-lt:'柠檬班'</span><br><span class="line">application-label-lv:'柠檬班'</span><br><span class="line">application-label-mk-MK:'柠檬班'</span><br><span class="line">application-label-ml-IN:'柠檬班'</span><br><span class="line">application-label-mn-MN:'柠檬班'</span><br><span class="line">application-label-mr-IN:'柠檬班'</span><br><span class="line">application-label-ms-MY:'柠檬班'</span><br><span class="line">application-label-my-MM:'柠檬班'</span><br><span class="line">application-label-nb:'柠檬班'</span><br><span class="line">application-label-ne-NP:'柠檬班'</span><br><span class="line">application-label-nl:'柠檬班'</span><br><span class="line">application-label-pa-IN:'柠檬班'</span><br><span class="line">application-label-pl:'柠檬班'</span><br><span class="line">application-label-pt:'柠檬班'</span><br><span class="line">application-label-pt-BR:'柠檬班'</span><br><span class="line">application-label-pt-PT:'柠檬班'</span><br><span class="line">application-label-ro:'柠檬班'</span><br><span class="line">application-label-ru:'柠檬班'</span><br><span class="line">application-label-si-LK:'柠檬班'</span><br><span class="line">application-label-sk:'柠檬班'</span><br><span class="line">application-label-sl:'柠檬班'</span><br><span class="line">application-label-sq-AL:'柠檬班'</span><br><span class="line">application-label-sr:'柠檬班'</span><br><span class="line">application-label-sr-Latn:'柠檬班'</span><br><span class="line">application-label-sv:'柠檬班'</span><br><span class="line">application-label-sw:'柠檬班'</span><br><span class="line">application-label-ta-IN:'柠檬班'</span><br><span class="line">application-label-te-IN:'柠檬班'</span><br><span class="line">application-label-th:'柠檬班'</span><br><span class="line">application-label-tl:'柠檬班'</span><br><span class="line">application-label-tr:'柠檬班'</span><br><span class="line">application-label-uk:'柠檬班'</span><br><span class="line">application-label-ur-PK:'柠檬班'</span><br><span class="line">application-label-uz-UZ:'柠檬班'</span><br><span class="line">application-label-vi:'柠檬班'</span><br><span class="line">application-label-zh:'柠檬班'</span><br><span class="line">application-label-zh-CN:'柠檬班'</span><br><span class="line">application-label-zh-HK:'柠檬班'</span><br><span class="line">application-label-zh-TW:'柠檬班'</span><br><span class="line">application-label-zu:'柠檬班'</span><br><span class="line">application-icon-120:'res/mipmap-anydpi-v26/ic_launcher.xml'</span><br><span class="line">application-icon-160:'res/mipmap-anydpi-v26/ic_launcher.xml'</span><br><span class="line">application-icon-240:'res/mipmap-anydpi-v26/ic_launcher.xml'</span><br><span class="line">application-icon-320:'res/mipmap-anydpi-v26/ic_launcher.xml'</span><br><span class="line">application-icon-480:'res/mipmap-anydpi-v26/ic_launcher.xml'</span><br><span class="line">application-icon-640:'res/mipmap-anydpi-v26/ic_launcher.xml'</span><br><span class="line">application-icon-65534:'res/mipmap-anydpi-v26/ic_launcher.xml'</span><br><span class="line">application: label='柠檬班' icon='res/mipmap-anydpi-v26/ic_launcher.xml'</span><br><span class="line">launchable-activity: name='com.lemon.lemonban.activity.WelcomeActivity'  label='' icon=''</span><br><span class="line">feature-group: label=''</span><br><span class="line">  uses-feature: name='android.hardware.bluetooth'</span><br><span class="line">  uses-implied-feature: name='android.hardware.bluetooth' reason='requested android.permission.BLUETOOTH permission, requested android.permission.BLUETOOTH_ADMIN permission, and targetSdkVersion &gt; 4'</span><br><span class="line">  uses-feature: name='android.hardware.camera'</span><br><span class="line">  uses-implied-feature: name='android.hardware.camera' reason='requested android.permission.CAMERA permission'</span><br><span class="line">  uses-feature: name='android.hardware.faketouch'</span><br><span class="line">  uses-implied-feature: name='android.hardware.faketouch' reason='default feature for all apps'</span><br><span class="line">  uses-feature: name='android.hardware.location'</span><br><span class="line">  uses-implied-feature: name='android.hardware.location' reason='requested android.permission.ACCESS_COARSE_LOCATION permission, and requested android.permission.ACCESS_FINE_LOCATION permission'</span><br><span class="line">  uses-feature: name='android.hardware.screen.portrait'</span><br><span class="line">  uses-implied-feature: name='android.hardware.screen.portrait' reason='one or more activities have specified a portrait orientation'</span><br><span class="line">  uses-feature: name='android.hardware.wifi'</span><br><span class="line">  uses-implied-feature: name='android.hardware.wifi' reason='requested android.permission.ACCESS_WIFI_STATE permission, and requested android.permission.CHANGE_WIFI_STATE permission'</span><br><span class="line">main</span><br><span class="line">other-activities</span><br><span class="line">other-receivers</span><br><span class="line">other-services</span><br><span class="line">supports-screens: 'small' 'normal' 'large' 'xlarge'</span><br><span class="line">supports-any-density: 'true'</span><br><span class="line">locales: '--_--' 'af' 'am' 'ar' 'az-AZ' 'be-BY' 'bg' 'bn-BD' 'bs-BA' 'ca' 'cs' 'da' 'de' 'el' 'en-AU' 'en-GB' 'en-IN' 'es' 'es-US' 'et-EE' 'eu-ES' 'fa' 'fi' 'fr' 'fr-CA' 'gl-ES' 'gu-IN' 'hi' 'hr' 'hu' 'hy-AM' 'in' 'is-IS' 'it' 'iw' 'ja' 'ka-GE' 'kk-KZ' 'km-KH' 'kn-IN' 'ko' 'ky-KG' 'lo-LA' 'lt' 'lv' 'mk-MK' 'ml-IN' 'mn-MN' 'mr-IN' 'ms-MY' 'my-MM' 'nb' 'ne-NP' 'nl' 'pa-IN' 'pl' 'pt' 'pt-BR' 'pt-PT' 'ro' 'ru' 'si-LK' 'sk' 'sl' 'sq-AL' 'sr' 'sr-Latn' 'sv' 'sw' 'ta-IN' 'te-IN' 'th' 'tl' 'tr' 'uk' 'ur-PK' 'uz-UZ' 'vi' 'zh' 'zh-CN' 'zh-HK' 'zh-TW' 'zu'</span><br><span class="line">densities: '120' '160' '240' '320' '480' '640' '65534'</span><br><span class="line">(base) zhongxindeMacBook-Pro:~ zhongxin$ </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="代码上连接设备"><a href="#代码上连接设备" class="headerlink" title="代码上连接设备"></a>代码上连接设备</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//配置设备信息</span></span><br><span class="line">        DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">        <span class="comment">//1.设备平台</span></span><br><span class="line">        capabilities.setCapability(<span class="string">"platformName"</span>, <span class="string">"Android"</span>);</span><br><span class="line">        <span class="comment">//2.设备名称</span></span><br><span class="line">        capabilities.setCapability(<span class="string">"deviceName"</span>, <span class="string">"127.0.0.1:62001"</span>);</span><br><span class="line">        <span class="comment">//3.APP包名</span></span><br><span class="line">        capabilities.setCapability(<span class="string">"appPackage"</span>, <span class="string">"com.lemon.lemonban"</span>);</span><br><span class="line">        <span class="comment">//4.App activity名称</span></span><br><span class="line">        capabilities.setCapability(<span class="string">"appActivity"</span>, <span class="string">"com.lemon.lemonban.activity.WelcomeActivity"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(无头浏览器 30)</title>
      <link href="article/133e5506.html"/>
      <url>article/133e5506.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-无头浏览器-30"><a href="#Java自动化测试-无头浏览器-30" class="headerlink" title="Java自动化测试(无头浏览器 30)"></a>Java自动化测试(无头浏览器 30)</h1><h2 id="什么是chrome无头浏览器"><a href="#什么是chrome无头浏览器" class="headerlink" title="什么是chrome无头浏览器"></a>什么是chrome无头浏览器</h2><p>后台运行浏览器</p><h2 id="设置无头浏览器"><a href="#设置无头浏览器" class="headerlink" title="设置无头浏览器"></a>设置无头浏览器</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ChromeOptions chromeOptions = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line">chromeOptions.addArguments(<span class="string">"--headless"</span>);</span><br><span class="line">driver = <span class="keyword">new</span> ChromeDriver(chromeOptions);</span><br></pre></td></tr></tbody></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(web自动化测试框架2 29)</title>
      <link href="article/badd5c71.html"/>
      <url>article/badd5c71.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-web自动化测试框架2-29"><a href="#Java自动化测试-web自动化测试框架2-29" class="headerlink" title="Java自动化测试(web自动化测试框架2 29)"></a>Java自动化测试(web自动化测试框架2 29)</h1><blockquote><p>项目地址:<a href="https://github.com/zx490336534/java_web_base">https://github.com/zx490336534/java_web_base</a></p></blockquote><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhongxin.common.BaseCase;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.OutputType;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.TakesScreenshot;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenShotDemo</span> <span class="keyword">extends</span> <span class="title">BaseCase</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        WebDriver driver = open(<span class="string">"chrome"</span>);</span><br><span class="line">        driver.get(<span class="string">"htts://www.baidu.com"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        TakesScreenshot screenshot = (TakesScreenshot) driver;</span><br><span class="line">        File file = screenshot.getScreenshotAs(OutputType.FILE);</span><br><span class="line">        System.out.println(file.getAbsoluteFile());</span><br><span class="line">        File destFile = <span class="keyword">new</span> File(<span class="string">"aaa.png"</span>);</span><br><span class="line">        FileUtils.moveFile(file, destFile);</span><br><span class="line">        close(driver);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>强制类型转换<code>driver</code></p><p><code>TakesScreenshot screenshot = (TakesScreenshot) driver;</code></p><p>在执行测试的时候，使用截图的场景为：当执行失败的时候进行截图</p><p>需要使用<code>监听</code>，判断执行是否成功</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhongxin.cases.LoginCase;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.common.BaseCase;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.ScreenShotUtils;</span><br><span class="line"><span class="keyword">import</span> org.testng.IHookCallBack;</span><br><span class="line"><span class="keyword">import</span> org.testng.IHookable;</span><br><span class="line"><span class="keyword">import</span> org.testng.ITestResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenShotListener</span> <span class="keyword">implements</span> <span class="title">IHookable</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(IHookCallBack iHookCallBack, ITestResult iTestResult)</span> </span>{</span><br><span class="line">        <span class="comment">// iHookCallBack 用例执行@Test方法的</span></span><br><span class="line">        <span class="comment">// iTestResult @Test方法的结果(@Test对象/方法名/是否抛出异常)</span></span><br><span class="line">        iHookCallBack.runTestMethod(iTestResult);</span><br><span class="line">        Throwable throwable = iTestResult.getThrowable();</span><br><span class="line">        <span class="keyword">if</span> (throwable != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//throwable不等于异常说明@Test出现异常了，执行截图</span></span><br><span class="line">            Object object = iTestResult.getInstance();</span><br><span class="line">            BaseCase logincase = (BaseCase) object;</span><br><span class="line">            <span class="comment">//获取当前@Test方法名</span></span><br><span class="line">            String methodName = iTestResult.getName();</span><br><span class="line">            <span class="comment">//获取当前@Test类名</span></span><br><span class="line">            String className = iTestResult.getInstanceName();</span><br><span class="line">            String destFilename = className + <span class="string">"_"</span> + methodName + <span class="string">"_"</span> + System.currentTimeMillis() + <span class="string">".png"</span>;</span><br><span class="line">            ScreenShotUtils.screenShot(logincase.driver, destFilename);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>testng.xml</code>中添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">suite</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://testng.org/testng-1.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"futureloan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listeners</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"com.zhongxin.listeners.ScreenShotListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listeners</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"登录测试"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhongxin.cases.LoginCase"</span>&gt;</span><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="将截图展示在Allure报告中"><a href="#将截图展示在Allure报告中" class="headerlink" title="将截图展示在Allure报告中"></a>将截图展示在Allure报告中</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhongxin.common.BaseCase;</span><br><span class="line"><span class="keyword">import</span> io.qameta.allure.Attachment;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.OutputType;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.TakesScreenshot;</span><br><span class="line"><span class="keyword">import</span> org.testng.IHookCallBack;</span><br><span class="line"><span class="keyword">import</span> org.testng.IHookable;</span><br><span class="line"><span class="keyword">import</span> org.testng.ITestResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllureReportListener</span> <span class="keyword">implements</span> <span class="title">IHookable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Attachment(value = "Page screenshot", type = "image/png")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] saveScreenshot(<span class="keyword">byte</span>[] screenShot) {</span><br><span class="line">        <span class="keyword">return</span> screenShot;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(IHookCallBack iHookCallBack, ITestResult iTestResult)</span> </span>{</span><br><span class="line">        iHookCallBack.runTestMethod(iTestResult);</span><br><span class="line">        Throwable throwable = iTestResult.getThrowable();</span><br><span class="line">        <span class="keyword">if</span> (throwable != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//throwable不等于异常说明@Test出现异常了，执行截图</span></span><br><span class="line">            Object object = iTestResult.getInstance();</span><br><span class="line">            BaseCase baseCase = (BaseCase) object;</span><br><span class="line">            TakesScreenshot screenshot = (TakesScreenshot) baseCase.driver;</span><br><span class="line">            <span class="keyword">byte</span>[] screenshotAs = screenshot.getScreenshotAs(OutputType.BYTES);</span><br><span class="line">            saveScreenshot(screenshotAs);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>testng.xml</code>中</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listeners</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"com.zhongxin.listeners.AllureReportListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listeners</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.IRetryAnalyzer;</span><br><span class="line"><span class="keyword">import</span> org.testng.ITestResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRetry</span> <span class="keyword">implements</span> <span class="title">IRetryAnalyzer</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> retryCount = <span class="number">0</span>;<span class="comment">//当前重试次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> maxRetryCount = <span class="number">3</span>;<span class="comment">//最大重试次数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retry</span><span class="params">(ITestResult iTestResult)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (retryCount &lt; maxRetryCount) {</span><br><span class="line">            retryCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在测试代码头部增加</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test(retryAnalyzer = MyRetry.class)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="全部添加重试"><a href="#全部添加重试" class="headerlink" title="全部添加重试"></a>全部添加重试</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhongxin.common.BaseCase;</span><br><span class="line"><span class="keyword">import</span> io.qameta.allure.Attachment;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.OutputType;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.TakesScreenshot;</span><br><span class="line"><span class="keyword">import</span> org.testng.IHookCallBack;</span><br><span class="line"><span class="keyword">import</span> org.testng.IHookable;</span><br><span class="line"><span class="keyword">import</span> org.testng.ITestResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllureReportListener</span> <span class="keyword">implements</span> <span class="title">IHookable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Attachment(value = "Page screenshot", type = "image/png")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] saveScreenshot(<span class="keyword">byte</span>[] screenShot) {</span><br><span class="line">        <span class="keyword">return</span> screenShot;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(IHookCallBack iHookCallBack, ITestResult iTestResult)</span> </span>{</span><br><span class="line">        iHookCallBack.runTestMethod(iTestResult);</span><br><span class="line">        Throwable throwable = iTestResult.getThrowable();</span><br><span class="line">        <span class="keyword">if</span> (throwable != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//throwable不等于异常说明@Test出现异常了，执行截图</span></span><br><span class="line">            Object object = iTestResult.getInstance();</span><br><span class="line">            BaseCase baseCase = (BaseCase) object;</span><br><span class="line">            TakesScreenshot screenshot = (TakesScreenshot) baseCase.driver;</span><br><span class="line">            <span class="keyword">byte</span>[] screenshotAs = screenshot.getScreenshotAs(OutputType.BYTES);</span><br><span class="line">            saveScreenshot(screenshotAs);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>testng.xml</code>中</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"com.zhongxin.listeners.RetryListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(web自动化测试框架 28)</title>
      <link href="article/ea141f.html"/>
      <url>article/ea141f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-web自动化测试框架-28"><a href="#Java自动化测试-web自动化测试框架-28" class="headerlink" title="Java自动化测试(web自动化测试框架 28)"></a>Java自动化测试(web自动化测试框架 28)</h1><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><h3 id="测试地址"><a href="#测试地址" class="headerlink" title="测试地址"></a>测试地址</h3><p><a href="http://120.78.128.25:8765/">http://120.78.128.25:8765/</a></p><span id="more"></span><h3 id="投资人"><a href="#投资人" class="headerlink" title="投资人"></a>投资人</h3><p>13323234545</p><p>lemon123456</p><h3 id="借款人"><a href="#借款人" class="headerlink" title="借款人"></a>借款人</h3><p>13323234444</p><p>lemonbest</p><h3 id="后台地址"><a href="#后台地址" class="headerlink" title="后台地址"></a>后台地址</h3><p><a href="http://120.78.128.25:8765/Admin/Index/login.html">http://120.78.128.25:8765/Admin/Index/login.html</a></p><p>lemon7</p><p>lemonbest</p><h2 id="Page-Object"><a href="#Page-Object" class="headerlink" title="Page Object"></a>Page Object</h2><h3 id="PO简介"><a href="#PO简介" class="headerlink" title="PO简介"></a>PO简介</h3><blockquote><p><a href="https://www.selenium.dev/documentation/en/guidelines_and_recommendations/page_object_models/">https://www.selenium.dev/documentation/en/guidelines_and_recommendations/page_object_models/</a></p></blockquote><p><strong>Page Object</strong> 是 Selenium 自动化测试项目开发实践的最佳设计模式之一，Page Object 的主要体现于<strong>对界面交互细节的封装</strong>，这样可以使测试案例更关注与业务而非界面细节，提高测试案例的可读性。</p><p><strong>Page Object 设计模式的优点如下：</strong></p><ul><li>减少代码的重复；</li><li>提高测试用例的可读性；</li><li>提高测试用例的可维护性，特别是针对 UI 频繁变化的项目；</li></ul><p><strong>Paget Object 使用注意：</strong></p><ul><li>public方法代表Page提供的功能</li><li>尽量不要暴露Page的内部细节</li><li>不要assertion</li><li>方法可以返回其他Page Objects</li><li>Page Objects不用代表整个页面，可以是任意一个部分</li><li>一样的操作，不同的结果应该分开（正确登录，错误登录）</li></ul><p>使用po是对页面进行抽象或者说建模的过程，需要把页面当作一个对象。</p><p>面向对象编程语言中，进行面向对象编程需要考虑以下两点：</p><ol><li>对象的属性「全局变量」 == web页面的元素「定位方法，定位值」</li><li>对象的行为「方法」 == web页面的元素的操作</li></ol><h2 id="编写页面操作基类"><a href="#编写页面操作基类" class="headerlink" title="编写页面操作基类"></a>编写页面操作基类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.pages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.By;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebElement;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.ExpectedConditions;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.WebDriverWait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePage</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> WebDriver driver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasePage</span><span class="params">(WebDriver driver)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装显式等待</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 元素定位信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebElement <span class="title">waitElementBisibility</span><span class="params">(By by)</span> </span>{</span><br><span class="line">        WebElement element = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//5秒元素可见显式等待</span></span><br><span class="line">            WebDriverWait wait = <span class="keyword">new</span> WebDriverWait(driver, <span class="number">5</span>);</span><br><span class="line">            element = wait.until(ExpectedConditions.visibilityOfElementLocated(by));</span><br><span class="line">            <span class="keyword">return</span> element;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            System.out.println(<span class="string">"元素定位异常"</span> + e.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="登陆页面封装"><a href="#登陆页面封装" class="headerlink" title="登陆页面封装"></a>登陆页面封装</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.pages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.By;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebElement;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.ExpectedConditions;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.WebDriverWait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginPage</span> <span class="keyword">extends</span> <span class="title">BasePage</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebDriver driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// phone元素定位信息</span></span><br><span class="line">    <span class="keyword">private</span> By phoneBy = By.name(<span class="string">"phone"</span>);</span><br><span class="line">    <span class="comment">//password元素定位信息</span></span><br><span class="line">    <span class="keyword">private</span> By passwordBy = By.name(<span class="string">"password"</span>);</span><br><span class="line">    <span class="comment">//登陆按钮元素定位信息</span></span><br><span class="line">    <span class="keyword">private</span> By loginBtnBy = By.xpath(<span class="string">"//button[@class='btn btn-special']"</span>);</span><br><span class="line">    <span class="comment">//页面中央错误提示</span></span><br><span class="line">    <span class="keyword">private</span> By centerErrorBy = By.className(<span class="string">"layui-layer-content"</span>);</span><br><span class="line">    <span class="comment">//页面手机红色错误提示</span></span><br><span class="line">    <span class="keyword">private</span> By phoneformErrorBy = By.xpath(<span class="string">"//input[@name='phone']//following-sibling::div"</span>);</span><br><span class="line">    <span class="comment">//页面密码红色错误提示</span></span><br><span class="line">    <span class="keyword">private</span> By passwordformErrorBy = By.xpath(<span class="string">"//input[@name='password']//following-sibling::div"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginPage</span><span class="params">(WebDriver driver)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(driver);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对手机框进行输入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputPhone</span><span class="params">(String phone)</span> </span>{</span><br><span class="line">        WebElement element = waitElementBisibility(phoneBy);</span><br><span class="line">        <span class="keyword">if</span> (element != <span class="keyword">null</span>) {</span><br><span class="line">            element.clear();</span><br><span class="line">            element.sendKeys(phone);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对密码框进行输入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputPassword</span><span class="params">(String password)</span> </span>{</span><br><span class="line">        WebElement element = waitElementBisibility(passwordBy);</span><br><span class="line">        <span class="keyword">if</span> (element != <span class="keyword">null</span>) {</span><br><span class="line">            element.clear();</span><br><span class="line">            element.sendKeys(password);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击登陆按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clickLoginBtn</span><span class="params">()</span> </span>{</span><br><span class="line">        WebElement element = waitElementBisibility(loginBtnBy);</span><br><span class="line">        <span class="keyword">if</span> (element != <span class="keyword">null</span>) {</span><br><span class="line">            element.click();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面中央错误提示文本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCenterErrorText</span><span class="params">()</span> </span>{</span><br><span class="line">        WebElement element = waitElementBisibility(centerErrorBy);</span><br><span class="line">        <span class="keyword">if</span> (element != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> element.getText();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面手机红色错误提示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhoneFormErrorText</span><span class="params">()</span> </span>{</span><br><span class="line">        WebElement element = waitElementBisibility(phoneformErrorBy);</span><br><span class="line">        <span class="keyword">if</span> (element != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> element.getText();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面手机红色错误提示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPasswordFormErrorText</span><span class="params">()</span> </span>{</span><br><span class="line">        WebElement element = waitElementBisibility(passwordformErrorBy);</span><br><span class="line">        <span class="keyword">if</span> (element != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> element.getText();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="首页封装"><a href="#首页封装" class="headerlink" title="首页封装"></a>首页封装</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.pages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.By;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebElement;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.WebDriverWait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexPage</span> <span class="keyword">extends</span> <span class="title">BasePage</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> WebDriver driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//昵称</span></span><br><span class="line">    <span class="keyword">private</span> By nicknameBy = By.xpath(<span class="string">"//a[contains(text(),'我的帐户[自动化测试帐号1]')]"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IndexPage</span><span class="params">(WebDriver driver)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(driver);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 昵称是否可见</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">nicknameIsVisibility</span><span class="params">()</span> </span>{</span><br><span class="line">        WebElement element = waitElementBisibility(nicknameBy);</span><br><span class="line">        <span class="keyword">if</span> (element != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> element.isDisplayed();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.cases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhongxin.pages.IndexPage;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.pages.LoginPage;</span><br><span class="line"><span class="keyword">import</span> okio.Timeout;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.*;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.firefox.FirefoxDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.ie.InternetExplorerDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.ExpectedConditions;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.WebDriverWait;</span><br><span class="line"><span class="keyword">import</span> org.testng.Assert;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.AfterClass;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.DataProvider;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginCase</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> WebDriver driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//打开浏览器</span></span><br><span class="line">        driver = open(<span class="string">"chrome"</span>);</span><br><span class="line">        <span class="comment">//访问登陆页面</span></span><br><span class="line">        driver.get(<span class="string">"http://120.78.128.25:8765/Index/login.html"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFailed01</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        LoginPage loginpage = <span class="keyword">new</span> LoginPage(driver);</span><br><span class="line">        loginpage.inputPhone(<span class="string">"13212312312"</span>);</span><br><span class="line">        loginpage.inputPassword(<span class="string">"123123123"</span>);</span><br><span class="line">        loginpage.clickLoginBtn();</span><br><span class="line">        String actual = loginpage.getCenterErrorText();</span><br><span class="line">        String expected = <span class="string">"此账号没有经过授权，请联系管理员!"</span>;</span><br><span class="line">        Assert.assertEquals(actual, expected);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFailed02</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        LoginPage loginpage = <span class="keyword">new</span> LoginPage(driver);</span><br><span class="line">        loginpage.inputPhone(<span class="string">""</span>);</span><br><span class="line">        loginpage.inputPassword(<span class="string">"123123123"</span>);</span><br><span class="line">        loginpage.clickLoginBtn();</span><br><span class="line">        String actual = loginpage.getPhoneFormErrorText();</span><br><span class="line">        String expected = <span class="string">"请输入手机号"</span>;</span><br><span class="line">        Assert.assertEquals(actual, expected);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFailed03</span><span class="params">(String phone, String password, String expected)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        LoginPage loginpage = <span class="keyword">new</span> LoginPage(driver);</span><br><span class="line">        loginpage.inputPhone(phone);</span><br><span class="line">        loginpage.inputPassword(password);</span><br><span class="line">        loginpage.clickLoginBtn();</span><br><span class="line">        String actual = loginpage.getPhoneFormErrorText();</span><br><span class="line">        Assert.assertEquals(actual, expected);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFailed04</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        LoginPage loginpage = <span class="keyword">new</span> LoginPage(driver);</span><br><span class="line">        loginpage.inputPhone(<span class="string">"15859019251"</span>);</span><br><span class="line">        loginpage.inputPassword(<span class="string">""</span>);</span><br><span class="line">        loginpage.clickLoginBtn();</span><br><span class="line">        String actual = loginpage.getPasswordFormErrorText();</span><br><span class="line">        Assert.assertEquals(actual, <span class="string">"请输入密码"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFailed05</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        LoginPage loginpage = <span class="keyword">new</span> LoginPage(driver);</span><br><span class="line">        loginpage.inputPhone(<span class="string">"13323234545"</span>);</span><br><span class="line">        loginpage.inputPassword(<span class="string">"123123123"</span>);</span><br><span class="line">        loginpage.clickLoginBtn();</span><br><span class="line">        String actual = loginpage.getCenterErrorText();</span><br><span class="line">        Assert.assertEquals(actual, <span class="string">"帐号或密码错误!"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuccess</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        LoginPage loginpage = <span class="keyword">new</span> LoginPage(driver);</span><br><span class="line">        loginpage.inputPhone(<span class="string">"13323234545"</span>);</span><br><span class="line">        loginpage.inputPassword(<span class="string">"lemon123456"</span>);</span><br><span class="line">        loginpage.clickLoginBtn();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        IndexPage indexPage = <span class="keyword">new</span> IndexPage(driver);</span><br><span class="line">        <span class="keyword">boolean</span> flag = indexPage.nicknameIsVisibility();</span><br><span class="line">        Assert.assertTrue(flag);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataProvider</span></span><br><span class="line">    <span class="keyword">public</span> Object[][] datas() {</span><br><span class="line">        Object[][] datas = {</span><br><span class="line">                {<span class="string">""</span>, <span class="string">"123123123"</span>, <span class="string">"请输入手机号"</span>},</span><br><span class="line">                {<span class="string">"1585901925"</span>, <span class="string">"123123123"</span>, <span class="string">"请输入正确的手机号"</span>},</span><br><span class="line">                {<span class="string">"158590192534"</span>, <span class="string">"123123123"</span>, <span class="string">"请输入正确的手机号"</span>},</span><br><span class="line">                {<span class="string">"1585901925%"</span>, <span class="string">"123123123"</span>, <span class="string">"请输入正确的手机号"</span>},</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> datas;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//关闭浏览器</span></span><br><span class="line">        close(driver);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        driver.quit();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebDriver <span class="title">open</span><span class="params">(String type)</span> </span>{</span><br><span class="line">        WebDriver driver = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"chrome"</span>.equalsIgnoreCase(type)) {</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, <span class="string">"src/test/resources/chromedriver"</span>);</span><br><span class="line">            driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"ie"</span>.equalsIgnoreCase(type)) {</span><br><span class="line">            <span class="comment">// 设置ie启动项</span></span><br><span class="line">            DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">            <span class="comment">// 忽略缩放</span></span><br><span class="line">            capabilities.setCapability(InternetExplorerDriver.IGNORE_ZOOM_SETTING, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 忽略保护模式</span></span><br><span class="line">            capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 设置初始化浏览器地址</span></span><br><span class="line">            capabilities.setCapability(InternetExplorerDriver.INITIAL_BROWSER_URL, <span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">            <span class="comment">// 配置ie驱动位置</span></span><br><span class="line">            System.setProperty(<span class="string">"webdriver.ie.driver"</span>, <span class="string">"src/test/resources/IEDriverServer.exe"</span>);</span><br><span class="line">            <span class="comment">// 创建ie驱动对象</span></span><br><span class="line">            driver = <span class="keyword">new</span> InternetExplorerDriver();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"firefox"</span>.equalsIgnoreCase(type)) {</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.firefox.bin"</span>, <span class="string">"D:\\Mozilla Firefox\\firefox.exe"</span>);</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.firefox.driver"</span>, <span class="string">"src/test/resources/geckodriver.exe"</span>);</span><br><span class="line">            driver = <span class="keyword">new</span> FirefoxDriver();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(自动化测试背景与流程 27)</title>
      <link href="article/3d748498.html"/>
      <url>article/3d748498.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-自动化测试背景与流程-27"><a href="#Java自动化测试-自动化测试背景与流程-27" class="headerlink" title="Java自动化测试(自动化测试背景与流程 27)"></a>Java自动化测试(自动化测试背景与流程 27)</h1><h2 id="自动化测试背景"><a href="#自动化测试背景" class="headerlink" title="自动化测试背景"></a>自动化测试背景</h2><h3 id="什么是自动化测试"><a href="#什么是自动化测试" class="headerlink" title="什么是自动化测试"></a>什么是自动化测试</h3><p>机器代替手工测试，自动验证结果是否符合预期</p><h3 id="自动化测试优点"><a href="#自动化测试优点" class="headerlink" title="自动化测试优点"></a>自动化测试优点</h3><ol><li>替代大量重复手工测试</li><li>提升回归测试效率，适合敏捷开发</li><li>在非工作时间自动执行，工作时间查看测试报告</li><li>保证每次测试执行的一致性与正确性，避免人为错误</li></ol><h3 id="自动化测试劣势"><a href="#自动化测试劣势" class="headerlink" title="自动化测试劣势"></a>自动化测试劣势</h3><ol><li>一般用于回归测试，项目开发初期不适合使用自动化</li><li>不能全部取代手工测试，只能替代手工测试中机械化，重复度高的操作，自动化测试极少能够达到100%覆盖率</li><li>自动化测试非常脆弱，特别是UI自动化</li><li>自动化测试工作量(框架设计+脚本开发)比单次手工测试大很多，当自动化多次执行时，性价比才会凸显<span id="more"></span><h3 id="自动化测试实施流程"><a href="#自动化测试实施流程" class="headerlink" title="自动化测试实施流程"></a>自动化测试实施流程</h3></li></ol><h3 id="1-评估自动化测试实施可行性"><a href="#1-评估自动化测试实施可行性" class="headerlink" title="1.评估自动化测试实施可行性"></a>1.评估自动化测试实施可行性</h3><p>想要开展自动化测试，应该遵循以下几个前提条件：</p><ol><li>需求稳定，不会频繁变更</li><li>研发和维护周期长，需要频繁执行回归测试</li><li>项目资源足够「人力」</li></ol><h3 id="2-测试需求分析"><a href="#2-测试需求分析" class="headerlink" title="2.测试需求分析"></a>2.测试需求分析</h3><p>自动化测试到底要做到什么程度</p><p>自动化测试覆盖范围：</p><ul><li>主业务流程</li><li>历史BUG较多的模块</li><li>基础重复的功能</li><li>优先级</li></ul><h3 id="3-制定测试计划"><a href="#3-制定测试计划" class="headerlink" title="3.制定测试计划"></a>3.制定测试计划</h3><p>测试工具/框架选型</p><ul><li>接口自动化：TestNG+HttpClient+Maven+Allure+Log4j</li><li>web自动化：TestNG+Selenium</li></ul><p>框架设计，自动化测试脚本开发时间计划表</p><p>脚本执行的策略，冒烟测试/回归测试的频率</p><p>定义自动化测试的输出，测试框架，测试脚本，测试数据，发现的缺陷，测试报告</p><h4 id="测试数据生成"><a href="#测试数据生成" class="headerlink" title="测试数据生成"></a>测试数据生成</h4><ol><li>UI方法：人工方式造数据</li><li>接口方法：效率高 用的最多 有保证的</li><li>数据库：效率高 添加数据影响到其他的数据表 不能确保正确性</li></ol><h3 id="4-搭建自动化测试环境，设计框架"><a href="#4-搭建自动化测试环境，设计框架" class="headerlink" title="4.搭建自动化测试环境，设计框架"></a>4.搭建自动化测试环境，设计框架</h3><h3 id="5-开发自动化测试脚本"><a href="#5-开发自动化测试脚本" class="headerlink" title="5.开发自动化测试脚本"></a>5.开发自动化测试脚本</h3><p>手工测试用例转自动化测试用例的过程</p><h3 id="6-执行自动化测试"><a href="#6-执行自动化测试" class="headerlink" title="6.执行自动化测试"></a>6.执行自动化测试</h3><p>本地执行：IDE调试/执行</p><p>持续集成平台：jenkins</p><h3 id="7-分析自动化测试结果"><a href="#7-分析自动化测试结果" class="headerlink" title="7.分析自动化测试结果"></a>7.分析自动化测试结果</h3><p>自动化用例失败了</p><ul><li>BUG</li><li>脚本设计/稳定性问题</li></ul><h3 id="8-框架-脚本维护"><a href="#8-框架-脚本维护" class="headerlink" title="8.框架/脚本维护"></a>8.框架/脚本维护</h3><p>周期最长</p><ul><li>框架优化</li><li>需求变更</li></ul><h3 id="9-成功展示「落地」"><a href="#9-成功展示「落地」" class="headerlink" title="9.成功展示「落地」"></a>9.成功展示「落地」</h3><ul><li><p>自动化测试用例覆盖，一般为20%的自动化测试，80%的手工测试</p></li><li><p>节省的时间成本：手工测试花费的时间-自动化测试所花的时间</p></li><li><p>自动化测试发现的缺陷数：保证质量，不能保证发现很多BUG</p></li><li><p>自动化测试的投入产出ROI「越高越好」</p></li></ul><p>(手工测试的成本-自动化测试成本)/自动化测试脚本</p><h2 id="自动化测试可以达到100-覆盖率吗"><a href="#自动化测试可以达到100-覆盖率吗" class="headerlink" title="自动化测试可以达到100%覆盖率吗"></a>自动化测试可以达到100%覆盖率吗</h2><p>有些用例场景无法被自动化</p><p>一些验证易用性，友好性，美观的用例不适合做自动化</p><p>有些边缘用例很少被重复执行，从ROI角度考虑不适合做自动化</p>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(特殊元素处理 26)</title>
      <link href="article/e57525d6.html"/>
      <url>article/e57525d6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-特殊元素处理-26"><a href="#Java自动化测试-特殊元素处理-26" class="headerlink" title="Java自动化测试(特殊元素处理 26)"></a>Java自动化测试(特殊元素处理 26)</h1><h2 id="时间控件"><a href="#时间控件" class="headerlink" title="时间控件"></a>时间控件</h2><h3 id="可输入"><a href="#可输入" class="headerlink" title="可输入"></a>可输入</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://www.fliggy.com/?ttid=seo.000000574&amp;seoType=origin"</span>);</span><br><span class="line">WebElement element = driver.findElement(By.xpath(<span class="string">"//div[@class='search-field']//div[@class='calendar-input-wrap']//input[@placeholder='yyyy-mm-dd']"</span>));</span><br><span class="line">element.sendKeys(<span class="string">"aaa"</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gihpdmye9aj312q0hgdj1.jpg" alt="飞猪"></p><h3 id="不可输入"><a href="#不可输入" class="headerlink" title="不可输入"></a>不可输入</h3><p>在<code>html</code>中有<code>readonly</code>的时间控件</p><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gihph1vr9mj318u09kq54.jpg" alt="readonly"></p><h4 id="方案一：在控件弹框中点击"><a href="#方案一：在控件弹框中点击" class="headerlink" title="方案一：在控件弹框中点击"></a>方案一：在控件弹框中点击</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://www.12306.cn/index/"</span>);</span><br><span class="line">driver.findElement(By.id(<span class="string">"train_date"</span>)).click();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">driver.findElement(By.xpath(<span class="string">"//div[@class='cal']//div[8]"</span>)).click();</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gihpe3zbghj318u0nwwo3.jpg" alt="12306"></p><h4 id="方案二：使用js修改页面"><a href="#方案二：使用js修改页面" class="headerlink" title="方案二：使用js修改页面"></a>方案二：使用js修改页面</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://www.12306.cn/index/"</span>);</span><br><span class="line">JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;</span><br><span class="line">jsExecutor.executeScript(<span class="string">"document.getElementById('train_date').removeAttribute('readonly')"</span>);</span><br><span class="line">WebElement train_date = driver.findElement(By.id(<span class="string">"train_date"</span>));</span><br><span class="line">train_date.clear();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">train_date.sendKeys(<span class="string">"2020-11-11"</span>);</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="executeScript定位元素的方法"><a href="#executeScript定位元素的方法" class="headerlink" title="executeScript定位元素的方法"></a>executeScript定位元素的方法</h2><h3 id="不传参"><a href="#不传参" class="headerlink" title="不传参"></a>不传参</h3><p>可以全部使用JavaScript的语法定位</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsExecutor.executeScript(<span class="string">"document.getElementById('train_date').removeAttribute('readonly')"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>也可以使用定位到的元素来进行定位</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://www.12306.cn/index/"</span>);</span><br><span class="line">JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;</span><br><span class="line">WebElement train_date = driver.findElement(By.id(<span class="string">"train_date"</span>));</span><br><span class="line">jsExecutor.executeScript(<span class="string">"arguments[0].removeAttribute('readonly')"</span>, train_date);</span><br></pre></td></tr></tbody></table></figure><p>可以替换多个内容</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsExecutor.executeScript(<span class="string">"arguments[0].removeAttribute(arguments[1])"</span>, train_date, <span class="string">"readonly"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="常见使用场景"><a href="#常见使用场景" class="headerlink" title="常见使用场景"></a>常见使用场景</h2><ul><li>设置，去除元素属性</li><li>页面滚动</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windows.scrollTo(<span class="number">0</span>,<span class="built_in">document</span>.body.scrollHeight) 滚动到页面最底部</span><br><span class="line">Element.scrollIntoViewIfNeeded() 滚动到指定元素的位置</span><br></pre></td></tr></tbody></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="直接输入"><a href="#直接输入" class="headerlink" title="直接输入"></a>直接输入</h3><p>测试页面：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"src/test/resources/file.html"</span>);</span><br><span class="line">driver.findElement(By.id(<span class="string">"file"</span>)).sendKeys(<span class="string">"aaa"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="无法直接输入"><a href="#无法直接输入" class="headerlink" title="无法直接输入"></a>无法直接输入</h3><p>针对不是 input 类型的元素，我们可以使用第三方的自动化工具，比如：Auto，对 windows 控件元素进行操作</p><p>以下是其官网介绍：</p><blockquote><p>AutoIt v3 is a freeware BASIC-like scripting language designed for automating the Windows GUI and general scripting. It uses a combination of simulated keystrokes, mouse movement and window/control manipulation in order to automate tasks in a way not possible or reliable with other languages (e.g. VBScript and SendKeys).</p></blockquote><p>翻译过来就是：</p><p>AutoIT 是类似于 Basic 脚本语言的免费软件，利用它我们可以实现对 windows 的 GUI 界面进行自动化操作，balabala…</p><p>官网地址：<a href="http://testingpai.com/forward?goto=https://www.autoitscript.com/site/autoit/">https://www.autoitscript.com/site/autoit/</a></p><p>强烈建议先去看官方文档：<a href="http://testingpai.com/forward?goto=https://www.autoitscript.com/autoit3/docs/">https://www.autoitscript.com/autoit3/docs/</a>，对工具的使用和脚本编写语法描述的非常详细</p><h4 id="step1：下载安装"><a href="#step1：下载安装" class="headerlink" title="step1：下载安装"></a>step1：下载安装</h4><p>下载页面在这里：<a href="http://testingpai.com/forward?goto=https://www.autoitscript.com/site/autoit/downloads/">https://www.autoitscript.com/site/autoit/downloads/</a></p><p>点击下载即可，下载完下一步直到安装完毕</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gihqb8sqvuj30x409oabh.jpg" alt="image.png"></p><p>安装完毕会有如下几个应用：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gihqbhqtb8j30ah0fw0xb.jpg" alt="image.png"></p><p>其中我们用得到的有：</p><ul><li><strong>AutoIT Window Info</strong> 识别 Windows 元素信息</li><li><strong>Complie Script to .exe</strong> 将 AutoIT 编写的脚本编译成 exe 可执行文件</li><li><strong>Run Script</strong> 运行 AutoIT 脚本</li><li><strong>SciTE Script Editor</strong> 编写 AutoIT 脚本</li></ul><p>注意：官方推荐使用 X86 版本，这样兼容性问题会少些</p><h4 id="step2：使用-AutoIT"><a href="#step2：使用-AutoIT" class="headerlink" title="step2：使用 AutoIT"></a>step2：使用 AutoIT</h4><ol><li>将上传的 Windows 窗口打开</li><li>打开 <strong>AutoIT Window Info</strong> 工具，Finder Tool 下的图标一直按住，选择窗口中要识别的元素（文件名后面的输入框以及打开按钮），分别记录下此时的 Tile、Class 等信息</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gihqbnoravj30x70ikadn.jpg" alt="image.png"></p><ol><li>打开 <strong>SciTE Script Editor</strong>，开始进行脚本编写（注意元素的定位是由 Class 和 Instance 进行拼接的，如 Class 为 Edit，Instance 为 1，那么定位表达式为 Edit1）</li></ol><figure class="highlight vbs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;等待“打开”窗口</span><br><span class="line">WinWaitActive(<span class="string">"打开"</span>)</span><br><span class="line">;休眠<span class="number">2</span>秒</span><br><span class="line">Sleep(<span class="number">2000</span>)</span><br><span class="line">;在输入框中写入上传文件的路径</span><br><span class="line">ControlSetText(<span class="string">"打开"</span>, <span class="string">""</span>, <span class="string">"Edit1"</span>, <span class="string">"d:\java_auto\test.png"</span>)</span><br><span class="line">;休眠<span class="number">2</span>秒</span><br><span class="line">Sleep(<span class="number">2000</span>)</span><br><span class="line">;点击打开按钮</span><br><span class="line">ControlClick(<span class="string">"打开"</span>, <span class="string">""</span>,<span class="string">"Button1"</span>);</span><br></pre></td></tr></tbody></table></figure><ol><li>选择工具栏上面的 Tools-Go 先去运行下脚本，试运行 OK 之后将脚本保存，后缀为 au3</li><li>选择 <strong>Complie Script to .exe</strong> 工具把脚本编译为 exe 文件</li><li>Java 代码本地执行 exe 文件</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ChromeDriver driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">driver.get(<span class="string">"D:\\fileupload.html"</span>);</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">driver.findElement(By.id(<span class="string">"fu"</span>)).click();</span><br><span class="line"><span class="comment">//Java运行时对象</span></span><br><span class="line">Runtime runtime = Runtime.getRuntime();</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    runtime.exec(<span class="string">"D:\\upload.exe"</span>);</span><br><span class="line">}<span class="keyword">catch</span> (IOException e){</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行效果</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gihqbzxqvqg30zv0kkws1.gif" alt="image.png"></p><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><ul><li>去除验证码-测试环境</li><li>自动识别，OCR</li><li>万能验证码，在后端开一个后门</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(特殊元素处理 25)</title>
      <link href="article/ce587615.html"/>
      <url>article/ce587615.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-特殊元素处理-25"><a href="#Java自动化测试-特殊元素处理-25" class="headerlink" title="Java自动化测试(特殊元素处理 25)"></a>Java自动化测试(特殊元素处理 25)</h1><h2 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h2><ol><li>找到下拉框所在元素</li><li>导入<code>import org.openqa.selenium.support.ui.Select;</code></li><li>新建<code>Select</code>对象</li><li>通过<code>getOptions</code>拿到全部选项内容</li><li>通过<code>selectByIndex</code>或者<code>selectByValue</code>或者<code>selectByVisibleText</code>分别以<code>index</code>,<code>value</code>,<code>text</code>来选择</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">WebElement selectElement = driver.findElement(By.id(<span class="string">"modules"</span>));</span><br><span class="line">Select select = <span class="keyword">new</span> Select(selectElement);</span><br><span class="line">List&lt;WebElement&gt; options = select.getOptions();</span><br><span class="line">System.out.println(options);</span><br><span class="line">System.out.println(select.isMultiple());</span><br><span class="line">select.selectByIndex(<span class="number">1</span>);</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">select.selectByValue(<span class="string">"20"</span>);</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">select.selectByVisibleText(<span class="string">"switch"</span>);</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>需要将driver的焦点切换到iframe中</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>页面上从0开始的iframe</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switchTo().frame(index);</span><br></pre></td></tr></tbody></table></figure><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>元素的id名称</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switchTo().frame(nameOrId);</span><br></pre></td></tr></tbody></table></figure><h3 id="iframe-WebElement"><a href="#iframe-WebElement" class="headerlink" title="iframe WebElement"></a>iframe WebElement</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switchTo().frame(WebElement);</span><br></pre></td></tr></tbody></table></figure><h3 id="跳转到父级iframe中"><a href="#跳转到父级iframe中" class="headerlink" title="跳转到父级iframe中"></a>跳转到父级iframe中</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switchTo().parentFrame()</span><br></pre></td></tr></tbody></table></figure><h3 id="回到默认内容页面"><a href="#回到默认内容页面" class="headerlink" title="回到默认内容页面"></a>回到默认内容页面</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switchTo().defaultContent()</span><br></pre></td></tr></tbody></table></figure><h2 id="切换windows窗口"><a href="#切换windows窗口" class="headerlink" title="切换windows窗口"></a>切换windows窗口</h2><p>打开新页面之后需要进行切换才能定位到新页面的内容</p><p>切换需要传入窗口的handle句柄</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switchTo().window(nameOrHandle)</span><br></pre></td></tr></tbody></table></figure><h3 id="获取句柄"><a href="#获取句柄" class="headerlink" title="获取句柄"></a>获取句柄</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.getwindowHandle(); <span class="comment">//获取当前窗口句柄</span></span><br><span class="line">driver.getwindowHandles();<span class="comment">//获取全部窗口句柄</span></span><br></pre></td></tr></tbody></table></figure><h2 id="切换Alart弹框"><a href="#切换Alart弹框" class="headerlink" title="切换Alart弹框"></a>切换Alart弹框</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switchTo().alart()</span><br></pre></td></tr></tbody></table></figure><h3 id="获取弹出框中的提示信息"><a href="#获取弹出框中的提示信息" class="headerlink" title="获取弹出框中的提示信息"></a>获取弹出框中的提示信息</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alart.getText()</span><br></pre></td></tr></tbody></table></figure><h3 id="点击确认按钮"><a href="#点击确认按钮" class="headerlink" title="点击确认按钮"></a>点击确认按钮</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alart.accept()</span><br></pre></td></tr></tbody></table></figure><h3 id="点击取消按钮"><a href="#点击取消按钮" class="headerlink" title="点击取消按钮"></a>点击取消按钮</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alart.dismiss();</span><br></pre></td></tr></tbody></table></figure><h2 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clickAndHold() <span class="comment">//左键点击并且不释放</span></span><br><span class="line">release()      <span class="comment">//在特定元素上释放左键</span></span><br><span class="line">doubleClick()  <span class="comment">//双击左键</span></span><br><span class="line">moveToElement()<span class="comment">//移动鼠标指针到特定元素</span></span><br><span class="line">contextClick() <span class="comment">//在特定元素上右键点击</span></span><br><span class="line">dragAndDrop()  <span class="comment">//拖拽元素</span></span><br><span class="line">perform()      <span class="comment">//执行具体操作，前面方法都是声明操作，调用perform后才会执行</span></span><br></pre></td></tr></tbody></table></figure><p>完成一系列操作：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Actions actions = <span class="keyword">new</span> Actions(driver);</span><br><span class="line">WebElement a = driver.findElement(By.id(<span class="string">"a"</span>));</span><br><span class="line">WebElement b = driver.findElement(By.id(<span class="string">"b"</span>));</span><br><span class="line">actions.clickAndHold(a).moveToElement(b).release().perform();</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(webdriver常用API 24)</title>
      <link href="article/498f9c83.html"/>
      <url>article/498f9c83.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-webdriver常用API-24"><a href="#Java自动化测试-webdriver常用API-24" class="headerlink" title="Java自动化测试(webdriver常用API 24)"></a>Java自动化测试(webdriver常用API 24)</h1><h2 id="元素基本API"><a href="#元素基本API" class="headerlink" title="元素基本API"></a>元素基本API</h2><h3 id="click"><a href="#click" class="headerlink" title="click"></a>click</h3><p>触发当前元素的点击事件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://www.ketangpai.com/"</span>);</span><br><span class="line">WebElement element = driver.findElement(By.xpath(<span class="string">"//a[text()='教师培训']"</span>));</span><br><span class="line">element.click();</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>清空内容</p><h3 id="sendKeys"><a href="#sendKeys" class="headerlink" title="sendKeys"></a>sendKeys</h3><ol><li>往文本框一类元素中写入内容</li><li>按键操作</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.sendKeys(Keys.CONTROL,<span class="string">"a"</span>); <span class="comment">// ctrl+a</span></span><br><span class="line">element.sendKeys(Keys.ENTER); <span class="comment">// 回车</span></span><br><span class="line">element.sendKeys(Keys.BACK_SPACE); <span class="comment">// 删除</span></span><br></pre></td></tr></tbody></table></figure><h3 id="getTagName"><a href="#getTagName" class="headerlink" title="getTagName"></a>getTagName</h3><p>获取元素的标签名</p><h3 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a>getAttribute</h3><p>根据属性名获取元素属性</p><h3 id="getText"><a href="#getText" class="headerlink" title="getText"></a>getText</h3><p>获取当前元素的文本值</p><h3 id="isDisplayed"><a href="#isDisplayed" class="headerlink" title="isDisplayed"></a>isDisplayed</h3><p>查看元素是否显示</p><h3 id="isEnabled"><a href="#isEnabled" class="headerlink" title="isEnabled"></a>isEnabled</h3><p>查看元素是否可用</p><h3 id="isSelected"><a href="#isSelected" class="headerlink" title="isSelected"></a>isSelected</h3><p>查看元素是否选中</p><h2 id="webdriver常用api"><a href="#webdriver常用api" class="headerlink" title="webdriver常用api"></a>webdriver常用api</h2><h3 id="get-String-url"><a href="#get-String-url" class="headerlink" title="get(String url)"></a>get(String url)</h3><p>访问指定url</p><h3 id="getCurrentUrl"><a href="#getCurrentUrl" class="headerlink" title="getCurrentUrl"></a>getCurrentUrl</h3><p>获取当前页面地址</p><h3 id="getTitle"><a href="#getTitle" class="headerlink" title="getTitle"></a>getTitle</h3><p>获取当前页面标题</p><h3 id="getPageSource"><a href="#getPageSource" class="headerlink" title="getPageSource"></a>getPageSource</h3><p>获取当前页面源码</p><h3 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h3><p>关闭驱动对象以及所有相关的窗口</p><h3 id="close"><a href="#close" class="headerlink" title="close"></a>close</h3><p>关闭当前窗口</p><h2 id="navigate对象"><a href="#navigate对象" class="headerlink" title="navigate对象"></a>navigate对象</h2><p>关于浏览器的基本功能操作，大部分由<code>navigate</code>对象提供</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigation navigation = driver.navigation();</span><br></pre></td></tr></tbody></table></figure><h3 id="to"><a href="#to" class="headerlink" title="to"></a>to</h3><p>访问指定的url地址</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigation.to(url);</span><br></pre></td></tr></tbody></table></figure><h3 id="refresh"><a href="#refresh" class="headerlink" title="refresh"></a>refresh</h3><p>刷新当前页面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigation.refresh();</span><br></pre></td></tr></tbody></table></figure><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p>浏览器回退操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigation.back();</span><br></pre></td></tr></tbody></table></figure><h3 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h3><p>浏览器前进操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigation.forward();</span><br></pre></td></tr></tbody></table></figure><h2 id="windows基本操作"><a href="#windows基本操作" class="headerlink" title="windows基本操作"></a>windows基本操作</h2><p>关于窗口的设置，基本都是由windows对象提供的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Window windows = driver.manage().window();</span><br></pre></td></tr></tbody></table></figure><h3 id="maximize"><a href="#maximize" class="headerlink" title="maximize"></a>maximize</h3><p>最大化</p><h3 id="getPostition"><a href="#getPostition" class="headerlink" title="getPostition"></a>getPostition</h3><p>窗口位置</p><h3 id="getSize"><a href="#getSize" class="headerlink" title="getSize"></a>getSize</h3><p>窗口大小</p><h3 id="setPosition"><a href="#setPosition" class="headerlink" title="setPosition"></a>setPosition</h3><p>设置位置</p><h3 id="setSize"><a href="#setSize" class="headerlink" title="setSize"></a>setSize</h3><p>设置窗口大小</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WebDriver.Window window = driver.manage().window();</span><br><span class="line"><span class="comment">// 最大化</span></span><br><span class="line">window.maximize();</span><br><span class="line"><span class="comment">// 全屏</span></span><br><span class="line">window.fullscreen();</span><br><span class="line"><span class="comment">// 获取位置</span></span><br><span class="line">window.getPosition();</span><br><span class="line"><span class="comment">// 获取大小</span></span><br><span class="line">window.getSize();</span><br></pre></td></tr></tbody></table></figure><h2 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h2><h3 id="硬性等待"><a href="#硬性等待" class="headerlink" title="硬性等待"></a>硬性等待</h3><p>单位毫秒</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep()</span><br></pre></td></tr></tbody></table></figure><p>优点：使用简单</p><p>缺点：容易造成时间浪费</p><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>在设置的超时时间范围内不断查找元素，知道找到元素或者超时</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.manage().timeouts().implicitlyWait(<span class="keyword">long</span> time,TimeUnit unit)</span><br></pre></td></tr></tbody></table></figure><p>优点：相对灵活</p><p>缺点：设置是针对全局的，在<code>WebDriver</code>实例整个生命周期有效，但并不是所有的元素都需要等待</p><p>不能适用更复杂的情况如：元素可点击，元素可见</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式等待3秒</span></span><br><span class="line">driver.manage().timeouts().implicitlyWait(<span class="number">3</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></tbody></table></figure><h3 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h3><p>自定义一段代码，用来等待某个条件发生后再继续执行后续代码（如：找到元素，元素可点击，元素已显示）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebDriverWait wait = <span class="keyword">new</span> WebDriverWait(driver, <span class="number">10</span>);</span><br><span class="line">WebElement username = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(<span class="string">"username"</span>)));</span><br></pre></td></tr></tbody></table></figure><p>优点：每隔一段时间扫描一次页面，检查元素是否满足等待结果条件，比如查找元素，则检查元素是存在，不存在则继续等待，直到找到或超时。</p><p>该方法不是全局设置，特定需要等待的元素可以这样设置</p><ul><li>presenceOfElementLocated:页面元素在页面中存在</li><li>visibilityOfElementLocated:页面元素在页面存在并且可见</li><li>elementToBeClickable:页面元素是否在页面上可用和可被点击</li><li>frameToBeAvailableAndSwitchTolt:切换到iframe中，返回boolean类型</li><li>urlContains:当前页面的url包含特定文本</li><li>titleContains:当前页面title包含特定文本</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试 (元素定位 23)</title>
      <link href="article/9e41a6be.html"/>
      <url>article/9e41a6be.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-元素定位-23"><a href="#Java自动化测试-元素定位-23" class="headerlink" title="Java自动化测试 (元素定位 23)"></a>Java自动化测试 (元素定位 23)</h1><h2 id="基础定位方式"><a href="#基础定位方式" class="headerlink" title="基础定位方式"></a>基础定位方式</h2><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>根据id来获取元素，id唯一性</p><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><p>根据元素name熟悉来获取元素，会存在不唯一的情况</p><h3 id="tagName"><a href="#tagName" class="headerlink" title="tagName"></a>tagName</h3><p>根据元素的标签名来获取元素，一般不建议使用</p><h3 id="className"><a href="#className" class="headerlink" title="className"></a>className</h3><p>根据元素的样式名来获取元素，会存在不唯一性，注意复合类名的问题</p><h3 id="linkText"><a href="#linkText" class="headerlink" title="linkText"></a>linkText</h3><span id="more"></span><p>根据超链接的全部文本值来获取元素</p><h3 id="partialLinkText"><a href="#partialLinkText" class="headerlink" title="partialLinkText"></a>partialLinkText</h3><p>根据超链接的部分文本值来获取元素（模糊匹配）</p><h2 id="代码封装"><a href="#代码封装" class="headerlink" title="代码封装"></a>代码封装</h2><p>之后的例子都会使用到<code>open</code>和<code>close</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.By;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebElement;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.firefox.FirefoxDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.ie.InternetExplorerDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLocateApI</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        WebDriver driver = open(<span class="string">"chrome"</span>);</span><br><span class="line">        driver.get(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">        </span><br><span class="line">        close(driver);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        driver.quit();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebDriver <span class="title">open</span><span class="params">(String type)</span> </span>{</span><br><span class="line">        WebDriver driver = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"chrome"</span>.equalsIgnoreCase(type)) {</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, <span class="string">"src/test/resources/chromedriver"</span>);</span><br><span class="line">            driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"ie"</span>.equalsIgnoreCase(type)) {</span><br><span class="line">            <span class="comment">// 设置ie启动项</span></span><br><span class="line">            DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">            <span class="comment">// 忽略缩放</span></span><br><span class="line">            capabilities.setCapability(InternetExplorerDriver.IGNORE_ZOOM_SETTING, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 忽略保护模式</span></span><br><span class="line">            capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 设置初始化浏览器地址</span></span><br><span class="line">            capabilities.setCapability(InternetExplorerDriver.INITIAL_BROWSER_URL, <span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">            <span class="comment">// 配置ie驱动位置</span></span><br><span class="line">            System.setProperty(<span class="string">"webdriver.ie.driver"</span>, <span class="string">"src/test/resources/IEDriverServer.exe"</span>);</span><br><span class="line">            <span class="comment">// 创建ie驱动对象</span></span><br><span class="line">            driver = <span class="keyword">new</span> InternetExplorerDriver();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"firefox"</span>.equalsIgnoreCase(type)) {</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.firefox.bin"</span>, <span class="string">"D:\\Mozilla Firefox\\firefox.exe"</span>);</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.firefox.driver"</span>, <span class="string">"src/test/resources/geckodriver.exe"</span>);</span><br><span class="line">            driver = <span class="keyword">new</span> FirefoxDriver();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="定位相关代码"><a href="#定位相关代码" class="headerlink" title="定位相关代码"></a>定位相关代码</h2><h3 id="通过ID来定位"><a href="#通过ID来定位" class="headerlink" title="通过ID来定位"></a>通过ID来定位</h3><p>推荐！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebElement kw = driver.findElement(By.id(<span class="string">"kw"</span>));</span><br><span class="line">kw.clear();</span><br><span class="line">kw.sendKeys(<span class="string">"Java"</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi8hupqk7lj32140twk1a.jpg" alt="id定位"></p><h3 id="通过name来定位"><a href="#通过name来定位" class="headerlink" title="通过name来定位"></a>通过name来定位</h3><p>推荐！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebElement wd = driver.findElement(By.name(<span class="string">"wd"</span>));</span><br><span class="line">wd.clear();</span><br><span class="line">wd.sendKeys(<span class="string">"Java1"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="通过tagName来定位"><a href="#通过tagName来定位" class="headerlink" title="通过tagName来定位"></a>通过tagName来定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebElement input = driver.findElement(By.tagName(<span class="string">"input"</span>));</span><br><span class="line">input.clear();</span><br><span class="line">input.sendKeys(<span class="string">"Java2"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="通过className来定位"><a href="#通过className来定位" class="headerlink" title="通过className来定位"></a>通过className来定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebElement s_ipt = driver.findElement(By.className(<span class="string">"s_ipt"</span>));</span><br><span class="line">s_ipt.clear();</span><br><span class="line">s_ipt.sendKeys(<span class="string">"Java3"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="通过linkText来定位"><a href="#通过linkText来定位" class="headerlink" title="通过linkText来定位"></a>通过linkText来定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebElement hao123 = driver.findElement(By.linkText(<span class="string">"hao123"</span>));</span><br><span class="line">hao123.click();</span><br></pre></td></tr></tbody></table></figure><h3 id="通过partialLinkText来定位"><a href="#通过partialLinkText来定位" class="headerlink" title="通过partialLinkText来定位"></a>通过partialLinkText来定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebElement hao12 = driver.findElement(By.partialLinkText(<span class="string">"hao12"</span>));</span><br><span class="line">hao12.click();</span><br></pre></td></tr></tbody></table></figure><h2 id="cssSelector元素定位"><a href="#cssSelector元素定位" class="headerlink" title="cssSelector元素定位"></a>cssSelector元素定位</h2><h3 id="根据tagName"><a href="#根据tagName" class="headerlink" title="根据tagName"></a>根据tagName</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">"input"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="根据ID"><a href="#根据ID" class="headerlink" title="根据ID"></a>根据ID</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">"input#id"</span>); <span class="comment">// html标签拼上#id</span></span><br><span class="line">By.cssSelector(<span class="string">"#id"</span>);      <span class="comment">// 仅使用#id</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">"#kw"</span>);   </span><br></pre></td></tr></tbody></table></figure><h3 id="根据className-样式名"><a href="#根据className-样式名" class="headerlink" title="根据className(样式名)"></a>根据className(样式名)</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">".className"</span>);</span><br><span class="line">By.cssSelector(<span class="string">"input.className"</span>); <span class="comment">//标签拼上样式</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">".s_ipt"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="根据元素属性，属性名-属性值，ID，class"><a href="#根据元素属性，属性名-属性值，ID，class" class="headerlink" title="根据元素属性，属性名=属性值，ID，class"></a>根据元素属性，属性名=属性值，ID，class</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">"标签名[属性名='属性值']"</span>);</span><br><span class="line">By.cssSelector(<span class="string">"标签名[属性名1='属性值'][属性2='属性值']"</span>);</span><br><span class="line">By.cssSelector(<span class="string">"input[name='xxx']"</span>); </span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">"input[id='kw']"</span>); </span><br><span class="line">By.cssSelector(<span class="string">"a[href='https://www.hao123.com']['target='_blank]"</span>); </span><br></pre></td></tr></tbody></table></figure><h2 id="Xpath定位"><a href="#Xpath定位" class="headerlink" title="Xpath定位"></a>Xpath定位</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="Xpath-Helper"><a href="#Xpath-Helper" class="headerlink" title="Xpath Helper"></a>Xpath Helper</h4><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g481x1mrsuj327w09a42a.jpg" alt="Xpath定位"></p><p>Xpath定位有很多的优势</p><ol><li>没有id可以进行定位</li><li>需要定位多个符合要求的元素</li></ol><p>使用脚本断点调试定位是否正确是一个方法，当时在我的实际工作中，元素定位代码的封装较深，所以修改查询元素的内容较麻烦，所以直接使用Xpath Helper可以方便的进行开发前的测试。不管是爬虫爬去页面内容还是自动化测试都很实用。</p><p>下面是使用它的方法：</p><h4 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h4><p>使用浏览器自带的定位工具进行元素的定位</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g482366a4qj31b30u0b29.jpg" alt="元素定位"></p><h4 id="初步获取Xpath"><a href="#初步获取Xpath" class="headerlink" title="初步获取Xpath"></a>初步获取Xpath</h4><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4824mj1bbj30wa0lqnhp.jpg" alt="获取Xpath"></p><p>获取到的Xpath为：</p><p><code>//*[@id="dashboard"]/div/div[3]/div[2]/div/div/div/div[2]/div/div[1]/a</code></p><p>这个路径为绝对路径，假如我们需要获取的是一个元素的列表，那就可以进行删减</p><p>将它删减为：<code>//*[@id="dashboard"]/div/div[3]/div//a</code>可以发现页面中标黄的都是定位到的部分内容，「RESULTS(156)」中也可以看到相关结果</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g482a9ttgtj31b30u01kx.jpg" alt="定位元素列表"></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g482bedv5sj30vs06gdge.jpg" alt="RESULTS"></p><p>xpath其实就是一个path(路径),根据元素的路径进行定位</p><h3 id="xpath绝对定位"><a href="#xpath绝对定位" class="headerlink" title="xpath绝对定位"></a>xpath绝对定位</h3><p>从根开始找 <code>/(根目录)</code></p><p><code>/html/body/div/div[3]/a</code></p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>一旦页面结构发生变化，该路径也随之失效，不推荐</p><h2 id="xpath相对定位"><a href="#xpath相对定位" class="headerlink" title="xpath相对定位"></a>xpath相对定位</h2><p><code>//*[@id="kw"]</code></p><p>相对路径以<code>//</code>表示，让xpath从文档的任意符合的元素节点开始进行解析</p><p>路径解析：</p><ul><li><code>//</code>匹配指定节点，不考虑它们位置</li><li><code>*</code>通配符，匹配任意元素节点</li><li><code>@</code>选取属性</li><li><code>[]</code>属性判断条件表达式</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>灵活，方便，耦合性低</p><h3 id="通过元素名定位"><a href="#通过元素名定位" class="headerlink" title="通过元素名定位"></a>通过元素名定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">By.xpath(<span class="string">"//input"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="通过元素名-索引定位"><a href="#通过元素名-索引定位" class="headerlink" title="通过元素名+索引定位"></a>通过元素名+索引定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">By.xpath(<span class="string">"//form/div[1]/input"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="通过元素名-属性定位"><a href="#通过元素名-属性定位" class="headerlink" title="通过元素名+属性定位"></a>通过元素名+属性定位</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">By.xpath(<span class="string">"//*[@name='phone']"</span>);</span><br><span class="line">By.xpath(<span class="string">"//*[contains(@name,'one')]"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="通过元素名-元素的文本内容"><a href="#通过元素名-元素的文本内容" class="headerlink" title="通过元素名+元素的文本内容"></a>通过元素名+元素的文本内容</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">By.xpath(<span class="string">"//*[text()='忘记密码?']"</span>); <span class="comment">// 全匹配</span></span><br><span class="line">By.xpath(<span class="string">"//*[contains(text(),'忘记密码')]"</span>);<span class="comment">// 模糊匹配</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Xpath-轴定位"><a href="#Xpath-轴定位" class="headerlink" title="Xpath 轴定位"></a>Xpath 轴定位</h2><p>当某个元素的各个属性及其组合都不足以定位时，那么可以利用其兄弟节点或父节点等各种可以定位的元素进行定位。</p><ul><li>ancestor：选择当前节点的所有祖先节点</li><li>parent：选取当前节点的父节点</li><li>preceding：选取当前节点之前的所有节点</li><li>preceding-sibling：选取当前节点之前的所有兄弟节点</li><li>following：选取当前节点之后的所有节点</li><li>following-sibling：选取当前节点之后的所有兄弟节点</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/轴名称::节点名称[@属性=值]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">By.xpath(<span class="string">"//div/table//td//preceding::td"</span>);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(selenium 22)</title>
      <link href="article/e4409899.html"/>
      <url>article/e4409899.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-selenium-22"><a href="#Java自动化测试-selenium-22" class="headerlink" title="Java自动化测试(selenium 22)"></a>Java自动化测试(selenium 22)</h1><h2 id="selenium-IDE"><a href="#selenium-IDE" class="headerlink" title="selenium IDE"></a>selenium IDE</h2><p>selenium IDE是一个Firefox/Chrome插件，用于记录和回放用户与浏览器的交互。使用它来创建简单的脚本或协助进行探索性测试。</p><h3 id="下载selenium-IDE"><a href="#下载selenium-IDE" class="headerlink" title="下载selenium IDE"></a>下载selenium IDE</h3><p>下载地址：<a href="https://www.selenium.dev/downloads/">https://www.selenium.dev/downloads/</a></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi4zbe1saij324i0ggmzu.jpg" alt="官网"></p><p>可翻墙的使用chrome浏览器，不可以翻墙的用firefox浏览器</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi51funq5lj31k90u01fe.jpg" alt="chrome商店"></p><span id="more"></span><h3 id="开始使用-录制"><a href="#开始使用-录制" class="headerlink" title="开始使用-录制"></a>开始使用-录制</h3><ol><li>打开Selenium IDE插件</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi4zeq17etj30u011pae1.jpg" alt="selenium IDE"></p><ol start="2"><li>点击<code>Record a new test in a new project</code></li><li>项目名称设置为<code>web-test</code>（任意）</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi4zieh1wuj30js0gi3zm.jpg" alt="项目名称"></p><ol start="4"><li>测试页面选择<code>https://www.baidu.com</code></li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi4zjwvcyrj30js0hujsp.jpg" alt="测试页面"></p><ol start="5"><li>点击<code>Start Recording</code>自动打开页面。右下角有<code>Selenium IDE is recording ...</code>录制中的标记</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi4zkc5o49j31b30u0kjl.jpg" alt="截屏2020-08-27 上午6.51.17"></p><p>6.在该页面上操作后再次点击插件停止录制</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi4zm5dfxpj30u011p77n.jpg" alt="停止录制"></p><p>从图中可以看到，总共操作了7步</p><ul><li>打开浏览器</li><li>设置浏览器大小</li><li>点击输入框</li><li>输入<code>python</code></li><li>点击搜索按钮</li><li>点击搜索结果的第一行</li><li>进入新的弹出页面</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi4znuassvj30s60dat9x.jpg" alt="测试步骤"></p><h3 id="开始使用-执行"><a href="#开始使用-执行" class="headerlink" title="开始使用-执行"></a>开始使用-执行</h3><p>点击播放按钮进行回放</p><p>点击播放速度，降低播放速度，防止出现因为操作过快导致的元素无法找到的问题。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi4zr2w1h0j30u00z1ag1.jpg" alt="执行"></p><h2 id="java-selenium环境搭建"><a href="#java-selenium环境搭建" class="headerlink" title="java selenium环境搭建"></a>java selenium环境搭建</h2><h3 id="chrom浏览器下载"><a href="#chrom浏览器下载" class="headerlink" title="chrom浏览器下载"></a>chrom浏览器下载</h3><p><a href="https://www.chromedownloads.net/chrome64win/">https://www.chromedownloads.net/chrome64win/</a></p><h3 id="Firefox浏览器下载"><a href="#Firefox浏览器下载" class="headerlink" title="Firefox浏览器下载"></a>Firefox浏览器下载</h3><p><a href="http://testingpai.com/forward?goto=http://ftp.mozilla.org/pub/firefox/releases/">http://ftp.mozilla.org/pub/firefox/releases/</a></p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><blockquote><p><a href="https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java/3.141.59">https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java/3.141.59</a></p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.141.59<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><h4 id="IE"><a href="#IE" class="headerlink" title="IE"></a>IE</h4><p>使用 IE 浏览器进行 Web 自动化测试，selenium-java.jar 包和 IE 驱动是同步的(如下图)，所以只需要关注 IE 驱动和 IE 浏览器版本如何搭配。</p><p>如果你使用 ie6、ie7 请使用 selenium 2.42 或者 2.40 版本，也就是图中的版本。如果你使用的 ie8-ie11 推荐使用 2.50 之后的版本。</p><p>镜像地址：<a href="http://testingpai.com/forward?goto=https://npm.taobao.org/mirrors/selenium/">https://npm.taobao.org/mirrors/selenium/</a></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi50b9yjugj30o60hodiq.jpg" alt="下载"></p><h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h4><p>使用 Chrome 浏览器进行 Web 自动化测试，selenium-java.jar 是通用的，只需要关注 Chrome 驱动和 Chrome 浏览器版本是否对应即可。在 70.0.3538.16 之后，Chrome 驱动和 Chrome 浏览器是一一对应。之前的版本会有一个 notes.txt 进行描述（如下图）。</p><p>镜像地址：<a href="http://testingpai.com/forward?goto=https://npm.taobao.org/mirrors/chromedriver/">https://npm.taobao.org/mirrors/chromedriver/</a></p><h4 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h4><p>使用 Firefox 浏览器进行 Web 自动化测试，相对于 IE 和 Chrome 更复杂一些。需要 selenium-java.jar、Firefox 驱动、Firefox 浏览器都匹配。这个匹配关系在 GitHub 上 Firefox 驱动项目 releases 中（如下图）。</p><p>地址：<a href="http://testingpai.com/forward?goto=https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi50cmnswaj30o90ca75f.jpg" alt="对应关系"></p><h3 id="测试Demo-IE"><a href="#测试Demo-IE" class="headerlink" title="测试Demo-IE"></a>测试Demo-IE</h3><p>将Driver放到<code>resources</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.ie.InternetExplorerDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="comment">// 设置ie启动项</span></span><br><span class="line">        DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">        <span class="comment">// 忽略缩放</span></span><br><span class="line">        capabilities.setCapability(InternetExplorerDriver.IGNORE_ZOOM_SETTING, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 忽略保护模式</span></span><br><span class="line">        capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置初始化浏览器地址</span></span><br><span class="line">        capabilities.setCapability(InternetExplorerDriver.INITIAL_BROWSER_URL, <span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">        <span class="comment">// 配置ie驱动位置</span></span><br><span class="line">        System.setProperty(<span class="string">"webdriver.ie.driver"</span>, <span class="string">"src/test/resources/IEDriverServer.exe"</span>);</span><br><span class="line">        <span class="comment">// 创建ie驱动对象</span></span><br><span class="line">        InternetExplorerDriver driver = <span class="keyword">new</span> InternetExplorerDriver();</span><br><span class="line">        <span class="comment">// 打开百度</span></span><br><span class="line">        driver.get(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">        <span class="comment">// 停留3秒</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="comment">// 关闭驱动</span></span><br><span class="line">        driver.quit();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试Demo-Chrome"><a href="#测试Demo-Chrome" class="headerlink" title="测试Demo-Chrome"></a>测试Demo-Chrome</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chrome</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">    System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, <span class="string">"src/test/resources/chromedriver"</span>);</span><br><span class="line">    ChromeDriver driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">    driver.get(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    driver.quit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试Demo-Firefox"><a href="#测试Demo-Firefox" class="headerlink" title="测试Demo-Firefox"></a>测试Demo-Firefox</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">firefox</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">    System.setProperty(<span class="string">"webdriver.firefox.bin"</span>, <span class="string">"D:\\Mozilla Firefox\\firefox.exe"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"webdriver.firefox.driver"</span>, <span class="string">"src/test/resources/geckodriver.exe"</span>);</span><br><span class="line">    FirefoxDriver driver = <span class="keyword">new</span> FirefoxDriver();</span><br><span class="line">    driver.get(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    driver.quit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.firefox.FirefoxDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.ie.InternetExplorerDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        String type = <span class="string">"chrome"</span>;</span><br><span class="line">        WebDriver driver = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"chrome"</span>.equalsIgnoreCase(type)) {</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, <span class="string">"src/test/resources/chromedriver"</span>);</span><br><span class="line">            driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"ie"</span>.equalsIgnoreCase(type)) {</span><br><span class="line">            DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">            capabilities.setCapability(InternetExplorerDriver.IGNORE_ZOOM_SETTING, <span class="keyword">true</span>);</span><br><span class="line">            capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, <span class="keyword">true</span>);</span><br><span class="line">            capabilities.setCapability(InternetExplorerDriver.INITIAL_BROWSER_URL, <span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.ie.driver"</span>, <span class="string">"src/test/resources/IEDriverServer.exe"</span>);</span><br><span class="line">            driver = <span class="keyword">new</span> InternetExplorerDriver();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"firefox"</span>.equalsIgnoreCase(type)) {</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.firefox.bin"</span>, <span class="string">"D:\\Mozilla Firefox\\firefox.exe"</span>);</span><br><span class="line">            System.setProperty(<span class="string">"webdriver.firefox.driver"</span>, <span class="string">"src/test/resources/geckodriver.exe"</span>);</span><br><span class="line">            driver = <span class="keyword">new</span> FirefoxDriver();</span><br><span class="line">        }</span><br><span class="line">        driver.get(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        driver.quit();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(jenkins 21)</title>
      <link href="article/2f8cb43e.html"/>
      <url>article/2f8cb43e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-jenkins-21"><a href="#Java自动化测试-jenkins-21" class="headerlink" title="Java自动化测试(jenkins 21)"></a>Java自动化测试(jenkins 21)</h1><h2 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h2><blockquote><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;album_id=1375914177998733312&amp;__biz=MzU5NTI3NDcxOA==#wechat_redirect">https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;album_id=1375914177998733312&amp;__biz=MzU5NTI3NDcxOA==#wechat_redirect</a></p></blockquote><h2 id="配置Global-Tool-Configuration"><a href="#配置Global-Tool-Configuration" class="headerlink" title="配置Global Tool Configuration"></a>配置Global Tool Configuration</h2><span id="more"></span><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><p>选择本地jdk</p><h3 id="maven安装"><a href="#maven安装" class="headerlink" title="maven安装"></a>maven安装</h3><p>选择本地maven</p><h3 id="Allure-Commandline"><a href="#Allure-Commandline" class="headerlink" title="Allure Commandline"></a>Allure Commandline</h3><p>取个别名</p><p>Install automatically自动安装</p><h2 id="配置Configure-System"><a href="#配置Configure-System" class="headerlink" title="配置Configure System"></a>配置Configure System</h2><p>Extended E-mail Notification-&gt;SMTP server</p><p><code>smtp.163.com</code></p><p>Default user E-mail suffix</p><p><code>@163.com</code></p><p>高级</p><p>Use SMTP Authentication</p><ul><li><code>邮箱地址</code></li><li><code>邮箱授权码</code></li><li><code>use SSL</code></li></ul><h3 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h3><ul><li><p>源码管理         svn</p></li><li><p>构建触发器         Build periodically            定时构建</p></li><li><p>Build            clean test                    </p></li><li><p>构建命令        </p></li><li><p>构建后操作    </p><blockquote><p>Allure report:result 结果路径</p></blockquote></li><li><p>Editable Email Notification</p></li><li><p>Project From                        发件人</p></li><li><p>Project Recipient List                收件人</p></li><li><p>格式：<a href="mailto:xxxx9@qq.com">xxxx9@qq.com</a>,xxx@qq.com</p></li><li><p>Attachments                            附件</p></li><li><p>格式：log/api_auto*.log,src\test\resources\cases_v8.xlsx </p><blockquote><p>*是通配符s</p></blockquote></li></ul><h2 id="Jenkins邮件-模版"><a href="#Jenkins邮件-模版" class="headerlink" title="Jenkins邮件 模版"></a>Jenkins邮件 模版</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>${PROJECT_NAME}-第${BUILD_NUMBER}次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">"8"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">topmargin</span>=<span class="string">"8"</span> <span class="attr">marginheight</span>=<span class="string">"4"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"95%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建信息($BUILD_STATUS)<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称 ： ${PROJECT_NAME}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号 ： 第${BUILD_NUMBER}次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因 ： ${CAUSE}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"${BUILD_URL}console"</span>&gt;</span>${BUILD_URL}console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"${PROJECT_URL}ws"</span>&gt;</span>${PROJECT_URL}ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Allure Report ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"${BUILD_URL}allure"</span>&gt;</span>${BUILD_URL}allure<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建日志(最后100行):<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"80"</span> <span class="attr">rows</span>=<span class="string">"30"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"font-family: Courier New"</span>&gt;</span>${BUILD_LOG, maxLines=100}<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghumhmb0l1j31da0u0jzk.jpg" alt="image-20200818074316555"></p><h3 id="输入代码路径"><a href="#输入代码路径" class="headerlink" title="输入代码路径"></a>输入代码路径</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghumimf0ugj315j0u0tdd.jpg" alt="image-20200818074416810"></p>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(mock 21)</title>
      <link href="article/15e929aa.html"/>
      <url>article/15e929aa.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-mock-21"><a href="#Java自动化测试-mock-21" class="headerlink" title="Java自动化测试(mock 21)"></a>Java自动化测试(mock 21)</h1><blockquote><p>mock测试就是在测试过程中，对于某些不容易构造或者不容易获取的对象，用一个虚拟的对象来创建以便测试的测试方法。</p></blockquote><h2 id="mock测试环境"><a href="#mock测试环境" class="headerlink" title="mock测试环境"></a>mock测试环境</h2><blockquote><p><a href="https://www.easy-mock.com/login">https://www.easy-mock.com/login</a></p><p><a href="https://github.com/easy-mock/easy-mock">https://github.com/easy-mock/easy-mock</a></p></blockquote><p>Easy Mock 是一个可视化，并且能快速生成<strong>模拟数据</strong>的持久化服务。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><span id="more"></span><ul><li>支持接口代理</li><li>支持快捷键操作</li><li>支持协同编辑</li><li>支持团队项目</li><li>支持 RESTful</li><li>支持 <a href="https://swagger.io/">Swagger</a> | OpenAPI Specification (<a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/1.2.md">1.2</a> &amp; <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md">2.0</a> &amp; <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md">3.0</a>)<ul><li>基于 Swagger 快速创建项目</li><li>支持显示接口入参与返回值</li><li>支持显示实体类</li></ul></li><li>支持灵活性与扩展性更高的响应式数据开发</li><li>支持自定义响应配置（例：status/headers/cookies）</li><li>支持 <a href="http://mockjs.com/">Mock.js</a> 语法</li><li>支持 <a href="https://github.com/ElemeFE/restc">restc</a> 方式的接口预览</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr9bt1oycj31b30u0kjo.jpg" alt="登陆"></p><h2 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h2><blockquote><p><a href="https://github.com/dreamhead/moco">https://github.com/dreamhead/moco</a></p></blockquote><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lemon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>moco-runner<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 文件拷贝时的编码 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 编译时的编码 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.dreamhead<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>moco-runner<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="runner-java"><a href="#runner-java" class="headerlink" title="runner.java"></a>runner.java</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lemon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.dreamhead.moco.bootstrap.Main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> </span>{</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      test9();</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="comment">// get http://localhost:12306/</span></span><br><span class="line">      String[] args = <span class="string">"http -p 12306 -c src/test/resources/foo.json"</span>.split(<span class="string">" "</span>);</span><br><span class="line">      Main.main(args);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="comment">// get http://localhost:12306/ body foo</span></span><br><span class="line">      String[] args = <span class="string">"http -p 12307 -c src/test/resources/foo2.json"</span>.split(<span class="string">" "</span>);</span><br><span class="line">      Main.main(args);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="comment">// get http://localhost:12306/getBoy?name=onecoder</span></span><br><span class="line">      String[] args = <span class="string">"http -p 12306 -c src/test/resources/foo3.json"</span>.split(<span class="string">" "</span>);</span><br><span class="line">      Main.main(args);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="comment">// post http://localhost:12306/getBoy body name=onecoder</span></span><br><span class="line">      String[] args = <span class="string">"http -p 12306 -c src/test/resources/foo4.json"</span>.split(<span class="string">" "</span>);</span><br><span class="line">      Main.main(args);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="comment">// get http://localhost:12306/template?name=123 返回 123</span></span><br><span class="line">      String[] args = <span class="string">"http -p 12306 -c src/test/resources/foo5.json"</span>.split(<span class="string">" "</span>);</span><br><span class="line">      Main.main(args);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="comment">// get http://localhost:12306/template?name=123 返回 123</span></span><br><span class="line">      String[] args = <span class="string">"http -p 12306 -c src/test/resources/foo6.json"</span>.split(<span class="string">" "</span>);</span><br><span class="line">      Main.main(args);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="comment">// get http://localhost:12306/template?name=123 返回 123</span></span><br><span class="line">      String[] args = <span class="string">"http -p 12306 -c src/test/resources/foo7.json"</span>.split(<span class="string">" "</span>);</span><br><span class="line">      Main.main(args);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="comment">// get http://localhost:12306/template?name=123 返回 123</span></span><br><span class="line">      String[] args = <span class="string">"http -p 12306 -c src/test/resources/foo8.json"</span>.split(<span class="string">" "</span>);</span><br><span class="line">      Main.main(args);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="comment">// get http://localhost:12306/template?name=123 返回 123</span></span><br><span class="line">      String[] args = <span class="string">"http -p 12306 -c src/test/resources/foo9.json"</span>.split(<span class="string">" "</span>);</span><br><span class="line">      Main.main(args);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><ul><li><code>foo1.json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"response"</span> :</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"text"</span> : <span class="string">"Hello, Moco"</span></span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">] </span><br></pre></td></tr></tbody></table></figure><ul><li><code>foo2.json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[{</span><br><span class="line">  <span class="attr">"request"</span> : { <span class="attr">"text"</span> : <span class="string">"foo"</span> },</span><br><span class="line">  <span class="attr">"response"</span> : {  <span class="attr">"xml"</span> : <span class="string">"bar"</span> }</span><br><span class="line">}]</span><br></pre></td></tr></tbody></table></figure><ul><li><code>foo3.json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[{</span><br><span class="line">   <span class="attr">"request"</span>: {</span><br><span class="line">      <span class="attr">"uri"</span>: <span class="string">"/getBoy"</span>,</span><br><span class="line">      <span class="attr">"queries"</span>: {</span><br><span class="line">         <span class="attr">"name"</span>: <span class="string">"onecoder"</span></span><br><span class="line">      }</span><br><span class="line">   },</span><br><span class="line">   <span class="attr">"response"</span>: {</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"get Hey."</span></span><br><span class="line">   }</span><br><span class="line">}]</span><br></pre></td></tr></tbody></table></figure><ul><li><code>foo4.json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   {</span><br><span class="line">      <span class="attr">"request"</span>: {</span><br><span class="line">         <span class="attr">"method"</span>: <span class="string">"post"</span>,</span><br><span class="line">         <span class="attr">"forms"</span>: {</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"onecoder"</span></span><br><span class="line">         }</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"response"</span>: {</span><br><span class="line">         <span class="attr">"text"</span>: <span class="string">"post Hi."</span></span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><ul><li><code>foo5.json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   {</span><br><span class="line">      <span class="attr">"request"</span>: {</span><br><span class="line">         <span class="attr">"uri"</span>: <span class="string">"/template"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"response"</span>: {</span><br><span class="line">         <span class="attr">"text"</span>: {</span><br><span class="line">            <span class="attr">"template"</span>: <span class="string">"aaaaaaaa${req.queries['name']}bbbbbbb"</span></span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><ul><li><code>foo6.json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   {</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"带header请求"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: {</span><br><span class="line">         <span class="attr">"uri"</span>: <span class="string">"/member/register"</span>,</span><br><span class="line">         <span class="attr">"method"</span>: <span class="string">"post"</span>,</span><br><span class="line">         <span class="attr">"headers"</span>: {</span><br><span class="line">            <span class="attr">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">         },</span><br><span class="line">         <span class="attr">"json"</span>: {</span><br><span class="line">            <span class="attr">"mobile_phone"</span>: <span class="string">"13212312312"</span>,</span><br><span class="line">            <span class="attr">"pwd"</span>: <span class="string">"12345678"</span></span><br><span class="line">         }</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"response"</span>: {</span><br><span class="line">         <span class="attr">"json"</span>: {</span><br><span class="line">            <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">            <span class="attr">"data"</span>: {</span><br><span class="line">               <span class="attr">"id"</span>: <span class="number">189</span>,</span><br><span class="line">               <span class="attr">"reg_name"</span>: <span class="string">"小柠檬"</span>,</span><br><span class="line">               <span class="attr">"mobile_phone"</span>: <span class="string">"13212312312"</span></span><br><span class="line">            }</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><ul><li><code>foo7.json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   {</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"这是一个带cookies的Post请求"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: {</span><br><span class="line">         <span class="attr">"uri"</span>: <span class="string">"/postDemoWithCookies"</span>,</span><br><span class="line">         <span class="attr">"method"</span>: <span class="string">"post"</span>,</span><br><span class="line">         <span class="attr">"cookies"</span>: {</span><br><span class="line">            <span class="attr">"login"</span>: <span class="string">"true"</span></span><br><span class="line">         }</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"response"</span>: {</span><br><span class="line">         <span class="attr">"status"</span>: <span class="string">"200"</span>,</span><br><span class="line">         <span class="attr">"json"</span>: {</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"success"</span>,</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"1"</span></span><br><span class="line">         },</span><br><span class="line">         <span class="attr">"cookies"</span>: {</span><br><span class="line">            <span class="attr">"JSESSIONID"</span>: <span class="string">"123"</span></span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><ul><li><code>foo8.json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   {</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"充值"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: {</span><br><span class="line">         <span class="attr">"uri"</span>: <span class="string">"/member/recharge"</span>,</span><br><span class="line">         <span class="attr">"method"</span>: <span class="string">"post"</span>,</span><br><span class="line">         <span class="attr">"headers"</span>: {</span><br><span class="line">            <span class="attr">"X-Lemonban-Media-Type"</span>: <span class="string">"lemonban.v2"</span>,</span><br><span class="line">            <span class="attr">"Authorization"</span> : <span class="string">"Bearer Token"</span>,</span><br><span class="line">            <span class="attr">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">         },</span><br><span class="line">         <span class="attr">"json"</span>: {</span><br><span class="line">            <span class="attr">"member_id"</span>: <span class="string">"123"</span>,</span><br><span class="line">            <span class="attr">"amount"</span>: <span class="string">"4000"</span></span><br><span class="line">         }</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"response"</span>: {</span><br><span class="line">         <span class="attr">"json"</span>: {</span><br><span class="line">            <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">            <span class="attr">"data"</span>: {</span><br><span class="line">               <span class="attr">"id"</span>: <span class="number">123</span>,</span><br><span class="line">               <span class="attr">"leave_amount"</span>: <span class="number">1800000.01</span> ,</span><br><span class="line">               <span class="attr">"mobile_phone"</span>: <span class="string">"13888888879"</span>,</span><br><span class="line">               <span class="attr">"reg_name"</span>: <span class="string">"小柠檬"</span>,</span><br><span class="line">               <span class="attr">"reg_time"</span>: <span class="string">"2019-08-25 21:18:30.0"</span>,</span><br><span class="line">               <span class="attr">"type"</span>: <span class="number">1</span></span><br><span class="line">            }</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><ul><li><code>foo9.json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   {</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"登录"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: {</span><br><span class="line">         <span class="attr">"uri"</span>: <span class="string">"/member/login"</span>,</span><br><span class="line">         <span class="attr">"method"</span>: <span class="string">"post"</span>,</span><br><span class="line">         <span class="attr">"headers"</span>: {</span><br><span class="line">            <span class="attr">"X-Lemonban-Media-Type"</span>: <span class="string">"lemonban.v2"</span>,</span><br><span class="line">            <span class="attr">"content-type"</span>: <span class="string">"application/json;charset=utf-8"</span></span><br><span class="line">         },</span><br><span class="line">         <span class="attr">"json"</span>: {</span><br><span class="line">            <span class="attr">"mobile_phone"</span>: <span class="string">"13212312312"</span>,</span><br><span class="line">            <span class="attr">"pwd"</span>: <span class="string">"12345678"</span></span><br><span class="line">         }</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"response"</span>: {</span><br><span class="line">         <span class="attr">"json"</span>: {</span><br><span class="line">            <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">            <span class="attr">"data"</span>: {</span><br><span class="line">               <span class="attr">"id"</span>: <span class="number">70362</span>,</span><br><span class="line">               <span class="attr">"leave_amount"</span>: <span class="number">0.0</span>,</span><br><span class="line">               <span class="attr">"mobile_phone"</span>: <span class="string">"13212312312"</span>,</span><br><span class="line">               <span class="attr">"reg_name"</span>: <span class="string">"小柠檬"</span>,</span><br><span class="line">               <span class="attr">"reg_time"</span>: <span class="string">"2019-12-19 21:12:21.0"</span>,</span><br><span class="line">               <span class="attr">"type"</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="attr">"token_info"</span>: {</span><br><span class="line">                  <span class="attr">"token_type"</span>: <span class="string">"Bearer"</span>,</span><br><span class="line">                  <span class="attr">"expires_in"</span>: <span class="string">"2019-12-19 21:17:23"</span>,</span><br><span class="line">                  <span class="attr">"token"</span>: <span class="string">"eyJhbGciOiJIUzUxMiJ9.eyJtZW1iZXJfaWQiOjg5ODU4LCJleHAiOjE1NzY3NjE0NDN9.ZJKz-aOxWtCQakvhOfRjTSTA_K7amiKe0e9wpaF9lpzKQaTZiVjsoUDmpA2DCKtIdMyaQ4QYWWybP1ZD5QDVWQ"</span></span><br><span class="line">               }</span><br><span class="line">            },</span><br><span class="line">            <span class="attr">"copyright"</span>: <span class="string">"Copyright 柠檬班 © 2017-2019 湖南省零檬信息技术有限公司 All Rights Reserved"</span></span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(allure 20)</title>
      <link href="article/34a48abe.html"/>
      <url>article/34a48abe.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-allure-20"><a href="#Java自动化测试-allure-20" class="headerlink" title="Java自动化测试(allure 20)"></a>Java自动化测试(allure 20)</h1><p>allure官网：</p><blockquote><p><a href="https://docs.qameta.io/allure/">https://docs.qameta.io/allure/</a></p></blockquote><span id="more"></span><h2 id="在项目中导入-testng-和-allure2-坐标和对应设置"><a href="#在项目中导入-testng-和-allure2-坐标和对应设置" class="headerlink" title="在项目中导入 testng 和 allure2 坐标和对应设置"></a>在项目中导入 testng 和 allure2 坐标和对应设置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件拷贝时的编码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编译时的编码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- testng maven坐标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- allure2 maven坐标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.qameta.allure<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>allure-testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="加入-maven-surefire-plugin-插件并进行配置"><a href="#加入-maven-surefire-plugin-插件并进行配置" class="headerlink" title="加入 maven-surefire-plugin 插件并进行配置"></a>加入 maven-surefire-plugin 插件并进行配置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- maven-surefire-plugin 配合testng/junit执行测试用例的maven插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 测试失败后，是否忽略并继续测试 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- testng配置文件名称  --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">suiteXmlFile</span>&gt;</span>testng.xml<span class="tag">&lt;/<span class="name">suiteXmlFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置参数命令行 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">argLine</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- UTF-8编码 --&gt;</span></span><br><span class="line">                    -Dfile.encoding=UTF-8</span><br><span class="line">                    <span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line">                    -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"</span><br><span class="line">                <span class="tag">&lt;/<span class="name">argLine</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 配置 allure 结果存储路径  --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">name</span>&gt;</span>allure.results.directory<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>${project.build.directory}/allure-results<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- aspectjweaver maven坐标 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aspectj.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><blockquote><p><a href="https://github.com/zx490336534/auto_api/blob/master/pom.xml">https://github.com/zx490336534/auto_api/blob/master/pom.xml</a></p></blockquote><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr81tq3x2j30pk0mmgn4.jpg" alt="执行内容"></p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>首先双击<code>clean</code>进行清理</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr85wj06pj326u0nedkg.jpg" alt="清理结果"></p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>双击<code>test</code>开始执行测试</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr86tuurxj326s0n6gql.jpg" alt="测试结果"></p><h3 id="测试结果存放"><a href="#测试结果存放" class="headerlink" title="测试结果存放"></a>测试结果存放</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr87o08abj30hu0kgabn.jpg" alt="allure-results"></p><h3 id="报告生成"><a href="#报告生成" class="headerlink" title="报告生成"></a>报告生成</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr891wjjyj31p00l279l.jpg" alt="安装插件"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn io.qameta.allure:allure-maven:serve</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8axs20lj326s0n40zt.jpg" alt="报告"></p><p>会自动打开报告页面</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8b88b6xj31d90u0gv6.jpg" alt="报告"></p><h2 id="报告查看"><a href="#报告查看" class="headerlink" title="报告查看"></a>报告查看</h2><h3 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h3><p>在右下角有个按钮可以切换语言</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8c3ay1bj30i00eogm3.jpg" alt="切换语言"></p><h3 id="查看测试汇总"><a href="#查看测试汇总" class="headerlink" title="查看测试汇总"></a>查看测试汇总</h3><p>可以在<code>总览</code>页面查看测试执行通过情况，测试环境，前后运行的<code>趋势</code>，当前的运行器</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8cp17d1j31nq0u0wk7.jpg" alt="测试汇总"></p><h3 id="查看各个测试的情况"><a href="#查看各个测试的情况" class="headerlink" title="查看各个测试的情况"></a>查看各个测试的情况</h3><p>在<code>测试套</code>中可以查看对应接口的测试情况，可以查看它的参数化构建</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8dxgm9fj30w10u0tf8.jpg" alt="测试套"></p><h3 id="查看耗时情况"><a href="#查看耗时情况" class="headerlink" title="查看耗时情况"></a>查看耗时情况</h3><p>在<code>时间刻度</code>中可以看到每个接口执行的耗时情况</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8eqwxtxj327u0negod.jpg" alt="耗时"></p><h3 id="查看执行顺序"><a href="#查看执行顺序" class="headerlink" title="查看执行顺序"></a>查看执行顺序</h3><p>在<code>功能</code>页面可以查看脚本执行顺序</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8fejn3mj30w00u0gx9.jpg" alt="执行顺序"></p><h2 id="报告内容拓展"><a href="#报告内容拓展" class="headerlink" title="报告内容拓展"></a>报告内容拓展</h2><h3 id="用例描述"><a href="#用例描述" class="headerlink" title="用例描述"></a>用例描述</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test(dataProvider = "datas", description = "管理员用户信息查询")</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8n99eozj319c0pon42.jpg" alt="标题修改"></p><h3 id="用例步骤"><a href="#用例步骤" class="headerlink" title="用例步骤"></a>用例步骤</h3><p>在测试代码前增加<code>Step</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Step("Type {caseInfo.id} - {caseInfo.url}")</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8o821c3j31d40u0du7.jpg" alt="测试步骤"></p><h2 id="报表断言"><a href="#报表断言" class="headerlink" title="报表断言"></a>报表断言</h2><p>新增两个常量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ASSERT_SUCCESS = <span class="string">"PASSED"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ASSERT_FAILED = <span class="string">"FAILED"</span>;</span><br></pre></td></tr></tbody></table></figure><p>在测试的最后一行增加：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(assertResult, Constants.ASSERT_SUCCESS);</span><br></pre></td></tr></tbody></table></figure><h3 id="增加断言后重新执行"><a href="#增加断言后重新执行" class="headerlink" title="增加断言后重新执行"></a>增加断言后重新执行</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghr8zivup9j31d90u0qcn.jpg" alt="测试结果"></p><p>后续和Jenkins组合执行可以看到测试趋势</p>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(参数化 19)</title>
      <link href="article/65eed160.html"/>
      <url>article/65eed160.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-参数化-19"><a href="#Java自动化测试-参数化-19" class="headerlink" title="Java自动化测试(参数化 19)"></a>Java自动化测试(参数化 19)</h1><h2 id="测试数据修改"><a href="#测试数据修改" class="headerlink" title="测试数据修改"></a>测试数据修改</h2><p>使用占位符来替代参数，可以在代码中动态修改它的值。</p><p>修改前测试参数：</p><span id="more"></span><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{<span class="attr">"mobile_phone"</span>:<span class="string">"13212332111"</span>,<span class="attr">"pwd"</span>:<span class="string">"12345678"</span>}</span><br></pre></td></tr></tbody></table></figure><p>测试参数</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{<span class="attr">"mobile_phone"</span>:<span class="string">"${register_md}"</span>,<span class="attr">"pwd"</span>:<span class="string">"${register_pwd}"</span>}</span><br></pre></td></tr></tbody></table></figure><p>测试SQL</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"select count(*) from member a where a.mobile_phone = '${register_mb}';"</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="Maven导入测试数据生成"><a href="#Maven导入测试数据生成" class="headerlink" title="Maven导入测试数据生成"></a>Maven导入测试数据生成</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-testdata-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="随机测试参数生成"><a href="#随机测试参数生成" class="headerlink" title="随机测试参数生成"></a>随机测试参数生成</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.binarywang.tools.generator.ChineseMobileNumberGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserData</span> </span>{</span><br><span class="line">    <span class="comment">// 存储接口响应对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; VARS = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 存储默认请求头</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; DEFAULT_HEADERS = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="comment">// 静态代码：类在加载时会自动加载一次此代码</span></span><br><span class="line">        DEFAULT_HEADERS.put(<span class="string">"X-Lemonban-Media-Type"</span>, <span class="string">"lemonban.v2"</span>);</span><br><span class="line">        DEFAULT_HEADERS.put(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把需要参数化的数据存储到VARS</span></span><br><span class="line">        <span class="comment">// 随机手机号码</span></span><br><span class="line">        VARS.put(<span class="string">"${register_mb}"</span>, ChineseMobileNumberGenerator.getInstance().generate());</span><br><span class="line">        VARS.put(<span class="string">"${register_pwd}"</span>, <span class="string">"12345678"</span>);</span><br><span class="line">        VARS.put(<span class="string">"${amount}"</span>, <span class="string">"5000"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="测试前的参数替换"><a href="#测试前的参数替换" class="headerlink" title="测试前的参数替换"></a>测试前的参数替换</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramsReplace</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">        Set&lt;String&gt; keySet = UserData.VARS.keySet();</span><br><span class="line">        String params = caseInfo.getParams();</span><br><span class="line">        String sql = caseInfo.getSql();</span><br><span class="line">        String expectedResult = caseInfo.getExpectedResult();</span><br><span class="line">        String url = caseInfo.getUrl();</span><br><span class="line">        <span class="keyword">for</span> (String placeHolder : keySet) {</span><br><span class="line">            String value = UserData.VARS.get(placeHolder).toString();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(params)) {</span><br><span class="line">                params = params.replace(placeHolder, value);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(sql)) {</span><br><span class="line">                sql = sql.replace(placeHolder, value);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(expectedResult)) {</span><br><span class="line">                expectedResult = expectedResult.replace(placeHolder, value);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(url)) {</span><br><span class="line">                url = url.replace(placeHolder, value);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        caseInfo.setParams(params);</span><br><span class="line">        caseInfo.setSql(sql);</span><br><span class="line">        caseInfo.setExpectedResult(expectedResult);</span><br><span class="line">        caseInfo.setUrl(url);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="Maven中导入异常排除"><a href="#Maven中导入异常排除" class="headerlink" title="Maven中导入异常排除"></a>Maven中导入异常排除</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用常量替代"><a href="#使用常量替代" class="headerlink" title="使用常量替代"></a>使用常量替代</h2><blockquote><p>final修饰变量，变量成为常量，常量只能赋值一次。</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应数据回写列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PESPONSE_CELL_NUM = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 断言数据回写列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ASSERT_CELL_NUM = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 用例文件路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCEL_PATH = <span class="string">"src/test/resources/cases_v3.xlsx"</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>部分可能会变更的数据写入到<code>Constants</code>类中定义为一个常量</p><h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><h3 id="引入Maven"><a href="#引入Maven" class="headerlink" title="引入Maven"></a>引入Maven</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="定义输出"><a href="#定义输出" class="headerlink" title="定义输出"></a>定义输出</h3><p><code>src/test/resources/log4j.properties</code></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">INFO,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span> = <span class="string">%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span> = <span class="string">log/api_auto.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.Append</span> = <span class="string">false</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span> = <span class="string">%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n</span></span><br></pre></td></tr></tbody></table></figure><h3 id="定义logger"><a href="#定义logger" class="headerlink" title="定义logger"></a>定义logger</h3><p><code>src/test/java/com/zhongxin/utils/HttpUtils.java</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(HttpUtils.class);</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(statusCode);</span><br></pre></td></tr></tbody></table></figure><h3 id="测试日志打印"><a href="#测试日志打印" class="headerlink" title="测试日志打印"></a>测试日志打印</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghov2juqpuj30xi07mgml.jpg" alt="打印"></p>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(数据库断言 18)</title>
      <link href="article/bfb7ec4.html"/>
      <url>article/bfb7ec4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-数据库断言-18"><a href="#Java自动化测试-数据库断言-18" class="headerlink" title="Java自动化测试(数据库断言 18)"></a>Java自动化测试(数据库断言 18)</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库，简而言之可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据进行新增、截取、更新、删除等操作。<br>所谓“数据库”是以一定方式储存在一起、能与多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。</p><h2 id="JDBC-驱动程序"><a href="#JDBC-驱动程序" class="headerlink" title="JDBC 驱动程序"></a>JDBC 驱动程序</h2><p>JDBC(java database connectivity)驱动程序是对 JDBC 规范完整的实现，它的存在在 Java 程序与数据库系统之间建立了一条通信的渠道。</p><span id="more"></span><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DBUtils封装了JDBC的操作，核心功能如下：</span><br><span class="line">1、QueryRunner中提供对sql语句操作的API.</span><br><span class="line">2、ResultSetHandler接口，用于定义select操作后，怎样封装结果集.</span><br><span class="line">3、DbUtils类是一个工具类，定义了关闭资源与事务处理的方法</span><br><span class="line">QueryRunner核心类：</span><br><span class="line">update(Connection conn, String sql, Object... params) ，执行insert update delete操作</span><br><span class="line">query(Connection conn, String sql, ResultSetHandler&lt;T&gt; rsh, Object... params) ，执行 select操作</span><br></pre></td></tr></tbody></table></figure><h2 id="Maven中配置DBUtils"><a href="#Maven中配置DBUtils" class="headerlink" title="Maven中配置DBUtils"></a>Maven中配置DBUtils</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql数据库驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接工具包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="数据库连接工具类"><a href="#数据库连接工具类" class="headerlink" title="数据库连接工具类"></a>数据库连接工具类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//定义数据库连接</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://api.lemonban.com:3306/futureloan?useUnicode=true&amp;characterEncoding=utf-8"</span>;</span><br><span class="line">        String user = <span class="string">"future"</span>;</span><br><span class="line">        String password = <span class="string">"123456"</span>;</span><br><span class="line">        <span class="comment">//定义数据库连接对象</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//你导入的数据库驱动包， mysql。</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                conn.close();</span><br><span class="line">            } <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">    QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    String sql = <span class="string">"UPDATE member SET leave_amount=100 WHERE id=2073699;"</span>;</span><br><span class="line">    Connection conn = JDBCUtils.getConnection();</span><br><span class="line">    <span class="keyword">int</span> count = runner.update(conn, sql);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    JDBCUtils.close(conn);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">    QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    String sql = <span class="string">"INSERT INTO member VALUES(NULL,'zhong','123456','15168230600,1,100,NOW());"</span>;</span><br><span class="line">    Connection conn = JDBCUtils.getConnection();</span><br><span class="line">    <span class="keyword">int</span> count = runner.update(conn, sql);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    JDBCUtils.close(conn);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从上可以看出，更新和插入的区别就在<code>SQL</code>语句不同</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="通过MapHandler查询"><a href="#通过MapHandler查询" class="headerlink" title="通过MapHandler查询"></a>通过MapHandler查询</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    String sql = <span class="string">"select * from member where id=2073699"</span>;</span><br><span class="line">    Connection conn = JDBCUtils.getConnection();</span><br><span class="line">    MapHandler handler = <span class="keyword">new</span> MapHandler();</span><br><span class="line">    Map&lt;String, Object&gt; map = runner.query(conn, sql, handler);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    JDBCUtils.close(conn);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghmjvze2zej326w0b2taq.jpg" alt="数据查询"></p><h3 id="定义一个数据对象"><a href="#定义一个数据对象" class="headerlink" title="定义一个数据对象"></a>定义一个数据对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String reg_name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> String mobile_phone;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal leave_amount;</span><br><span class="line">    <span class="keyword">private</span> Timestamp reg_time;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Member{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", reg_name='"</span> + reg_name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mobile_phone='"</span> + mobile_phone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", type="</span> + type +</span><br><span class="line">                <span class="string">", leave_amount="</span> + leave_amount +</span><br><span class="line">                <span class="string">", reg_time="</span> + reg_time +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getReg_name</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> reg_name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReg_name</span><span class="params">(String reg_name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.reg_name = reg_name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobile_phone</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> mobile_phone;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobile_phone</span><span class="params">(String mobile_phone)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.mobile_phone = mobile_phone;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getLeave_amount</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> leave_amount;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeave_amount</span><span class="params">(BigDecimal leave_amount)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.leave_amount = leave_amount;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Timestamp <span class="title">getReg_time</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> reg_time;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReg_time</span><span class="params">(Timestamp reg_time)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.reg_time = reg_time;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="通过BeanHandler获取"><a href="#通过BeanHandler获取" class="headerlink" title="通过BeanHandler获取"></a>通过BeanHandler获取</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beanHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">"select * from member where id=2073699"</span>;</span><br><span class="line">        Connection conn = JDBCUtils.getConnection();</span><br><span class="line">        BeanHandler&lt;Member&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Member.class);</span><br><span class="line">        Member m = runner.query(conn, sql, handler);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        JDBCUtils.close(conn);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghmk20hmtnj326s07yabw.jpg" alt="查询结果"></p><h3 id="通过BeanListHandler查询"><a href="#通过BeanListHandler查询" class="headerlink" title="通过BeanListHandler查询"></a>通过BeanListHandler查询</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    String sql = <span class="string">"select * from member"</span>;</span><br><span class="line">    Connection conn = JDBCUtils.getConnection();</span><br><span class="line">    BeanListHandler&lt;Member&gt; handler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Member.class);</span><br><span class="line">    List&lt;Member&gt; list = runner.query(conn, sql, handler);</span><br><span class="line">    <span class="keyword">for</span> (Member member : list) {</span><br><span class="line">        System.out.println(member);</span><br><span class="line">    }</span><br><span class="line">    JDBCUtils.close(conn);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="通过ScalarHandler查询"><a href="#通过ScalarHandler查询" class="headerlink" title="通过ScalarHandler查询"></a>通过ScalarHandler查询</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scalarHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">    QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    String sql = <span class="string">"select count(*) from member where id=2073699"</span>;</span><br><span class="line">    Connection conn = JDBCUtils.getConnection();</span><br><span class="line">    ScalarHandler&lt;Long&gt; handler = <span class="keyword">new</span> ScalarHandler&lt;&gt;();</span><br><span class="line">    Long count = runner.query(conn, sql, handler);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    JDBCUtils.close(conn);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数据库断言"><a href="#数据库断言" class="headerlink" title="数据库断言"></a>数据库断言</h2><p>从excel中读取sql语句</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getSingleResult</span><span class="params">(String sql)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(sql)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 1. 定义返回值</span></span><br><span class="line">    Object result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 2. 创建DBUtils sql语句操作类</span></span><br><span class="line">        Connection conn = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">// 3. 获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        <span class="comment">// 4. 创建ScalarHandler，针对单行单列的数据</span></span><br><span class="line">        ScalarHandler handler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">        <span class="comment">// 5. 执行sql语句</span></span><br><span class="line">        result = runner.query(conn, sql, handler);</span><br><span class="line">        <span class="comment">// 6. 关闭数据库连接</span></span><br><span class="line">        JDBCUtils.close(conn);</span><br><span class="line">    } <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="对注册进行数据库断言"><a href="#对注册进行数据库断言" class="headerlink" title="对注册进行数据库断言"></a>对注册进行数据库断言</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">    Long beforeSQLresult = (Long) SQLUtils.getSingleResult(caseInfo.getSql());</span><br><span class="line">    String responseBody = HttpUtils.call(caseInfo, UserData.DEFAULT_HEADERS);</span><br><span class="line">    responseAssert(caseInfo.getExpectedResult(), responseBody);</span><br><span class="line">    addWriteBackData(sheetIndex, caseInfo.getId(), <span class="number">8</span>, responseBody);</span><br><span class="line">    Long afterSQLresult = (Long) SQLUtils.getSingleResult(caseInfo.getSql());</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNoneBlank(caseInfo.getSql())) {</span><br><span class="line">        <span class="keyword">if</span> (beforeSQLresult == <span class="number">0</span> &amp;&amp; afterSQLresult == <span class="number">1</span>) {</span><br><span class="line">            System.out.println(<span class="string">"数据库断言成功"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"数据库断言失败"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="对充值进行数据库断言"><a href="#对充值进行数据库断言" class="headerlink" title="对充值进行数据库断言"></a>对充值进行数据库断言</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">    BigDecimal beforeSQLresult = (BigDecimal) SQLUtils.getSingleResult(caseInfo.getSql());</span><br><span class="line">    HashMap&lt;String, String&gt; headers = getAuthorizationHeader();</span><br><span class="line">    String responseBody = HttpUtils.call(caseInfo, headers);</span><br><span class="line">    responseAssert(caseInfo.getExpectedResult(), responseBody);</span><br><span class="line">    addWriteBackData(sheetIndex, caseInfo.getId(), <span class="number">8</span>, responseBody);</span><br><span class="line">    BigDecimal afterSQLresult = (BigDecimal) SQLUtils.getSingleResult(caseInfo.getSql());</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(caseInfo.getSql())) {</span><br><span class="line">        String amountStr = JSONPath.read(caseInfo.getParams(), <span class="string">"$.amount"</span>).toString();</span><br><span class="line">        BigDecimal amout = <span class="keyword">new</span> BigDecimal(amountStr);</span><br><span class="line">        BigDecimal subtractResult = afterSQLresult.subtract(beforeSQLresult);</span><br><span class="line">        <span class="comment">// compareTo == 0 =&gt; 相等</span></span><br><span class="line">        <span class="keyword">if</span> (subtractResult.compareTo(amout) == <span class="number">0</span>) {</span><br><span class="line">            System.out.println(<span class="string">"数据库断言成功"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"数据库断言失败"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(回写与断言 17)</title>
      <link href="article/34770ee9.html"/>
      <url>article/34770ee9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-回写与断言-17"><a href="#Java自动化测试-回写与断言-17" class="headerlink" title="Java自动化测试(回写与断言 17)"></a>Java自动化测试(回写与断言 17)</h1><h2 id="回写"><a href="#回写" class="headerlink" title="回写"></a>回写</h2><p>将测试结果写回到Excel中</p><h3 id="定义回写数据对象"><a href="#定义回写数据对象" class="headerlink" title="定义回写数据对象"></a>定义回写数据对象</h3><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteBackData</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sheetIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rowNum;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cellNum;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WriteBackData</span><span class="params">(<span class="keyword">int</span> sheetIndex, <span class="keyword">int</span> rowNum, <span class="keyword">int</span> cellNum, String content)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.sheetIndex = sheetIndex;</span><br><span class="line">        <span class="keyword">this</span>.rowNum = rowNum;</span><br><span class="line">        <span class="keyword">this</span>.cellNum = cellNum;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WriteBackData</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"WriteBackData{"</span> +</span><br><span class="line">                <span class="string">"sheetIndex="</span> + sheetIndex +</span><br><span class="line">                <span class="string">", rowNum="</span> + rowNum +</span><br><span class="line">                <span class="string">", cellNum="</span> + cellNum +</span><br><span class="line">                <span class="string">", content='"</span> + content + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSheetIndex</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> sheetIndex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSheetIndex</span><span class="params">(<span class="keyword">int</span> sheetIndex)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.sheetIndex = sheetIndex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRowNum</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> rowNum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRowNum</span><span class="params">(<span class="keyword">int</span> rowNum)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.rowNum = rowNum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCellNum</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> cellNum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCellNum</span><span class="params">(<span class="keyword">int</span> cellNum)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.cellNum = cellNum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="批量回写操作代码"><a href="#批量回写操作代码" class="headerlink" title="批量回写操作代码"></a>批量回写操作代码</h3><p>使用到类似之前Excel到写入操作代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">batchWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    <span class="comment">//回写的逻辑：遍历wdbList集合，取出sheetIndex,rowNum,cellNum,content</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"src/test/resources/cases_v3.xlsx"</span>);</span><br><span class="line">    Workbook sheets = WorkbookFactory.create(fis);</span><br><span class="line">    <span class="keyword">for</span> (WriteBackData wdb : wdbList) {</span><br><span class="line">        <span class="keyword">int</span> sheetIndex = wdb.getSheetIndex();</span><br><span class="line">        <span class="keyword">int</span> rowNum = wdb.getRowNum();</span><br><span class="line">        <span class="keyword">int</span> cellNum = wdb.getCellNum();</span><br><span class="line">        String content = wdb.getContent();</span><br><span class="line"></span><br><span class="line">        Sheet sheet = sheets.getSheetAt(sheetIndex);</span><br><span class="line">        Row row = sheet.getRow(rowNum);</span><br><span class="line">        Cell cell = row.getCell(cellNum, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);</span><br><span class="line">        cell.setCellValue(content);</span><br><span class="line">    }</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/resources/cases_v3.xlsx"</span>);</span><br><span class="line">    sheets.write(fos);</span><br><span class="line">    fis.close();</span><br><span class="line">    fos.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>com.zhongxin.utils.ExcelUtils</code>中需要增加一个<code>wdbList</code>，用于存储运行测试时候每次产生的结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;WriteBackData&gt; wdbList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><h3 id="case中新增写入测试结果"><a href="#case中新增写入测试结果" class="headerlink" title="case中新增写入测试结果"></a>case中新增写入测试结果</h3><p>每个case执行的最后阶段增加</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WriteBackData wdb = <span class="keyword">new</span> WriteBackData(sheetIndex, caseInfo.getId(), <span class="number">8</span>, responseBody);</span><br><span class="line">ExcelUtils.wdbList.add(wdb);</span><br></pre></td></tr></tbody></table></figure><h3 id="全部测试完成后批量写入结果"><a href="#全部测试完成后批量写入结果" class="headerlink" title="全部测试完成后批量写入结果"></a>全部测试完成后批量写入结果</h3><p>使用注解<code>AfterSuite</code>在全部测试结束后将结果写入Excel</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterSuite</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    ExcelUtils.batchWrite();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="提取父类"><a href="#提取父类" class="headerlink" title="提取父类"></a>提取父类</h2><p>将共性代码放到父类<code>BaseCase</code>中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.cases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhongxin.pojo.WriteBackData;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.ExcelUtils;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.AfterSuite;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Parameters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseCase</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sheetIndex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="meta">@Parameters({"sheetIndex"})</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">(<span class="keyword">int</span> sheetIndex)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.sheetIndex = sheetIndex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加回写对象到回写集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWriteBackData</span><span class="params">(<span class="keyword">int</span> sheetIndex, <span class="keyword">int</span> rowNum, <span class="keyword">int</span> cellNum, String content)</span> </span>{</span><br><span class="line">        WriteBackData wdb = <span class="keyword">new</span> WriteBackData(sheetIndex, rowNum, cellNum, content);</span><br><span class="line">        ExcelUtils.wdbList.add(wdb);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterSuite</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        ExcelUtils.batchWrite();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="提取responseBody参数到UserData中的封装"><a href="#提取responseBody参数到UserData中的封装" class="headerlink" title="提取responseBody参数到UserData中的封装"></a>提取responseBody参数到UserData中的封装</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从responseBody 通过Jsonpath取出对应参数，存到UserData中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getParams</span><span class="params">(String responseBody, String jsonPathExpression, String userDataKey)</span> </span>{</span><br><span class="line">    Object token = JSONPath.read(responseBody, jsonPathExpression);</span><br><span class="line">    <span class="keyword">if</span> (token != <span class="keyword">null</span>) {</span><br><span class="line">        UserData.VARS.put(userDataKey, token);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="提取返回鉴权头"><a href="#提取返回鉴权头" class="headerlink" title="提取返回鉴权头"></a>提取返回鉴权头</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> HashMap&lt;String, String&gt; <span class="title">getAuthorizationHeader</span><span class="params">()</span> </span>{</span><br><span class="line">    Object token = UserData.VARS.get(<span class="string">"${token}"</span>);</span><br><span class="line">    HashMap&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    headers.put(<span class="string">"Authorization"</span>, <span class="string">"Bearer "</span> + token);</span><br><span class="line">    headers.putAll(UserData.DEFAULT_HEADERS);</span><br><span class="line">    <span class="keyword">return</span> headers;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口响应断言</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expectedResult 断言的期望值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> responseBody   接口响应内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 接口响应断言结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">responseAssert</span><span class="params">(String expectedResult, String responseBody)</span> </span>{</span><br><span class="line">    Map&lt;String, Object&gt; map = JSONObject.parseObject(expectedResult, Map.class);</span><br><span class="line">    Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">    <span class="keyword">boolean</span> reponseAssertFlag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (String actualExpression : keySet) {</span><br><span class="line">        Object expectedValue = map.get(actualExpression);</span><br><span class="line">        Object actualValue = JSONPath.read(responseBody, actualExpression);</span><br><span class="line">        <span class="keyword">if</span> (!expectedValue.equals(actualValue)) {</span><br><span class="line">            reponseAssertFlag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"断言结果:"</span> + reponseAssertFlag);</span><br><span class="line">    <span class="keyword">return</span> reponseAssertFlag;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(接口鉴权 16)</title>
      <link href="article/dfff3da2.html"/>
      <url>article/dfff3da2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-接口鉴权-16"><a href="#Java自动化测试-接口鉴权-16" class="headerlink" title="Java自动化测试(接口鉴权 16)"></a>Java自动化测试(接口鉴权 16)</h1><h2 id="参数化2"><a href="#参数化2" class="headerlink" title="参数化2"></a>参数化2</h2><p>在<code>testng.xml</code>中增加<code>parameter</code>可以赋值给DataProvider</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"sheetIndex"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>测试代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterCase</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sheetIndex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="meta">@Parameters({"sheetIndex"})</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">(<span class="keyword">int</span> sheetIndex)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.sheetIndex = sheetIndex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">        HttpUtils.call(caseInfo);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataProvider</span></span><br><span class="line">    <span class="keyword">public</span> Object[] datas() {</span><br><span class="line">        List list = ExcelUtils.read(<span class="keyword">this</span>.sheetIndex, <span class="number">1</span>, CaseInfo.class);</span><br><span class="line">        <span class="keyword">return</span> list.toArray();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>class中定义一个int对象<code>sheetIndex</code></p><p>在<code>BeforeClass</code>中拿到<code>testng.xml</code>里面的<code>Parameters</code></p><p>将它赋值给我们刚定义的int对象，然后在<code>DataProvider</code>中使用即可。</p><blockquote><p>修改的代码提交：</p><p><a href="https://github.com/zx490336534/auto_api/commit/ee6da5809c98396373ec29a8b6a3980bcde5d172">https://github.com/zx490336534/auto_api/commit/ee6da5809c98396373ec29a8b6a3980bcde5d172</a></p></blockquote><h2 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h2><blockquote><p>Cookie，有时也用其复数形式 Cookies。类型为“<strong>小型文本文件</strong>”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。</p></blockquote><p>存储在客户端(我们的电脑上)</p><p>打开浏览器，打开F12，进入<code>Application</code>可以看到Cookies</p><blockquote><p>Expires/Max-Age：存活时间</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghgpntoa1ij327u0rggzm.jpg" alt="cookies"></p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><blockquote><p>Session：在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web页时，如果该用户还没有会话，则Web服务器将自动创建一个 Session对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在Session对象中。有关使用Session 对象的详细信息，请参阅“ASP应用程序”部分的“管理会话”。注意会话状态仅在支持cookie的浏览器中保留。</p></blockquote><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><blockquote><p>Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p></blockquote><p>Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，这样的背景下，Token便应运而生。Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p><p>​    </p><h2 id="接口文档鉴权部分"><a href="#接口文档鉴权部分" class="headerlink" title="接口文档鉴权部分"></a>接口文档鉴权部分</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghgpl0e9qtj315j0u04kz.jpg" alt="鉴权1"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghgpldt1zqj31dg0skqgg.jpg" alt="鉴权2"></p><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>将三个请求的方法最后的<code>printResponse(response)</code>返回出来</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> printResponse(response);</span><br></pre></td></tr></tbody></table></figure><h3 id="定义一个存储的类"><a href="#定义一个存储的类" class="headerlink" title="定义一个存储的类"></a>定义一个存储的类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserData</span> </span>{</span><br><span class="line">    <span class="comment">// 存储接口响应对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; VARS = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="从登陆接口获取token"><a href="#从登陆接口获取token" class="headerlink" title="从登陆接口获取token"></a>从登陆接口获取token</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">    String responseBody = HttpUtils.call(caseInfo);</span><br><span class="line">    Object token = JSONPath.read(responseBody, <span class="string">"$.data.token_info.token"</span>);</span><br><span class="line">    Object memberId = JSONPath.read(responseBody, <span class="string">"$.data.id"</span>);</span><br><span class="line">    <span class="keyword">if</span> (token != <span class="keyword">null</span>) {</span><br><span class="line">        UserData.VARS.put(<span class="string">"${token}"</span>, token);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (memberId != <span class="keyword">null</span>) {</span><br><span class="line">        UserData.VARS.put(<span class="string">"${member_id}"</span>, memberId);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="存储类中添加默认头"><a href="#存储类中添加默认头" class="headerlink" title="存储类中添加默认头"></a>存储类中添加默认头</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储默认请求头</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; DEFAULT_HEADERS = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> {</span><br><span class="line">    <span class="comment">// 静态代码：类在加载时会自动加载一次此代码</span></span><br><span class="line">    DEFAULT_HEADERS.put(<span class="string">"X-Lemonban-Media-Type"</span>, <span class="string">"lemonban.v2"</span>);</span><br><span class="line">    DEFAULT_HEADERS.put(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="修改http请求代码"><a href="#修改http请求代码" class="headerlink" title="修改http请求代码"></a>修改http请求代码</h3><p>将<code>headers</code>直接传入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">call</span><span class="params">(CaseInfo caseInfo, Map&lt;String, String&gt; headers)</span> </span>{</span><br><span class="line">    String responseBody = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        String params = caseInfo.getParams();</span><br><span class="line">        String url = caseInfo.getUrl();</span><br><span class="line">        String method = caseInfo.getMethod();</span><br><span class="line">        String contentType = caseInfo.getContentType();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"form"</span>.equals(contentType)) {</span><br><span class="line">            params = jsonStr2KeyValueStr(params);</span><br><span class="line">            headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"post"</span>.equals(method)) {</span><br><span class="line">            responseBody = HttpUtils.post(url, params, headers);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"get"</span>.equals(method)) {</span><br><span class="line">            responseBody = HttpUtils.get(url, headers);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"patch"</span>.equals(method)) {</span><br><span class="line">            responseBody = HttpUtils.patch(url, params, headers);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> responseBody;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="修改旧注册http请求"><a href="#修改旧注册http请求" class="headerlink" title="修改旧注册http请求"></a>修改旧注册http请求</h3><p>传入默认头部信息<code>UserData.DEFAULT_HEADERS</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">    HttpUtils.call(caseInfo, UserData.DEFAULT_HEADERS);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="充值接口实现"><a href="#充值接口实现" class="headerlink" title="充值接口实现"></a>充值接口实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.cases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONPath;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.pojo.CaseInfo;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.ExcelUtils;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.HttpUtils;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.UserData;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.DataProvider;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Parameters;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 充值接口测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RechargeCase</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sheetIndex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="meta">@Parameters({"sheetIndex"})</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">(<span class="keyword">int</span> sheetIndex)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.sheetIndex = sheetIndex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">        Object token = UserData.VARS.get(<span class="string">"${token}"</span>);</span><br><span class="line">        HashMap&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        headers.put(<span class="string">"Authorization"</span>, <span class="string">"Bearer "</span> + token);</span><br><span class="line">        headers.putAll(UserData.DEFAULT_HEADERS);</span><br><span class="line">        HttpUtils.call(caseInfo, headers);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataProvider</span></span><br><span class="line">    <span class="keyword">public</span> Object[] datas() {</span><br><span class="line">        List list = ExcelUtils.read(<span class="keyword">this</span>.sheetIndex, <span class="number">1</span>, CaseInfo.class);</span><br><span class="line">        <span class="keyword">return</span> list.toArray();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(接口操作优化 15)</title>
      <link href="article/90b4c76.html"/>
      <url>article/90b4c76.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-接口操作优化-15"><a href="#Java自动化测试-接口操作优化-15" class="headerlink" title="Java自动化测试(接口操作优化 15)"></a>Java自动化测试(接口操作优化 15)</h1><h2 id="设置头部部分代码提取"><a href="#设置头部部分代码提取" class="headerlink" title="设置头部部分代码提取"></a>设置头部部分代码提取</h2><p>由于发起post请求的时候，它可能为json格式，也可能为form表单格式。所以对他进行提取</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(String url, String params, Map&lt;String, String&gt; headers)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    HttpPost post = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">    setHeaders(headers, post);</span><br><span class="line">    StringEntity body = <span class="keyword">new</span> StringEntity(params, <span class="string">"utf-8"</span>);</span><br><span class="line">    post.setEntity(body);</span><br><span class="line">    HttpClient client = HttpClients.createDefault();</span><br><span class="line">    HttpResponse response = client.execute(post);</span><br><span class="line">    printResponse(response);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>接收一个<code>Map&lt;String, String&gt; headers</code></p><p>遍历这个Map对象，将它一个个通过<code>setHeader</code>写入到headers中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置请求头</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headers 包含了请求头的Map集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 请求类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHeaders</span><span class="params">(Map&lt;String, String&gt; headers, HttpRequest request)</span> </span>{</span><br><span class="line">    Set&lt;String&gt; keySet = headers.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keySet) {</span><br><span class="line">        request.setHeader(key, headers.get(key));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="测试代码修改"><a href="#测试代码修改" class="headerlink" title="测试代码修改"></a>测试代码修改</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        HashMap&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        headers.put(<span class="string">"X-Lemonban-Media-Type"</span>, <span class="string">"lemonban.v1"</span>);</span><br><span class="line">        String contentType = caseInfo.getContentType();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"json"</span>.equals(contentType)) {</span><br><span class="line">            headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"form"</span>.equals(contentType)) {</span><br><span class="line">            headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"post"</span>.equals(caseInfo.getMethod())) {</span><br><span class="line">            HttpUtils.post(caseInfo.getUrl(), caseInfo.getParams(), headers);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"get"</span>.equals(caseInfo.getMethod())) {</span><br><span class="line">            HttpUtils.get(caseInfo.getUrl(), headers);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"patch"</span>.equals(caseInfo.getMethod())) {</span><br><span class="line">            HttpUtils.patch(caseInfo.getUrl(), caseInfo.getParams(), headers);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改headers代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">headers.put(<span class="string">"X-Lemonban-Media-Type"</span>, <span class="string">"lemonban.v1"</span>);</span><br><span class="line">String contentType = caseInfo.getContentType();</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"json"</span>.equals(contentType)) {</span><br><span class="line">    headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"form"</span>.equals(contentType)) {</span><br><span class="line">    headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>先定义了一个空的<code>HashMap</code></p><p>然后根据测试数据，往它里面插入头部信息。</p><h2 id="修改form"><a href="#修改form" class="headerlink" title="修改form"></a>修改form</h2><p>当传入的内容是json格式，但是传入方式为form的时候，会出现异常。需要将json转换为form格式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"json"</span>.equals(contentType)) {</span><br><span class="line">    headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"form"</span>.equals(contentType)) {</span><br><span class="line">    Map&lt;String, String&gt; map = JSONObject.parseObject(params, Map.class);</span><br><span class="line">    String formParams = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (String key : map.keySet()) {</span><br><span class="line">        formParams += key + <span class="string">"="</span> + map.get(key) + <span class="string">"&amp;"</span>;</span><br><span class="line">    }</span><br><span class="line">    params = formParams.substring(<span class="number">0</span>, formParams.length() - <span class="number">1</span>);</span><br><span class="line">    headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="代码提取"><a href="#代码提取" class="headerlink" title="代码提取"></a>代码提取</h2><p>将整个操作提取为一个<code>call</code>函数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        HashMap&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        headers.put(<span class="string">"X-Lemonban-Media-Type"</span>, <span class="string">"lemonban.v1"</span>);</span><br><span class="line"></span><br><span class="line">        String params = caseInfo.getParams();</span><br><span class="line">        String url = caseInfo.getUrl();</span><br><span class="line">        String method = caseInfo.getMethod();</span><br><span class="line">        String contentType = caseInfo.getContentType();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"json"</span>.equals(contentType)) {</span><br><span class="line">            headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"form"</span>.equals(contentType)) {</span><br><span class="line">            params = jsonStr2KeyValueStr(params);</span><br><span class="line">            headers.put(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"post"</span>.equals(method)) {</span><br><span class="line">            HttpUtils.post(url, params, headers);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"get"</span>.equals(method)) {</span><br><span class="line">            HttpUtils.get(url, headers);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"patch"</span>.equals(method)) {</span><br><span class="line">            HttpUtils.patch(url, params, headers);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * json字符串转换成key=value</span></span><br><span class="line"><span class="comment"> * 例如:{"mobilephone":"13877788811","pwd":"12345678"} =&gt; mobilephone=13877788811&amp;pwd=12345678</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> json Json字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">jsonStr2KeyValueStr</span><span class="params">(String json)</span> </span>{</span><br><span class="line">    Map&lt;String, String&gt; map = JSONObject.parseObject(json, Map.class);</span><br><span class="line">    String formParams = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (String key : map.keySet()) {</span><br><span class="line">        formParams += key + <span class="string">"="</span> + map.get(key) + <span class="string">"&amp;"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> formParams.substring(<span class="number">0</span>, formParams.length() - <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>后续测试部分代码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">    HttpUtils.call(caseInfo);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="登陆接口测试"><a href="#登陆接口测试" class="headerlink" title="登陆接口测试"></a>登陆接口测试</h2><blockquote><p>测试数据：</p><p><a href="https://github.com/zx490336534/auto_api/blob/master/src/test/resources/cases_v3.xlsx">https://github.com/zx490336534/auto_api/blob/master/src/test/resources/cases_v3.xlsx</a></p></blockquote><p>同理登陆接口测试 只需修改测试数据即可</p><p>在<code>DataProvider</code>中修改</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = ExcelUtils.read(<span class="number">1</span>, <span class="number">1</span>, CaseInfo.class);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.cases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhongxin.pojo.CaseInfo;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.ExcelUtils;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.HttpUtils;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.DataProvider;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginCase</span> </span>{</span><br><span class="line">    <span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">        HttpUtils.call(caseInfo);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataProvider</span></span><br><span class="line">    <span class="keyword">public</span> Object[] datas() {</span><br><span class="line">        List list = ExcelUtils.read(<span class="number">1</span>, <span class="number">1</span>, CaseInfo.class);</span><br><span class="line">        <span class="keyword">return</span> list.toArray();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(登陆接口测试 14)</title>
      <link href="article/e3743ac2.html"/>
      <url>article/e3743ac2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-登陆接口测试-14"><a href="#Java自动化测试-登陆接口测试-14" class="headerlink" title="Java自动化测试(登陆接口测试 14)"></a>Java自动化测试(登陆接口测试 14)</h1><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghb3vkmlg2j322a09gte2.jpg" alt="用例"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghb612yhikj30w004q757.jpg" alt="用例2"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><code>pom.xml</code>中添加<code>testng</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="使用DataProvider遍历参数"><a href="#使用DataProvider遍历参数" class="headerlink" title="使用DataProvider遍历参数"></a>使用DataProvider遍历参数</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.cases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.HttpUtils;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.DataProvider;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 注册接口测试</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterCase</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String url, String params)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            HttpUtils.post(url, params);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataProvider</span></span><br><span class="line">    <span class="keyword">public</span> Object[] datas() {</span><br><span class="line">        Object[][] datas = {</span><br><span class="line">                {<span class="string">"http://api.lemonban.com/futureloan/member/register"</span>, <span class="string">"{\"mobile_phone\":\"13877788811\",\"pwd\":\"\"}"</span>},</span><br><span class="line">                {<span class="string">"http://api.lemonban.com/futureloan/member/register"</span>, <span class="string">"{\"mobile_phone\":\"\",\"pwd\":\"12345678\"}"</span>},</span><br><span class="line">                {<span class="string">"http://api.lemonban.com/futureloan/member/register"</span>, <span class="string">"{\"mobile_phone\":\"123\",\"pwd\":\"12345678\"}"</span>},</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> datas;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="使用Excel中的数据遍历测试"><a href="#使用Excel中的数据遍历测试" class="headerlink" title="使用Excel中的数据遍历测试"></a>使用Excel中的数据遍历测试</h2><h3 id="回忆之前操作Excel的操作"><a href="#回忆之前操作Excel的操作" class="headerlink" title="回忆之前操作Excel的操作"></a>回忆之前操作Excel的操作</h3><h4 id="引入POI"><a href="#引入POI" class="headerlink" title="引入POI"></a>引入POI</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="编写一个读取excel的类"><a href="#编写一个读取excel的类" class="headerlink" title="编写一个读取excel的类"></a>编写一个读取excel的类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtils</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>{</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"src/test/resources/cases_v1.xls"</span>);</span><br><span class="line">            Workbook sheets = WorkbookFactory.create(fis);</span><br><span class="line">            Sheet sheet = sheets.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> lastRowNum = sheet.getLastRowNum();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lastRowNum; i++) {</span><br><span class="line">                Row row = sheet.getRow(i);</span><br><span class="line">                <span class="keyword">int</span> lastCellNum = row.getLastCellNum();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lastCellNum; j++) {</span><br><span class="line">                    Cell cell = row.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);</span><br><span class="line">                    cell.setCellType(CellType.STRING);</span><br><span class="line">                    String cellValue = cell.getStringCellValue();</span><br><span class="line">                    System.out.println(cellValue + <span class="string">','</span>);</span><br><span class="line">                }</span><br><span class="line">                System.out.println();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) {</span><br><span class="line">                    fis.close();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghb53sddrmj325u0ngdjc.jpg" alt="结果"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>编码复杂，按索引不方便适配后续变更</p><h3 id="使用EasyPoi"><a href="#使用EasyPoi" class="headerlink" title="使用EasyPoi"></a>使用EasyPoi</h3><p>使用文档：</p><blockquote><p><a href="http://easypoi.mydoc.io/">http://easypoi.mydoc.io/</a></p></blockquote><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-annotation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="编写excel-表格映射"><a href="#编写excel-表格映射" class="headerlink" title="编写excel 表格映射"></a>编写excel 表格映射</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.annotation.Excel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel 表格映射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CaseInfo</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Excel(name = "CaseId(用例编号)")</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Excel(name = "Name(接口名)")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Excel(name = "Type(接口提交类型)")</span></span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line">    <span class="meta">@Excel(name = "Url(接口地址)")</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Excel(name = "Desc(用例描述)")</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="meta">@Excel(name = "Params(参数)")</span></span><br><span class="line">    <span class="keyword">private</span> String params;</span><br><span class="line">    <span class="meta">@Excel(name = "Content-Type")</span></span><br><span class="line">    <span class="keyword">private</span> String contentType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(String method)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParams</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(String params)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> contentType;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String contentType)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.contentType = contentType;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CaseInfo{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", method='"</span> + method + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", url='"</span> + url + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", desc='"</span> + desc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", params='"</span> + params + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", contentType='"</span> + contentType + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="读取excel"><a href="#读取excel" class="headerlink" title="读取excel"></a>读取excel</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.ExcelImportUtil;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.ImportParams;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.pojo.CaseInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtils</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        read();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 1. excel文件流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"src/test/resources/cases_v1.xls"</span>);</span><br><span class="line">            <span class="comment">// 2. easypoi 导入参数</span></span><br><span class="line">            ImportParams params = <span class="keyword">new</span> ImportParams();</span><br><span class="line">            <span class="comment">// 3. 导入</span></span><br><span class="line">            List&lt;CaseInfo&gt; caseInfoList = ExcelImportUtil.importExcel(fis, CaseInfo.class, params);</span><br><span class="line">            <span class="comment">// 4. 关流</span></span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="keyword">for</span> (CaseInfo caseInfo : caseInfoList) {</span><br><span class="line">                System.out.println(caseInfo);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghb5319blyj326s0nak03.jpg" alt="结果"></p><h4 id="提取封装"><a href="#提取封装" class="headerlink" title="提取封装"></a>提取封装</h4><p>为了可以让该方法可以读取更多的sheet对其进行提取</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">params.setStartSheetIndex(sheetIndex);<span class="comment">//从第x个sheet开始读取</span></span><br><span class="line">params.setSheetNum(sheetNum);<span class="comment">//读取x个sheet</span></span><br></pre></td></tr></tbody></table></figure><p>新写一个<code>sheet2</code>的映射</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.annotation.Excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">API</span> </span>{</span><br><span class="line">    <span class="meta">@Excel(name = "CaseId")</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Excel(name = "Name")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Excel(name = "Url")</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Excel(name = "Type")</span></span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"API{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", url='"</span> + url + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", method='"</span> + method + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(String method)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>分别读取<code>sheet1</code>和<code>sheet2</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.ExcelImportUtil;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.ImportParams;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.pojo.API;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.pojo.CaseInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtils</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        List&lt;CaseInfo&gt; list = read(<span class="number">0</span>, <span class="number">1</span>, CaseInfo.class);</span><br><span class="line">        List&lt;API&gt; list2 = read(<span class="number">1</span>, <span class="number">1</span>, API.class);</span><br><span class="line">        <span class="keyword">for</span> (CaseInfo caseInfo : list) {</span><br><span class="line">            System.out.println(caseInfo);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"======="</span>);</span><br><span class="line">        <span class="keyword">for</span> (API api : list2) {</span><br><span class="line">            System.out.println(api);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">read</span><span class="params">(<span class="keyword">int</span> sheetIndex, <span class="keyword">int</span> sheetNum, Class clazz)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 1. excel文件流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"src/test/resources/cases_v1.xls"</span>);</span><br><span class="line">            <span class="comment">// 2. easypoi 导入参数</span></span><br><span class="line">            ImportParams params = <span class="keyword">new</span> ImportParams();</span><br><span class="line">            params.setStartSheetIndex(sheetIndex);<span class="comment">//从第x个sheet开始读取</span></span><br><span class="line">            params.setSheetNum(sheetNum);<span class="comment">//读取x个sheet</span></span><br><span class="line">            <span class="comment">// 3. 导入</span></span><br><span class="line">            List caseInfoList = ExcelImportUtil.importExcel(fis, clazz, params);</span><br><span class="line">            <span class="comment">// 4. 关流</span></span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="keyword">return</span> caseInfoList;</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghb63kidyzj322w0u0aku.jpg" alt="结果"></p><h3 id="重写测试代码"><a href="#重写测试代码" class="headerlink" title="重写测试代码"></a>重写测试代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.cases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.annotation.Excel;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.pojo.CaseInfo;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.ExcelUtils;</span><br><span class="line"><span class="keyword">import</span> com.zhongxin.utils.HttpUtils;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.DataProvider;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册接口测试类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterCase</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(dataProvider = "datas")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CaseInfo caseInfo)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            HttpUtils.post(caseInfo.getUrl(), caseInfo.getParams());</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataProvider</span></span><br><span class="line">    <span class="keyword">public</span> Object[] datas() {</span><br><span class="line">        List list = ExcelUtils.read(<span class="number">0</span>, <span class="number">1</span>, CaseInfo.class);</span><br><span class="line">        <span class="keyword">return</span> list.toArray();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>反射：java代码在 「运行时」 「动态」 获取一个类的属性和方法，或者调用一个对象的属性和方法</p></blockquote><p>实现反射：必须要有字节码对象</p><p>Class 字节码对象 约等于 .class 文件</p><p>拿到字节码对象就相当于拿到了整个类所有信息</p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Student.eat"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Student.study"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="三种方法拿到字节码对象"><a href="#三种方法拿到字节码对象" class="headerlink" title="三种方法拿到字节码对象"></a>三种方法拿到字节码对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">Class clazz1 = Student.class;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">Class clazz2 = s.getClass();</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">String className = <span class="string">"com.zhongxin.reflect.Student"</span>;</span><br><span class="line">Class clazz3 = Class.forName(className);</span><br></pre></td></tr></tbody></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object o = clazz3.newInstance();</span><br><span class="line">System.out.println(o); </span><br><span class="line"><span class="comment">// Student{name='null', age=0}</span></span><br><span class="line"><span class="comment">// com.zhongxin.reflect.Student@8efb846</span></span><br></pre></td></tr></tbody></table></figure><h3 id="调用属性"><a href="#调用属性" class="headerlink" title="调用属性"></a>调用属性</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Field field = clazz3.getField(<span class="string">"name"</span>);</span><br><span class="line">field.set(o, <span class="string">"张三"</span>);</span><br><span class="line">System.out.println(o);</span><br><span class="line"><span class="comment">// Student{name='张三', age=0}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method method = clazz3.getMethod(<span class="string">"eat"</span>);</span><br><span class="line">method.invoke(o);</span><br><span class="line"><span class="comment">// Student.eat</span></span><br></pre></td></tr></tbody></table></figure><h3 id="暴力反射-获取属性和方法"><a href="#暴力反射-获取属性和方法" class="headerlink" title="暴力反射,获取属性和方法"></a>暴力反射,获取属性和方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Field field2 = clazz3.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">field2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field2.set(o, <span class="number">22</span>);</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(HttpClient 13)</title>
      <link href="article/1396de4e.html"/>
      <url>article/1396de4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-HttpClient-13"><a href="#Java自动化测试-HttpClient-13" class="headerlink" title="Java自动化测试(HttpClient 13)"></a>Java自动化测试(HttpClient 13)</h1><h2 id="修改Maven"><a href="#修改Maven" class="headerlink" title="修改Maven"></a>修改Maven</h2><span id="more"></span><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>auto_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件拷贝时的编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 编译时的编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="httpclient"><a href="#httpclient" class="headerlink" title="httpclient"></a>httpclient</h3><p>HttpClient 是Apache Jakarta Common 下的子项目，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</p><blockquote><p><a href="http://www.lemfix.com/topics/363">http://www.lemfix.com/topics/363</a></p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="发起Get请求"><a href="#发起Get请求" class="headerlink" title="发起Get请求"></a>发起Get请求</h2><ol><li>创建请求对象</li><li>设置请求方法</li><li>设置接口url地址</li><li>设置请求头</li><li>设置请求体（接口参数）</li><li>点击发送</li><li>获取响应对象</li><li>格式化响应对象（响应状态码，响应头，响应体）</li></ol><blockquote><p>请求必须由客户端发起（浏览器，jmeter，httpcline），必须创建一个客户端</p><p>execute(HttpUriRequest):多态方法，接受HttpUriRequest所有子实现</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.Header;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 1+2+3</span></span><br><span class="line">        HttpGet get = <span class="keyword">new</span> HttpGet(<span class="string">"http://api.lemonban.com/futureloan/loans"</span>);</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line">        get.setHeader(<span class="string">"X-Lemonban-Media-Type"</span>, <span class="string">"lemonban.v1"</span>);</span><br><span class="line">        <span class="comment">// 6 请求必须由客户端发起（浏览器，jmeter，httpcline），必须创建一个客户端</span></span><br><span class="line">        HttpClient client = HttpClients.createDefault();</span><br><span class="line">        <span class="comment">// execute(HttpUriRequest):多态方法，接受HttpUriRequest所有子实现</span></span><br><span class="line">        <span class="comment">// 7</span></span><br><span class="line">        HttpResponse response = client.execute(get);</span><br><span class="line">        <span class="comment">// 8</span></span><br><span class="line">        <span class="comment">// 响应状态码</span></span><br><span class="line">        System.out.println(response.getStatusLine().getStatusCode());</span><br><span class="line">        <span class="comment">// 响应头</span></span><br><span class="line">        Header[] allHeaders = response.getAllHeaders();</span><br><span class="line">        System.out.println(Arrays.toString(allHeaders));</span><br><span class="line">        <span class="comment">// 响应体</span></span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        System.out.println(EntityUtils.toString(entity));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="发起Post请求"><a href="#发起Post请求" class="headerlink" title="发起Post请求"></a>发起Post请求</h2><ol><li>创建请求对象</li><li>设置请求方法</li><li>设置接口url地址</li><li>设置请求头</li><li>设置请求体（接口参数）</li><li>点击发送</li><li>获取响应对象</li><li>格式化响应对象（响应状态码，响应头，响应体）</li></ol><p>和get请求类似，不过需要增加请求体：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringEntity body = <span class="keyword">new</span> StringEntity(<span class="string">"{'membet_id':2060127,'amount':1}"</span>, <span class="string">"utf-8"</span>);</span><br><span class="line">post.setEntity(body);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.Header;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 1+2+3</span></span><br><span class="line">        HttpPost post = <span class="keyword">new</span> HttpPost(<span class="string">"http://api.lemonban.com/futureloan/member/recharge"</span>);</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line">        post.setHeader(<span class="string">"X-Lemonban-Media-Type"</span>, <span class="string">"lemonban.v1"</span>);</span><br><span class="line">        post.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        <span class="comment">// 5</span></span><br><span class="line">        StringEntity body = <span class="keyword">new</span> StringEntity(<span class="string">"{\"member_id\":2060127,\"amount\":1}"</span>, <span class="string">"utf-8"</span>);</span><br><span class="line">        post.setEntity(body);</span><br><span class="line">        <span class="comment">// 6 请求必须由客户端发起（浏览器，jmeter，httpcline），必须创建一个客户端</span></span><br><span class="line">        HttpClient client = HttpClients.createDefault();</span><br><span class="line">        <span class="comment">// execute(HttpUriRequest):多态方法，接受HttpUriRequest所有子实现</span></span><br><span class="line">        <span class="comment">// 7</span></span><br><span class="line">        HttpResponse response = client.execute(post);</span><br><span class="line">        <span class="comment">// 8</span></span><br><span class="line">        <span class="comment">// 响应状态码</span></span><br><span class="line">        System.out.println(response.getStatusLine().getStatusCode());</span><br><span class="line">        <span class="comment">// 响应头</span></span><br><span class="line">        Header[] allHeaders = response.getAllHeaders();</span><br><span class="line">        System.out.println(Arrays.toString(allHeaders));</span><br><span class="line">        <span class="comment">// 响应体</span></span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        System.out.println(EntityUtils.toString(entity));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.Header;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtils</span> </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 发送get请求</span></span><br><span class="line"><span class="comment">     * @param url       接口地址</span></span><br><span class="line"><span class="comment">     * @throws</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        HttpGet get = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        get.setHeader(<span class="string">"X-Lemonban-Media-Type"</span>, <span class="string">"lemonban.v1"</span>);</span><br><span class="line">        HttpClient client = HttpClients.createDefault();</span><br><span class="line">        HttpResponse response = client.execute(get);</span><br><span class="line">        printResponse(response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 发送一个post请求</span></span><br><span class="line"><span class="comment">     * @param url        接口地址</span></span><br><span class="line"><span class="comment">     * @param params     接口参数</span></span><br><span class="line"><span class="comment">     * @throws</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(String url, String params)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        HttpPost post = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        post.setHeader(<span class="string">"X-Lemonban-Media-Type"</span>, <span class="string">"lemonban.v1"</span>);</span><br><span class="line">        post.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        StringEntity body = <span class="keyword">new</span> StringEntity(params, <span class="string">"utf-8"</span>);</span><br><span class="line">        post.setEntity(body);</span><br><span class="line">        HttpClient client = HttpClients.createDefault();</span><br><span class="line">        HttpResponse response = client.execute(post);</span><br><span class="line">        printResponse(response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response      响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">printResponse</span><span class="params">(HttpResponse response)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="keyword">int</span> statusCode = response.getStatusLine().getStatusCode();</span><br><span class="line">        System.out.println(statusCode);</span><br><span class="line">        Header[] allHeaders = response.getAllHeaders();</span><br><span class="line">        System.out.println(Arrays.toString(allHeaders));</span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        String body = EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(body);</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        HttpUtils.get(<span class="string">"http://api.lemonban.com/futureloan/loans"</span>);</span><br><span class="line">        HttpUtils.get(<span class="string">"http://api.lemonban.com/futureloan/loans?pageIndex=1"</span>);</span><br><span class="line">        HttpUtils.get(<span class="string">"http://api.lemonban.com/futureloan/loans?pageIndex=1&amp;pageSize=1"</span>);</span><br><span class="line"></span><br><span class="line">        HttpUtils.post(<span class="string">"http://api.lemonban.com/futureloan/member/recharge"</span>, <span class="string">"{\"member_id\":2060127,\"amount\":1}"</span>);</span><br><span class="line">        HttpUtils.post(<span class="string">"http://api.lemonban.com/futureloan/member/recharge"</span>, <span class="string">"{\"member_id\":2060127,\"amount\":2}"</span>);</span><br><span class="line">        HttpUtils.post(<span class="string">"http://api.lemonban.com/futureloan/member/recharge"</span>, <span class="string">"{\"member_id\":2060127,\"amount\":-1}"</span>);</span><br><span class="line">        HttpUtils.post(<span class="string">"http://api.lemonban.com/futureloan/member/recharge"</span>, <span class="string">"{\"member_id\":2060127,\"amount\":\"aaa\"}"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(Jmeter 12)</title>
      <link href="article/d139d32f.html"/>
      <url>article/d139d32f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-Jmeter-12"><a href="#Java自动化测试-Jmeter-12" class="headerlink" title="Java自动化测试(Jmeter 12)"></a>Java自动化测试(Jmeter 12)</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote><p>Jmeter：</p><p>链接: <a href="https://pan.baidu.com/s/16iH1WEj-yOifzpCP4NNs0A">https://pan.baidu.com/s/16iH1WEj-yOifzpCP4NNs0A</a>  密码: 8lvt</p></blockquote><p>下载到本地解压后双击<code>jmeter</code>运行</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6axaic9sj31f00u0kfb.jpg" alt="运行Jemeter"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6ay1f7kpj319l0u0k87.jpg" alt="运行"></p><span id="more"></span><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><h3 id="接口-URL-格式"><a href="#接口-URL-格式" class="headerlink" title="接口 URL 格式"></a>接口 URL 格式</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:port/futureloan/apiName</span><br></pre></td></tr></tbody></table></figure><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>X-Lemonban-Media-Type:</p><ul><li>lemonban.v1 接口无鉴权</li><li>lemonban.v2 token 鉴权</li><li>lemonban.v3 timestamp+token+sign 鉴权 其中 sign= RSA(token 前 50 位+时间戳)</li></ul><p>Content-Type:application/json</p><p>POST、PATCH 请求必须设置 GET 请求不设置</p><p>Authorization:Bearer Token</p><blockquote><p>X-Lemonban-Media-Type 请 求 头 的 值 为 lemonban.v2 或 lemonban.v3 时必须添加此请 求头，lemonban.v1 时无需添加 值 的 格 式 为 ”Bearer token_value”, 其 中 token_value 是登录成功后返回 token_info 中的 token 值，注意 Bearer 后有空格</p></blockquote><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应体为 json 对象，包含 code、msg、data 三个字段</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{ <span class="attr">"code"</span>: <span class="string">" 返回码"</span> , <span class="attr">"msg"</span>: <span class="string">" 发生错误时返回的错误信息"</span> , <span class="attr">"data"</span>: { <span class="comment">//数据， 对象或数组，为空统一设置为 NULL } }</span></span><br></pre></td></tr></tbody></table></figure><h3 id="返回码"><a href="#返回码" class="headerlink" title="返回码"></a>返回码</h3><ul><li>0：成功</li><li>1:必填参数为空</li><li>2:参数错误 如格式错误、类型转换出错、内容无法解析、数值类型格式化异常、 超出范围、用户已存在、项目已存在等</li><li>1001:账号信息错误</li><li>1002:账户余额不足</li><li>1003:token 或 sign 验证不通过或 token 过期</li><li>1004:URL 错误</li><li>1005:服务器繁忙，通常是后端代码运行异常</li><li>1006:缺少必须的请求头</li><li>1007:无权限访问，如进行其他用户相关业务操作</li></ul><h3 id="token-方式鉴权"><a href="#token-方式鉴权" class="headerlink" title="token 方式鉴权"></a>token 方式鉴权</h3><p>当 X-Lemonban-Media-Type 请求头值为 lemonban.v2 时，接口使用 token 鉴权。除注册、 登录和项目列表接口，其它接口必须设置 Authorization 请求头，值为 Bearer token 值。</p><p>设置 Authorization 请求头时，注意对应值必须是 Bearer + 空格 + token 值， Bearer 和 空格均不能省略。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h3><p>在<code>选项</code>中选择语言，切换为简体中文即可</p><h3 id="添加线程组"><a href="#添加线程组" class="headerlink" title="添加线程组"></a>添加线程组</h3><p>右侧<code>Test Plan</code>右键选择<code>线程组</code></p><h3 id="添加取样器-HTTP请求"><a href="#添加取样器-HTTP请求" class="headerlink" title="添加取样器-HTTP请求"></a>添加取样器-HTTP请求</h3><p>右键<code>线程组</code>，添加<code>取样器</code>-<code>HTTP</code></p><h3 id="填写接口信息"><a href="#填写接口信息" class="headerlink" title="填写接口信息"></a>填写接口信息</h3><p>待测接口：<code>http://api.lemonban.com/futureloan/loans</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6b64ky9wj31fy0goaf6.jpg" alt="待测接口"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6b4k6rtvj31n60m6goy.jpg" alt="填写接口"></p><h3 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h3><p>添加<code>监听器</code>里面的<code>查看结果树</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6b78d39pj30x40u0akn.jpg" alt="image-20200728065911491"></p><h3 id="添加头信息"><a href="#添加头信息" class="headerlink" title="添加头信息"></a>添加头信息</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6bbjxoxhj31g20qe7d4.jpg" alt="接口文档"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6bbccxmcj30ti0tethu.jpg" alt="添加头信息"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6bc2wmy9j325a0d0gnr.jpg" alt="添加头信息"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="不添加头信息运行"><a href="#不添加头信息运行" class="headerlink" title="不添加头信息运行"></a>不添加头信息运行</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6b8v2jcwj31dk0qq42f.jpg" alt="运行"></p><h4 id="添加头信息后运行"><a href="#添加头信息后运行" class="headerlink" title="添加头信息后运行"></a>添加头信息后运行</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6bcryr2lj31b30u01kx.jpg" alt="添加头信息后运行"></p><p>运行之后可以在<code>查看结果树</code>中看到请求结果</p><h3 id="注册请求"><a href="#注册请求" class="headerlink" title="注册请求"></a>注册请求</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6bhjk154j31b30u018k.jpg" alt="注册请求"></p><ol><li><p>注册接口：<code>http://api.lemonban.com/futureloan/member/register</code></p></li><li><p>请求方式：<code>POST</code></p></li><li><p>请求数据：<code>{"mobile_phone": "13888888888","pwd": "123456"}</code></p></li><li><p>头部</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Lemonban-Media-Typelemonban.v1</span><br><span class="line">Content-Typeapplication/json</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6bj8wbdoj31b30u0kdn.jpg" alt="注册结果"></p><h3 id="使用默认请求减少重复内容"><a href="#使用默认请求减少重复内容" class="headerlink" title="使用默认请求减少重复内容"></a>使用默认请求减少重复内容</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6bmt0hldj30u00vqqc7.jpg" alt="添加元件"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6bo1ngfzj31ng0hudii.jpg" alt="默认值"></p><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>不需要添加重复内容后的登陆接口操作</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6bqjdkkfj31b30u07pf.jpg" alt="登陆"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6brexq8gj31b30u04me.jpg" alt="登陆结果"></p><h3 id="两个接口之间传值"><a href="#两个接口之间传值" class="headerlink" title="两个接口之间传值"></a>两个接口之间传值</h3><p>我们需要获取到登陆成功后拿到的token值进行其他的操作</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6c0o1yo1j30x80ma10z.jpg" alt="提取"></p><p>所以添加一个<code>后置处理器</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6c32hlh5j31aa0ga41j.jpg" alt="token"></p><p>提取该token的语句为：<code>$.data.token_info.token</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6cal3bg7j31xy0iedjq.jpg" alt="json提取器"></p><p>创建一个用户变量<code>token</code>接收它</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6c3v3ahpj316u0h8aci.jpg" alt="用户变量"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh6ca960v3j32720san4a.jpg" alt="查看充值接口返回值"></p><p>这就完成了登陆后拿到token，然后进行充值的操作。</p>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.Flask:数据库操作</title>
      <link href="article/3842e4e1.html"/>
      <url>article/3842e4e1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-数据库操作-十一"><a href="#Flask-数据库操作-十一" class="headerlink" title="Flask(数据库操作 十一)"></a>Flask(数据库操作 十一)</h1><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = User.query.<span class="built_in">all</span>()</span><br></pre></td></tr></tbody></table></figure><h3 id="查询第一个"><a href="#查询第一个" class="headerlink" title="查询第一个"></a>查询第一个</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = User.query.first()</span><br></pre></td></tr></tbody></table></figure><h3 id="通过主键获取"><a href="#通过主键获取" class="headerlink" title="通过主键获取"></a>通过主键获取</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = User.query.get(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>多个主键</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users = User.query.get((<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">users = User.query.get({<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"project_id"</span>:<span class="number">3</span>})</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="filter-by筛选"><a href="#filter-by筛选" class="headerlink" title="filter_by筛选"></a>filter_by筛选</h3><p>只能处理<code>相等</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin = User.query.filter_by(username=<span class="string">'admin'</span>).first()</span><br></pre></td></tr></tbody></table></figure><h3 id="filter筛选"><a href="#filter筛选" class="headerlink" title="filter筛选"></a>filter筛选</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.<span class="built_in">filter</span>(User.email.endswith(<span class="string">"@qq.com"</span>)).<span class="built_in">all</span>()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.sql.operators <span class="keyword">import</span> ColumnOperators</span><br></pre></td></tr></tbody></table></figure><p>支持的字段操作：<code>ColumnOperators</code>:<code>/usr/local/lib/python3.7/site-packages/sqlalchemy/sql/operators.py.ColumnOperators</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh42e9sd5aj30is14kgqk.jpg" alt="支持的操作"></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.order_by(User.username.desc()).<span class="built_in">all</span>()</span><br></pre></td></tr></tbody></table></figure><h3 id="现在返回用户的数量"><a href="#现在返回用户的数量" class="headerlink" title="现在返回用户的数量"></a>现在返回用户的数量</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.order_by(User.username.desc()).limit(<span class="number">1</span>).<span class="built_in">all</span>()</span><br></pre></td></tr></tbody></table></figure><h3 id="未找到"><a href="#未找到" class="headerlink" title="未找到"></a>未找到</h3><p>使用<code>first_or_404</code>没找到就用<code>abort()</code>和异常处理机制配合</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.session.delete(me)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></tbody></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user = User.query.get(<span class="number">1</span>)</span><br><span class="line">user.username = <span class="string">"abc"</span></span><br><span class="line">db.session.add(user)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></tbody></table></figure><h2 id="外键关联"><a href="#外键关联" class="headerlink" title="外键关联"></a>外键关联</h2><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>例子:</p><blockquote><p>多个学生 一个班级</p></blockquote><h4 id="写法1"><a href="#写法1" class="headerlink" title="写法1"></a>写法1</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="comment"># __tablename__ = 'project'</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    modules = db.relationship(<span class="string">'Module'</span>, backref=<span class="string">'module_project'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    project_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'project.id'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="写法2"><a href="#写法2" class="headerlink" title="写法2"></a>写法2</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="comment"># __tablename__ = 'project'</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    modules = db.relationship(<span class="string">'Module'</span>, back_populates=<span class="string">'module_project'</span>)  <span class="comment"># 数据库中不会有新字段</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    project_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'project.id'</span>))</span><br><span class="line">    module_project = db.relationship(<span class="string">'Project'</span>, back_populates=<span class="string">'modules'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh43cxz8bhj31u00lqafy.jpg" alt="对应关系"></p><h4 id="backref-vs-back-populates"><a href="#backref-vs-back-populates" class="headerlink" title="backref vs back_populates"></a>backref vs back_populates</h4><ul><li>back_populates 需要双向显示说明；backref只需要指名一边隐式声明</li><li>back_populates 更麻烦；backref 更简单</li><li>back_populates 可读性强，可以表明各个表之间的关系</li></ul><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>例子：</p><blockquote><p>一个人一个身份证号</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    modules = db.relationship(<span class="string">"Module"</span>, back_populates=<span class="string">'project'</span>, uselist=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    project = db.relationship(<span class="string">"Module"</span>, back_populates=<span class="string">'modules'</span>, uselist=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>例子：</p><blockquote><p>1个学生 多门课程</p><p>1门课程 多个学生</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">xuanke = db.Table(<span class="string">'xuanke'</span>,</span><br><span class="line">                  db.Column(<span class="string">'user_id'</span>),</span><br><span class="line">                  db.Integer,</span><br><span class="line">                  db.ForeignKey(<span class="string">'user.id'</span>),</span><br><span class="line">                  db.Column(<span class="string">'subject_id'</span>),</span><br><span class="line">                  db.Integer,</span><br><span class="line">                  db.ForeignKey(<span class="string">'subject.id'</span>)</span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    subject = db.relationship(<span class="string">'Subject'</span>, secondary=xuanke, backref=db.backref(<span class="string">'users'</span>, lazy=<span class="string">'dynamic'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">20</span>))</span><br></pre></td></tr></tbody></table></figure><p>插入数据</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/insert'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span>():</span></span><br><span class="line">    user1 = User(name=<span class="string">'张三'</span>)</span><br><span class="line">    user2 = User(name=<span class="string">'李四'</span>)</span><br><span class="line">    user3 = User(name=<span class="string">'王五'</span>)</span><br><span class="line"></span><br><span class="line">    subject1 = Subject(name=<span class="string">'自动化测试'</span>)</span><br><span class="line">    subject2 = Subject(name=<span class="string">'测试开发'</span>)</span><br><span class="line">    subject3 = Subject(name=<span class="string">'Java'</span>)</span><br><span class="line"></span><br><span class="line">    user1.subject.append(subject1)</span><br><span class="line">    user1.subject.append(subject2)</span><br><span class="line"></span><br><span class="line">    db.session.add_all([user1, user2, user3, subject1, subject2, subject3])</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'OK'</span></span><br></pre></td></tr></tbody></table></figure><p>查找数据</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/select'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select</span>():</span></span><br><span class="line">    user = User.query.get(<span class="number">1</span>)</span><br><span class="line">    s = user.subject</span><br><span class="line">    print(s)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'OK'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自引用"><a href="#自引用" class="headerlink" title="自引用"></a>自引用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Follower</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="comment"># 粉丝ID</span></span><br><span class="line">    fensi_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'user.id'</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 关注者ID</span></span><br><span class="line">    guanzhuzhe_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'user.id'</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    sujects = db.relationship(<span class="string">'Xuanke'</span>, back_populates=<span class="string">'student'</span>)</span><br><span class="line">    fensis = db.relationship(<span class="string">'Follower'</span>, foreign_keys=[Follower.guanzhuzhe_id], backref=<span class="string">'guanzhuzhe'</span>)</span><br><span class="line">    guanzhuzhes = db.relationship(<span class="string">'Follower'</span>, foreign_keys=[Follower.fensi_id], backref=<span class="string">'fensi'</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(TestNg参数化 11)</title>
      <link href="article/39652764.html"/>
      <url>article/39652764.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-TestNg参数化-11"><a href="#Java自动化测试-TestNg参数化-11" class="headerlink" title="Java自动化测试(TestNg参数化 11)"></a>Java自动化测试(TestNg参数化 11)</h1><h2 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h2><h3 id="编写测试函数"><a href="#编写测试函数" class="headerlink" title="编写测试函数"></a>编写测试函数</h3><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Parameters;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNGParameter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Parameters({"type", "sheetIndex"})</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(String type, <span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"type = "</span> + type + <span class="string">", index = "</span> + index);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编写执行xml"><a href="#编写执行xml" class="headerlink" title="编写执行xml"></a>编写执行xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">suite</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://testng.org/testng-1.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"xxx项目"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"xx接口"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhongxin.day02.TestNGParameter"</span>&gt;</span><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"chrome"</span>&gt;</span><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"sheetIndex"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2tjn1f0nj31k80nudin.jpg" alt="执行截图"></p><h3 id="为不同接口设置不同参数"><a href="#为不同接口设置不同参数" class="headerlink" title="为不同接口设置不同参数"></a>为不同接口设置不同参数</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">suite</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://testng.org/testng-1.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"xxx项目"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"xx接口1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhongxin.day02.TestNGParameter"</span>&gt;</span><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"chrome"</span>&gt;</span><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"sheetIndex"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"xx接口2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhongxin.day02.TestNGParameter2"</span>&gt;</span><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"IE"</span>&gt;</span><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"sheetIndex"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2tmawo5pj310o0fktaj.jpg" alt="执行结果"></p><h2 id="DataProvider数据驱动"><a href="#DataProvider数据驱动" class="headerlink" title="DataProvider数据驱动"></a>DataProvider数据驱动</h2><h3 id="定义二维数组遍历"><a href="#定义二维数组遍历" class="headerlink" title="定义二维数组遍历"></a>定义二维数组遍历</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.DataProvider;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNGDataProvider</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(dataProvider = "d")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(String username, String password)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"username = "</span> + username + <span class="string">", password = "</span> + password);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataProvider(name = "d")</span></span><br><span class="line">    <span class="keyword">public</span> Object[][] datas() {</span><br><span class="line">        Object[][] datas = {</span><br><span class="line">                {<span class="string">"zhangsan"</span>, <span class="string">"123456"</span>},</span><br><span class="line">                {<span class="string">"lisi"</span>, <span class="string">"123456"</span>},</span><br><span class="line">                {<span class="string">"wangwu"</span>, <span class="string">"123456"</span>}</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> datas;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2trz39y1j30os0f2ta4.jpg" alt="执行结果"></p><p>也可以使用<code>new Object</code>来定义后添加</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DataProvider(name = "d2")</span></span><br><span class="line"><span class="keyword">public</span> Object[][] datas2() {</span><br><span class="line">    Object[][] datas = <span class="keyword">new</span> Object[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">    datas[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">"zhangsan"</span>;</span><br><span class="line">    datas[<span class="number">0</span>][<span class="number">1</span>] = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    datas[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">"lisi"</span>;</span><br><span class="line">    datas[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    datas[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">"wangwu"</span>;</span><br><span class="line">    datas[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> datas;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编写一个类"><a href="#编写一个类" class="headerlink" title="编写一个类"></a>编写一个类</h3><p><code>Student</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String username, String password)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.DataProvider;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNGDataProvider2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(dataProvider = "d")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(Student s)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"s = "</span> + s);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataProvider(name = "d")</span></span><br><span class="line">    <span class="keyword">public</span> Object[] datas() {</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"wangwu"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        Object[] datas = {s1, s2, s3};</span><br><span class="line">        <span class="keyword">return</span> datas;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh2tzjsy1bj31ui0f2whv.jpg" alt="测试结果"></p><h2 id="接口测试基础"><a href="#接口测试基础" class="headerlink" title="接口测试基础"></a>接口测试基础</h2><p>后续进行接口自动化，需要了解一下接口相关的基础知识</p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><ul><li>分为客户端请求和服务端响应，无状态的协议。</li><li>HTTP协议重点包含报文。</li></ul><h3 id="报文内容"><a href="#报文内容" class="headerlink" title="报文内容"></a>报文内容</h3><ul><li>URL：接口地址</li><li>method：接口的请求方式（接口的功能决定请求方式。例如：查询是get。增加是post，删除delete，全部更新put，部分更新：patch）</li><li>头部字段：描述请求或者响应的详细信息。</li><li>状态码：<br>100    请求中<br>200    正确<br>300    缓存、重定向<br>400 客户端问题<br>500    服务端问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(TestNg 10)</title>
      <link href="article/1e0f7745.html"/>
      <url>article/1e0f7745.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-TestNg-10"><a href="#Java自动化测试-TestNg-10" class="headerlink" title="Java自动化测试(TestNg 10)"></a>Java自动化测试(TestNg 10)</h1><h2 id="TestNG"><a href="#TestNG" class="headerlink" title="TestNG"></a>TestNG</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>TestNG是一个测试框架，旨在简化广泛的测试需求，从单元测试（将一个类与其他类隔离测试）到集成测试（对由多个类，多个程序包甚至几个外部框架组成的整个系统进行测试），例如 应用程序服务器）。</p><p>可以看出TestNG致力于简化测试流程。</p><p>导入Maven</p><blockquote><p><a href="https://mvnrepository.com/artifact/org.testng/testng/7.1.0">https://mvnrepository.com/artifact/org.testng/testng/7.1.0</a></p></blockquote><span id="more"></span><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.testng/testng --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><p> Test ： 使用此注解的方法或者类将被TestNG识别并运行。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNGDemo</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"TestNGDemo.f"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh0kdqm08fj31b30u04mg.jpg" alt="运行结果"></p><h3 id="属性名"><a href="#属性名" class="headerlink" title="属性名"></a>属性名</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh0lqsfbzdj31290u0dpb.jpg" alt="属性名"></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>alwaysRun</td><td>设置为true时，无论什么情况都会运行</td></tr><tr><td>dataProvider</td><td>数据提供者的名称</td></tr><tr><td>dataProviderClass</td><td>如果未指定，将在当前测试方法的类或其父类之一上查找数据提供者。 如果指定了此属性，则数据提供者方法在指定的类上必须是静态的。</td></tr><tr><td>dependsOnGroups</td><td>依赖的组列表</td></tr><tr><td>dependsOnMethods</td><td>依赖的方法列表</td></tr><tr><td>description</td><td>说明</td></tr><tr><td>enabled</td><td>设置为false时失效</td></tr><tr><td>expectedExceptions</td><td>预期测试方法将引发的异常列表。 如果未引发任何异常或与该列表中的异常不同，则此测试将标记为失败。</td></tr><tr><td>groups</td><td>所属组</td></tr><tr><td>invocationCount</td><td>调用次数</td></tr><tr><td>invocationTimeOut</td><td>所有invocationCount的累积超时时间。 注意：如果未指定invocationCount，则将忽略此属性。</td></tr><tr><td>priority</td><td>此测试方法的优先级</td></tr><tr><td>successPercentage</td><td>该方法预期成功的百分比</td></tr><tr><td>singleThreaded</td><td>如果设置为true，则即使当前正在使用parallel =“ methods”运行测试，也保证该测试类上的所有方法都可以在同一线程中运行。 此属性只能在类级别使用，如果在方法级别使用，则将被忽略。</td></tr><tr><td>timeOut</td><td>超时时间</td></tr><tr><td>threadPoolSize</td><td>此方法的线程池的大小。 该方法将从invocationCount指定的多个线程中调用。 注意：如果未指定invocationCount，则忽略此属性</td></tr></tbody></table><h4 id="threadPoolSize和invocationCount"><a href="#threadPoolSize和invocationCount" class="headerlink" title="threadPoolSize和invocationCount"></a>threadPoolSize和invocationCount</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNGDemo</span> </span>{</span><br><span class="line">    <span class="meta">@Test(threadPoolSize = 50,invocationCount = 200)</span></span><br><span class="line">    <span class="comment">//开了50个线程 调用f()方法200次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"TestNGDemo.f"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh0kk2xh5jj310i0sowi0.jpg" alt="image-20200723074932638"></p><h3 id="同时运行多个测试函数"><a href="#同时运行多个测试函数" class="headerlink" title="同时运行多个测试函数"></a>同时运行多个测试函数</h3><p>新建一个<code>testng.xml</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">suite</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://testng.org/testng-1.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"xxx项目"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"xx接口"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhongxin.day01.TestNGDemo"</span>&gt;</span><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhongxin.day01.TestNGDemo2"</span>&gt;</span><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh0kqx99paj30r00fign7.jpg" alt="执行结果"></p><h3 id="前置条件，后置条件"><a href="#前置条件，后置条件" class="headerlink" title="前置条件，后置条件"></a>前置条件，后置条件</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh0lr6t4rxj31j00l2wkm.jpg" alt="前置条件，后置条件"></p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@BeforeSuite @AfterSuite</td><td>带注释的方法将在该套件中的所有测试运行之前运行。 带注释的方法将在该套件中的所有测试运行之后运行。</td></tr><tr><td>@BeforeTest @AfterTest</td><td>带注释的方法将在运行属于标记内的类的任何测试方法之前运行。 带注释的方法将在运行属于标记内的类的任何测试方法之后运行。</td></tr><tr><td>@BeforeGroups @AfterGroups</td><td>此配置方法将在其之前运行的组的列表。 保证此方法可以在调用属于任何一个组的第一个测试方法之前运行。 此配置方法将在其之前运行的组的列表。 保证此方法可以在属于任何一个组的测试方法运行之后运行。</td></tr><tr><td>@BeforeClass @AfterClass</td><td>带注释的方法将在调用当前类中的第一个测试方法之前运行。 带注释的方法将在当前类中的所有测试方法运行之后运行。</td></tr><tr><td>@BeforeMethod @AfterMethod</td><td>带注释的方法将在每个测试方法之前运行。 带注释的方法将在每个测试方法之后运行。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(Excel文件解析 9)</title>
      <link href="article/23e82218.html"/>
      <url>article/23e82218.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-Excel文件解析-9"><a href="#Java自动化测试-Excel文件解析-9" class="headerlink" title="Java自动化测试(Excel文件解析 9)"></a>Java自动化测试(Excel文件解析 9)</h1><h2 id="Excel操作"><a href="#Excel操作" class="headerlink" title="Excel操作"></a>Excel操作</h2><h3 id="Maven中添加读取excel的第三方包POI"><a href="#Maven中添加读取excel的第三方包POI" class="headerlink" title="Maven中添加读取excel的第三方包POI"></a>Maven中添加读取excel的第三方包POI</h3><blockquote><p>官网:<a href="https://poi.apache.org/">https://poi.apache.org/</a></p><p>Maven:<a href="https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml">https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml</a></p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="新建一个测试的excel"><a href="#新建一个测试的excel" class="headerlink" title="新建一个测试的excel"></a>新建一个测试的excel</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggy8e0labsj30uj0u0k4c.jpg" alt="exceldemo"></p><p>将excel放到：<code>src/test/resources</code></p><h3 id="读取excel步骤"><a href="#读取excel步骤" class="headerlink" title="读取excel步骤"></a>读取excel步骤</h3><ol><li>打开excel</li><li>获取所有sheet</li><li>获取指定sheet</li><li>获取指定row</li><li>指定的cell单元格</li><li>获取单元格内容</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day10.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//读取excel</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 1. 打开excel</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"src/test/resources/demo.xlsx"</span>);</span><br><span class="line">            <span class="comment">// 2. 获取所有sheet</span></span><br><span class="line">            Workbook sheets = WorkbookFactory.create(fis);</span><br><span class="line">            <span class="comment">// 3. 获取指定sheet</span></span><br><span class="line">            Sheet sheet = sheets.getSheet(<span class="string">"Sheet1"</span>); <span class="comment">// 通过名称</span></span><br><span class="line">            Sheet sheet1 = sheets.getSheetAt(<span class="number">0</span>); <span class="comment">// 通过索引</span></span><br><span class="line">            <span class="comment">// 4. 获取指定row</span></span><br><span class="line">            Row row = sheet.getRow(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">// 5. 指定的cell单元格</span></span><br><span class="line">            Cell cell = row.getCell(<span class="number">1</span>, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);</span><br><span class="line">            <span class="comment">// 6. 获取单元格内容</span></span><br><span class="line">            String cellValue = cell.getStringCellValue();</span><br><span class="line">            System.out.println(cellValue);</span><br><span class="line">            fis.close();</span><br><span class="line">        } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    fis.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="读取excel中全部内容"><a href="#读取excel中全部内容" class="headerlink" title="读取excel中全部内容"></a>读取excel中全部内容</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day10.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 1. 打开excel</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"src/test/resources/demo.xlsx"</span>);</span><br><span class="line">            <span class="comment">// 2. 获取所有sheet</span></span><br><span class="line">            Workbook sheets = WorkbookFactory.create(fis);</span><br><span class="line">            <span class="comment">// 3. 获取指定sheet</span></span><br><span class="line">            Sheet sheet = sheets.getSheet(<span class="string">"Sheet1"</span>); <span class="comment">// 通过名称</span></span><br><span class="line">            Sheet sheet1 = sheets.getSheetAt(<span class="number">0</span>); <span class="comment">// 通过索引</span></span><br><span class="line">            <span class="comment">// 4. 获取所有row</span></span><br><span class="line">            <span class="comment">// 4.1 增强for</span></span><br><span class="line">            <span class="keyword">for</span> (Row row : sheet) {</span><br><span class="line">                <span class="keyword">for</span> (Cell cell : row) {</span><br><span class="line">                    <span class="comment">// 强行转换单元格类型</span></span><br><span class="line">                    cell.setCellType(CellType.STRING);</span><br><span class="line">                    String cellValue = cell.getStringCellValue();</span><br><span class="line">                    System.out.print(cellValue + <span class="string">","</span>);</span><br><span class="line">                }</span><br><span class="line">                System.out.println();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.2 普通for</span></span><br><span class="line">            <span class="keyword">int</span> lastRowNum = sheet.getLastRowNum();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lastRowNum; i++) {</span><br><span class="line">                Row row = sheet.getRow(i);</span><br><span class="line">                <span class="keyword">int</span> lastCellNum = row.getLastCellNum();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lastCellNum; j++) {</span><br><span class="line">                    Cell cell = row.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);</span><br><span class="line">                    cell.setCellType(CellType.STRING);</span><br><span class="line">                    String cellValue = cell.getStringCellValue();</span><br><span class="line">                    System.out.print(cellValue + <span class="string">","</span>);</span><br><span class="line">                }</span><br><span class="line">                System.out.println();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            fis.close();</span><br><span class="line">        } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    fis.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Row row : sheet) {</span><br><span class="line">    <span class="keyword">for</span> (Cell cell : row) {</span><br><span class="line">        <span class="comment">// 强行转换单元格类型</span></span><br><span class="line">        cell.setCellType(CellType.STRING);</span><br><span class="line">        String cellValue = cell.getStringCellValue();</span><br><span class="line">        System.out.print(cellValue + <span class="string">","</span>);</span><br><span class="line">    }</span><br><span class="line">    System.out.println();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="普通for"><a href="#普通for" class="headerlink" title="普通for"></a>普通for</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lastRowNum = sheet.getLastRowNum();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lastRowNum; i++) {</span><br><span class="line">    Row row = sheet.getRow(i);</span><br><span class="line">    <span class="keyword">int</span> lastCellNum = row.getLastCellNum();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lastCellNum; j++) {</span><br><span class="line">        Cell cell = row.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);</span><br><span class="line">        cell.setCellType(CellType.STRING);</span><br><span class="line">        String cellValue = cell.getStringCellValue();</span><br><span class="line">        System.out.print(cellValue + <span class="string">","</span>);</span><br><span class="line">    }</span><br><span class="line">    System.out.println();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="excel-写入"><a href="#excel-写入" class="headerlink" title="excel 写入"></a>excel 写入</h3><p>写=创建excel+创建sheet+创建row+创建cell</p><p>修改操作=读取+写入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day10.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// excel 写入</span></span><br><span class="line">        <span class="comment">// 1.打开excel</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"src/test/resources/demo.xlsx"</span>);</span><br><span class="line">        <span class="comment">// 2. 获取所有sheet</span></span><br><span class="line">        Workbook sheets = WorkbookFactory.create(fis);</span><br><span class="line">        <span class="comment">// 3. 获取指定sheet</span></span><br><span class="line">        Sheet sheet = sheets.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 4. 获取指定row</span></span><br><span class="line">        Row row = sheet.getRow(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 5. 获取指定cell</span></span><br><span class="line">        Cell cell = row.getCell(<span class="number">2</span>, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);</span><br><span class="line">        <span class="comment">// 6. 修改值</span></span><br><span class="line">        cell.setCellValue(<span class="number">99</span>);</span><br><span class="line">        <span class="comment">// 7. 流输出对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/resources/demo.xlsx"</span>);</span><br><span class="line">        <span class="comment">// 8. 把java内存中内容写入excel文件中</span></span><br><span class="line">        sheets.write(fos);</span><br><span class="line">        <span class="comment">// 9. 关流</span></span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="XML操作"><a href="#XML操作" class="headerlink" title="XML操作"></a>XML操作</h2><blockquote><p>Xml:扩展性标记语言</p></blockquote><p>特点：可扩展性，在遵循xml语法的前提下支持自定义和修改</p><h3 id="xml语法"><a href="#xml语法" class="headerlink" title="xml语法"></a>xml语法</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="根元素"><a href="#根元素" class="headerlink" title="根元素"></a>根元素</h4><p>XML必须包含根元素，它是所有其他元素的父元素</p><h4 id="所有元素有开始就有结束"><a href="#所有元素有开始就有结束" class="headerlink" title="所有元素有开始就有结束"></a>所有元素有开始就有结束</h4><h4 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h4><h4 id="嵌套使用需要注意嵌套的顺序"><a href="#嵌套使用需要注意嵌套的顺序" class="headerlink" title="嵌套使用需要注意嵌套的顺序"></a>嵌套使用需要注意嵌套的顺序</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sutdent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">score</span>&gt;</span>100<span class="tag">&lt;/<span class="name">score</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sutdent</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="dom4j"><a href="#dom4j" class="headerlink" title="dom4j"></a>dom4j</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/dom4j/dom4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="xml读取-了解"><a href="#xml读取-了解" class="headerlink" title="xml读取(了解)"></a>xml读取(了解)</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day10.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, DocumentException </span>{</span><br><span class="line">        <span class="comment">// xml读取</span></span><br><span class="line">        <span class="comment">// 1. xml读取对象</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"src/test/resources/Student.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 整颗dom树</span></span><br><span class="line">        Document document = reader.read(fis);</span><br><span class="line">        <span class="comment">// 3. 获取root标签</span></span><br><span class="line">        Element rootElement = document.getRootElement();</span><br><span class="line">        <span class="comment">// 4. 获取root标签下的一级子标签</span></span><br><span class="line">        List&lt;Element&gt; subElements1 = rootElement.elements();</span><br><span class="line">        <span class="keyword">for</span> (Element element : subElements1) {</span><br><span class="line">            System.out.println(element.getName() + <span class="string">"===="</span> + element.getData());</span><br><span class="line">            <span class="comment">// 5. 获取root标签下的二子标签</span></span><br><span class="line">            List&lt;Element&gt; subElement2 = element.elements();</span><br><span class="line">            <span class="keyword">if</span> (subElement2 != <span class="keyword">null</span> &amp;&amp; subElement2.size() &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">for</span> (Element element1 : subElement2) {</span><br><span class="line">                    System.out.println(element1.getName() + <span class="string">"===="</span> + element1.getData());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        fis.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(Maven 8)</title>
      <link href="article/e520feb1.html"/>
      <url>article/e520feb1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-Maven-8"><a href="#Java自动化测试-Maven-8" class="headerlink" title="Java自动化测试(Maven 8)"></a>Java自动化测试(Maven 8)</h1><h2 id="Maven作用"><a href="#Maven作用" class="headerlink" title="Maven作用"></a>Maven作用</h2><ul><li><p>Maven主要作用是使用它来导入第三方jar包</p></li><li><p>管理项目</p></li></ul><h2 id="下载Maven"><a href="#下载Maven" class="headerlink" title="下载Maven"></a>下载Maven</h2><blockquote><p>下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguu2dhf9vj31u80jq42z.jpg" alt="image-20200718084505519"></p><ul><li><p>Binary：编译之后的二进制文件；</p></li><li><p>Source：表示可以查看源代码的，比Binary大一点；</p></li><li><p>tar.gz archive：Linux、macOS系统使用；</p></li><li><p>zip archive：windows系统使用；</p></li></ul><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>打开<code>./apache-maven-3.6.3/conf/settings.xml</code></p><h3 id="修改mirrors"><a href="#修改mirrors" class="headerlink" title="修改mirrors"></a>修改mirrors</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="修改本地存储路径localRepository"><a href="#修改本地存储路径localRepository" class="headerlink" title="修改本地存储路径localRepository"></a>修改本地存储路径localRepository</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/zhongxin/maven_download<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>将解压后的文件夹移动到<code>/usr/local/apache-maven-3.6.3</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bash_profile</span></span><br><span class="line">进入文件后添加下面两行</span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.6.3</span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line">添加后保存</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_profile</span></span><br></pre></td></tr></tbody></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguumrbl7uj311q0u0x1k.jpg" alt="测试"></p><h2 id="IDEA中配置"><a href="#IDEA中配置" class="headerlink" title="IDEA中配置"></a>IDEA中配置</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguuow7knij313w0u0dy8.jpg" alt="IDEA中配置"></p><h2 id="新建Maven项目"><a href="#新建Maven项目" class="headerlink" title="新建Maven项目"></a>新建Maven项目</h2><h3 id="选择新建Maven项目"><a href="#选择新建Maven项目" class="headerlink" title="选择新建Maven项目"></a>选择新建Maven项目</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguuqfrvdyj31bm0u0tw3.jpg" alt="1"></p><h3 id="选择存放路径"><a href="#选择存放路径" class="headerlink" title="选择存放路径"></a>选择存放路径</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguur9tr1aj31bm0u04dd.jpg" alt="2"></p><h3 id="查看项目结构"><a href="#查看项目结构" class="headerlink" title="查看项目结构"></a>查看项目结构</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguuvtiadkj31b30u0tr6.jpg" alt="项目结构"></p><h3 id="新建存放非代码的文件夹resources"><a href="#新建存放非代码的文件夹resources" class="headerlink" title="新建存放非代码的文件夹resources"></a>新建存放非代码的文件夹resources</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguuv52uknj30x20aawgq.jpg" alt="新建文件夹"></p><h2 id="添加第三方包的方法"><a href="#添加第三方包的方法" class="headerlink" title="添加第三方包的方法"></a>添加第三方包的方法</h2><blockquote><p>第三方包仓库<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p></blockquote><p>以解析json的第三方库<code>fastjson</code>为例</p><ol><li><p>进入<code>mvnrepository</code>搜索想要使用的第三方包</p></li><li><p>找到需要使用的版本</p></li><li><p>拷贝xml内容</p></li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.72<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguv5s751oj31b30u07wh.jpg" alt="第三方包"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>learn_java_maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.72<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><blockquote><p>fastjson工具类，静态方法</p><p>静态方法不需要创建对象，直接用 类名点 调用</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br></pre></td></tr></tbody></table></figure><h3 id="json字符串转成java对象"><a href="#json字符串转成java对象" class="headerlink" title="json字符串转成java对象"></a>json字符串转成java对象</h3><ol start="0"><li>待转化json</li></ol><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{<span class="attr">"name"</span>: <span class="string">"张三"</span>,<span class="attr">"age"</span>: <span class="number">18</span>,<span class="attr">"source"</span>: <span class="number">100</span>}</span><br></pre></td></tr></tbody></table></figure><ol><li>定义一个Student类来接收</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", score="</span> + score +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>转化主函数</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Json</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String json = <span class="string">"{\"name\": \"张三\",\"age\": 18,\"source\": 100}"</span>;</span><br><span class="line">        Student s = JSONObject.parseObject(json, Student.class);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>输出：Student{name=’张三’, age=18, score=0}</li></ol><h3 id="运行提示"><a href="#运行提示" class="headerlink" title="运行提示"></a>运行提示</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguvp5826ij318m0eiacd.jpg" alt="警告提示"></p><p>在<code>pom.xml</code>中添加如下内容：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件拷贝时的编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编译时的编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguvq6i71wj310k0cogmr.jpg" alt="不再提示警告"></p><h3 id="java对象转化为json字符串"><a href="#java对象转化为json字符串" class="headerlink" title="java对象转化为json字符串"></a>java对象转化为json字符串</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"李四"</span>, <span class="number">20</span>, <span class="number">90</span>);</span><br><span class="line">String json2 = JSONObject.toJSONString(s2);</span><br><span class="line">System.out.println(json2);</span><br></pre></td></tr></tbody></table></figure><p>输出{“age”:20,”name”:”李四”,”score”:90}</p><h3 id="json字符串转Map"><a href="#json字符串转Map" class="headerlink" title="json字符串转Map"></a>json字符串转Map</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = JSONObject.parseObject(json, Map.class);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></tbody></table></figure><p>输出{name=张三, source=100, age=18}</p><h3 id="map转json字符串"><a href="#map转json字符串" class="headerlink" title="map转json字符串"></a>map转json字符串</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String json3 = JSONObject.toJSONString(map);</span><br><span class="line">System.out.println(json3);</span><br></pre></td></tr></tbody></table></figure><p>输出{“name”:”张三”,”source”:100,”age”:18}</p><h3 id="json数组字符串转java对象"><a href="#json数组字符串转java对象" class="headerlink" title="json数组字符串转java对象"></a>json数组字符串转java对象</h3><p>待转化：[{“name”: “张三”,”age”: 18},{“name”: “李四”,”age”: 16}]</p><p>定义<code>Teacher</code>类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Teacher{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>转化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Json2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String json = <span class="string">"[{\"name\": \"张三\",\"age\": 18},{\"name\": \"李四\",\"age\": 16}]"</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Teacher&gt; list = JSONObject.parseArray(json, Teacher.class);</span><br><span class="line">        <span class="keyword">for</span> (Teacher t : list) {</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出内容：</p><p>Teacher{name=’张三’, age=18}<br>Teacher{name=’李四’, age=16}</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><blockquote><p>使用Properties一般不使用Map接口的方法</p><p>Properties没有泛型，默认String</p></blockquote><p>先要修改文件编码</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gguw991xlsj313w0u0wux.jpg" alt="修改编码"></p><p>新建一个<code>config.properties</code>文件<code>../learn_java_maven/src/test/resources/config.properties</code></p><h3 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.setProperty(<span class="string">"USERNAME"</span>, <span class="string">"张三"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"PASSWORD"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        System.out.println(prop.getProperty(<span class="string">"USERNAME"</span>));</span><br><span class="line">        System.out.println(prop.getProperty(<span class="string">"PASSWORD"</span>));</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/resources/config.properties"</span>);</span><br><span class="line">        prop.save(fos, <span class="string">"注释"</span>);</span><br><span class="line">        fos.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查看<code>config.properties</code>文件</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注释</span></span><br><span class="line"><span class="comment">#Sat Jul 18 10:05:03 CST 2020</span></span><br><span class="line"><span class="attr">USERNAME</span>=张三</span><br><span class="line"><span class="attr">PASSWORD</span>=<span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"src/test/resources/config.properties"</span>);</span><br><span class="line">prop.load(fis);</span><br><span class="line">System.out.println(prop);</span><br></pre></td></tr></tbody></table></figure><p>输出：{USERNAME=张三, PASSWORD=123456}</p><h2 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h2><ol><li>throws</li><li>try</li></ol><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>往外抛出异常</p><h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><p>可以进行异常捕获</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>{</span><br><span class="line">  <span class="comment">// 可能异常的代码</span></span><br><span class="line">}<span class="keyword">catch</span>(Exception e){</span><br><span class="line">  <span class="comment">// 捕获异常，出现异常的解决方案</span></span><br><span class="line">}<span class="keyword">finally</span>{</span><br><span class="line">  <span class="comment">// 释放资源</span></span><br><span class="line">  <span class="comment">// 无论是否异常，一定会执行的代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(容器类 7)</title>
      <link href="article/b1bc1991.html"/>
      <url>article/b1bc1991.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-容器类-7"><a href="#Java自动化测试-容器类-7" class="headerlink" title="Java自动化测试(容器类 7)"></a>Java自动化测试(容器类 7)</h1><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>特点：存储和取出顺序不一样，无索引，不可重复</p><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"测试"</span>);</span><br><span class="line">        set.add(<span class="string">"测试"</span>);</span><br><span class="line">        set.add(<span class="string">"a"</span>);</span><br><span class="line">        set.add(<span class="string">"b"</span>);</span><br><span class="line">        set.add(<span class="string">"c"</span>);</span><br><span class="line">        set.add(<span class="string">"1"</span>);</span><br><span class="line">        set.add(<span class="string">"2"</span>);</span><br><span class="line">        set.add(<span class="string">"3"</span>);</span><br><span class="line">        System.out.println(set); <span class="comment">// [a, 1, b, 2, c, 3, 测试]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="取出的方法"><a href="#取出的方法" class="headerlink" title="取出的方法"></a>取出的方法</h3><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(set);</span><br></pre></td></tr></tbody></table></figure><h4 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String e : set) {</span><br><span class="line">    System.out.println(e);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">    String s = it.next();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.day08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"id"</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">"age"</span>, <span class="number">18</span>);</span><br><span class="line">        map.put(<span class="string">"score"</span>, <span class="number">60</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//{score=60, id=100, age=18}</span></span><br><span class="line">        map.put(<span class="string">"score"</span>, <span class="number">80</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//{score=80, id=100, age=18}</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="取出某个"><a href="#取出某个" class="headerlink" title="取出某个"></a>取出某个</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> id = map.get(<span class="string">"id"</span>);</span><br><span class="line">System.out.println(id);<span class="comment">//100</span></span><br><span class="line">System.out.println(map.get(<span class="string">"id1"</span>));<span class="comment">//null</span></span><br></pre></td></tr></tbody></table></figure><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(map.size());<span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.remove(<span class="string">"id"</span>);</span><br><span class="line">System.out.println(map);<span class="comment">// {score=80, age=18}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取所有的key"><a href="#获取所有的key" class="headerlink" title="获取所有的key"></a>获取所有的key</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; set = map.keySet();</span><br><span class="line">System.out.println(set);<span class="comment">// [score, age]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取所有的值"><a href="#获取所有的值" class="headerlink" title="获取所有的值"></a>获取所有的值</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line">Collection&lt;Integer&gt; values = map.values();</span><br><span class="line">System.out.println(values);<span class="comment">//[80, 18]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="判断key是否存在"><a href="#判断key是否存在" class="headerlink" title="判断key是否存在"></a>判断key是否存在</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(map.containsKey(<span class="string">"score"</span>));<span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="遍历输出"><a href="#遍历输出" class="headerlink" title="遍历输出"></a>遍历输出</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set_key = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : set_key) {</span><br><span class="line">    <span class="keyword">int</span> value = map.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">"="</span> + value);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//score=80</span></span><br><span class="line"><span class="comment">//age=18</span></span><br></pre></td></tr></tbody></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entrySet) {</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">"="</span> + entry.getValue());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.Flask:数据库和模型</title>
      <link href="article/9ce49263.html"/>
      <url>article/9ce49263.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-数据库和模型-十"><a href="#Flask-数据库和模型-十" class="headerlink" title="Flask(数据库和模型 十)"></a>Flask(数据库和模型 十)</h1><h2 id="使用原生SQL来进行sqlite的使用"><a href="#使用原生SQL来进行sqlite的使用" class="headerlink" title="使用原生SQL来进行sqlite的使用"></a>使用原生SQL来进行sqlite的使用</h2><h3 id="sqlite的好处"><a href="#sqlite的好处" class="headerlink" title="sqlite的好处"></a>sqlite的好处</h3><ol><li>sqlite3 开箱即用</li><li>小巧，功能还比较强大，百万级别</li><li>不需要联网</li><li>测试平台<span id="more"></span><h3 id="连接与使用"><a href="#连接与使用" class="headerlink" title="连接与使用"></a>连接与使用</h3></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2020/7/11 11:03 上午</span></span><br><span class="line"><span class="comment"># @Author  : zhongxin</span></span><br><span class="line"><span class="comment"># @Email   : 490336534@qq.com</span></span><br><span class="line"><span class="comment"># @File    : app.py</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, g</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">    c = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line">    g.db = c</span><br><span class="line">    g.c = c.cursor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_db</span>(<span class="params">exception</span>):</span></span><br><span class="line">    db = <span class="built_in">getattr</span>(g, <span class="string">'db'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    q = <span class="string">"""CREATE TABLE project</span></span><br><span class="line"><span class="string">        (ID INT PRIMARY KEY    NOT NULL,</span></span><br><span class="line"><span class="string">        NAME     CHAR(50)    NOT NULL,</span></span><br><span class="line"><span class="string">        DESC     CHAR(500);"""</span></span><br><span class="line">    g.c.execute(q)</span><br><span class="line">    g.db.commit()</span><br><span class="line">    q = <span class="string">f'inset into project (ID,NAME) values (123,"ZX")'</span></span><br><span class="line">    g.c.execute(q)</span><br><span class="line">    g.db.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><h3 id="什么是ORM"><a href="#什么是ORM" class="headerlink" title="什么是ORM"></a>什么是ORM</h3><p>类和对象封装</p><blockquote><p>对象关系映射（Object Relational Mapping，简称ORM）是通过使用描述对象和数据库之间映射的<a href="https://baike.baidu.com/item/%E5%85%83%E6%95%B0%E6%8D%AE/1946090">元数据</a>，将面向对象语言程序中的对象自动持久化到关系数据库中。本质上就是将数据从一种形式转换到另外一种形式。 这也同时暗示着额外的执行开销；然而，如果ORM作为一种中间件实现，则会有很多机会做优化，而这些在手写的<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E5%B1%82/3584971">持久层</a>并不存在。 更重要的是用于控制转换的元数据需要提供和管理；但是同样，这些花费要比维护手写的方案要少；而且就算是遵守ODMG规范的对象数据库依然需要类级别的元数据。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggmyy8ibfxj30nr0cmq3s.jpg" alt="ORM"></p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li>避免SQL注入</li><li>无需为各个不同的数据写不同的查询语句</li></ol><h3 id="坏处"><a href="#坏处" class="headerlink" title="坏处"></a>坏处</h3><ol><li>每个具体的语法不一样，但是SQL语句是通用的</li><li>学习成本较高</li></ol><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><ul><li>手工建表：先创建，再根据表结构写代码</li><li>ORM：先写代码，通过代码自动创建表结构</li></ul><h2 id="ORM数据库创建步骤"><a href="#ORM数据库创建步骤" class="headerlink" title="ORM数据库创建步骤"></a>ORM数据库创建步骤</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install flask-sqlalchemy</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql+pymysql://root:123456@localhost:3306/demo'</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># 数据库对象</span></span><br></pre></td></tr></tbody></table></figure><p><code>'mysql+pymysql://root:123456@localhost:3306/demo'</code>按照示例填写即可</p><h4 id="各种数据库的URI"><a href="#各种数据库的URI" class="headerlink" title="各种数据库的URI"></a>各种数据库的URI</h4><ul><li>Postgres</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgresql://账号:密码@localhost/mydataase</span><br></pre></td></tr></tbody></table></figure><ul><li>Mysql</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql://账号:密码@localhost/mydataase</span><br></pre></td></tr></tbody></table></figure><ul><li>Oracle</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oracle://账号:密码@localhost/mydataase</span><br></pre></td></tr></tbody></table></figure><ul><li>SQLite</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite:////path/mydataase.db</span><br></pre></td></tr></tbody></table></figure><h3 id="定义表结构，设计表"><a href="#定义表结构，设计表" class="headerlink" title="定义表结构，设计表"></a>定义表结构，设计表</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">80</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_all</span>():</span></span><br><span class="line">    <span class="keyword">return</span> db.create_all()</span><br><span class="line"></span><br><span class="line">create_all()</span><br></pre></td></tr></tbody></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>创建一个<code>demo</code>数据库</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggmzqmxb8jj30u00uwaq9.jpg" alt="创建库"></p><p>运行之后就在我们本地的mysql数据中创建了<code>user</code>表</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggmzkwier4j317f0u01kx.jpg" alt="创建后"></p><h3 id="其他方式创建"><a href="#其他方式创建" class="headerlink" title="其他方式创建"></a>其他方式创建</h3><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flask shell</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from app import db</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.create()</span></span><br></pre></td></tr></tbody></table></figure><h4 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install flask-migrate</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql+pymysql://root:zx660644@localhost:3306/demo'</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># 数据库对象</span></span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">80</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_all</span>():</span></span><br><span class="line">    <span class="keyword">return</span> db.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_all()</span><br></pre></td></tr></tbody></table></figure><p>加一行</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate = Migrate(app, db)</span><br></pre></td></tr></tbody></table></figure><p>使用</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flask db migrate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flask db migrate  <span class="comment"># 生产脚本</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flask db upgrade  <span class="comment"># 更新到数据库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flask db downgrade <span class="comment"># 退回</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/index'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    new_user = User(username=<span class="string">'测试游记'</span>, email=<span class="string">'490336534@qq.com'</span>)</span><br><span class="line">    db.session.add(new_user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggn0ui4puqj30vc08240w.jpg" alt="查看数据库"></p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/user'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>():</span></span><br><span class="line">    user = User.query.<span class="built_in">all</span>()</span><br><span class="line">    print(user)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggn0w93jujj31270u0tky.jpg" alt="查询数据"></p>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(字符串与集合的常用API 6)</title>
      <link href="article/66824e23.html"/>
      <url>article/66824e23.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-字符串与集合的常用API-6"><a href="#Java自动化测试-字符串与集合的常用API-6" class="headerlink" title="Java自动化测试(字符串与集合的常用API 6)"></a>Java自动化测试(字符串与集合的常用API 6)</h1><blockquote><p>Java API文档</p><p>链接: <a href="https://pan.baidu.com/s/1t1VSnrOsJn_5HJh91JnF9g">https://pan.baidu.com/s/1t1VSnrOsJn_5HJh91JnF9g</a>  密码: mu1b</p></blockquote><h2 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h2><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><span id="more"></span><p>判断字符串是否一样，大小写敏感</p><p>在<code>object</code>类中</p><p>使用<code>==</code>会去判断引用地址是否相等，没有意义</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>String</code>类中进行了重写</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) {</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) {</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="string">"abc"</span>;</span><br><span class="line">        String s2 = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(s1.equals(s1)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(s2.equals(s1)); <span class="comment">// true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="equalsIgnoreCase"><a href="#equalsIgnoreCase" class="headerlink" title="equalsIgnoreCase"></a>equalsIgnoreCase</h3><p>判断字符串是否一样，忽略大小写</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="string">"abc"</span>;</span><br><span class="line">        String s2 = <span class="string">"Abc"</span>;</span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));</span><br><span class="line">        System.out.println(s2.equalsIgnoreCase(s1));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一般用于验证码的验证</p><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>字符串切割</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s = <span class="string">"a,1,2,3,abb"</span>;</span><br><span class="line">        String[] arr = s.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s1 : arr</span><br><span class="line">        ) {</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>替换字符串内容，不修改原先的内容，需要重新赋值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo3</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s = <span class="string">"abc123123123ads"</span>;</span><br><span class="line">        String s1 = s.replace(<span class="string">"123"</span>, <span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(s); <span class="comment">// abc123123123ads</span></span><br><span class="line">        System.out.println(s1); <span class="comment">// abcabcabcabcads</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><p>截取字符串的一部分</p><p>该方法支持输入一个值：截取从该值索引到末尾</p><p>也支持输入两个值，截取从第一个值索引到第二个值的索引</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo4</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s = <span class="string">"abcasd1231241"</span>;</span><br><span class="line">        String s1 = s.substring(<span class="number">6</span>); <span class="comment">// 1231241</span></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        String s2 = s.substring(<span class="number">6</span>, <span class="number">8</span>); <span class="comment">// 左闭右开</span></span><br><span class="line">        System.out.println(s2); <span class="comment">// 12</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>删除字符串两端空格</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo5</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s = <span class="string">"   abc   123 "</span>;</span><br><span class="line">        String s1 = s.trim();</span><br><span class="line">        System.out.println(s1); <span class="comment">// abc   123</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要将所有空格删除可以使用<code>replace</code></p><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>返回字符串长度</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo6</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s = <span class="string">"abc123"</span>;</span><br><span class="line">        System.out.println(s.length()); <span class="comment">// 6</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf / lastIndexOf"></a>indexOf / lastIndexOf</h3><ul><li>indexOf 该值的第一个索引，如果不存在返回-1</li><li>lastIndexOf改值的最后一个索引，如果不存在返回-1</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo7</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s = <span class="string">"abc123abc123"</span>;</span><br><span class="line">        System.out.println(s.indexOf(<span class="string">"a"</span>)); <span class="comment">// 0</span></span><br><span class="line">        System.out.println(s.indexOf(<span class="string">"4"</span>));<span class="comment">// -1</span></span><br><span class="line">        System.out.println(s.lastIndexOf(<span class="string">"a"</span>)); <span class="comment">// 6</span></span><br><span class="line">        System.out.println(s.lastIndexOf(<span class="string">"4"</span>)); <span class="comment">// -1</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p>判断内容是否在字符串中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo8</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s = <span class="string">"abc123abc123"</span>;</span><br><span class="line">        System.out.println(s.contains(<span class="string">"a"</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(s.contains(<span class="string">"4"</span>)); <span class="comment">// false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h3><p>判断是否为空</p><p>对<code>null</code>进行判断会报错</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo9</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s = <span class="string">"abc123abc123"</span>;</span><br><span class="line">        String s1 = <span class="string">""</span>;</span><br><span class="line">        String s2 = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(s.isEmpty()); <span class="comment">// false</span></span><br><span class="line">        System.out.println(s1.isEmpty()); <span class="comment">// true</span></span><br><span class="line">        System.out.println(s2.isEmpty()); <span class="comment">// java.lang.NullPointerException</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="集合常用方法"><a href="#集合常用方法" class="headerlink" title="集合常用方法"></a>集合常用方法</h2><p>除<code>lang</code>包外 其他包的调用都需要导包</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraylistDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="number">1.1</span>);</span><br><span class="line">        list.add(<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(list); <span class="comment">// [1, abc, 1.1, false]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>控制集合的数据类型，只能是引用数据类型</p><blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;类型&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggkd1i8or0j311c0lmn00.jpg" alt="泛型"></p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>返回一个内容</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraylistDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"111"</span>);</span><br><span class="line">        list.add(<span class="string">"222"</span>);</span><br><span class="line">        list.add(<span class="string">"333"</span>);</span><br><span class="line">        list.add(<span class="string">"444"</span>);</span><br><span class="line">        System.out.println(list.get(<span class="number">0</span>)); <span class="comment">// abc</span></span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>)); <span class="comment">// 111</span></span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>)); <span class="comment">// 222</span></span><br><span class="line">        System.out.println(list.get(<span class="number">3</span>)); <span class="comment">// 333</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回长度</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraylistDemo3</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"111"</span>);</span><br><span class="line">        list.add(<span class="string">"222"</span>);</span><br><span class="line">        list.add(<span class="string">"333"</span>);</span><br><span class="line">        list.add(<span class="string">"444"</span>);</span><br><span class="line">        System.out.println(list.size()); <span class="comment">// 5</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>删除内容</p><p>删除不存在的内容返回<code>false</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraylistDemo4</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"111"</span>);</span><br><span class="line">        list.add(<span class="string">"222"</span>);</span><br><span class="line">        list.add(<span class="string">"333"</span>);</span><br><span class="line">        list.add(<span class="string">"444"</span>);</span><br><span class="line">        System.out.println(list.remove(<span class="string">"abc"</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(list.remove(<span class="string">"123"</span>)); <span class="comment">// false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>为某索引的值设置新值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraylistDemo5</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"111"</span>);</span><br><span class="line">        list.add(<span class="string">"222"</span>);</span><br><span class="line">        list.add(<span class="string">"333"</span>);</span><br><span class="line">        list.add(<span class="string">"444"</span>);</span><br><span class="line">        System.out.println(list.set(<span class="number">2</span>, <span class="string">"abc"</span>)); <span class="comment">// 222</span></span><br><span class="line">        System.out.println(list); <span class="comment">// [abc, 111, abc, 333, 444]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Flask:中间件与全局变量</title>
      <link href="article/c47b13b2.html"/>
      <url>article/c47b13b2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-中间件与全局变量-九"><a href="#Flask-中间件与全局变量-九" class="headerlink" title="Flask(中间件与全局变量 九)"></a>Flask(中间件与全局变量 九)</h1><h2 id="中间件-middleware"><a href="#中间件-middleware" class="headerlink" title="中间件 middleware"></a>中间件 middleware</h2><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p>当Flask应用处理请求时，它会根据从WSGI服务器收到的环境创建一个<code>Request</code>对象.</p><p>因为工作者（取决于服务器的线程，进程或者协程）一次只能处理一个请求，所以在该请求期间请求数据可被认为是该工作者的全部数据。</p><p>Flask对此的术语为<code>本地请求</code></p><span id="more"></span><h3 id="请求钩子-before-request"><a href="#请求钩子-before-request" class="headerlink" title="请求钩子 before_request"></a>请求钩子 before_request</h3><p>在获取某个请求数据之前，可以做额外的事情。</p><h4 id="场景：运营-数据埋点"><a href="#场景：运营-数据埋点" class="headerlink" title="场景：运营-数据埋点"></a>场景：运营-数据埋点</h4><p>各个接口的访问数量与频次</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num_of_interface</span>():</span></span><br><span class="line">    <span class="comment"># 从数据库中读取缓存数量</span></span><br><span class="line">    print(<span class="string">"接口访问数量的缓存+1"</span>)</span><br><span class="line">    <span class="comment"># 将缓存数量+1后存入数据库</span></span><br></pre></td></tr></tbody></table></figure><h4 id="场景：验证是否登陆"><a href="#场景：验证是否登陆" class="headerlink" title="场景：验证是否登陆"></a>场景：验证是否登陆</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num_of_interface</span>():</span></span><br><span class="line">    sign = request.args.get(<span class="string">'sign'</span>)</span><br><span class="line">    <span class="keyword">if</span> sign != <span class="string">'admin'</span>:</span><br><span class="line">        abort(<span class="number">401</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="场景：操作时间大于一定时间后需要重新登陆"><a href="#场景：操作时间大于一定时间后需要重新登陆" class="headerlink" title="场景：操作时间大于一定时间后需要重新登陆"></a>场景：操作时间大于一定时间后需要重新登陆</h4><h3 id="after-request"><a href="#after-request" class="headerlink" title="after_request"></a>after_request</h3><ul><li><p><code>response</code>参数必须有</p></li><li><p>return 的必须是一个Response对象</p></li><li><p>通常用来修改响应</p></li><li><p>如果视图出现错误，不会调用</p></li></ul><h4 id="场景：封装响应信息"><a href="#场景：封装响应信息" class="headerlink" title="场景：封装响应信息"></a>场景：封装响应信息</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_res</span>(<span class="params">response</span>):</span></span><br><span class="line">    response.headers[<span class="string">'server'</span>] = <span class="string">'zx'</span></span><br><span class="line">    print(<span class="string">f'after <span class="subst">{request.url}</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggf7h07czfj31180mujvg.jpg" alt="响应头修改"></p><h3 id="teardown-request"><a href="#teardown-request" class="headerlink" title="teardown_request"></a>teardown_request</h3><ul><li>通常用来释放资源</li><li><strong>不管有没有错误都会调用</strong></li></ul><h4 id="场景：关闭数据库连接"><a href="#场景：关闭数据库连接" class="headerlink" title="场景：关闭数据库连接"></a>场景：关闭数据库连接</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_make_res</span>(<span class="params">error</span>):</span></span><br><span class="line">    print(error)</span><br><span class="line">    print(<span class="string">"tear Down"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="before-first-request"><a href="#before-first-request" class="headerlink" title="before_first_request"></a>before_first_request</h3><p>第一次请求的时候触发</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>():</span></span><br><span class="line">    print(<span class="string">"第一次请求"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><h3 id="g：同一个请求中-共享数据"><a href="#g：同一个请求中-共享数据" class="headerlink" title="g：同一个请求中 共享数据"></a>g：同一个请求中 共享数据</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> g</span><br></pre></td></tr></tbody></table></figure><h4 id="场景：验证用户信息"><a href="#场景：验证用户信息" class="headerlink" title="场景：验证用户信息"></a>场景：验证用户信息</h4><p>可以在同一请求之间共享<code>g</code>的内容，相当于实现了这个请求的一个全局变量</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num_of_interface</span>():</span></span><br><span class="line">    sign = request.args.get(<span class="string">'sign'</span>)</span><br><span class="line">    <span class="keyword">if</span> sign != <span class="string">'admin'</span>:</span><br><span class="line">        abort(<span class="number">401</span>)</span><br><span class="line">    <span class="comment"># 获取sign对于的用户</span></span><br><span class="line">    a = sign + <span class="string">'md'</span></span><br><span class="line">    g.user = a</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    print(g.user)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br></pre></td></tr></tbody></table></figure><h4 id="场景：数据库连接"><a href="#场景：数据库连接" class="headerlink" title="场景：数据库连接"></a>场景：数据库连接</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_to_database</span>():</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">                           user=<span class="string">'root'</span>,</span><br><span class="line">                           password=<span class="string">'123456'</span>,</span><br><span class="line">                           db=<span class="string">'zx'</span>,</span><br><span class="line">                           charset=<span class="string">'utf8mb4'</span>)</span><br><span class="line">    <span class="keyword">return</span> conn.cursor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'db'</span> <span class="keyword">not</span> <span class="keyword">in</span> g:</span><br><span class="line">        g.db = connect_to_database()</span><br><span class="line">        </span><br><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_db</span>(<span class="params">exception</span>):</span></span><br><span class="line">    db = g.pop(<span class="string">'db'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        db.close()</span><br><span class="line">        </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/hi'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>():</span></span><br><span class="line">    g.db.execute(<span class="string">'SELECT * FROM user_info;'</span>)</span><br><span class="line">    a = g.db.fetchall()</span><br><span class="line">    print(a)</span><br></pre></td></tr></tbody></table></figure><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>用来记录用户会话信息</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'sfoowff'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">'user'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'你没有登陆'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'这是首页'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/login/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    username = request.args.get(<span class="string">'username'</span>)</span><br><span class="line">    pwd = request.args.get(<span class="string">'pwd'</span>)</span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">and</span> pwd:</span><br><span class="line">        session[<span class="string">'user'</span>] = username</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'登陆成功'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'账号密码不能为空'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/logout/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    session.pop(<span class="string">'user'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'登出'</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/login/?username=zx&amp;pwd=123</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggf934msxnj31b30u0qtf.jpg" alt="登陆"></p><p>访问首页</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggf95m79vqj30r00mqn13.jpg" alt="首页"></p>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Flask:表单验证</title>
      <link href="article/8f02b7de.html"/>
      <url>article/8f02b7de.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-表单验证-八"><a href="#Flask-表单验证-八" class="headerlink" title="Flask(表单验证 八)"></a>Flask(表单验证 八)</h1><h2 id="WTForms"><a href="#WTForms" class="headerlink" title="WTForms"></a>WTForms</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install flask-wtf</span></span><br></pre></td></tr></tbody></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="编写校验器"><a href="#编写校验器" class="headerlink" title="编写校验器"></a>编写校验器</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Regexp, DataRequired, Length, EqualTo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    phone = StringField(</span><br><span class="line">        label=<span class="string">'手机号码'</span>,</span><br><span class="line">        validators=[Regexp(<span class="string">r'^1[3,5,7,8,9]\d{9}$'</span>, message=<span class="string">'手机号码格式错误'</span>),</span><br><span class="line">                    DataRequired(<span class="string">'手机号码不能为空'</span>)]</span><br><span class="line">    )</span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=<span class="string">'密码'</span>,</span><br><span class="line">        validators=[Length(<span class="number">6</span>, <span class="number">32</span>, message=<span class="string">'密码长度不对'</span>),</span><br><span class="line">                    DataRequired(<span class="string">'密码不能为空'</span>)]</span><br><span class="line">    )</span><br><span class="line">    confirm_pwd = PasswordField(</span><br><span class="line">        label=<span class="string">'确认密码'</span>,</span><br><span class="line">        validators=[EqualTo(<span class="string">'pwd'</span>)]</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">from</span> helpers.forms <span class="keyword">import</span> RegisterForm</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = os.urandom(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/register'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>)</span><br><span class="line">    form = RegisterForm(request.form)</span><br><span class="line">    <span class="keyword">if</span> form.validate():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Success"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Error:<span class="subst">{form.errors}</span>'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p>使用<code>form.validate()</code>来验证传入的数据是否符合要求</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg8aki369qg30jy08ohdt.gif" alt="表单验证"></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>解决<code>CSRF</code>问题</p><p>html的form中添加</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"{{ url_for('register') }}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    {{ form.hidden_tag() }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"phone"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"confirm_pwd"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code> {{ form.hidden_tag() }}</code>的作用</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg8augd0u1j31ig0rygrm.jpg" alt="前端"></p><p><code>register</code>将form传递</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/register'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    form = RegisterForm(request.form)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>,form=form)</span><br><span class="line">    <span class="keyword">if</span> form.validate():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Success"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Error:<span class="subst">{form.errors}</span>'</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg8at14e2lg30ki07k4qp.gif" alt="正常提交"></p><p>通过调试模式，可以看到form中的内容。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg8azrtf3ij31d60u04fr.jpg" alt="截屏2020-06-28 下午9.02.43"></p><p><code>form.data</code>可以获取到前端获取到的全部数据</p><h3 id="优化页面"><a href="#优化页面" class="headerlink" title="优化页面"></a>优化页面</h3><p>添加一个下拉框</p><p>表单验证中添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">job = SelectField(label=<span class="string">'Job'</span>,</span><br><span class="line">                  choices=[(<span class="string">'teacher'</span>, <span class="string">'Teacher'</span>),</span><br><span class="line">                           (<span class="string">'doctor'</span>, <span class="string">'Doctor'</span>),</span><br><span class="line">                           (<span class="string">'engineer'</span>, <span class="string">'Engineer'</span>)]</span><br><span class="line">                  )</span><br></pre></td></tr></tbody></table></figure><p>html重写</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">{{ msg }}</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"{{ url_for('register') }}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    {{ form.hidden_tag() }}</span><br><span class="line">    {{ form.phone.label() }} {{ form.phone() }}</span><br><span class="line">    {{ form.pwd.label() }} {{ form.pwd() }}</span><br><span class="line">    {{ form.confirm_pwd.label() }} {{ form.confirm_pwd() }}</span><br><span class="line">    {{ form.job.label() }}{{ form.job() }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg8barx1asj31go0o2gt7.jpg" alt="自动生成"></p>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Flask:数据校验</title>
      <link href="article/ce351f56.html"/>
      <url>article/ce351f56.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-数据校验-七"><a href="#Flask-数据校验-七" class="headerlink" title="Flask(数据校验 七)"></a>Flask(数据校验 七)</h1><h2 id="数据校验原因"><a href="#数据校验原因" class="headerlink" title="数据校验原因"></a>数据校验原因</h2><p>由于有很多手段可以绕过前端往后端发送数据，所以后端需要对数据进行校验后才可以朝数据库插入</p><h2 id="前台提供数据输入"><a href="#前台提供数据输入" class="headerlink" title="前台提供数据输入"></a>前台提供数据输入</h2><p>写一个简单的提交信息的表单页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"{{ url_for('register') }}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"phone"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"confirm_pwd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg4jk24sa8j312f0u048n.jpg" alt="注册页面"></p><span id="more"></span><h2 id="后台接受表单"><a href="#后台接受表单" class="headerlink" title="后台接受表单"></a>后台接受表单</h2><p>在写一个后台<code>/register</code>路由数据获取部分</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/register'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>)</span><br><span class="line">    phone = request.form.get(<span class="string">'phone'</span>)</span><br><span class="line">    pwd = request.form.get(<span class="string">'pwd'</span>)</span><br><span class="line">    confirm_pwd = request.form.get(<span class="string">'confirm_pwd'</span>)</span><br></pre></td></tr></tbody></table></figure><p>判断<code>phone</code>存在</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> phone:</span><br><span class="line">    abort(<span class="number">412</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="abort源码"><a href="#abort源码" class="headerlink" title="abort源码"></a>abort源码</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abort</span>(<span class="params">status, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">return</span> _aborter(status, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_aborter = Aborter()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Aborter(object):</span><br><span class="line">    def __init__(self, mapping=None, extra=None):</span><br><span class="line">        if mapping is None:</span><br><span class="line">            mapping = default_exceptions</span><br><span class="line">        self.mapping = dict(mapping)</span><br><span class="line">        if extra is not None:</span><br><span class="line">            self.mapping.update(extra)</span><br><span class="line"></span><br><span class="line">    def __call__(self, code, *args, **kwargs):</span><br><span class="line">        if not args and not kwargs and not isinstance(code, integer_types):</span><br><span class="line">            raise HTTPException(response=code)</span><br><span class="line">        if code not in self.mapping:</span><br><span class="line">            raise LookupError("no exception for %r" % code)</span><br><span class="line">        raise self.mapping[code](*args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p>可以看到<code>abort</code>其实就是调用了<code>_aborter</code>也就是<code>Aborter</code>的<code>__call__</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mapping = default_exceptions</span><br><span class="line">default_exceptions = {}</span><br><span class="line">__all__ = [<span class="string">"HTTPException"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_exceptions</span>():</span></span><br><span class="line">    <span class="keyword">for</span> _name, obj <span class="keyword">in</span> iteritems(<span class="built_in">globals</span>()):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            is_http_exception = <span class="built_in">issubclass</span>(obj, HTTPException)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            is_http_exception = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_http_exception <span class="keyword">or</span> obj.code <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        __all__.append(obj.__name__)</span><br><span class="line">        old_obj = default_exceptions.get(obj.code, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> old_obj <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">issubclass</span>(obj, old_obj):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        default_exceptions[obj.code] = obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_find_exceptions()</span><br><span class="line"><span class="keyword">del</span> _find_exceptions</span><br></pre></td></tr></tbody></table></figure><p>它把上面全部的错误都添加进去了</p><p>下面看一下<code>NotFound</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotFound</span>(<span class="params">HTTPException</span>):</span></span><br><span class="line">    <span class="string">"""*404* `Not Found`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raise if a resource does not exist and never existed.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    code = <span class="number">404</span></span><br><span class="line">    description = (</span><br><span class="line">        <span class="string">"The requested URL was not found on the server. If you entered"</span></span><br><span class="line">        <span class="string">" the URL manually please check your spelling and try again."</span></span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure><p>我们访问页面出现404的时候它的返回内容就是</p><p><code>code = 404</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">description = (</span><br><span class="line">        <span class="string">"The requested URL was not found on the server. If you entered"</span></span><br><span class="line">        <span class="string">" the URL manually please check your spelling and try again."</span></span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure><h2 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h2><p>所以我们的<code>phone</code>判断为</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> phone:</span><br><span class="line">    abort(<span class="number">412</span>, description=<span class="string">'phone is empty'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg4jvcy3clj312z0u0n3q.jpg" alt="判断号码存在"></p><p>完整：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/register'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>)</span><br><span class="line">    phone = request.form.get(<span class="string">'phone'</span>)</span><br><span class="line">    pwd = request.form.get(<span class="string">'pwd'</span>)</span><br><span class="line">    confirm_pwd = request.form.get(<span class="string">'confirm_pwd'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> phone:</span><br><span class="line">        abort(<span class="number">412</span>, description=<span class="string">'phone is empty'</span>)</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r'^1[3,5,7,8,9]\d{9}$'</span>, phone):</span><br><span class="line">        abort(<span class="number">412</span>, description=<span class="string">'phone is error'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pwd:</span><br><span class="line">        abort(<span class="number">412</span>, description=<span class="string">'password is empty'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pwd) &lt; <span class="number">6</span>:</span><br><span class="line">        abort(<span class="number">412</span>, description=<span class="string">'password is not safe'</span>)</span><br><span class="line">    <span class="keyword">if</span> pwd != confirm_pwd:</span><br><span class="line">        abort(<span class="number">412</span>, description=<span class="string">'password is not consistent'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="切换为中文"><a href="#切换为中文" class="headerlink" title="切换为中文"></a>切换为中文</h2><p>在页面上添加提示信息</p><p><code>&lt;body&gt;</code> <code>&lt;form&gt;</code>之间添加<code>{{ msg }}</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">{{ msg }}</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"{{ url_for('register') }}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用<code>abort</code>的第二种用法，返回<code>Response</code>对象</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = Response(render_template(<span class="string">'register.html'</span>, msg=<span class="string">'请输入电话号码'</span>),</span><br><span class="line">               status=<span class="string">'412'</span>,</span><br><span class="line">               content_type=<span class="string">'text/html;charset=utf-8'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> phone:</span><br><span class="line">    abort(res)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg4k8bror9j312f0u0qda.jpg" alt="截屏2020-06-25 下午3.20.07"></p><p>也可以写成</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> phone:</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>, msg=<span class="string">'请输入电话号码'</span>), <span class="number">412</span>, {<span class="string">"content_type"</span>: <span class="string">'text/html;charset=utf-8'</span>}</span><br></pre></td></tr></tbody></table></figure><p>效果是一样的</p>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-猜大小游戏</title>
      <link href="article/12d70e10.html"/>
      <url>article/12d70e10.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue学习-猜大小游戏"><a href="#Vue学习-猜大小游戏" class="headerlink" title="Vue学习-猜大小游戏"></a>Vue学习-猜大小游戏</h1><p>今天看了一会儿Vue文档，写一个猜大小的小游戏，大概这个丑样：</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g36pcx4hs4j30u60u047v.jpg" alt="长这样"></p><span id="more"></span><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li>按下开始之后出现输入框</li><li>输入数字自动与一个1-100之间的数字比较</li><li>数字一致后，出现「重新开始」按钮，输入框灰显</li><li>每次输入非重复内容都会被记录</li></ol><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>头部导入一下<code>Vue.js</code>代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>猜大小<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>主体部分包含</p><ul><li>一个<code>&lt;h1&gt;</code>标签的标题</li><li>一个交互信息</li><li>开始/重新开始按钮</li><li>游戏记录</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"guess"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>猜大小游戏<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    {{info}}</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"num1"</span> <span class="attr">v-show</span>=<span class="string">"input_status"</span> <span class="attr">:disabled</span>=<span class="string">"isdisabled"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"playGame"</span> <span class="attr">v-show</span>=<span class="string">"hidden_status"</span>&gt;</span></span><br><span class="line">        {{message}}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"info_ in info_list"</span>&gt;</span></span><br><span class="line">            第{{info_.id}}次猜数字,输入了<span class="tag">&lt;<span class="name">span</span>&gt;</span>「{{info_.num}}」<span class="tag">&lt;/<span class="name">span</span>&gt;</span>,提示:{{info_.text}}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p><code>{{info}}</code>等<code>{{xxx}}</code>的部分会被js中的内容渲染</p></li><li><p><code>v-model="num1"</code>表示输入框关联一下num1</p></li><li><p><code>v-show</code>决定元素是否显示</p></li><li><p><code>:xxx</code>是<code>v-bind:</code>的简写</p><ul><li><code>:disabled</code>表示的是可编辑状态由变量<code>isdisabled</code>决定</li></ul></li><li><p><code>@xxx</code>是<code>v-on</code>的简写</p><ul><li><code>@click="playGame"</code>表示，鼠标点击操作会触发<code>playGame</code>函数</li></ul></li><li><p><code>v-for</code>是循环增加无序标签li，答应游戏日志</p></li></ul><h2 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h2><p>看页面就知道，css瞎写的</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li>data中的部分都可以在html部分使用渲染出来</li><li>watch是一个监听，每次输入框发生改变都会去调用<code>changed_num()</code>函数</li><li>created是在首次运行的时候执行的，会给一个给定的1-100内的数字</li><li>methods存放的全部的函数<ul><li>changed_num，主要的游戏结果的判断，并会把日志加入到<code>info_list</code>，然后被展示到无序序列里面，有几种状态：<ul><li>正确</li><li>输入为空</li><li>输入大于100</li><li>输入的数字比要猜的数字大</li><li>输入的数字比要猜的数字小</li><li>输入非整数</li></ul></li><li>通过内容的遍历<code>(this.num1 == item.num)</code>，只有没有输入过的数字的信息，才会被打印到日志中</li></ul></li><li>重新开始游戏<ul><li>把几个状态都重新刷新一下，并生成一个新的数字</li></ul></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> item = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> guess_num = <span class="keyword">new</span> Vue({</span><br><span class="line">        el: <span class="string">"#guess"</span>,</span><br><span class="line">        data: {</span><br><span class="line">            num: <span class="string">''</span>,</span><br><span class="line">            num1: <span class="string">''</span>,</span><br><span class="line">            info: <span class="string">"请按「开始游戏」开始猜数字游戏"</span>,</span><br><span class="line">            hidden_status: <span class="literal">true</span>,</span><br><span class="line">            input_status: <span class="literal">false</span>,</span><br><span class="line">            message: <span class="string">'开始'</span>,</span><br><span class="line">            isdisabled: <span class="literal">false</span>,</span><br><span class="line">            info_list: []</span><br><span class="line">        },</span><br><span class="line">        watch: {</span><br><span class="line">            num1: <span class="function"><span class="keyword">function</span> (<span class="params">newNum1, oldNum1</span>) </span>{</span><br><span class="line">                <span class="built_in">this</span>.info = <span class="string">'开始比较'</span>;</span><br><span class="line">                guess_num.changed_num()</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="built_in">this</span>.num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            changed_num: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">var</span> regNeg = <span class="regexp">/[0-9]*/</span>;</span><br><span class="line">                <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.num1 == <span class="built_in">this</span>.num) {</span><br><span class="line">                    <span class="built_in">this</span>.info = <span class="string">'你猜对了!'</span>;</span><br><span class="line">                    <span class="built_in">this</span>.hidden_status = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">this</span>.isdisabled = <span class="literal">true</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.num1 == <span class="string">''</span>) {</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">this</span>.info = <span class="string">'请输入一个小于100整数'</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.num1 &gt; <span class="number">100</span>) {</span><br><span class="line">                    <span class="built_in">this</span>.info = <span class="string">'请输入一个小于100的值'</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.num1 &gt; <span class="built_in">this</span>.num) {</span><br><span class="line">                    <span class="built_in">this</span>.info = <span class="string">'你输入的数字比要猜的数字大'</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (!regNeg.test(self.num1)) {</span><br><span class="line">                    <span class="built_in">this</span>.info = <span class="string">'请输入一个整数数字'</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="built_in">this</span>.info = <span class="string">'你输入的数字比要猜的数字小'</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="built_in">this</span>.info_list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.num1 == item.num) {</span><br><span class="line">                        flag = <span class="literal">false</span></span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">                <span class="keyword">if</span> (flag) {</span><br><span class="line">                    item++;</span><br><span class="line">                    <span class="built_in">this</span>.info_list.push({<span class="attr">id</span>: item, <span class="attr">num</span>: <span class="built_in">this</span>.num1, <span class="attr">text</span>: <span class="built_in">this</span>.info});</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            },</span><br><span class="line">            playGame: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="built_in">this</span>.message = <span class="string">"重新开始"</span>;</span><br><span class="line">                <span class="built_in">this</span>.hidden_status = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">this</span>.input_status = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">this</span>.isdisabled = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">this</span>.num1 = <span class="string">''</span>;</span><br><span class="line">                item = <span class="number">0</span>;</span><br><span class="line">                self.info = <span class="string">'请输入数字'</span>;</span><br><span class="line">                <span class="built_in">this</span>.info_list = [];</span><br><span class="line">                <span class="built_in">this</span>.num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">    })</span><br><span class="line">;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器叠加</title>
      <link href="article/f4dd79f5.html"/>
      <url>article/f4dd79f5.html</url>
      
        <content type="html"><![CDATA[<h1 id="装饰器叠加"><a href="#装饰器叠加" class="headerlink" title="装饰器叠加"></a>装饰器叠加</h1><p><strong>欢迎关注我呀～「测试游记」「zx94_11」</strong></p><p>在使用pytest+allure进行自动化脚本开发的时候，在case头部需要增加很多装饰器才能使报告按照预期格式展示</p><p>例如我需要报告展示如下：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6npaehmkvj31h80lmwhc.jpg" alt="报告展示"></p><span id="more"></span><p>那我需要编写的代码为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">'大模块'</span></span>)</span></span><br><span class="line"><span class="meta">@allure.story(<span class="params"><span class="string">'子模块'</span></span>)</span></span><br><span class="line"><span class="meta">@allure.title(<span class="params"><span class="string">'这个test_b'</span></span>)</span></span><br><span class="line"><span class="meta">@allure.issue(<span class="params"><span class="string">'url'</span>, <span class="string">'问题单：xxx'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_b</span>():</span></span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></tbody></table></figure><p>现在需要将他们变成一行</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@compose(<span class="params">feature=<span class="string">'大模块'</span>, </span></span></span><br><span class="line"><span class="meta"><span class="params">         story=<span class="string">'子模块'</span>, </span></span></span><br><span class="line"><span class="meta"><span class="params">         title=<span class="string">'这个test_b'</span>, </span></span></span><br><span class="line"><span class="meta"><span class="params">         issue=(<span class="params"><span class="string">'url'</span>, <span class="string">'问题单：xxx'</span></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_b</span>():</span></span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></tbody></table></figure><p>为了实现这个目标，先来回忆一下装饰器运行的方式，可以阅读一下「测试开发进阶(四)」。</p><p>拿出一部分上面<code>allure</code>代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">'大模块'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_b</span>():</span></span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></tbody></table></figure><p>其实就相当于：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_b = allure.feature(<span class="string">'大模块'</span>)(test_b)</span><br></pre></td></tr></tbody></table></figure><p>所以整一份就是：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test_b = allure.feature(<span class="string">'大模块'</span>)(</span><br><span class="line">    allure.story(<span class="string">'子模块'</span>)(</span><br><span class="line">        allure.title(<span class="string">'这个test_b'</span>)(</span><br><span class="line">            allure.issue(<span class="string">'url'</span>, <span class="string">'问题单：xxx'</span>)(</span><br><span class="line">                test_b)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>不过按照装饰器的调用顺序的话，应该是<code>allure.issue</code>是第一个，所以要把它整个给倒过来，但是对于allure来说这个顺序并不是很重要。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test_b = allure.issue(<span class="string">'url'</span>, <span class="string">'问题单：xxx'</span>)(</span><br><span class="line">    allure.title(<span class="string">'这个test_b'</span>)(</span><br><span class="line">        allure.story(<span class="string">'子模块'</span>)(</span><br><span class="line">            allure.feature(<span class="string">'大模块'</span>)(test_b)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>编写一个函数接受不定长的参数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">   <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>因为它要作为一个装饰器，所以需要在内部再写一个函数并返回</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">f</span>):</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> f</span><br><span class="line">   <span class="keyword">return</span> deco</span><br></pre></td></tr></tbody></table></figure><p>在<code>...</code>中出入传入的参数</p><p>为了偷懒，所以入参没加上<code>allure</code>，需要人为进行一次处理，使用列表推导式快速的拿到：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_kwargs = [(<span class="string">'allure.'</span> + key, value) <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items()]</span><br></pre></td></tr></tbody></table></figure><p>按照上面说的需要倒过来执行，所以使用<code>reversed</code>把列表倒一下</p><p>每次都重新赋值<code>f</code>：<code>eval(allurefunc)(f)</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> allurefunc, param <span class="keyword">in</span> <span class="built_in">reversed</span>(_kwargs):</span><br><span class="line">    <span class="keyword">if</span> param:</span><br><span class="line">        f = <span class="built_in">eval</span>(allurefunc)(param)(f)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="built_in">eval</span>(allurefunc)(f)</span><br><span class="line"><span class="keyword">return</span> f</span><br></pre></td></tr></tbody></table></figure><p>为了防止找不到allure模块，增加一下它</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builtins.__dict__.update({<span class="string">'allure'</span>: allure})</span><br></pre></td></tr></tbody></table></figure><p>所以完整代码：<a href="https://github.com/zx490336534/ZXTestFrame/blob/master/zxapi/utils/allureoperator.py">https://github.com/zx490336534/ZXTestFrame/blob/master/zxapi/utils/allureoperator.py</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Describe: 简化allure装饰器头部</span></span><br><span class="line"><span class="string">@Author: zhongxin</span></span><br><span class="line"><span class="string">@Time: 2019-09-03 19:42</span></span><br><span class="line"><span class="string">@Email: 490336534@qq.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将头部ALlure装饰器进行封装</span></span><br><span class="line"><span class="string">    可以采用：</span></span><br><span class="line"><span class="string">        feature='主要功能模块'</span></span><br><span class="line"><span class="string">        story='分支功能模块'</span></span><br><span class="line"><span class="string">        issue=('', '666')</span></span><br><span class="line"><span class="string">    的方式入参数</span></span><br><span class="line"><span class="string">    :param kwargs:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">f</span>):</span></span><br><span class="line">        builtins.__dict__.update({<span class="string">'allure'</span>: allure})</span><br><span class="line">        _kwargs = [(<span class="string">'allure.'</span> + key, value) <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items()]</span><br><span class="line">        <span class="keyword">for</span> allurefunc, param <span class="keyword">in</span> <span class="built_in">reversed</span>(_kwargs):</span><br><span class="line">            <span class="keyword">if</span> param:</span><br><span class="line">                f = <span class="built_in">eval</span>(allurefunc)(param)(f)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f = <span class="built_in">eval</span>(allurefunc)(f)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deco</span><br></pre></td></tr></tbody></table></figure><p>当然这份代码也可以改变成任意的装饰器叠加</p>]]></content>
      
      
      <categories>
          
          <category> Pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Pytest </tag>
            
            <tag> Allure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vue完成一个checklist</title>
      <link href="article/d4c3ce36.html"/>
      <url>article/d4c3ce36.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用Vue完成一个checklist"><a href="#使用Vue完成一个checklist" class="headerlink" title="使用Vue完成一个checklist"></a>使用Vue完成一个checklist</h1><h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue init webpack-simple vuedemo01</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g2ahiskk7oj317i0igq5e.jpg" alt="初始化项目"></p><p>除了Use sass?选择<code>N</code>，其他默认</p><span id="more"></span><p>根据提示安装依赖并运行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> vuedemo01</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run dev</span></span><br></pre></td></tr></tbody></table></figure><p><code>npm install</code>可以使用淘宝的镜像<code>cnpm</code></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g2ahlpwfj7j31400u0q6n.jpg" alt="运行结果"></p><p>使用编辑器打开该文件夹</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g2ahn1xlsoj309u0g0gmv.jpg" alt="文件夹"></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>差不多是要完成以下界面</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g2ahteyn5dj30ji0i0gmh.jpg" alt="目标"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>去除<code>App.vue</code>多余部分，剩下如下部分即可</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    {{msg}}</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: "app",</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      msg: "Welcome to Your Vue.js App"</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g2ahrm46j1j31400u0mz0.jpg" alt="当前页面"></p><h3 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h3><p>包含</p><ul><li>一个输入框，</li><li>两个h2标签的文字</li><li>n个无序的项</li><li>删除按钮</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>进行中<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g2ahypook3j31400u0mz4.jpg" alt="初版"></p><h3 id="script数据部分"><a href="#script数据部分" class="headerlink" title="script数据部分"></a>script数据部分</h3><p>每次输入到<code>输入框</code>的内容需要一个变量来接收</p><p>存放的每个内容，以及与其对应的状态</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"app"</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">      todo: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">      list: [{ <span class="attr">todo</span>: <span class="string">"aa"</span>, <span class="attr">checked</span>: <span class="literal">false</span> }]</span></span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>为了把数据渲染到页面上，需要修改html部分的li中的内容</p><p>使用<code>v-for</code>来循环输出list的索引和内容</p><p>使用<code>v-if</code>来判断：</p><ul><li>复选框没选中的内容会显示在<code>进行中</code></li><li>复选框选中的内容会显示在<code>已完成</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,key) in list"</span> <span class="attr">v-if</span>=<span class="string">"!item.checked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">'item.checked'</span> @<span class="attr">change</span>=<span class="string">"saveList()"</span>&gt;</span></span><br><span class="line">      {{item.title}} ----- <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,key) in list"</span> <span class="attr">v-if</span>=<span class="string">"item.checked"</span> @<span class="attr">change</span>=<span class="string">"saveList()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">'item.checked'</span>&gt;</span> {{item.title}} ----- <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'deleteDate(key)'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="函数部分"><a href="#函数部分" class="headerlink" title="函数部分"></a>函数部分</h3><p>在说函数部分前，还剩下顶部的输入框还没有增加方法的入口</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"todo"</span> @<span class="attr">keydown</span>=<span class="string">'doAdd($event)'</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>v-model</code>表明它接收的内容会修改todo</p><p><code>@keydown</code>对应键盘操作</p><p>在date部分之后增加<code>methods</code></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2aie48b7ij30hq0dkdgs.jpg" alt="image-20190421200514387"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import storage from "./model/storage.js";</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      todo: "",</span><br><span class="line">      list: [{ todo: "aa", checked: false }]</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    doAdd(e) {</span><br><span class="line">      if (e.keyCode == 13) { //按键13是回车</span><br><span class="line">        this.list.push({//列表中插入对象</span><br><span class="line">          title: this.todo,</span><br><span class="line">          checked: false</span><br><span class="line">        });</span><br><span class="line">      }</span><br><span class="line">      storage.set("list", this.list);</span><br><span class="line">    },</span><br><span class="line">    deleteDate(key) {</span><br><span class="line">      this.list.splice(key, 1);//删除对应索引的内容</span><br><span class="line">      storage.set("list", this.list);</span><br><span class="line">    },</span><br><span class="line">    saveList() {</span><br><span class="line">      storage.set("list", this.list);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>这里封装了一个<code>storage.js</code>，用于保存数据至本地，这样下次打开页面还是会恢复至上次关闭的时候。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g2aimtmtrjj309q0k80ub.jpg" alt="封装"></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { loadavg } <span class="keyword">from</span> <span class="string">"os"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> storage={</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">key,value</span>)</span>{</span><br><span class="line">        <span class="built_in">localStorage</span>.setItem(key,<span class="built_in">JSON</span>.stringify(value));</span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">key</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(key));</span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span>{</span><br><span class="line">        <span class="built_in">localStorage</span>.removeItem(key);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> storage</span><br></pre></td></tr></tbody></table></figure><h3 id="全代码"><a href="#全代码" class="headerlink" title="全代码"></a>全代码</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"todo"</span> @<span class="attr">keydown</span>=<span class="string">'doAdd($event)'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>进行中<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,key) in list"</span> <span class="attr">v-if</span>=<span class="string">"!item.checked"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">'item.checked'</span> @<span class="attr">change</span>=<span class="string">"saveList()"</span>&gt;</span></span><br><span class="line">        {{item.title}} ----- <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'deleteDate(key)'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,key) in list"</span> <span class="attr">v-if</span>=<span class="string">"item.checked"</span> @<span class="attr">change</span>=<span class="string">"saveList()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">'item.checked'</span>&gt;</span> {{item.title}} ----- <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'deleteDate(key)'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">'./model/storage.js'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">        todo: <span class="string">""</span>,</span></span><br><span class="line">        list: []</span><br><span class="line">      };</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">doAdd</span>(<span class="params">e</span>)</span> {</span></span><br><span class="line">        if (e.keyCode == 13) {</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list.push({</span></span><br><span class="line"><span class="javascript">            title: <span class="built_in">this</span>.todo,</span></span><br><span class="line"><span class="javascript">            checked: <span class="literal">false</span></span></span><br><span class="line">          })</span><br><span class="line">        }</span><br><span class="line"><span class="javascript">        storage.set(<span class="string">'list'</span>, <span class="built_in">this</span>.list)</span></span><br><span class="line">      },</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">deleteDate</span>(<span class="params">key</span>)</span> {</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.list.splice(key, <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        storage.set(<span class="string">'list'</span>, <span class="built_in">this</span>.list)</span></span><br><span class="line">      },</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">saveList</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">        storage.set(<span class="string">'list'</span>, <span class="built_in">this</span>.list)</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> list = storage.get(<span class="string">'list'</span>, <span class="built_in">this</span>.list);</span></span><br><span class="line">      if (list) {</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.list = list</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git通过变基将提交变得更美观</title>
      <link href="article/3bee9889.html"/>
      <url>article/3bee9889.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git通过变基将提交变得更美观"><a href="#Git通过变基将提交变得更美观" class="headerlink" title="Git通过变基将提交变得更美观"></a>Git通过变基将提交变得更美观</h1><h2 id="几种常见的工作流"><a href="#几种常见的工作流" class="headerlink" title="几种常见的工作流"></a>几种常见的工作流</h2><p>全部在主干上进行开发的<code>主干开发</code>工作流</p><span id="more"></span><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1jxqspmpoj31c00u0tmc.jpg" alt="主干开发"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1jxst07k0j31520u0dyo.jpg" alt="Git Flow"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jxu8t22aj31800u014x.jpg" alt="GitHub Flow"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jxv1ar8gj316o0u0qb4.jpg" alt="GitLab Flow"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jxw1j4izj318m0u0ajx.jpg" alt="GitLab Flow"><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jxwluihzj31550u012h.jpg" alt="GitLab Flow"></p><h2 id="将多个提交合并为一个"><a href="#将多个提交合并为一个" class="headerlink" title="将多个提交合并为一个"></a>将多个提交合并为一个</h2><ol><li>首先在一个空的文件夹中使用<code>git init</code>创建一个空的仓库 </li><li>创建多次提交</li></ol><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1jz2zav36j315o0ooafu.jpg" alt="多次提交"></p><ol start="3"><li>现在使用<code>git log --graph</code>查看当前提交情况</li></ol><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1jz424wl8j311o0kwwi1.jpg" alt="提交情况"></p><ol start="4"><li>使用<code>git rebase -i &lt;哈希值&gt;</code>进行变基，合并的是这个哈希值对应提交之后的东西，所以选择最开始的那个提交  <code>04a25d7dec4ef8b4428916df33f17abc91de0746 </code></li></ol><ul><li><p> <code>git rebase -i 04a25d7dec4ef8b4428916df33f17abc91de0746</code></p></li><li><p>会跳转至一个新的页面</p></li><li><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1jz8h8bnwj30zb0u0n43.jpg" alt="变基操作页面"></p></li><li><p>阅读命令的提示信息，这两个提交一个作为变基之后的节点，一个作为合入的节点</p></li><li><p>我们把<code>e1eba39</code>当作合入的节点</p></li><li><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1jzay8ksej30ig02m0sv.jpg" alt="使用命令"></p></li><li><p>点击esc然后输入<code>:wq!</code></p></li><li><p>会跳转至一个写描述信息的新的页面</p></li><li><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jzbzvdifj31260ta0xg.jpg" alt="新的页面"></p></li><li><p>点击esc然后输入<code>:wq!</code></p></li></ul><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jzddgvk8j31hg0qktdz.jpg" alt="变基成功"></p><p>通过<code>git log --graph</code>我们可以看到，之前是三个提交的，现在前面两个提交已经合为了一个</p><h2 id="Gitlab的合并请求"><a href="#Gitlab的合并请求" class="headerlink" title="Gitlab的合并请求"></a>Gitlab的合并请求</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>搭建一个如图的测试环境<img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jzmznc9jj30no0aeq3y.jpg" alt="测试环境"></p><blockquote><p>master</p><blockquote><p>test1</p><p>test2</p></blockquote></blockquote><h3 id="Merge-commit"><a href="#Merge-commit" class="headerlink" title="Merge commit"></a>Merge commit</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jzrp1vitj31i40tijxf.jpg" alt="合并的方式"></p><p>发起一个<code>合并请求</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1jztsub6mj31oq0f0wgr.jpg" alt="将test1合入master"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jzvs4j3wj317y0qqq6j.jpg" alt="合并"></p><p>查看现在的分支图</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jzwkqsddj30ug098gml.jpg" alt="分支图"></p><p>同理合入test2查看分支图</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1jzyp7rb9j30te0c6myo.jpg" alt="合入test2的分支图"></p><h3 id="Merge-commit-with-semi-linear-history"><a href="#Merge-commit-with-semi-linear-history" class="headerlink" title="Merge commit with semi-linear history"></a><strong>Merge commit with semi-linear history</strong></h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jzzp8k75j31ho0tetep.jpg" alt="线性历史"></p><p>在合并<code>test2</code>的时候会</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1k0oftuq0j318a0u0n1g.jpg" alt="合并test2"></p><p>在本地进行变基</p><blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git checkout -b test2 origin/test2</span><br></pre></td></tr></tbody></table></figure></blockquote><p>检出test2之后使用<code>git log --graph</code>查看test2的信息</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1k15ihws7j319w0suwkh.jpg" alt="image-20190329222401030"></p><p>再使用<code>git log --graph --all</code>查看全部分支的信息</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1k19l5f3vj30zv0u07cd.jpg" alt="全部分支信息"></p><p>我们要做的就是把test2的提交移到master之后</p><p>记一下几个关键的节点</p><ul><li><p><code>父节点</code>：2a69d1839c03e5ff2b968bbfd687a5bd673013f2</p></li><li><p><code>test2节点</code>：28be9089b6bd914a1cac598690720a78c6419b9f</p></li><li><p><code>master节点</code>：5bbcbdfd3bd0e25a39cd14a1b94a88890b2b0ca0</p></li></ul><p>现在要做的是把test2放到master之后</p><p>所以使用<code>git rebase -i 5bbcbdfd3bd0e25a39cd14a1b94a88890b2b0ca0</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1k1g7qj3wj31js0e6tcf.jpg" alt="解决冲突"></p><p>根据提示输入 <code>git rebase --continue</code>来解决冲突</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1k1i8ic05j311e048t9m.jpg" alt="提示信息"></p><p>进入1.py解决冲突</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1k1h788dyj30tw07mta4.jpg" alt="解决冲突前"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1k1hqss9cj30u2044wf2.jpg" alt="解决冲突后"></p><p>将修改add至缓存区，然后使用commit提交至本地仓库</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1k1j3ph6nj311q0lewit.jpg" alt="提交变更"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1k1ljd6djj30w40u0gv1.jpg" alt="变基之后的分支图">从变基之后的分支图可以看出，我们只需要把当前的HEAD当作master提交到远端就完成了变基</p><p>下面切换至master分支<code>git checkout master</code>使用挑拣提交拿到变基操作的提交<code>git cherry-pick 43104b5</code>最后使用<code>git push origin master</code>将master推送至远端</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1k2237mdzj30w60akab4.jpg" alt="变基后"></p><p>通过以上操作之后发现，合并按钮还是灰色的。。。。理论上是成功了，所以，现在我也不知道咋办了。所以算了，今天就当学习变基了。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Gitlab进行代码管理</title>
      <link href="article/fa4fb010.html"/>
      <url>article/fa4fb010.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用Gitlab进行代码管理（Merge-requests）"><a href="#使用Gitlab进行代码管理（Merge-requests）" class="headerlink" title="使用Gitlab进行代码管理（Merge requests）"></a>使用Gitlab进行代码管理（Merge requests）</h1><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1e8kegs5uj31ip0u0nch.jpg" alt="image-20190324220607374"></p><p>从<a href="https://about.gitlab.com/">Gitlab官网</a>的图中可以看到Gitlab支持软件开发的全流程。</p><span id="more"></span><h2 id="Gitlab环境搭建"><a href="#Gitlab环境搭建" class="headerlink" title="Gitlab环境搭建"></a>Gitlab环境搭建</h2><p>由于准备在内网中使用，所以使用的是开源版。</p><p>网上有很多的搭建方式，但是为了简单直接采用官网的Docker镜像进行搭建。</p><p>可以访问<a href="https://hub.docker.com/">Docker Hub</a>或者直接使用<code>docker search gitlab</code>来进行搜索</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1e8pzw1uvj31c00u0k3d.jpg" alt="image-20190324221130310"></p><p>根据STARS和描述选择gitlab/gitlab-ce</p><blockquote><p>docker run -d –name gitlab -p 8443:443 -p 9000:9000 -p 8022:22 –restart always -v /home/zx/data/gitlab/config:/etc/gitlab -v /home/zx/data/gitlab/logs:/var/log/gitlab -v /home/zx/data/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</p></blockquote><p>使用docker运行该镜像，简单解释一下各个参数的作用：</p><p><code>--name</code>：指定容器的名称</p><p><code>-p </code>：端口映射</p><p><code>—restart always</code>：出现异常后自动重启</p><p><code>-v</code>：挂载至本地位置</p><p>执行完成后等待一段时间就可以通过页面访问本地搭建的Gitlab了</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1e8tmtsqlj31d90u0q9q.jpg" alt="image-20190324221501025"></p><p>自行注册一个账号后就可以登录了。</p><p>登录之后点击<code>New project</code>就可以自行创建一个新的项目了</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1e8yemp6fj327y0eidiz.jpg" alt="image-20190324221936260"></p><h2 id="Merge-requests"><a href="#Merge-requests" class="headerlink" title="Merge requests"></a>Merge requests</h2><p>首先介绍合并请求这一个功能，如果你是项目的管理者， 可以进入Settings中找到<code>Merge requests</code>的配置</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1e90aby84j31d90u0qdz.jpg" alt="image-20190324222123653"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1e912cwubj31he0u07aw.jpg" alt="image-20190324222209377">翻译一下之后：</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1e9xe6a1zj31hu0si44i.jpg" alt="image-20190324222322972"></p><p>由于没有强制的一支线开发的要求，所以不采用变基的方式进行合并，所以选择第一个选项<code>合并提交</code></p><p>下面的选项看上去蛮有用的，所以全钩上了</p><h3 id="发起一次合并请求"><a href="#发起一次合并请求" class="headerlink" title="发起一次合并请求"></a>发起一次合并请求</h3><p>首先将代码从远端克隆至本地</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1e96z4nzfj31iy0fq770.jpg" alt="image-20190324222750440"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1e97uy2x0j316v0u0tj7.jpg" alt="image-20190324222841889"></p><blockquote><p>git clone <a href="http://123.56.13.233:9000/z05035/gitlab_test.git">http://123.56.13.233:9000/z05035/gitlab_test.git</a></p></blockquote><p>现在项目已经在本地了，由于是刚克隆下来的，所以默认在master分支上</p><p>我们从当前的的节点拉出一个新的分支tmp，并切换至tmp分支</p><blockquote><p>git branch tmp</p><p>git checkout tmp</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1e9a2iracj30yq0520tt.jpg" alt="image-20190324223047959"></p><p>下面在tmp分支上进行修改</p><blockquote><p>vim 1.py</p><p>git add 1.py </p><p>git commit -m ‘add for’</p><p>git push –set-upstream origin tmp</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1e9d7yy01j31730u07gr.jpg" alt="image-20190324223349583"></p><p>根据提示信息一步步完成分支的创建，修改，提交</p><p>下面来到gitlab服务器发起<code>合并请求</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1e9ebr782j31d90u0thy.jpg" alt="image-20190324223454433"></p><p>gitlab自动识别到我们新建了一个分支，所以它会有一行蓝色的创建合并的语句，以下分别是中英文的提交请求页面<img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1e9zf3xxuj30u00v7al0.jpg" alt="Xnip2019-03-24_22-36-51"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1e9fxwn9pj30ur0u0k16.jpg" alt="Xnip2019-03-24_22-36-14"></p><p>写一下描述就可以提交了，大部分内容没有特殊需求可以不用更改</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1ea0fcsonj31b50u0qft.jpg" alt="Xnip2019-03-24_22-39-22"></p><p>点击Merge就可以合并了</p><p>不过这样就自己的项目自己合并没什么意义，所以现在新建一个用户来进行提交</p><p>把新创建的用户加入到项目的成员中，并且身份是开发者</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1e9mpqllwj31d90u0k1o.jpg" alt="image-20190324224257551"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1e9nlrohej31vc0cq415.jpg" alt="image-20190324224349249"></p><p>成员表中就增加了新创建的那个用户了。</p><p>下面用开发者账户发起一个合并请求</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1e9r42799j310z0u07a1.jpg" alt="image-20190324224711611"></p><p>可以看到请求无法直接被合并，需要有写权限的用户才能合并，切换回管理员账户进行查看，发现按钮变绿了。可以正常合并和提交了。</p><p><img src="../../../Downloads/ok.gif" alt="image-20190324224810785"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识（九）</title>
      <link href="article/12326327.html"/>
      <url>article/12326327.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识-九"><a href="#Git基础知识-九" class="headerlink" title="Git基础知识(九)"></a>Git基础知识(九)</h1><p>一个远程仓库通常只是一个<code>裸仓库</code>： 一个没有当前<code>工作目录</code>的仓库。</p><p>简单的说，裸仓库就是你工程目录内的 <code>.git</code> 子目录内容，不包含其他资料。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><ul><li>本地协议</li><li>HTTP协议</li><li>SSH协议</li><li>Git协议<span id="more"></span><h3 id="本地协议"><a href="#本地协议" class="headerlink" title="本地协议"></a>本地协议</h3></li></ul><p>使用本地的一个文件夹当作仓库的时候，将它使用<strong>文件共享</strong>给其他人。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> /opt/git/project.git <span class="comment"># 本机</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> file:///opt/git/project.git <span class="comment">#共享文件</span></span></span><br></pre></td></tr></tbody></table></figure><p>增加一个本地版本到Git项目</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add local_proj /opt/git/project.git</span></span><br></pre></td></tr></tbody></table></figure><ul><li>优点</li></ul><p>简单，直接使用了现有的文件权限和网络访问权限。</p><ul><li>缺点</li></ul><p>不方便从多个位置访问。</p><p>并不保护仓库避免意外的损坏，每一个用户都有“远程”目录的完整 shell 权限，没有方法可以 阻止他们修改或删除 Git 内部文件和损坏仓库。</p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><ul><li><p><code>Git 1.6.6</code>之前的HTTP协议是<code>只读模式</code>的，又称为「哑」HTTP协议。</p></li><li><p><code>Git 1.6.6</code>之后的HTTP协议，又称「智能」HTTP协议。</p></li></ul><p>可以使用 HTTP 协议的用户名／密码的基础 授权，免去设置 SSH 公钥。</p><p>相比 SSH 协议，可以使用用户名／密码授权是一个很大的优势，这样用户就不必须在使用 Git 之前先在本地生成 SSH 密钥对再把公钥上传到服务器。</p><h3 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h3><p>SSH 协议也是一个验证授权的网络协议；</p><p>克隆的方法：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> ssh://user@server/project.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> user@server:project.git</span></span><br></pre></td></tr></tbody></table></figure><p>优点：</p><ul><li><p>通过 SSH 访问是安全的「 所有传输数据都要经过授权和加密。」</p></li><li><p>SSH 协议很<code>高效</code>，在传输前也会尽量压缩数据。</p></li></ul><p>缺点：</p><ul><li>不能匿名访问（即使是只读数据）</li></ul><h3 id="Git协议"><a href="#Git协议" class="headerlink" title="Git协议"></a>Git协议</h3><p>包含在 Git 里的一个特殊的守护进程。</p><p>它监听在一个特定的端口「9418」。</p><p>要让版本库支持 Git 协议，需要先创建一个 <code>git-daemon-export-ok</code> 文 件 ：它是 Git 协议守护进程为这个版本库提供服务的必要条件 「但是除此之外没有任何安全措施」。 要么谁都可以克隆这个版本库，要么谁也不能。 由于没有授权机制，一旦开放推送操作，意味着网络上知道这个项目 URL 的人都可以向项目推送数据。</p><p>优点：<code>最快</code></p><p>缺点：缺乏<code>授权机制</code></p><h2 id="搭建Git仓库"><a href="#搭建Git仓库" class="headerlink" title="搭建Git仓库"></a>搭建Git仓库</h2><h3 id="导出裸仓库"><a href="#导出裸仓库" class="headerlink" title="导出裸仓库"></a>导出裸仓库</h3><p>我们需要导出一个「不包含当前工作目录的仓库」</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --bare Git_study Git_study.git</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1vkckyw6sj31ag0cstb6.jpg" alt="导出裸仓库"></p><h3 id="把仓库放到服务器上"><a href="#把仓库放到服务器上" class="headerlink" title="把仓库放到服务器上"></a>把仓库放到服务器上</h3><p>假设使用我的阿里云设备来当服务器</p><p>我在/home/zx路径下新建一个文件夹git_study</p><p>存放路径：<code>/home/zx/git_study</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp -r Git_study.git zx@123.56.13.233://home/zx/git_study</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1vkhn0zdlj31ih0u0gvg.jpg" alt="上传至服务器"></p><p>下面看一下阿里云上的内容</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1vkimr1m8j30bg07iq3r.jpg" alt="服务器侧"></p><h3 id="克隆内容"><a href="#克隆内容" class="headerlink" title="克隆内容"></a>克隆内容</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> zx@123.56.13.233:/home/zx/git_study/Git_study.git</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1vklw3jsgj31is0b2418.jpg" alt="普通克隆"></p><p>也可以将这个仓库进行修改，使其拥有<code>推送权限</code>。</p><p>运行 <code>git init</code> 命令，并加上 <code>--shared</code> 选项，那么 Git 会自动修改该仓库目录的组权限 为可写。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh zx@123.56.13.233</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/zx/git_study/Git_study.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init --bare --shared</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Reinitialized existing shared Git repository <span class="keyword">in</span> /home/zx/git_study/Git_study.git/</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1vkq4obdtj31130u0jxx.jpg" alt="增加权限"></p><p>由于我大部分时间都是使用的HTTP来进行Git操作，所以SSH相关内容就不画蛇添足了。</p><p>有很多优秀的代码托管平台可以选择：<a href="https://git.wiki.kernel.org/index.php/GitHosting">https://git.wiki.kernel.org/index.php/GitHosting</a></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1vl13q41tj31ki0u0gtu.jpg" alt="代码托管"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Flask:重定向和错误响应</title>
      <link href="article/e06902f9.html"/>
      <url>article/e06902f9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-重定向和错误响应-六"><a href="#Flask-重定向和错误响应-六" class="headerlink" title="Flask(重定向和错误响应 六)"></a>Flask(重定向和错误响应 六)</h1><h2 id="redirect（重定向）实现方式"><a href="#redirect（重定向）实现方式" class="headerlink" title="redirect（重定向）实现方式"></a>redirect（重定向）实现方式</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask imports redirect</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'username'</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'login'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect</span>(<span class="params">location, code=<span class="number">302</span>, Response=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> Response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">from</span> .wrappers <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line">    display_location = escape(location)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(location, text_type):</span><br><span class="line">        <span class="keyword">from</span> .urls <span class="keyword">import</span> iri_to_uri</span><br><span class="line"></span><br><span class="line">        location = iri_to_uri(location, safe_conversion=<span class="literal">True</span>)</span><br><span class="line">    response = Response(</span><br><span class="line">        <span class="string">'&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;\n'</span></span><br><span class="line">        <span class="string">"&lt;title&gt;Redirecting...&lt;/title&gt;\n"</span></span><br><span class="line">        <span class="string">"&lt;h1&gt;Redirecting...&lt;/h1&gt;\n"</span></span><br><span class="line">        <span class="string">"&lt;p&gt;You should be redirected automatically to target URL: "</span></span><br><span class="line">        <span class="string">'&lt;a href="%s"&gt;%s&lt;/a&gt;.  If not click the link.'</span></span><br><span class="line">        % (escape(location), display_location),</span><br><span class="line">        code,</span><br><span class="line">        mimetype=<span class="string">"text/html"</span>,</span><br><span class="line">    )</span><br><span class="line">    response.headers[<span class="string">"Location"</span>] = location</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></tbody></table></figure><ul><li>重定向的<code>code</code>默认为<code>302</code></li><li>我们传入的第一个参数<code>location</code>被放入到了<code>response.headers["Location"]</code>中</li></ul><p>浏览器处理工作：</p><ol><li>先判断返回状态码是否为「30x」</li><li>查看返回的头信息中是否有<code>Location</code>字段，如果有则访问新的网址</li></ol><h3 id="重定向的两种方式"><a href="#重定向的两种方式" class="headerlink" title="重定向的两种方式"></a>重定向的两种方式</h3><h4 id="redirect-‘-new-url’"><a href="#redirect-‘-new-url’" class="headerlink" title="redirect(‘/new/url’)"></a>redirect(‘/new/url’)</h4><p>不建议使用：url地址可能会发生变更，函数名变更比较少</p><h4 id="redirect-url-for-‘endpoint’"><a href="#redirect-url-for-‘endpoint’" class="headerlink" title="redirect(url_for(‘endpoint’))"></a>redirect(url_for(‘endpoint’))</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'username'</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/login'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'login'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="url-for"><a href="#url-for" class="headerlink" title="url_for"></a>url_for</h3><ol><li>生成静态文件</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">'static'</span>,filename=<span class="string">'style.css'</span>)</span><br></pre></td></tr></tbody></table></figure><p>例子：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_url_path=<span class="string">'/src'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><blockquote><p>templates/index.html</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"{{ url_for('static',filename='css/demo.css') }}"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>static/css/demo.css</p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> {</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfz3i8hct4j30o40keq6d.jpg" alt="css_url"></p><p><code>http://127.0.0.1:5000/src/css/demo.css</code>可以看出，这个url变成了<code>static_url_path</code>替换部分</p><ol start="2"><li>跳转的时候添加参数</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'username'</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>, username=<span class="string">'zhongxin'</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/login'</span>, endpoint=<span class="string">'login'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'login'</span></span><br></pre></td></tr></tbody></table></figure><p>访问：<code>http://127.0.0.1:5000/</code></p><p>会跳转到：<code>http://127.0.0.1:5000/login?username=zhongxin</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfz36wjpkug30ea08uu0x.gif" alt="url_for带参数跳转"></p><h2 id="错误响应"><a href="#错误响应" class="headerlink" title="错误响应"></a>错误响应</h2><h3 id="没有任何处理的错误返回"><a href="#没有任何处理的错误返回" class="headerlink" title="没有任何处理的错误返回"></a>没有任何处理的错误返回</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_url_path=<span class="string">'/src'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfz3lfmstpj31vk0catc5.jpg" alt="未处理"></p><h3 id="处理500错误"><a href="#处理500错误" class="headerlink" title="处理500错误"></a>处理500错误</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_error</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'我们正在升级'</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfz3no909lj30no096mxw.jpg" alt="错误返回"></p><h3 id="使用官网定义的错误返回"><a href="#使用官网定义的错误返回" class="headerlink" title="使用官网定义的错误返回"></a>使用官网定义的错误返回</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, abort</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_url_path=<span class="string">'/src'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.args.get(<span class="string">'username'</span>):</span><br><span class="line">        abort(<span class="number">401</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfz40lmaicj327u0hgn1x.jpg" alt="官网定义的401"></p><h3 id="使用自己的html定义错误返回"><a href="#使用自己的html定义错误返回" class="headerlink" title="使用自己的html定义错误返回"></a>使用自己的html定义错误返回</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, abort, make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_url_path=<span class="string">'/src'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.args.get(<span class="string">'username'</span>):</span><br><span class="line">        abort(make_response(render_template(<span class="string">'user_error_404.html'</span>), <span class="number">404</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfz421kx16j30u00wiq5k.jpg" alt="自己的html定义错误返回"></p><h3 id="重写官方的404错误"><a href="#重写官方的404错误" class="headerlink" title="重写官方的404错误"></a>重写官方的404错误</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, abort, make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_url_path=<span class="string">'/src'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_error</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'user_error_404.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.args.get(<span class="string">'username'</span>):</span><br><span class="line">        abort(<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><h3 id="abort源码"><a href="#abort源码" class="headerlink" title="abort源码"></a>abort源码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abort</span>(<span class="params">status, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">return</span> _aborter(status, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_aborter = Aborter()</span><br></pre></td></tr></tbody></table></figure><p>其实就是调用<code>Aborter</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aborter</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, mapping=<span class="literal">None</span>, extra=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> mapping <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            mapping = default_exceptions</span><br><span class="line">        self.mapping = <span class="built_in">dict</span>(mapping)</span><br><span class="line">        <span class="keyword">if</span> extra <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.mapping.update(extra)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, code, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args <span class="keyword">and</span> <span class="keyword">not</span> kwargs <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(code, integer_types):</span><br><span class="line">            <span class="keyword">raise</span> HTTPException(response=code)</span><br><span class="line">        <span class="keyword">if</span> code <span class="keyword">not</span> <span class="keyword">in</span> self.mapping:</span><br><span class="line">            <span class="keyword">raise</span> LookupError(<span class="string">"no exception for %r"</span> % code)</span><br><span class="line">        <span class="keyword">raise</span> self.mapping[code](*args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p>执行的时候就是<code>__call__</code>会抛出异常</p><blockquote><p>其实，它就是抛出一个异常而已</p></blockquote><h3 id="自己创建错误信息类"><a href="#自己创建错误信息类" class="headerlink" title="自己创建错误信息类"></a>自己创建错误信息类</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_url_path=<span class="string">'/src'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params">UserError</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_error</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'user_error_404.html'</span>, error=error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.args.get(<span class="string">'username'</span>):</span><br><span class="line">        <span class="keyword">raise</span> UserError()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识（八）</title>
      <link href="article/68ff4278.html"/>
      <url>article/68ff4278.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识-八-–变基"><a href="#Git基础知识-八-–变基" class="headerlink" title="Git基础知识(八)–变基"></a>Git基础知识(八)–变基</h1><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1u5k9islkj31500u0diy.jpg" alt="变基图示"></p><h2 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h2><p>在 Git 中整合来自不同分支的修改主要有两种方法：</p><ul><li>merge </li><li>rebase</li></ul><span id="more"></span><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>从master分支的C2提交拉取分支experiment并创建C4提交</p><p>从C2创建C3提交</p><p>将experiment分支合入master，master前进至C5</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1u4fh0m7fj30y20comyd.jpg" alt="merge"></p><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>将上例中的C4的修改直接基于C3进行提交。</p><p>相当于提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次。</p><p>也就是<code>将C4中的修改变基到C3上</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout experiment</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase master</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1u4hpy4rqj30x009ojsf.jpg" alt="rebase"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge experiment</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1u4om6sirj30x809ujsa.jpg" alt="rebase2"></p><h3 id="两者差别"><a href="#两者差别" class="headerlink" title="两者差别"></a>两者差别</h3><p>这两种整合方法的最终结果<code>没有任何区别</code>，但是<strong>变基使得提交历史更加整洁</strong>。</p><p>你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。</p><h3 id="挑拣变基"><a href="#挑拣变基" class="headerlink" title="挑拣变基"></a>挑拣变基</h3><p>现在需要将client里面的内容(C8，C9)变基到master分支的C6后。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1u4yr2l4xj30yu0jcjtg.jpg" alt="挑拣变基"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rebase --onto master server client</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge client</span></span><br></pre></td></tr></tbody></table></figure><p>使用<code>--onto</code>选中在client分支里，但是不在server分支里面的修改，将它在master分支上重放。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1u51ehnu8j30xm0b2dh2.jpg" alt="快进合并 master 分支，使之包含来自 client 分支的修改"></p><p>整合server变更</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git rebase [basebranch] [topicbranch]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase master server</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge server</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1u52u3vgvj30yu05qwel.jpg" alt="将 server 中的修改变基到 master 上"></p><h2 id="变基风险"><a href="#变基风险" class="headerlink" title="变基风险"></a>变基风险</h2><p>注意⚠️：<strong>不要对在你的仓库外有副本的分支执行变基。</strong></p><p>变基操作的实质是<code>丢弃一些现有的提交,然后相应地新建一些内容一样但实际上不同的提交</code>。</p><p>如果有人拉取了一个分支并在此基础上进行开发，但是该分支被你执行了变更。</p><p>那么当那个人提交的时候就需要处理<code>额外的合并工作</code>（将相同的内容又合并一次，并生成了一个新的提交）。</p><p>不过这个情况可以使用变基来解决，Git能分辨哪些提交已经存在，并且会基于此处进行后续不同内容的整合。</p><h2 id="变基原则"><a href="#变基原则" class="headerlink" title="变基原则"></a>变基原则</h2><ul><li><p><strong>只对尚未推送或分享给别人的本地修改执行变基操作清理历史。</strong></p></li><li><p><strong>从不对已推送至别处的提交执行变基操作。</strong></p></li></ul><p>所以在还未上库之前，随便怎么搞，但是上库之后的东西，就别乱动了！</p><p>变基使版本变更走向清晰，合并使实际发生的事情有迹可循，两者各有好处，需要结合实际情况进行选择与使用。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识（七）</title>
      <link href="article/9f946a3b.html"/>
      <url>article/9f946a3b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识-七-–分支开发工作流"><a href="#Git基础知识-七-–分支开发工作流" class="headerlink" title="Git基础知识(七)–分支开发工作流"></a>Git基础知识(七)–分支开发工作流</h1><h2 id="分支开发基础知识"><a href="#分支开发基础知识" class="headerlink" title="分支开发基础知识"></a>分支开发基础知识</h2><h3 id="长期分支"><a href="#长期分支" class="headerlink" title="长期分支"></a>长期分支</h3><p>在<code>master</code>分支上保留完全稳定的代码</p><ul><li>已发布的代码</li><li>即将发布的代码</li></ul><p>创建<code>develop</code>分支，在该分支上进行开发与测试。</p><p>当<code>develop</code>分支稳定后可以合入<code>master</code>分支，等待下一次发布。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1su45jvr4j30x60doace.jpg" alt="渐进稳定分支"></p><p>大型项目中，通过类似的方式使分支具有<code>不同级别的稳定性</code>。当它们具有一定程度的稳定性后，再把它们合入<code>更高级别的稳定性分支</code>中。使用多个长期分支的方法并非必要，但是当你在一 个非常庞大或者复杂的项目中工作时，就会提供很大的帮助。</p><span id="more"></span><h3 id="特性分支"><a href="#特性分支" class="headerlink" title="特性分支"></a>特性分支</h3><p>一个短期的分支，用于实现单一特性或者相关工作。</p><ul><li>主线分支<code>master</code></li><li>开发分支<code>dumbidea</code></li><li>问题修复分支<code>iss91</code></li><li>问题修复测试分支<code>iss91v2</code></li></ul><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1su9htykjj30xm0qatc9.jpg" alt="特性分支"></p><h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><p>上述的分支都是在本地的操作</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git ls-remote &lt;remote_name&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote show &lt;remote_name&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1suckpcvlj311e0d877n.jpg" alt="查看远端分支信息"></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1sudw9ij3j31200q4jwy.jpg" alt="远程分支更多信息"></p><p>一般当多人协作的时候，总是会出现先后修改的问题。当别人对改分支进行修改之后，远端的分支就会前进，而你本地不会实时的获取到这个改变。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin <span class="comment">#更新本地数据库，移动origin/master指针指向新的位置</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1suhgwy36j30x20o6whv.jpg" alt="同步远程仓库，更新本地仓库信息"></p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push &lt;remote_name&gt; &lt;branch&gt; <span class="comment">#推送branch分支到远端的branch分支</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push &lt;remote_name&gt; &lt;branch&gt;&lt;remote_branch&gt; <span class="comment">#推送branch分支到远端的remote_branch分支</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1suk616iej31k30u0wn0.jpg" alt="推送分支"></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1sumti2fjj31p40awjts.jpg" alt="推送远端并改名"></p><h3 id="跟踪分支"><a href="#跟踪分支" class="headerlink" title="跟踪分支"></a>跟踪分支</h3><blockquote><p>从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。跟踪分支是与远程分支有直接关系的本地分支。如果在一个跟踪分支上输入 <code>git pull</code>，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。</p></blockquote><p>检出时确定跟踪分支关联关系：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [remotename]/[branch]</span></span><br></pre></td></tr></tbody></table></figure><p>检出后修改跟踪分支关联关系：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -u [remotename]/[branch]b</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1surpkytij312i0fkjvy.jpg" alt="修改跟踪分支"></p><h4 id="查看跟踪分支关系"><a href="#查看跟踪分支关系" class="headerlink" title="查看跟踪分支关系"></a>查看跟踪分支关系</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -vv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch --all; git branch -vv <span class="comment">#建议在查看前更新一下本地仓库信息</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1susiuuqbj30xe09uac4.jpg" alt="查看跟踪分支"></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1sutnygq0j315o0eadj0.jpg" alt="查看跟踪分支2"></p><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line">=</span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push [remotename] --delete [branch]</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1suvyhmkuj314605a755.jpg" alt="删除分支"></p><h2 id="常见的分支开发工作流"><a href="#常见的分支开发工作流" class="headerlink" title="常见的分支开发工作流"></a>常见的分支开发工作流</h2><p><code>Gitflow</code>工作流是经典模型，处于核心位置，体现了工作流的经验和精髓。随着项目过程复杂化，你会感受到这个工作流中的深思熟虑和威力！</p><p><code>Forking</code>工作流是分布式协作的（<code>GitHub</code>风格）可以先看看<code>GitHub</code>的Help：<a href="https://help.github.com/articles/fork-a-repo/">Fork A Repo</a>和<a href="https://help.github.com/articles/using-pull-requests/">Using pull requests</a> 。照着操作，给一个<code>GitHub</code>项目贡献你的提交，有操作经验再看指南容易意会。指南中给了<a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-forking.md#%E5%BC%80%E5%8F%91%E8%80%85fork%E6%AD%A3%E5%BC%8F%E4%BB%93%E5%BA%93">自己实现<code>Fork</code>的方法</a>：<code>Fork</code>就是服务端的克隆。在指南的操练中使用的是代码托管服务（如<code>GitHub</code>），可以点一下按钮就让开发者完成仓库的<code>fork</code>操作。</p><h3 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h3><p>基本上和<code>SVN</code>一样的开发方式。</p><p>虽然机制一样，但是<code>Git</code>有相比<code>SVN</code>的几个优势。 首先，每个开发可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分修改独立开来 —— 即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。</p><p>其次，<code>Git</code>提供了强壮的分支和合并模型。不像<code>SVN</code>，<code>Git</code>的分支设计成可以做为一种用来在仓库之间集成代码和分享修改的『失败安全』的机制。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1sw4lyamjj306k08jt8s.jpg" alt="git-workflow-svn-push-local"></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1sw5h1v8oj30h20axdg7.jpg" alt="git-workflow-svn"></p><h3 id="功能分支工作流"><a href="#功能分支工作流" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h3><p>功能分支工作流以集中式工作流为基础，不同的是为各个新功能分配一个专门的分支来开发。这样可以在把新功能集成到正式项目前，用<code>Pull Requests</code>/<code>Merage Requests</code>的方式讨论变更。</p><p>功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在<code>master</code>分支上。 这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。 另外，也保证了<code>master</code>分支的代码一定不会是有问题的，极大有利于集成环境。</p><p>功能开发隔离也让<code>pull requests</code>成为可能， <code>pull requests</code>工作流能为每个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。 另外，如果你在功能开发中有问题卡住了，可以开一个<code>pull requests</code>来向同学们征求建议。 这些做法的重点就是，<code>pull requests</code>让团队成员之间互相评论工作变成非常方便！</p><p><code>Code Review</code>是<code>Pull Requests</code>的一个主要的收益，但<code>Pull Requests</code>实际上用作讨论代码的常用手段。 你可以把<code>Pull Requests</code>作为专门给某个分支的讨论。这意味着可以在更早的开发过程中就可以进行<code>Code Review</code>。 比如，一个开发者开发功能需要帮助时，要做的就是发起一个<code>Pull Request</code>，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。</p><p>一旦<code>Pull Request</code>被接受了，发布功能要做的就和集中式工作流就很像了。 首先，确定本地的<code>master</code>分支和上游的<code>master</code>分支是同步的。然后合并功能分支到本地<code>master</code>分支并<code>push</code>已经更新的本地<code>master</code>分支到中央仓库。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1sw7syol5j30h20exwev.jpg" alt="git-workflow-feature-branch-1"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout marys-feature</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull <span class="comment"># 确认是最新的</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull --rebase origin master <span class="comment"># rebase新功能到master分支的顶部</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge marys-feature <span class="comment"># 合并marys-feature分支的修改，因为这个分支之前对齐（rebase）了master，一定是快进合并</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Gitflow"><a href="#Gitflow" class="headerlink" title="Gitflow"></a>Gitflow</h3><p><code>Gitflow</code>工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</p><blockquote><p><code>Gitflow</code>工作流定义了一个围绕项目发布的严格分支模型。虽然比<a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-feature-branch.md">功能分支工作流</a>复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p><p><code>Gitflow</code>工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。 除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。 当然你可以用上功能分支工作流所有的好处：<code>Pull Requests</code>、隔离实验性开发和更高效的协作。</p></blockquote><h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><p>主干包含两条分支</p><ul><li>master:存储了正式发布的历史</li><li>develop:功能的集成分支</li></ul><p>每个新功能位于一个自己的分支，这样可以<code>push</code>。 但功能分支不是从<code>master</code>分支上拉出新分支，而是使用<code>develop</code>分支作为父分支。当新功能完成时，<code>develop</code>分支。 新功能提交应该从不直接与<code>master</code>分支交互。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1sv7dhw0kj30eu0mc74p.jpg" alt="main-branches"></p><h3 id="Supporting-branches"><a href="#Supporting-branches" class="headerlink" title="Supporting branches"></a>Supporting branches</h3><ul><li>Feature：功能分支</li><li>Release：发布分支</li><li>Hotfix：维护分支</li></ul><h4 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h4><p>其中<code>Feature</code>分支可能从<code>develop</code>分支中某一节点创建，最终会合入<code>develop</code>分支，一般为特性分支。并且大部分时候都是在用户本地存在而非远端。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1svbxajdyj307e0jugln.jpg" alt="Feature"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个特性分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b myfeature develop</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 完成特性并合入开发分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout develop</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff myfeature</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d myfeature</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin develop</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1svh0hufcj30qk0niweq.jpg" alt="合并"></p><blockquote><p>The <code>--no-ff</code> flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. </p></blockquote><p>用<code>--no-ff</code>会创建一个新的空提交，但是可以很<strong>清晰的看出特性开发的内容与流程</strong>，它的收益远大于消耗。</p><h4 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从开发分支新建一个release分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b release-1.2 develop</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用shell脚本写入版本信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bump-version.sh 1.2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交修改</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a -m <span class="string">"Bumped version number to 1.2"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检出master分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以非快进分方式将release分支合入master分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff release-1.2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基于当前提交创建标签</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -a 1.2</span></span><br></pre></td></tr></tbody></table></figure><p>将版本信息更新至开发分支</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检出开发分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout develop</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将release分支合入开发分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff release-1.2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除release分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d release-1.2</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Hotfix"><a href="#Hotfix" class="headerlink" title="Hotfix"></a>Hotfix</h4><blockquote><p>维护分支或说是热修复（<code>hotfix</code>）分支用于生成快速给产品发布版本（<code>production releases</code>）打补丁，这是唯一可以直接从<code>master</code>分支<code>fork</code>出来的分支。 修复完成，修改应该马上合并回<code>master</code>分支和<code>develop</code>分支（当前的发布分支），<code>master</code>分支应该用新的版本号打好<code>Tag</code>。</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1svprnwd5j30hk0not9c.jpg" alt="hotfix-branches"></p><p>和特性分支差不多，不在赘述</p><p>最终的结果：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1svqhelvij30u013rwhl.jpg" alt="gitflow"></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1svupigffj313a0u0qfa.jpg" alt="gitflow"></p><h2 id="Forking-工作流"><a href="#Forking-工作流" class="headerlink" title="Forking 工作流"></a>Forking 工作流</h2><blockquote><p><code>Forking</code>工作流和前面讨论的几种工作流有根本的不同。 这种工作流不是使用单个服务端仓库作为『中央』代码基线，而让各个开发者都有一个服务端仓库。 这意味着各个代码贡献者有2个<code>Git</code>仓库而不是1个：一个本地私有的，另一个服务端公开的。</p></blockquote><p>和其它的<code>Git</code>工作流一样，<code>Forking</code>工作流要先有一个公开的正式仓库存储在服务器上。 但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，而是<code>fork</code>正式项目在服务器上创建一个拷贝。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1swifk4o2j30b409k74f.jpg" alt="git-workflows-forking"></p><p>要提交本地修改时，<code>push</code>提交到自己公开仓库中 —— 而不是正式仓库中。 然后，给正式仓库发起一个<code>pull request</code>，让项目维护者知道有更新已经准备好可以集成了。 对于贡献的代码，<code>pull request</code>也可以很方便地作为一个讨论的地方。为了把功能集成到正式代码库，维护者<code>pull</code>贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错， 合并变更到自己本地的<code>master</code>分支， 然后<code>push master</code>分支到服务器的正式仓库中。 到此，贡献的提交成为了项目的一部分，其它的开发者应该执行<code>pull</code>操作与正式仓库同步自己本地仓库。</p><p><strong>使用之前讲过的<code>git remote add</code>管理多个远端</strong>，可以方便的更新主仓库的他人的提交。</p><h2 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h2><p><code>Pull Request</code>可以和<code>功能分支工作流</code>、<code>Gitflow工作流</code>或<code>Forking工作流</code>一起使用。 但一个<code>Pull Request</code>要求要么分支不同要么仓库不同，所以不能用于<code>集中式工作流</code>。 在不同的工作流中使用<code>Pull Request</code>会有一些不同，但基本的过程是这样的：</p><ol><li>开发者在本地仓库中新建一个专门的分支开发功能。</li><li>开发者<code>push</code>分支修改到公开的仓库中。</li><li>开发者通过代码管理平台发起一个<code>Pull Request</code>。</li><li>团队的其它成员<code>review code</code>，讨论并修改。</li><li>项目维护者合并功能到官方仓库中并关闭<code>Pull Request</code>。</li></ol><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1swp2bv04j30em05jt92.jpg" alt="pull-request-feature-branch"></p><blockquote><p>参考：<a href="https://www.atlassian.com/git/tutorials/comparing-workflows">https://www.atlassian.com/git/tutorials/comparing-workflows</a></p></blockquote><h3 id="其他根据Gitflow简化的分支开发工作流"><a href="#其他根据Gitflow简化的分支开发工作流" class="headerlink" title="其他根据Gitflow简化的分支开发工作流"></a>其他根据Gitflow简化的分支开发工作流</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jxu8t22aj31800u014x.jpg" alt="GitHub Flow"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jxv1ar8gj316o0u0qb4.jpg" alt="GitLab Flow"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jxw1j4izj318m0u0ajx.jpg" alt="GitLab Flow"><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jxwluihzj31550u012h.jpg" alt="GitLab Flow"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识（六）</title>
      <link href="article/4d941da4.html"/>
      <url>article/4d941da4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识-六"><a href="#Git基础知识-六" class="headerlink" title="Git基础知识(六)"></a>Git基础知识(六)</h1><h2 id="分支的新建与合并"><a href="#分支的新建与合并" class="headerlink" title="分支的新建与合并"></a>分支的新建与合并</h2><h3 id="模拟修复Bug的场景"><a href="#模拟修复Bug的场景" class="headerlink" title="模拟修复Bug的场景"></a>模拟修复Bug的场景</h3><ol><li>正常在工作分支「dev」上进行特性开发</li><li>测试告知主线版本「master」出现了一个bug「编号666」需要修复</li><li>在出了版本的分支上新建一个新的分支「666」</li><li>修复问题，提交修改，并推送至远端</li><li>让管理员把「666」分支合入到主线</li><li>切换回特性开发分支继续开发<span id="more"></span><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h4></li></ol><p>因为是主线上的bug，所以先切回到主线上去，不过本地的主线可能有点旧了，所以把本地的master分支删掉，然后和远端同步一下之后再从远端把master分支检出</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1qw188hwgj30zu0d2tbj.jpg" alt="更新master分支">现在master分支是库上最新的了，我们可以放心的从当前提交拉出一个新的bug修复分支了</p><p>作为一个有即将可能成为优秀程序员的人，当然要学会偷懒了，使用<code>checkout -b</code>一起完成新建和切换分支的操作</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b 666</span></span><br><span class="line">相当于</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch 666</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout 666</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1qw2xcjkpj30z803mmxr.jpg" alt="新建加切换"></p><p>然后「666」分支上进行修改，提交，推送到远端</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim 1.py</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'fix 「666」'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push --set-upstream origin 666</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1qw69d36tj31190u0qbh.jpg" alt="完成修改后提交"></p><p>好了，现在使用<code>git checkout</code>切回到原来工作的分支去就行了。</p><p>不过假设你是管理员，那么你就需要多干一点事情了，把这个提交给合并到主线去才能算完成工作。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge 666</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d 666</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1qwbi2hdhj311g0d0go8.jpg" alt="合并并删除无用分支"></p><h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><p>假设有两个人一起在开发，那么就可能会出现，修改了同一行内容的情况。这样合并的时候就会报出冲突。</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>首先要构造一个这样的环境</p><p>在当前的提交「A」上拉出两个分支「B」「C」，并修改同一个文件，然后先后合入到原来的提交「A」上。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1qwnz7hjqj314a0dagol.jpg" alt="检出B并修改"></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1qwo986hoj313g0iwwij.jpg" alt="检出C并修改"></p><p>先合并B然后合并C</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1qwpbx5juj30vm0c6dhz.jpg" alt="image-20190404210904817"></p><p>查看冲突：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1qwppknu4j30ta08uwfe.jpg" alt="查看冲突"></p><p>只有<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>和<code>=======</code>和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>都去除掉了才能正常提交</p><p>其中<code>=======</code>上面是「HEAD」的部分</p><p>下面是「C_」分支部分</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1qwr9f8hxj30im040q32.jpg" alt="image-20190404211057676"></p><p>提交之前也还是需要进行提交，这样本地的位置「HEAD」就指向本地的master了</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1qws8fl5oj30u00z37ep.jpg" alt="解决冲突后提交"></p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="查看全部分支"><a href="#查看全部分支" class="headerlink" title="查看全部分支"></a>查看全部分支</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -v</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1qwuw4n65j30u007idgi.jpg" alt="image-20190404211426258"></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1qwvjsumxj30vo07ojsq.jpg" alt="image-20190404211504986"></p><h3 id="过滤已经-还没合并的分支"><a href="#过滤已经-还没合并的分支" class="headerlink" title="过滤已经/还没合并的分支"></a>过滤已经/还没合并的分支</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch --no-merged <span class="comment"># 查看还未合并的分支</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --merged <span class="comment"># 查看已经合并的分支</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1qwwqp3c1j310o096jsg.jpg" alt="查看已合并的分支"></p><p>新建了一个分支「<code>D_</code>」并完成了一次提交，切换回「master」的时候使用<code>查看还未合并的分支</code>命令可以看到分支「<code>D_</code>」</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1qx0jz0lrj313k0i2wil.jpg" alt="查看未合并的分支"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识（五）</title>
      <link href="article/289a567d.html"/>
      <url>article/289a567d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识-五"><a href="#Git基础知识-五" class="headerlink" title="Git基础知识(五)"></a>Git基础知识(五)</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>都说Git的分支是它的<code>必杀技特性</code>，由于没有接触过太多的版本管理工具，就使用过的SVN来说，两者真的差别巨大。SVN创建一个分支，需要将内容复制一遍！这个时间真的是非常的漫长，而Git只需要几秒钟。所以Git<strong>鼓励</strong>在工作流中频繁的使用分支和合并。</p><h3 id="Git保存数据的方式"><a href="#Git保存数据的方式" class="headerlink" title="Git保存数据的方式"></a>Git保存数据的方式</h3><p>Git保存的不是文件的<code>变化</code>或者<code>差异</code>，而是不同时刻的<code>文件快照</code>。</p><p>Git每次进行提交操作的时候，会保存一个<code>提交对象</code>：这个提交对象包含了一个指向暂存内容快照的指针，并且这个对象还包含了作者的<code>姓名</code>，<code>邮箱</code>，<code>提交信息</code>，<code>指向它的父对象的指针</code>。</p><ul><li>首次提交产生的提交对象<code>没有</code>父对象</li><li>普通提交操作产生的提交对象<code>有一个</code>父对象</li><li>多个分支合并产生的提交对象<code>有多个</code>父对象<span id="more"></span>举一个例子：</li></ul><p>在一个空的文件夹中创建Git仓库，新建三个文件并完成提交。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add README test.rb LICENSE </span><br><span class="line">git commit -m 'The initial commit of my project'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1qu65scegj31bu0bu41i.jpg" alt="例子"></p><p>首先先来查看一下当前的状态</p><p>然后进入<code>cd .git/objects/</code>进到git<code>存放对象</code>的地方</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1qu9owah5j310q0bs76l.jpg" alt="查看当前状态"></p><p>使用<code>ls -al</code>可以看到这些个东西都是文件夹「d开头」</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1quayt1byj30v60c2wgr.jpg" alt="查看具体文件信息">感兴趣可以了解更多Linux文件属性的知识：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1que2ojbpj30jm0cv42b.jpg" alt="Linux文件"></p><p>刚才通过<code>git log</code>看到的哈希值为：<code>e011573e4a35dda973b7cdadd8ef5954cfa8314f</code>，所以进入<code>e0</code>这个文件夹，发现</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e0文件夹</span><br><span class="line">内容：11573e4a35dda973b7cdadd8ef5954cfa8314f</span><br><span class="line">组合：e011573e4a35dda973b7cdadd8ef5954cfa8314f</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1qugcl0jrj30qu050aas.jpg" alt="进入e0"></p><p>所以这个对象就是提交对象。</p><h3 id="查看Git的对象"><a href="#查看Git的对象" class="headerlink" title="查看Git的对象"></a>查看Git的对象</h3><p>由于这个提交也就是当前位置，所以可以直接使用拿到这一段内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat .git/HEAD</span></span><br><span class="line">ref: refs/heads/master</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat .git/refs/heads/master</span></span><br><span class="line">e011573e4a35dda973b7cdadd8ef5954cfa8314f</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1qumgi8x7j30zo062dgu.jpg" alt="image-20190404195709051"></p><p>这些文件的内容其实是压缩的数据外加一个标注类型和长度的头. </p><p>类型可以是</p><ul><li>块(blob)</li><li>树(tree)</li><li>提交(commit)</li><li>标签(tag)</li></ul><p>使用<code>git cat-file -t &lt;SHA值&gt;</code>可以看到它的类型</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1quoo0cr8j31gm02maae.jpg" alt="查看类型"></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1qupgpkqtj31fi07c75s.jpg" alt="tree"></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1quq0c662j31fg03qwf2.jpg" alt="blob"></p><p>使用<code>git cat-file commit &lt;SHA值&gt;</code>可以看到提交信息</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1quqw5ej9j31hc08w765.jpg" alt="提交信息"></p><p>使用<code>git ls-tree &lt;SHA值&gt;</code>可以看到树的信息，我们在这棵树里面看到了我们刚新建的三个文件</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1qusiv7wkj31di068abo.jpg" alt="树的信息"></p><p>使用<code>git cat-file blob &lt;SHA值&gt;</code>可以看到文件的内容，不过可惜我这次的提交是空文件。</p><p>我对文件进行修改之后再进行了一次提交，然后再查看blob的时候可以看到和我新增的修改一样</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1quy2np8xj31gm03yjs0.jpg" alt="文件内容"></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g1quzs4nsdj30y60jo78u.jpg" alt="首次提交对象及其树结构"></p><p>在修改之后，指针就会指向新的提交</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1qv0se9ysj30y00cszo3.jpg" alt="提交后指向"></p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>我们要创建一个分支，就相当于要创建一个可以<code>移动的新指针</code>。</p><p>使用的是<code>git branch &lt;name&gt;</code></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1qv3b1ax6j31640gw0vw.jpg" alt="创建分支"></p><p>虽然我们创建了一个分支，但其实我们还是在master上，我们当前的位置其实是由<code>HEAD</code>这个特殊的指针决定的。</p><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout testing</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1qv5jwd8wj316k0hy41x.jpg" alt="切换分支"></p><p>我们可以在这个分支上进行后续的提交</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g1qv7zx3baj311k0u0wm8.jpg" alt="分支上新增一个提交"></p><p>假设我们回到master分支上进行一个提交</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g1qv93sqthj31ba0hon17.jpg" alt="新建文件"></p><p>我们就可以发现两个分支往不同的方向走去了</p><p>使用<code>git log --oneline --decorate --graph --all</code> ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。</p><p>也可以用<code>git log --graph --all</code>查看分支图的详细信息</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1qva81badj313i0tgtdx.jpg" alt="分支图详细信息"></p><p>不加上<code>--all</code>的话只会显示当前所在分支的内容</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g1qvbgraiaj311w0mg786.jpg" alt="当前分支的内容"></p><p>以上就学会了Git基础的数据存放方式，分支的创建，当前状态的查看。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识（四）</title>
      <link href="article/4704933a.html"/>
      <url>article/4704933a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识-四"><a href="#Git基础知识-四" class="headerlink" title="Git基础知识(四)"></a>Git基础知识(四)</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>经常可以看到一些软件的版本是<code>V1.0</code>,<code>V2.0</code>这样的，Git也支持给历史的某个提交打上这样一个东西，也就是标签。</p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>标签可以分为两种：</p><ul><li>轻量标签</li><li>附注标签<span id="more"></span><h4 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h4></li></ul><p>它是一个点，指向了某一次的提交。我们可以通过这个标签，获取到那一次提交时候的状态。</p><p>我们来创建一个轻量标签：</p><p>只需要使用<code>git tag &lt;name&gt;</code>就可以创建一个标签了</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1onz07xbij30vg050750.jpg" alt="创建轻量标签"></p><h4 id="附注标签"><a href="#附注标签" class="headerlink" title="附注标签"></a>附注标签</h4><p>包含了打标签者的姓名，邮件，日期，标签信息。</p><p>建议使用附注标签</p><p>创建附注标签的方式：</p><p><code>git tag -a &lt;name&gt; -m '&lt;tag info&gt;'</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1oo2dl189j314004kaam.jpg" alt="创建附注标签"></p><p>我们可以通过<code>git show &lt;name&gt;</code>来看到标签的具体信息，也就是刚才写在<code>-m</code>后面部分的内容</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1oo3y8dt7j31us0ootd9.jpg" alt="展示标签的具体信息"></p><h3 id="给过去的某个提交打标签"><a href="#给过去的某个提交打标签" class="headerlink" title="给过去的某个提交打标签"></a>给过去的某个提交打标签</h3><p>过去的很多提交中，可能其中某次提交发生了重大的变更，需要记录一下。我们来为他创建一个标签。</p><p>首先查看一下过去的提交历史</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1oocogxrqj31ng06240s.jpg" alt="查看历史"></p><p>比如要对<code>9acd7c5f1267c8003d550b49483282168a0ce1a7</code>这个提交创建一个标签：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.2 9acd7c5f1267c8003d550b49483282168a0ce1a7</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1ooe5seknj31ng0sgdlv.jpg" alt="image-20190402225027079"></p><h3 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h3><p>我们在本地仓库的全部操作，不进行推送的话，远端都无法接受的变更。</p><p>所以我们如果要让其他人也能看到这个标签信息的话，就需要进行推送</p><p><code>git push origin &lt;tagname&gt;</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.0</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1ooi0b5isj3102068t9u.jpg" alt="推送"></p><p><code>origin</code>对应的远端分支是github，所以去github上看一下</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1ooj39rxtj31h90u0gut.jpg" alt="github端"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1oojm49i7j31kw0go40v.jpg" alt="Tags信息"></p><p>提交上去了，不过时间看上去有点怪怪的。</p><p>通过<code>git log</code>看一下V1.0提交的信息，可以发现确实是2天前，所以远端的时间取得是本地提交的时间，而不是推送的时间。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1ookgcvb1j31jw05ojsm.jpg" alt="V1.0信息"></p><p>当然也可以把全部的标签一次性都推送上去</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1oolv944fj31100d8dim.jpg" alt="全部推送"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1oomc4cmuj31l20pywhz.jpg" alt="推送结果"></p><p>这样就完成了标签的推送了</p><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p>有新增就有删除，所以当我们不要这个标签的时候，我们就可以把它删了</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tagname&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1oongzx6xj30xo03qdgi.jpg" alt="删除标签"></p><p>同理，它也只是本地的操作，要把这个变更同步到远端，还是需要进行<code>push操作</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1oou4s3qhj315s04st9m.jpg" alt="删除远端分支"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1ooui6u5dj31ko0lmacz.jpg" alt="删除结果"></p><h3 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h3><p>创建标签的意义，很大程度就是这个标签所在的内容会被用到。既然要被使用，就需要进行检出.</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;tagname&gt;</span><br></pre></td></tr></tbody></table></figure><p>虽然我们如愿的检出了标签的内容，但是这个时候是处于一个游离的状态，我们当前的修改提交都会丢失掉。如果需要保留，请注意创建一个分支后提交保留。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1oowtly9ej31na0mqgrb.jpg" alt="检出"></p><h2 id="Git别名"><a href="#Git别名" class="headerlink" title="Git别名"></a>Git别名</h2><p>和Linux操作中类似，Git也支持将命令定义为一个别名</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></tbody></table></figure><p>以<code>commit</code>为例，现在把它重命名为<code>ci</code> 那一次提交请求为</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ci -m 'add 2.py</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1op0qxu7rj317u0a2q54.jpg" alt="别名提交"></p><p>当然一整条语句也可以进行别名的替换，如果使用频率非常高的话，可以考虑创建一个别名</p><p>例如我们想要查看最后一条提交信息</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log -1 HEAD</span><br><span class="line">git config --global alias.last 'log -1 HEAD'</span><br><span class="line">git last</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1op45bq5zj31dc0gkq6o.jpg" alt="最后一条信息"></p><p><img src="https://upload-images.jianshu.io/upload_images/7924986-2ba0b7844210837c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来和我一起学Git吧"><br>欢迎关注我的公众号：zx94_11<br><img src="https://upload-images.jianshu.io/upload_images/7924986-febe3596c11eef97.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="公众号"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Flask:请求和响应</title>
      <link href="article/ade6659.html"/>
      <url>article/ade6659.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-请求和响应-五"><a href="#Flask-请求和响应-五" class="headerlink" title="Flask(请求和响应 五)"></a>Flask(请求和响应 五)</h1><h2 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h2><h3 id="前后端不分离，模版渲染"><a href="#前后端不分离，模版渲染" class="headerlink" title="前后端不分离，模版渲染"></a>前后端不分离，模版渲染</h3><blockquote><p>建议：一个视图函数写一个url</p></blockquote><ol><li>获取所有的项目：<code>/projects</code> <code> def list_projects()</code></li><li>获取单个项目内容：<code>/project/&lt;id&gt;</code> <code>def get_project()</code></li><li>修改某个项目内容：<code>/project_edit/&lt;id&gt;</code> <code>def edit_project()</code><span id="more"></span><h3 id="前后端分离，通过method"><a href="#前后端分离，通过method" class="headerlink" title="前后端分离，通过method"></a>前后端分离，通过method</h3></li></ol><p><code>/project</code> 类的视图</p><ul><li><p><code>GET</code> 获取单个资源 <code>/project/&lt;id&gt;</code></p></li><li><p><code>GET</code>获取全部<code>/projects</code></p></li><li><p><code>PUT</code>：修改资源</p></li><li><p><code>POST</code>：创建资源</p></li><li><p><code>DELETE</code>：删除资源</p></li></ul><h2 id="一个简单的ajax例子"><a href="#一个简单的ajax例子" class="headerlink" title="一个简单的ajax例子"></a>一个简单的ajax例子</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"send_ajax()"</span>&gt;</span>点击发送<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send_ajax</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        $.ajax({</span></span><br><span class="line"><span class="javascript">            url: <span class="string">"http://127.0.0.1:5000"</span>,</span></span><br><span class="line"><span class="javascript">            data: <span class="built_in">JSON</span>.stringify({<span class="attr">username</span>: <span class="string">"zhongxin"</span>}),</span></span><br><span class="line"><span class="javascript">            dataType: <span class="string">'json'</span>,</span></span><br><span class="line"><span class="javascript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="javascript">            contentType: <span class="string">'application/json'</span>,</span></span><br><span class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'成功'</span>)</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span>,methods=[<span class="string">'GET'</span>,<span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        print(request.json)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'成功'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfui4b85g3j31b30u0tug.jpg" alt="测试"></p><p>使用ajax会返回<code>X-Requested-With: XMLHttpRequest</code>可以在<code>XHR</code>中找到</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfui7xz9vdj30mg0as3z1.jpg" alt="XHR"></p><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></tbody></table></figure><p>在<code>request</code>中包含了全部的请求信息和环境信息</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfuie4e76sj30xq0u04lq.jpg" alt="request"></p><h3 id="values"><a href="#values" class="headerlink" title="values"></a>values</h3><ul><li>form</li><li>args</li></ul><h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><p>请求的cookies，dict类型</p><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>包含了请求数据，并转换成字符串，无法处理的mimetype则会转换成stream</p><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>如果请求的表单无法解码，则会无改动的保存到这里。</p><p>当请求数据转换string时，使用data是最好的方式，这个stream只返回数据一次</p><h3 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h3><p>请求头，dict类型</p><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><p>通过POST或者PUT请求上传的文件</p><h3 id="environ"><a href="#environ" class="headerlink" title="environ"></a>environ</h3><p>WSGI隐含的环境配置</p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>请求方式</p><h3 id="remote-addr"><a href="#remote-addr" class="headerlink" title="remote_addr"></a>remote_addr</h3><p>远程IP</p><h3 id="user-agent"><a href="#user-agent" class="headerlink" title="user-agent"></a>user-agent</h3><p>提供反扒和恶意攻击</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><blockquote><p>增加文件类型限制，文件大小限制</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, send_from_directory</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">"MAX_CONTENT_LENGTH"</span>] = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>  <span class="comment"># 最大上传文件大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        print(request.json)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'成功'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_format</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.splitext(filename)[-<span class="number">1</span>].lower() <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'jpg'</span>, <span class="string">'png'</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/upload'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    file = request.files.get(<span class="string">'pic'</span>)</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">    <span class="keyword">if</span> allowed_format(file.filename):</span><br><span class="line">        file.save(file.filename)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'保存成功'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'保存失败'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/upload/&lt;filename&gt;'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_upload</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(os.getcwd(), filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"send_ajax()"</span>&gt;</span>点击发送<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send_ajax</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        $.ajax({</span></span><br><span class="line"><span class="javascript">            url: <span class="string">"http://127.0.0.1:5000"</span>,</span></span><br><span class="line"><span class="javascript">            data: <span class="built_in">JSON</span>.stringify({<span class="attr">username</span>: <span class="string">"zhongxin"</span>}),</span></span><br><span class="line"><span class="javascript">            dataType: <span class="string">'json'</span>,</span></span><br><span class="line"><span class="javascript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="javascript">            contentType: <span class="string">'application/json'</span>,</span></span><br><span class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'成功'</span>)</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfuwazy754g30tu0jwqvb.gif" alt="上传文件1"></p><p>如果文件中存在空格，则可能出现问题</p><p>保存的时候需要添加<code>secure_filename</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line">file.save(secure_filename(file.filename))</span><br></pre></td></tr></tbody></table></figure><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><p>为了返回一个json格式的内容，需要构造一个响应头信息</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 构造一个响应头信息</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps({<span class="string">"username"</span>: <span class="string">"zhongxin"</span>}), <span class="number">201</span>, {<span class="string">"content-type"</span>: <span class="string">"application/json"</span>}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    r = make_response(json.dumps({<span class="string">"username"</span>: <span class="string">"zhongxin1"</span>}), {<span class="string">"content-type"</span>: <span class="string">"application/json"</span>})</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p>查看<code>make_response</code>的源码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_response</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args:</span><br><span class="line">        <span class="keyword">return</span> current_app.response_class()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">1</span>:</span><br><span class="line">        args = args[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> current_app.make_response(args)</span><br></pre></td></tr></tbody></table></figure><p>当没有入参的时候进入<code>current_app.response_class()</code></p><p>进入之后可以看到<code>response_class = Response</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span>(<span class="params">ResponseBase, JSONMixin</span>):</span></span><br><span class="line">    default_mimetype = <span class="string">"text/html"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_data_for_json</span>(<span class="params">self, cache</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.get_data()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_cookie_size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> current_app:</span><br><span class="line">            <span class="keyword">return</span> current_app.config[<span class="string">"MAX_COOKIE_SIZE"</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(Response, self).max_cookie_size</span><br></pre></td></tr></tbody></table></figure><p>所以默认的响应头就是<code>"text/html"</code></p><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    r = jsonify({<span class="string">"username"</span>: <span class="string">"zhongxin2"</span>})</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p>可以看一下<code>jsonify</code>源码，其实也就是用的<code>make_response</code>中的 <code>current_app.response_class    </code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jsonify</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    indent = <span class="literal">None</span></span><br><span class="line">    separators = (<span class="string">","</span>, <span class="string">":"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_app.config[<span class="string">"JSONIFY_PRETTYPRINT_REGULAR"</span>] <span class="keyword">or</span> current_app.debug:</span><br><span class="line">        indent = <span class="number">2</span></span><br><span class="line">        separators = (<span class="string">", "</span>, <span class="string">": "</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args <span class="keyword">and</span> kwargs:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">"jsonify() behavior undefined when passed both args and kwargs"</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(args) == <span class="number">1</span>:  <span class="comment"># single args are passed directly to dumps()</span></span><br><span class="line">        data = args[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = args <span class="keyword">or</span> kwargs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> current_app.response_class(</span><br><span class="line">        dumps(data, indent=indent, separators=separators) + <span class="string">"\n"</span>,</span><br><span class="line">        mimetype=current_app.config[<span class="string">"JSONIFY_MIMETYPE"</span>],</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识（三）</title>
      <link href="article/f0298a5f.html"/>
      <url>article/f0298a5f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识-三"><a href="#Git基础知识-三" class="headerlink" title="Git基础知识(三)"></a>Git基础知识(三)</h1><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>为了能进行项目协作，所以我们需要将仓库托管在一个公共的地方。远程仓库是指托管在因特网或其他网络中的你的项目的版本库。</p><p>一般从Github上克隆下来的仓库，我们的权限是<code>只读</code>:能下载，能在本地修改，但是无法上传更改。</p><p>当然也可以同时维护好几个远程仓库。</p><p>为了学习远程仓库，我们前往最大的同性交友平台Github创建一个学习使用的仓库</p><span id="more"></span><h3 id="Github上搭建一个项目"><a href="#Github上搭建一个项目" class="headerlink" title="Github上搭建一个项目"></a>Github上搭建一个项目</h3><p>进入<a href="https://github.com并注册一个账户,在首页点击`new`/">https://github.com并注册一个账户，在首页点击`New`</a></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1lxofktimj319a0u0nf6.jpg" alt="New"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lxqiqs0ej30zx0u0jxl.jpg" alt="项目配置"></p><p>进行项目的配置</p><ul><li><code>Owner</code>:所属人员，可以选择自己也可以选择成员组</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1lxrlv05sj30ha09aq43.jpg" alt="Owner"></p><ul><li><code>Repository name</code>:项目名称</li><li><code>Description(optional)</code>:项目描述</li><li><code>Public/Private</code>:项目的开发程度，Public所有人可以看，Private只有Owner可以看到</li><li><code>Initialize this repository with a README</code>:是否在初始化的时候创建README.md</li><li><code>Add .gitignore:XXX</code>增加项目忽略文件，GitHub提供了很多模版，可以根据自己的需要进行选择和定制</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1lxvqsbrmj30hk0tkdhn.jpg" alt="忽略"></p><ul><li><p><code>Add a license:XXX</code>:协议<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1lxwthqzfj30h60tm0v8.jpg" alt="协议"></p><p>以MIT License为例</p><blockquote><p>Copyright (C) <year> <copyright holders=""></copyright></year></p><p>　　Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:<br>　　<br>　　The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p><h3 id="被授权人权利"><a href="#被授权人权利" class="headerlink" title="被授权人权利"></a>被授权人权利</h3><p>被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软件及软件的副本。</p><p>被授权人可根据程序的需要修改授权条款为适当的内容。</p><h3 id="被授权人义务"><a href="#被授权人义务" class="headerlink" title="被授权人义务"></a>被授权人义务</h3><p>在软件和软件的所有副本中都必须包含版权声明和许可声明。</p><h3 id="其他重要特性"><a href="#其他重要特性" class="headerlink" title="其他重要特性"></a>其他重要特性</h3><p>此授权条款并非属<a href="https://baike.baidu.com/item/copyleft">copyleft</a>的自由软件授权条款，允许在自由/开放源码软件或非自由软件（proprietary software）所使用。</p><p>MIT的内容可依照程序著作权者的需求更改内容。此亦为MIT与<a href="https://baike.baidu.com/item/BSD">BSD</a>（The BSD license, 3-clause BSD license）本质上不同处。</p><p>MIT条款可与其他授权条款并存。另外，MIT条款也是自由软件基金会（FSF）所认可的自由软件授权条款，与<a href="https://baike.baidu.com/item/GPL">GPL</a>兼容。</p></blockquote></li></ul><p>点击创建，就完成了创建，然后会跳转至项目界面</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lxz89f3bj319a0u07ev.jpg" alt="项目界面"></p><p>具体的东西后续再看了，先点击<code>Clone or Download</code>拿到项目的地址</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1ly0a7s78j30rw0e60ux.jpg" alt="项目地址"></p><p>使用以下语句把代码克隆至本地</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zx490336534/Git_study.git</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1ly1jiarbj31im0fs77z.jpg" alt="克隆至本地"></p><p>为了方便测试，我们将本地仓库导出一个裸仓库后上传到我的Gitlab服务器</p><p>首先到导出裸仓库(<em>一个不包含当前工作目录的仓库</em>)</p><ul><li><code>git clone --bare Git_study Git_study.git</code></li><li>也可以使用<code>git clone —bare https://github.com/zx490336534/Git_study.git</code></li></ul><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1ly8w63vsj31a4070mye.jpg" alt="导出裸仓库"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lya3islyj31tq054q43.jpg" alt="进入裸仓库"></p><p>然后把仓库推送到新的服务器上</p><p>根据git的规则新的服务器地址应该是<a href="http://123.56.13.233:9000/z05035/Git_study.git">http://123.56.13.233:9000/z05035/Git_study.git</a></p><p>使用<code>git push --mirror http://123.56.13.233:9000/z05035/Git_study.git</code>就可以把东西推送上去了</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1lyfafiwej31qg0mkjwr.jpg" alt="推送"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1lyeig5nfj319a0u0dos.jpg" alt="Gitlab上的内容"></p><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1lzbd5vqvj31r00iiq7t.jpg" alt="git remote的一些用法"></p><p>使用<code>git remote</code>可以查看远程服务器的简写</p><p>可以加<code>-v</code>参数看到简写和对应的URL</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1lyibze9xj30ya07gabk.jpg" alt="查看远程服务器信息"></p><p>我们现在把Gitlab的服务器信息也加入到远程仓库</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitlab_origin http://123.56.13.233:9000/z05035/Git_study.git</span><br></pre></td></tr></tbody></table></figure><p>然后再用<code>git remote -v</code>查看一下，可以看到新增了一个简写是<code>gitlab_origin</code>的远程信息</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lym6bdxaj31qy0ccq67.jpg" alt="远程仓库信息"></p><h3 id="从远程仓库抓取和拉取"><a href="#从远程仓库抓取和拉取" class="headerlink" title="从远程仓库抓取和拉取"></a>从远程仓库抓取和拉取</h3><p>这里有两个概念：<code>抓取</code>，<code>拉取</code></p><p>从远程仓库获取数据，也就是<code>抓取</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote-name]</span><br></pre></td></tr></tbody></table></figure><p><code>git fetch</code> 命令会将数据拉取到你的本地仓库,它<strong>并不会自动合并或修改你当前的工作</strong>。</p><p>从远程仓库获取<strong>某分支</strong>的内容并<strong>合并</strong>到<strong>当前分支</strong>，也就是<code>拉取</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull [options] [&lt;repository&gt; [&lt;refspec&gt;…]]</span><br><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行 <code>git pull</code> <strong>通常</strong>会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master:master</span><br><span class="line">把服务器上的master分支拉取到本地的master分支上</span><br></pre></td></tr></tbody></table></figure><p>其实<code>git pull</code>的本质是</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动”追踪”<code>origin/master</code>分支。</p></blockquote><p>也可以手动建立追踪关系</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/next</span><br></pre></td></tr></tbody></table></figure><p>所以如果是有追踪关系的分支更新，直接使用<code>git pull</code>就好了</p><h4 id="git-fetch和git-pull的区别"><a href="#git-fetch和git-pull的区别" class="headerlink" title="git fetch和git pull的区别"></a>git fetch和git pull的区别</h4><p><em>git fetch</em>：相当于是从远程获取最新版本到本地，不会自动合并。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master</span><br><span class="line">git log -p master..origin/master</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></tbody></table></figure><p>以上命令的含义：</p><ul><li>首先从远程的<code>origin</code>的<code>master</code>主分支下载最新的版本到<code>origin/master</code>分支上</li><li>然后比较本地的<code>master</code>分支和<code>origin/master</code>分支的差别</li><li>最后进行合并</li></ul><p>上述过程其实可以用以下更清晰的方式来进行：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master:tmp</span><br><span class="line">git diff tmp </span><br><span class="line">git merge tmp</span><br></pre></td></tr></tbody></table></figure><p><em>git pull</em>：相当于是从远程获取最新版本并<code>merge</code>到本地 </p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></tbody></table></figure><p>上述命令其实相当于<code>git fetch</code>和 <code>git merge</code><br>在实际使用中，<code>git fetch</code>更安全一些，因为在<code>merge</code>前，我们可以查看更新情况，然后再决定是否合并。</p><h3 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h3><p><code>git push</code>命令用于将本地分支的更新，然后推送到远程主机。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></figure><p>将本地的<code>master</code>分支推送到<code>origin</code>主机的<code>master</code>分支。如果<code>master</code>不存在，则会被新建。</p><p>只有当你有所克隆服务器的<strong>写入权限</strong>，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。</p><h4 id="将本地所有分支推送到远端"><a href="#将本地所有分支推送到远端" class="headerlink" title="将本地所有分支推送到远端"></a>将本地所有分支推送到远端</h4><p>不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用<code>–all</code>选项。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --all origin</span><br></pre></td></tr></tbody></table></figure><h3 id="远程仓库的重命名"><a href="#远程仓库的重命名" class="headerlink" title="远程仓库的重命名"></a>远程仓库的重命名</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote rename &lt;old_name&gt; &lt;new_name&gt;</span><br><span class="line"></span><br><span class="line">git remote rename gitlab_origin gitlab</span><br><span class="line">git remote -v</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1lz8zwbw0j31aa08ktb1.jpg" alt="image-20190331144922832"></p><h3 id="远程仓库的移除"><a href="#远程仓库的移除" class="headerlink" title="远程仓库的移除"></a>远程仓库的移除</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm  &lt;name&gt;</span><br><span class="line">git remote rm gitlab</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lzbzihtqj310o060wfx.jpg" alt="移除仓库"></p><p><img src="https://upload-images.jianshu.io/upload_images/7924986-2ba0b7844210837c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来和我一起学Git吧"><br>欢迎关注我的公众号：zx94_11</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Flask:视图函数</title>
      <link href="article/ea96619c.html"/>
      <url>article/ea96619c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-视图函数-四"><a href="#Flask-视图函数-四" class="headerlink" title="Flask(视图函数 四)"></a>Flask(视图函数 四)</h1><h2 id="基于类的视图，可插拔视图"><a href="#基于类的视图，可插拔视图" class="headerlink" title="基于类的视图，可插拔视图"></a>基于类的视图，可插拔视图</h2><blockquote><p>从Django学来的</p></blockquote><p>好处：</p><ol><li>类可以继承</li><li>代码可以复用</li><li>可以定义多种行为<span id="more"></span><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">View</span>):</span></span><br><span class="line">    methods = [<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'get'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'post'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分配请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        dispatch_pattern = {<span class="string">'GET'</span>: self.get, <span class="string">'POST'</span>: self.post}</span><br><span class="line">        method = request.method</span><br><span class="line">        <span class="keyword">return</span> dispatch_pattern.get(method)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.add_url_rule(</span><br><span class="line">    <span class="string">'/user'</span>,</span><br><span class="line">    view_func=UserView.as_view(<span class="string">'user'</span>),</span><br><span class="line">    methods=[<span class="string">"GET"</span>, <span class="string">"POST"</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure></li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gftcied0dpj30n609edgq.jpg" alt="GET"></p><h2 id="装饰这个类视图"><a href="#装饰这个类视图" class="headerlink" title="装饰这个类视图"></a>装饰这个类视图</h2><p>由于会被<code>as_view</code>转换，所以需要显式的装饰它</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_time</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = UserView.as_view(<span class="string">'user'</span>)</span><br><span class="line">log_time(f)</span><br><span class="line"></span><br><span class="line">app.add_url_rule(</span><br><span class="line">    <span class="string">'/user'</span>,</span><br><span class="line">    view_func=f,</span><br><span class="line">    methods=[<span class="string">"GET"</span>, <span class="string">"POST"</span>]</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h2 id="使用MethodView"><a href="#使用MethodView" class="headerlink" title="使用MethodView"></a>使用<code>MethodView</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View, MethodView</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectView</span>(<span class="params">MethodView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'get'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'post'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.add_url_rule(</span><br><span class="line">    <span class="string">'/project'</span>,</span><br><span class="line">    view_func=ProjectView.as_view(<span class="string">'project'</span>),</span><br><span class="line">    methods=[<span class="string">"GET"</span>, <span class="string">"POST"</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><p>这个类就是继承了<code>View</code>然后重写了<code>dispatch_request</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">    meth = <span class="built_in">getattr</span>(self, request.method.lower(), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the request method is HEAD and we don't have a handler for it</span></span><br><span class="line">    <span class="comment"># retry with GET.</span></span><br><span class="line">    <span class="keyword">if</span> meth <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> request.method == <span class="string">"HEAD"</span>:</span><br><span class="line">        meth = <span class="built_in">getattr</span>(self, <span class="string">"get"</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> meth <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, <span class="string">"Unimplemented method %r"</span> % request.method</span><br><span class="line">    <span class="keyword">return</span> meth(*args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p>相当于</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodView</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'get'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'get'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'post'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'post'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        func = <span class="built_in">getattr</span>(self, <span class="string">'get'</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MethodView().dispatch_request()</span><br></pre></td></tr></tbody></table></figure><p><code>func = getattr(self, 'get', None)</code></p><h2 id="使用MethodView实现reful风格接口"><a href="#使用MethodView实现reful风格接口" class="headerlink" title="使用MethodView实现reful风格接口"></a>使用MethodView实现reful风格接口</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> MethodView</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectView</span>(<span class="params">MethodView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, project_id</span>):</span></span><br><span class="line">        <span class="keyword">if</span> project_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'ALL projects'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'get <span class="subst">{project_id}</span>'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, project_id</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'post <span class="subst">{project_id}</span>'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, project_id</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'put <span class="subst">{project_id}</span>'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, project_id</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'delete <span class="subst">{project_id}</span>'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = ProjectView.as_view(<span class="string">'projects'</span>)</span><br><span class="line">app.add_url_rule(<span class="string">'/projects/&lt;project_id&gt;'</span>, view_func=f, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'PUT'</span>, <span class="string">'DELETE'</span>])</span><br><span class="line">app.add_url_rule(<span class="string">'/projects/'</span>, defaults={<span class="string">"project_id"</span>: <span class="literal">None</span>}, view_func=f, methods=[<span class="string">'GET'</span>])</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><h2 id="request获取请求数据"><a href="#request获取请求数据" class="headerlink" title="request获取请求数据"></a>request获取请求数据</h2><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_data = request.args</span><br></pre></td></tr></tbody></table></figure><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form_data = request.form</span><br></pre></td></tr></tbody></table></figure><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json_data = request.json</span><br></pre></td></tr></tbody></table></figure><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_data = request.files</span><br></pre></td></tr></tbody></table></figure><h2 id="上传文件的代码"><a href="#上传文件的代码" class="headerlink" title="上传文件的代码"></a>上传文件的代码</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/uploads"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File    : homework.py</span></span><br><span class="line"><span class="string">@Time    : 2020/6/16 7:18 上午</span></span><br><span class="line"><span class="string">@Author  : zhongxin</span></span><br><span class="line"><span class="string">@Email   : 490336534@qq.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">print(app.instance_path)</span><br><span class="line">print(app.root_path)</span><br><span class="line">print(app.static_folder)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/uploads'</span>, methods=[<span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    file = request.files.get(<span class="string">'pic'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">    file_name = time.strftime(<span class="string">'%Y-%m-%d-%H-%M-%S'</span>) + file.filename</span><br><span class="line">    file_url = <span class="string">f'/static/<span class="subst">{file_name}</span>'</span></span><br><span class="line">    file.save(os.path.join(</span><br><span class="line">        app.root_path,</span><br><span class="line">        app.static_folder,</span><br><span class="line">        file_name</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">return</span> redirect(file_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfts1sbcm9g30ts0jw1l5.gif" alt="上传文件"></p>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识（二）</title>
      <link href="article/bd37290d.html"/>
      <url>article/bd37290d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识-二"><a href="#Git基础知识-二" class="headerlink" title="Git基础知识(二)"></a>Git基础知识(二)</h1><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><p>####git status和git status -s</p><p><code>git status </code>命令的输出十分详细，但其用语有些繁琐。 </p><p>可以使用 <code>git status -s</code> 命令或 <code>git status --short</code> 命令，得到一种更为紧凑的格式输出。</p><span id="more"></span><p>输出如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">M README </span><br><span class="line">MM Rakefile </span><br><span class="line">A lib/git.rb </span><br><span class="line">M lib/simplegit.rb </span><br><span class="line">?? LICENSE.txt</span><br></pre></td></tr></tbody></table></figure><p><code>??</code>:新添加的<strong>未跟踪</strong>文件前面有 ?? 标记，</p><p><code>A</code>:<strong>新添加到暂存区</strong>中的文件前面有 A 标记，</p><p><code>M</code>:<strong>修改过</strong>的文件前面有 M 标记。 </p><p><code>MM</code>:右边的 M 表示该<strong>文件被修改了但是还没放入暂存区</strong>，左边的 M 表示<strong>文件被修改了并放入了暂存区</strong>。</p><ul><li><p>README 文件在工作区被修改了但是还没有将修改后的文件放入暂存区</p></li><li><p>lib/simplegit.rb 文件被修改了并将修改后的文件放入了暂存区。 </p></li><li><p> Rakefile 在工作区被<strong>修改并提交</strong>到暂存区后<strong>又</strong>在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。</p></li></ul><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>对一些无需使用Git管理的文件，可以使用<code>.gitignore</code>来进行管理</p><ul><li><p>所有空行或者以 ＃ 开头的行都会被 Git 忽略。</p></li><li><p>可以使用标准的 glob 模式匹配。( <strong>glob 模式</strong>是指 shell 所使用的简化了的正则表达式。 )</p></li><li><p>匹配模式可以以（/）开头防止递归。</p></li><li><p>匹配模式可以以（/）结尾指定目录。</p></li><li><p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p></li></ul><p><code>*</code>匹配零个或多个任意字符；<br><code>[abc]</code> 匹配任何一个列在方括号中的字符（<code>[abc]</code>就是要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；<br><code>?</code>匹配一个任意字符；<br><code>[字符-字符]</code>方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配 （ <code>[0-9]</code> 表示匹配所有 0 到 9 的数字);<br><code>**</code> 表示匹配任意中间目录，比如<code>a/**/z</code> 可以匹配 a/z, a/b/z 或 a/b/c/z等。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以a为后缀的文件</span></span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除lib.a(因为上面忽略了全部.a后缀的的内容)</span></span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略当前路径下的TODO文件(注意是当前路径，不会递归查找)</span></span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略build文件夹下的全部文件(注意是全项目路径，会递归查找)</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取doc文件夹下的全部以txt为后缀的文件</span></span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略doc文件夹里面的全部pdf文件(不管doc文件夹下有几个文件夹，文件夹里面的pdf都会被忽略)</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></tbody></table></figure><blockquote><p>GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表，可以在 <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a> 找到它.</p></blockquote><p>我们新建一个<code>.gitignore</code>文件，并且输入 <code>*.txt</code>，把它commit到git仓库管理。</p><p>然后我们新建一个txt文件并用add添加它</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lqyrnf9oj30tm078q48.jpg" alt="忽略txt"></p><h3 id="查看已暂存和未暂存的修改"><a href="#查看已暂存和未暂存的修改" class="headerlink" title="查看已暂存和未暂存的修改"></a>查看已暂存和未暂存的修改</h3><p>我们新建一个文件<code>1.py</code>并把它提交至本地仓库，然后我们修改它，再使用<code>git status</code>查看</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lr4bemfej30v80d040t.jpg" alt="修改文件"></p><p>git会提示你，1.py文件被修改了，但是我们并不能看到它修改了什么</p><p>这时候使用<code>git diff</code>就可以看到具体的修改了</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lr6dx06ej30qc09kab4.jpg" alt="查看修改"></p><p>此命令比较的是<strong>工作目录中当前文件</strong>(<code>b/1.py</code>)和<strong>暂存区域快照</strong>(<code>a/1.py</code>)之间的差异。可以看到绿色部分<code>+print("学习Git")</code>也就是修改之后还没有暂存起来的变化内容。当然很多编辑器中都集成了文件对比。</p><p>以Pycharm为例，文件一行中新增内容，当前行之前会多一个绿色的小块</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lrgnc46zj31co0cu78y.jpg" alt="文件差异"></p><p>已存在的内容修改，当前行之前会多一个蓝色的小块，点击可以看到修改前的内容</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1lri38f79j30lu06gaao.jpg" alt="修改存在的内容"></p><p>也可以使用<code>Compare with the Same Repository Version</code>来查看变更</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1lrjizfprj30u00z1qe2.jpg" alt="Compare with the Same Repository Version的位置"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1lrkpypn7j31iy0u0jum.jpg" alt="Compare with the Same Repository Version"></p><h3 id="跳过暂存区"><a href="#跳过暂存区" class="headerlink" title="跳过暂存区"></a>跳过暂存区</h3><p>暂存区是一个很好的设计，但是每次对修改的提交都需要再加一遍暂存区就有点繁琐了。</p><p>可以使用<code>git commit -a -m '描述信息'</code>来跳过文件修改时候的添加暂存区</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lrpx5bgbj30z00hgn0m.jpg" alt="跳过暂存区"></p><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>在Linux中一般移动和重命名都是使用的mv操作，Git是Linux的创建者Linus写的，所以它也是用mv来完成这个操作。</p><p>我们新建一个文件夹后把1.py移动到这个文件夹之下<code>git mv 1.py test/1.py</code>使用<em>git status</em>可以看出它告诉我们，我们重命名了一个文件</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1lrv31eshj30xe0e6mzc.jpg" alt="改变文件位置"></p><p>我们再把1.py从test中拿回来，再改名为2.py使用<em>git status</em>可以看出它告诉我们，我们重命名了一个文件并且它是从1.py重命名过去的，也就是git是使用的最开始的记录进行对比变更的。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1lrwqx1koj30xe09ewft.jpg" alt="重命名"></p><p>根据之前的学习，如果要实现重命名文件需要执行以下操作:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv 1.py 2.py</span><br><span class="line">git rm 1.py</span><br><span class="line">git add 2.py</span><br></pre></td></tr></tbody></table></figure><p>所以<code>git mv</code>相当于执行了三句命令</p><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><strong>git log</strong></h3><p>使用<code>git log</code>可以看到提交的历史</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1ls0dj92hj30u0132tgv.jpg" alt="查看历史"></p><p>它有几个拓展的命令</p><p><code>-&lt;num&gt;</code>:查看最近的提交</p><p><code>git log -2</code>查看最近两次的提交</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lsp3796aj31140fk0vi.jpg" alt="查看最近两次的提交"></p><h4 id="git-log-–stat"><a href="#git-log-–stat" class="headerlink" title="git log –stat"></a>git log –stat</h4><p>可以查看每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过 的文件的哪些行被移除或是添加了，在每次提交的最后还有一个总结。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1ls5sbnn8j312m0bs408.jpg" alt="image-20190331104406273"></p><h4 id="git-log-–pretty-XXXXX"><a href="#git-log-–pretty-XXXXX" class="headerlink" title="git log –pretty=XXXXX"></a>git log –pretty=XXXXX</h4><p><code>pretty</code>支持多种格式：<code>oneline</code>，<code>short</code>，<code>full</code>，<code>fuller</code>，<code>format</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1ls8z3ecrj313y0aoae3.jpg" alt="oneline"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1ls9aagn5j310w0i0jua.jpg" alt="short"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1ls9lzz20j311y0ekmzt.jpg" alt="full"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1ls9yqks1j310a0ioadu.jpg" alt="fuller"></p><p>format可以让内容按照格式输出</p><p>例如：<code>git log --pretty=format:"%h - %an, %ar : %s"</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lsauo88mj319o0c0djm.jpg" alt="格式化输出"></p><table><thead><tr><th align="left">选项</th><th>说明</th></tr></thead><tbody><tr><td align="left">%H</td><td>提交对象的<strong>完整哈希字串</strong></td></tr><tr><td align="left">%h</td><td>提交对象的<strong>简单哈希字串</strong></td></tr><tr><td align="left">%T</td><td>树对象的<strong>完整哈希字串</strong></td></tr><tr><td align="left">%t</td><td>树对象的<strong>简单哈希字串</strong></td></tr><tr><td align="left">%P</td><td>父对象的<strong>完整哈希字串</strong></td></tr><tr><td align="left">%p</td><td>父对象的**简单哈希字串</td></tr><tr><td align="left">%an</td><td>作者名字</td></tr><tr><td align="left">%ae</td><td>作者邮箱</td></tr><tr><td align="left">%ad</td><td>作者修订日期</td></tr><tr><td align="left">%ar</td><td>修订日期，<strong>多久以前</strong></td></tr><tr><td align="left">%cn</td><td>提交者姓名</td></tr><tr><td align="left">%ce</td><td>提交者邮箱</td></tr><tr><td align="left">%cd</td><td>提交日期</td></tr><tr><td align="left">%cr</td><td>提交日期，<strong>多久以前</strong></td></tr><tr><td align="left">%s</td><td>提交说明</td></tr></tbody></table><ul><li><p>作者指的是实际作出修改的人。</p></li><li><p>提交者指的是最后将此工作成果提交到仓库的人。</p></li></ul><p>在使用GitHub/Gitlab等Git管理服务器进行协作的时候，一般都需要通过审核才能将代码合入，所以作者和提交者(合入者)很有可能不是一个人。</p><h3 id="git-log的常用选项"><a href="#git-log的常用选项" class="headerlink" title="git log的常用选项"></a>git log的常用选项</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>按补丁格式显示每个更新之间的<strong>差异</strong></td></tr><tr><td>—stat</td><td>显示每次更新的文件<strong>修改信息</strong></td></tr><tr><td>—shortstat</td><td>显示—stat中最后的行数修改添加移除的<strong>统计</strong></td></tr><tr><td>—name-only</td><td>仅在提交信息后显示<strong>已修改的文件清单</strong></td></tr><tr><td>–name-status</td><td>显示新增/修改/删除的<strong>文件清单</strong></td></tr><tr><td>—abbrev-commit</td><td>仅显示SHA-1的<strong>前几个字符</strong></td></tr><tr><td>—relative-date</td><td>使用<strong>比较短的相对时间</strong>显示（比如”2 weeks ago”）</td></tr><tr><td><strong>—graph</strong></td><td>显示ASCII图形表示的分支合并历史</td></tr><tr><td><strong>—pretty</strong></td><td>使用其他格式显示</td></tr></tbody></table><p><code>--graph</code>比较重要，在后续工作使用中，会有很多分支的拉出和合并，需要对分支历史有一个直观的展示，不过现在没有例子，在之后分支部分再讲好了。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-(n)</td><td>仅显示最近的 n 条提交</td></tr><tr><td>–since, –after</td><td>仅显示指定时间之后的提交。</td></tr><tr><td>–until, –before</td><td>仅显示指定时间之前的提交。</td></tr><tr><td>–author</td><td>仅显示指定作者相关的提交。</td></tr><tr><td>–committer</td><td>仅显示指定提交者相关的提交。</td></tr><tr><td>–grep</td><td>仅显示含指定关键字的提交</td></tr><tr><td>-S</td><td>仅显示添加或移除了某个关键字的提交</td></tr></tbody></table><h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><p><strong>注意⚠️：有些撤消操作是不可逆的！</strong>可以会因为操作失误而导致之前的工作丢失。</p><h4 id="提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。"><a href="#提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。" class="headerlink" title="提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。"></a><strong>提交完了才发现漏掉了几个文件没有添加</strong>，或者<strong>提交信息写错了</strong>。</h4><p>使用<code>git commit --amend</code>尝试重新提交</p><ol><li>把在缓存区中的内容提交</li><li>修改文件</li><li>使用<code>--amend</code>弹出提交信息，修改提交信息后保存</li><li>查看最终状态</li></ol><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1ltaqaf4jj313m0pqaf5.jpg" alt="提交后修改"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1ltaj7mnyj31600dadhr.jpg" alt="弹出的修改信息"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1ltag2rwij31140hq428.jpg" alt="再次查看"></p><p><strong>最终只会有一个提交，第二次提交将代替第一次提交的结果。</strong></p><h4 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h4><p>从提交后查看状态的提示信息可以看出，我们可以使用 <code>git reset HEAD &lt;文件&gt;...</code> 以取消暂存</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1ltgqr2coj30z20tmdkg.jpg" alt="取消暂存"></p><h4 id="撤销对文件的修改"><a href="#撤销对文件的修改" class="headerlink" title="撤销对文件的修改"></a>撤销对文件的修改</h4><p>我们把上一个例子中的1_1.py文件提交之后再进行修改，<strong>先不要加入暂存区</strong>，现在我们不要这个修改了，根据它的提示，我们使用 <code>git checkout -- &lt;文件&gt;...</code> 丢弃工作区的改动</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1ltm248rxj30wg0byq50.jpg" alt="修改"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1ltn6rpf2j30z605wq3x.jpg" alt="恢复"></p><blockquote><p>⚠️git checkout – [file] 是一个危险的命令。 对文件做的任何修改都会消失，你只是拷贝了另一个文件来覆盖它。 </p><p>除非你确实清楚不想要 那个文件了，否则不要使用这个命令！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Flask:MVC/路由</title>
      <link href="article/d2c79cf7.html"/>
      <url>article/d2c79cf7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-MVC-路由-三"><a href="#Flask-MVC-路由-三" class="headerlink" title="Flask(MVC/路由 三)"></a>Flask(MVC/路由 三)</h1><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><p>model:数据相关逻辑</p><p>程序员编写程序应有的功能（实现算法等），DBA对数据库进行数据库管理和设计</p><h3 id="V"><a href="#V" class="headerlink" title="V"></a>V</h3><p>view:返回的内容展示    </p><p>界面设计人员进行图形界面设计</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>control:控制器，视图函数</p><p>负责转发请求，对请求进行处理</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfqvia444ej314u0cyq43.jpg" alt="MVC"></p><span id="more"></span><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><code>route</code>源码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span>(<span class="params">self, rule, **options</span>):</span></span><br><span class="line">    <span class="string">"""A decorator that is used to register a view function for a</span></span><br><span class="line"><span class="string">    given URL rule.  This does the same thing as :meth:`add_url_rule`</span></span><br><span class="line"><span class="string">    but is intended for decorator usage::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @app.route('/')</span></span><br><span class="line"><span class="string">        def index():</span></span><br><span class="line"><span class="string">            return 'Hello World'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    For more information refer to :ref:`url-route-registrations`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param rule: the URL rule as string</span></span><br><span class="line"><span class="string">    :param endpoint: the endpoint for the registered URL rule.  Flask</span></span><br><span class="line"><span class="string">                     itself assumes the name of the view function as</span></span><br><span class="line"><span class="string">                     endpoint</span></span><br><span class="line"><span class="string">    :param options: the options to be forwarded to the underlying</span></span><br><span class="line"><span class="string">                    :class:`~werkzeug.routing.Rule` object.  A change</span></span><br><span class="line"><span class="string">                    to Werkzeug is handling of method options.  methods</span></span><br><span class="line"><span class="string">                    is a list of methods this rule should be limited</span></span><br><span class="line"><span class="string">                    to (``GET``, ``POST`` etc.).  By default a rule</span></span><br><span class="line"><span class="string">                    just listens for ``GET`` (and implicitly ``HEAD``).</span></span><br><span class="line"><span class="string">                    Starting with Flask 0.6, ``OPTIONS`` is implicitly</span></span><br><span class="line"><span class="string">                    added and handled by the standard request handling.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">f</span>):</span></span><br><span class="line">        endpoint = options.pop(<span class="string">"endpoint"</span>, <span class="literal">None</span>)</span><br><span class="line">        self.add_url_rule(rule, endpoint, f, **options)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></tbody></table></figure><p>去除注释部分后可以看出<code>route</code>就是一个很简单的闭包</p><p><code>self.add_url_rule(rule, endpoint, f, **options)</code>这里的<code>self</code>就是<code>app</code></p><p>所以也可以直接通过<code>app.add_url_rule('/',endpoint=xxx,view_func=xxx)</code>来添加路由</p><ul><li>第一个参数：函数对应的url规则，满足条件和<code>app.route()</code>的第一个参数一样，必须以<code>'/'</code>开始</li><li>endpoint：站点，就是在使用<code>url_for()</code>进行反转的时候，这个里面传入的第一个参数就是这个<code>endpoint</code>对应的值。这个值也可以不指定，那么默认就会使用函数的名字作为<code>endpoint</code>的值</li><li>view_func：对应的函数，即这个url对应的是哪一个函数，注意，这里函数只需要写函数名字，不要加括号，加括号表示将函数的返回值传给了<code>view_func</code>参数了。程序就会直接报错。</li><li>methods：<code>add_url_rule</code>还可以传入一个<code>methods</code>参数，用来指定这个函数对应的访问规制，如post,get请求等，默认是<code>get</code>请求，并且只允许<code>get</code>请求。当我们需要改变请求方式的时候，我们就可以传入这个参数了。</li></ul><h3 id="多个路由同一个处理"><a href="#多个路由同一个处理" class="headerlink" title="多个路由同一个处理"></a>多个路由同一个处理</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/hello'</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="使用其他装饰器"><a href="#使用其他装饰器" class="headerlink" title="使用其他装饰器"></a>使用其他装饰器</h3><blockquote><p>其他装饰器要放在@app.route()下面</p></blockquote><p>一个简单的打印时间的装饰器</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/hello'</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="meta">@log_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ol><li><code>@app.route(redirect_to'/')</code> 不会去执行视图函数</li><li>在视图函数中执行<code>redirect()</code></li></ol><h3 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h3><ol><li>通过<code>defaults</code></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/cases/&lt;id&gt;'</span>,defaults={<span class="string">'id'</span>:<span class="number">3</span>}</span>)</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>在视图参数中定义默认</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/cases/&lt;id&gt;'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>(<span class="params"><span class="built_in">id</span>=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="视图函数的分离"><a href="#视图函数的分离" class="headerlink" title="视图函数的分离"></a>视图函数的分离</h2><p>随着项目的增大，视图函数需要单独放在一起，不在一个文件里了。</p><p>所以项目就变成了：</p><ul><li>启动文件</li><li>视图函数</li><li>数据处理</li><li>view</li><li>其他的帮助函数</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfs03gmw02j307a05kjrk.jpg" alt="结构"></p><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="keyword">import</span> urls</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">'/'</span>, view_func=views.home)</span><br><span class="line">app.add_url_rule(<span class="string">'/cases'</span>, view_func=views.cases)</span><br></pre></td></tr></tbody></table></figure><h3 id="view-py"><a href="#view-py" class="headerlink" title="view.py"></a>view.py</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'home'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cases</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'cases'</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Flask:初步入门</title>
      <link href="article/e0adc35b.html"/>
      <url>article/e0adc35b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-初步入门-二"><a href="#Flask-初步入门-二" class="headerlink" title="Flask(初步入门 二)"></a>Flask(初步入门 二)</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install flask</span></span><br></pre></td></tr></tbody></table></figure><ul><li>werkzeug:处理application</li><li>jinja2:渲染html</li></ul><p>flask：组装大师</p><span id="more"></span><h2 id="初始化application"><a href="#初始化application" class="headerlink" title="初始化application"></a>初始化application</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></tbody></table></figure><h2 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello Flask!'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfqhsmzelij30fc060q39.jpg" alt="运行"></p><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><p>flask的请求与响应都存放在<code>request</code>对象中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></tbody></table></figure><p>访问<code>http://127.0.0.1:5000/?name=zhongxin</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfqhwbyp9fj318g06umya.jpg" alt="调试"></p><h2 id="Flask的-init"><a href="#Flask的-init" class="headerlink" title="Flask的__init__"></a>Flask的<code>__init__</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  self,</span></span></span><br><span class="line"><span class="function"><span class="params">  import_name, </span></span></span><br><span class="line"><span class="function"><span class="params">  static_url_path=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  static_folder=<span class="string">"static"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  static_host=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  host_matching=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  subdomain_matching=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  template_folder=<span class="string">"templates"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  instance_path=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  instance_relative_config=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  root_path=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>):</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>import_name</code>:</li><li><code>static_url_path</code>:查找静态文件的路径</li><li><code>static_folder</code>:静态文件 文件夹</li><li><code>static_host</code>:</li><li><code>host_matching</code>:服务器匹配</li><li><code>subdomain_matching</code>:子域名</li><li><code>template_folder</code>:模版文件 文件夹</li><li><code>instance_path</code>:app的路径</li><li><code>instance_relative_config</code>:相对设置</li><li><code>root_path</code>:根目录</li></ul><h2 id="渲染html"><a href="#渲染html" class="headerlink" title="渲染html"></a>渲染html</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/hello'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">  a = request.args</span><br><span class="line">  <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfqifcsk9cj30lw09c74y.jpg" alt="hello"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">你好</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="run方法"><a href="#run方法" class="headerlink" title="run方法"></a>run方法</h2><blockquote><p>不要在生产环境使用调试模式，会遭到攻击</p></blockquote><ul><li>debug</li><li>host</li><li>port</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, host=<span class="literal">None</span>, port=<span class="literal">None</span>, debug=<span class="literal">None</span>, load_dotenv=<span class="literal">True</span>, **options</span>):</span></span><br></pre></td></tr></tbody></table></figure><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><ol><li><p>当<code>debug=True</code>的时候修改代码会自动重启</p></li><li><p>在前端显示具体的错误信息</p></li></ol><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><ul><li>其他网络要能访问到使用<code>0.0.0.0</code></li><li>固定的网络地址使用指定地址，例如<code>192.168.1.23</code></li></ul><h2 id="if-name-quot-main-quot-的作用"><a href="#if-name-quot-main-quot-的作用" class="headerlink" title="if __name__ == &quot;__main__&quot;的作用"></a><code>if __name__ == "__main__"</code>的作用</h2><ol><li>该脚本运行时运行</li><li>flask生成环境中不会使用<code>run</code></li><li>用<code>uwsgi</code>+<code>nginx</code></li></ol><ul><li>其他情况下，如果通过模块导入，不是执行脚本，则main不会运行</li><li>生成环境使用<code>nginx</code>+<code>gunicorn/uwsgi</code>这样的组合</li></ul><h3 id="使用命令行方式运行"><a href="#使用命令行方式运行" class="headerlink" title="使用命令行方式运行"></a>使用命令行方式运行</h3><p>查看帮助</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flask --<span class="built_in">help</span></span></span><br><span class="line">Usage: flask [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">A general utility script for Flask applications.</span><br><span class="line"></span><br><span class="line">Provides commands from Flask, extensions, and the application. Loads the</span><br><span class="line">application defined in the FLASK_APP environment variable, or from a</span><br><span class="line">wsgi.py file. Setting the FLASK_ENV environment variable to 'development'</span><br><span class="line">will enable debug mode.</span><br><span class="line"></span><br><span class="line"><span class="meta">  $</span><span class="bash"> <span class="built_in">export</span> FLASK_APP=hello.py</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> <span class="built_in">export</span> FLASK_ENV=development</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> flask run</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">--version  Show the flask version</span><br><span class="line">--help     Show this message and exit.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">routes  Show the routes for the app.</span><br><span class="line">run     Run a development server.</span><br><span class="line">shell   Run a shell in the app context.</span><br></pre></td></tr></tbody></table></figure><p>使用下面命令可以运行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> FLASK_APP=hello.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> FLASK_ENV=development</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flask run</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab合并代码的几种情况</title>
      <link href="article/500537c1.html"/>
      <url>article/500537c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Gitlab合并代码的几种情况"><a href="#Gitlab合并代码的几种情况" class="headerlink" title="Gitlab合并代码的几种情况"></a>Gitlab合并代码的几种情况</h1><h2 id="开发者权限提交代码并请求合并"><a href="#开发者权限提交代码并请求合并" class="headerlink" title="开发者权限提交代码并请求合并"></a>开发者权限提交代码并请求合并</h2><p>如下图新建一个 <code>Issue</code>点击提交</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1hrh0qultj319a0u07ca.jpg" alt="Issue创建"></p><span id="more"></span><p>在问题界面点击 <code>Create merge request</code>创建一个合并请求</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1hs8vmhnkj319a0u0gvs.jpg" alt="Issue界面"></p><p>点击之后会跳转至 <code>合并请求</code>页面</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1hrk1faauj319a0u0n93.jpg" alt="合并请求页面"></p><p>正常的操作应该是把新建的分支 <code>7-_1</code>拉到本地然后修改后推送到远端</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1hrlrhovlj31830u0jv7.jpg" alt="本地合并方式"></p><p>为了方便起见，直接使用 <code>在Web IDE中打开</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1hrmfbscwj319a0u0n4x.jpg" alt="web Ide修改"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1hrmn5uzlj319a0u07cu.jpg" alt="提交请求">在修改了这个新建的分支之后回到 <code>合并请求</code>页面就可以看到其中的内容发生了改变</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1hs9lrs5yj31he0oedi7.jpg" alt="分支提交之后的页面"></p><p>之前是询问是否要创建一个新文件，现在直接就是问你这不是已经完成了这个半成品了，点击 <code>Resolve WIP status</code>提示信息就会变成<code>已可自动合并。 请具有仓库写入权限的用户来合并此请求</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1hrp1l8b2j31hs07wmxz.jpg" alt="开发者看到的页面"></p><p>下面登录管理员账户查看,可以看到<code>合并</code>按钮已经变成绿色了</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1hrralpmwj31hq0amta6.jpg" alt="管理员看的的页面"></p><h2 id="两个合并先后修改了文件不同位置"><a href="#两个合并先后修改了文件不同位置" class="headerlink" title="两个合并先后修改了文件不同位置"></a>两个合并先后修改了文件不同位置</h2><p>这个情况比较简单，正常的合并操作也不会出现冲突，所以不赘述了。</p><h2 id="两个合并先后修改了文件同一个位置"><a href="#两个合并先后修改了文件同一个位置" class="headerlink" title="两个合并先后修改了文件同一个位置"></a>两个合并先后修改了文件同一个位置</h2><p>我们创建两个问题单：<code>两个合并先后修改了文件同一个位置_1</code>  和<code>两个合并先后修改了文件同一个位置_2</code>并为他们分别拉取分支，创建合并请求</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1hry5d0k5j30u00q8jtt.jpg" alt="创建两个合并请求">首先在第一个里面修改里面的一个文件并完成提交</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1hryu4zm2j30gk0c2wfe.jpg" alt="修改1号请求"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1hrzblp4wj31iw0oen0s.jpg" alt="提交一号请求"></p><p>同理，在第二个页面也修改第五行</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1hs02xv7bj30us0b0wfn.jpg" alt="修改2号请求">然后管理员进行合并的同意</p><p>先同意提交1</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1hs14lvr6j31io0tigq6.jpg" alt="管理员同意一号请求"></p><p>然后查看提交2</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1hs1qd1o4j31ii0msn0k.jpg" alt="管理员查看2号请求"></p><p>我们就可以看到出现冲突了，可以本地合并</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1hs28l5k8j318c0s4jut.jpg" alt="本地合并方式"></p><p>也可以直接在页面进行<code>解决冲突</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1hs393n0fj319a0u07fz.jpg" alt="页面选择进行解决合并"></p><p>同意哪个改哪个，如果都不同意就自己改</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1hs44suk1j31uw0qejut.jpg" alt="自行解决"></p><p>去除多余的 〈〈〈符号就好了</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1hs4phuevj30us0bcabg.jpg" alt="合并方法"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1hs5akzukj31hc0a6q4j.jpg" alt="正常提交"></p><p>之后就可以正常合并了</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础知识（一）</title>
      <link href="article/8d21c5d5.html"/>
      <url>article/8d21c5d5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础知识（一）"><a href="#Git基础知识（一）" class="headerlink" title="Git基础知识（一）"></a>Git基础知识（一）</h1><h2 id="Git的特点"><a href="#Git的特点" class="headerlink" title="Git的特点"></a>Git的特点</h2><h3 id="直接记录快照，而非差异比较"><a href="#直接记录快照，而非差异比较" class="headerlink" title="直接记录快照，而非差异比较"></a>直接记录快照，而非差异比较</h3><blockquote><p>概念上来区分，其它大部分系统以文件变更列表的方式存储信息. 这类系统（CVS、Subversion、Perforce、Bazaar等）将它们保存的信息看作是一组基本文件和每个文件随时间<strong>逐步累积</strong>的差异。</p><p>Git 更像是把数据看作是对小型文件系统的一组快照。每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。Git 对待数据更像是一个快照流。</p></blockquote><span id="more"></span><h3 id="近乎所有操作都是本地执行"><a href="#近乎所有操作都是本地执行" class="headerlink" title="近乎所有操作都是本地执行"></a>近乎所有操作都是本地执行</h3><blockquote><p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。</p><p>使用其它系统，做到如此是不可能或很费力的。 比如，用 Perforce，你没有连接服务器时几乎不能做什么事；用 Subversion和CVS，你能修改 文件，但不能向数据库提交修改（因为你的本地数据库离线了）。</p></blockquote><h3 id="Git保证完整性"><a href="#Git保证完整性" class="headerlink" title="Git保证完整性"></a>Git保证完整性</h3><blockquote><p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。若你在传送过程中丢失信息或损坏 文件，Git 就能发现。</p><p>Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。</p></blockquote><p>这是一个由 40 个十六进制字符（0-9 和 a-f）组 成字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24b9da6552252987aa493b52f8696cd6d3b00373</span><br></pre></td></tr></tbody></table></figure><h3 id="Git一般只添加数据"><a href="#Git一般只添加数据" class="headerlink" title="Git一般只添加数据"></a>Git一般只添加数据</h3><blockquote><p>你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清 除数据。</p></blockquote><h3 id="Git的三种状态"><a href="#Git的三种状态" class="headerlink" title="Git的三种状态"></a>Git的三种状态</h3><ul><li><code>已提交(committed)</code>:数据已经安全的保存在本地数据库中</li><li><code>已修改(modified)</code>:修改了文件，但还没保存到数据库中</li><li><code>已暂存(staged)</code>:对已修改的文件的当前版本做了标记，使它包含在下次提交的快照中</li></ul><p>Git项目的三个工作区域：<code>Git仓库</code>,<code>工作目录</code>,<code>暂存区域</code></p><ul><li><strong>Git 仓库</strong>目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</li><li><strong>工作目录</strong>是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</li><li><strong>暂存区域</strong>是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作索引，不过一般说法还是叫暂存区域。</li></ul><h3 id="基本的Git工作流程"><a href="#基本的Git工作流程" class="headerlink" title="基本的Git工作流程"></a>基本的Git工作流程</h3><ol><li><p>在工作目录中修改文件。</p></li><li><p>暂存文件，将文件的快照放入暂存区域。</p></li><li><p>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</p></li></ol><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1lnxeozyij30zm0ki77x.jpg" alt="三个工作区域"></p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>使用<code>git config</code>工具来帮助控制Git外观和行为。</p><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><p>当安装完 Git 应该做的第一件事就是设置你的<code>用户名称</code>与<code>邮件地址</code>。每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，<strong>不可更改</strong>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 你的姓名</span><br><span class="line">git config --global user.email 你的邮箱</span><br></pre></td></tr></tbody></table></figure><p>例如：</p><blockquote><p>$ git config –global user.name “John Doe” </p><p>$ git config –global user.email <a href="mailto:johndoe@example.com">johndoe@example.com</a></p></blockquote><h3 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h3><p><code>git config --list</code>:列出所有Git当前能找到的配置</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lo2pq4jzj30uk0byabv.jpg" alt="列出所有Git配置"></p><p><code>git config &lt;key&gt;</code>:通过指定的方式查看某一项</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lo3xky34j30v802aaa9.jpg" alt="指定查看用户名"></p><h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><p>合理使用git自带的帮助文档，可以解决大部分的问题</p><p>例如<code>git help config</code></p><p>还有其他方式找到Git命令的使用手册。</p><blockquote><p>git help <verb></verb></p><p>git <verb> - -help</verb></p><p>man git-<berb></berb></p></blockquote><h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><p>有两种方式开始Git的学习：<code>在现有项目或目录下用Git进行管理</code>,<code>从服务器克隆一个现有的Git仓库</code></p><h3 id="在现有目录中初始化仓库"><a href="#在现有目录中初始化仓库" class="headerlink" title="在现有目录中初始化仓库"></a>在现有目录中初始化仓库</h3><p>使用<code>git init</code>就可以初始化一个空的Git仓库</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lo9mwt7qj312i09qabz.jpg" alt="初始化仓库"></p><p>其中**.git**文件夹中包含了初始化Git仓库中所有的必须文件，这些文件是Git仓库的骨干。</p><h2 id="克隆现有仓库"><a href="#克隆现有仓库" class="headerlink" title="克隆现有仓库"></a>克隆现有仓库</h2><p>以我在GitHub上的一个项目为例：<a href="https://github.com/zx490336534/spider-review%E3%80%82">https://github.com/zx490336534/spider-review。</a></p><p>输入url地址打开页面后点击<code>Clone or download</code>把弹出框中的地址复制出来：<a href="https://github.com/zx490336534/spider-review.git">https://github.com/zx490336534/spider-review.git</a></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lod6je57j319a0u016y.jpg" alt="克隆"></p><p>在本地找一个文件夹</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zx490336534/spider-review.git</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1loeso7cnj31ko0d2wi1.jpg" alt="克隆到本地"></p><p>这样克隆会自动在当前目录下新建一个项目同名的文件夹，也可以自定义一个名称</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zx490336534/spider-review.git 666</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1logpoz9rj31os0cygp9.jpg" alt="克隆文件至自定义的地方"></p><h3 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lok4se2nj30y80g2416.jpg" alt="文件的状态变化周期"></p><p>这一小节的目标的学会这一个文件的状态变化周期图</p><p>从最上方的箭头开始</p><p><code>Add the file</code>:从<strong>Untracked</strong>指向<strong>Staged</strong>，也就是从<strong>未跟踪</strong>到<strong>暂存区</strong>，需要学会<strong>git status</strong>和<strong>git add</strong>两个指令</p><p>首次新建的文件都是untracked状态（未跟踪），此时需要<code>git add</code>到暂存区，Git便会在暂存区中生成一个该文件的索引。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch README.md </span><br><span class="line">git add README.md </span><br><span class="line">git status</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1looqv7bdj30us0e0762.jpg" alt="img"></p><p><code>touch README.md</code>:创建一个名为README.md的文件，对应<strong>Untracked</strong>对象的创建</p><p><code>git add README.md</code>:把新建的README.md文件提交到暂存区，对应<code>Add the file</code></p><p><code>git status</code>:查看文件处于什么状态</p><p>从上面操作可以看出，如果我新建了一个文件，但是没有使用<strong>git add</strong>，那么它就还是<strong>Untracked</strong>，可以结合<strong>git status</strong>进行试验</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1loxf7dy3j30rq0iw0uu.jpg" alt="Untracked"></p><p>开始下面一个箭头<code>Edit the file</code>，但是我们需要一个<strong>Unmodified</strong>状态的文件，在学习了<strong>Add the file</strong>流程之后我们拿到了一个<strong>Staged</strong>状态的文件<em>README.md</em>，从图中可以看出，从<strong>Staged</strong>变为<strong>Unmodified</strong>需要经过<code>Commit</code>流程。</p><p>那我们暂时先学习<code>Commit</code>流程：</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lp2ht373j31b00fodj3.jpg" alt="提交"></p><p>使用的语句为<code>git commit -m '描述信息'</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m '从Staged状态变为Unmodified状态'</span><br></pre></td></tr></tbody></table></figure><p>再使用<strong>git status</strong>可以看到已经没有之前绿色的语句了(<em>新文件：   README.md</em>)</p><p>下面返回正题，学习<code>Edit the file</code>，使用编辑器修改一下README.md文件</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1lp63l241j31700d6dgz.jpg" alt="修改文件"></p><p>修改之后使用<strong>git status</strong>查看文件当前的状态</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lp75t9hqj30wa0howhb.jpg" alt="修改文件"></p><p>这样就完成了<code>Edit the file</code>流程了，通过阅读提示信息可以知道，我们要用<code>git add &lt;文件&gt;</code>更新要提交的内容。从<strong>Add the file</strong>流程可以看出，<strong>git add</strong>的作用就是把东西放入<strong>Staged</strong>(暂存区)，所以使用这句指令就完成了<code>Stage the file</code>流程了</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1lpall2hqj30uw0hc40s.jpg" alt="Stage the file流程"></p><p>最后最后还有一个<code>Remove the file</code>流程,我们使用上面学过的<code>Commit</code>流程把<em>README.md</em>文件的状态变成<strong>Unmodified</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m '修改README.md'</span><br></pre></td></tr></tbody></table></figure><p>使用<strong>git rm READE.md</strong>就能删除处于<strong>Unmodified</strong>的文件了，可以看到提示信息是绿色的，所以还需要一步<strong>commit</strong>操作</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lpfsbpinj30uq0de0um.jpg" alt="删除"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m '删除README.md'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1lpi8xx0tj310q0a2myz.jpg" alt="删除后查看状态"></p><p>我们可以用<strong>git log</strong>查看提交历史，从图中可以看出，我们全部<strong>commit</strong>操作都被记录了。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1lpll5pyzj311a0me42g.jpg" alt="提交历史"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Flask:从wsgi开始</title>
      <link href="article/d044d6a3.html"/>
      <url>article/d044d6a3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-从wsgi开始-一"><a href="#Flask-从wsgi开始-一" class="headerlink" title="Flask(从wsgi开始 一)"></a>Flask(从wsgi开始 一)</h1><blockquote><p>运行Flask=开启一个服务</p></blockquote><h2 id="web应用处理请求的具体流程"><a href="#web应用处理请求的具体流程" class="headerlink" title="web应用处理请求的具体流程"></a>web应用处理请求的具体流程</h2><ol><li>用户操作操作浏览器发送请求；</li><li>请求转发至对应的web服务器</li><li>web服务器将请求转交给web应用程序，web应用程序处理请求</li><li>web应用将请求结果返回给web服务器，由web服务器返回用户响应结果</li><li>浏览器收到响应，向用户展示<span id="more"></span><h2 id="一个wsgi服务"><a href="#一个wsgi服务" class="headerlink" title="一个wsgi服务"></a>一个<code>wsgi</code>服务</h2></li></ol><blockquote><p>全称Python Web Server Gateway Interface，指定了web服务器和Python web应用或web框架之间的标准接口，以提高web应用在一系列web服务器间的移植性。 具体可查看 <a href="https://link.zhihu.com/?target=https://www.python.org/dev/peps/pep-0333/">官方文档</a>:<a href="https://www.python.org/dev/peps/pep-0333/">https://www.python.org/dev/peps/pep-0333/</a></p></blockquote><ol><li>WSGI是一套接口标准协议/规范；</li><li>通信（作用）区间是Web服务器和Python Web应用程序之间；</li><li>目的是制定标准，以保证不同Web服务器可以和不同的Python程序之间相互通信</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span>(<span class="params">env, start_response</span>):</span></span><br><span class="line">    <span class="comment"># env 获取请求相关数据</span></span><br><span class="line">    <span class="comment"># start_response</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>,[(<span class="string">'content-type'</span>,<span class="string">'text/plain'</span>),])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b"hello"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = make_server(<span class="string">""</span>, <span class="number">6001</span>, app)</span><br><span class="line">server.serve_forever()  <span class="comment"># poll_interval轮询时间</span></span><br></pre></td></tr></tbody></table></figure><ol><li>env：字典，包含请求的所有信息</li><li>start_response：在可调用对象中调用的函数，用来发起响应，参数包括状态码，headers等</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfqf64earnj30n809sjs8.jpg" alt="访问"></p><h2 id="拓展1（面向过程）"><a href="#拓展1（面向过程）" class="headerlink" title="拓展1（面向过程）"></a>拓展1（面向过程）</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span>(<span class="params">env, start_response</span>):</span></span><br><span class="line">    <span class="comment"># env 获取请求相关数据</span></span><br><span class="line">    <span class="comment"># start_response</span></span><br><span class="line">    url = env[<span class="string">'PATH_INFO'</span>]</span><br><span class="line">    <span class="keyword">if</span> url == <span class="string">'/hi'</span>:</span><br><span class="line">        start_response(<span class="string">'200 OK'</span>, [(<span class="string">'content-type'</span>, <span class="string">'text/plain'</span>), ])</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">b"hello"</span>]</span><br><span class="line">    <span class="keyword">elif</span> url == <span class="string">'/'</span>:</span><br><span class="line">        start_response(<span class="string">'200 OK'</span>, [(<span class="string">'content-type'</span>, <span class="string">'text/plain'</span>), ])</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">b"welcom"</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        start_response(<span class="string">'404 not fount'</span>, [(<span class="string">'content-type'</span>, <span class="string">'text/plain'</span>), ])</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">b"not fount"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = make_server(<span class="string">""</span>, <span class="number">6001</span>, app)</span><br><span class="line">server.serve_forever()  <span class="comment"># poll_interval轮询时间</span></span><br></pre></td></tr></tbody></table></figure><p>这样可以访问</p><ul><li><code>/hi</code></li><li><code>/</code></li><li>其他路由返回not found</li></ul><h2 id="拓展2（字典路由）"><a href="#拓展2（字典路由）" class="headerlink" title="拓展2（字典路由）"></a>拓展2（字典路由）</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File    : day0_1.py</span></span><br><span class="line"><span class="string">@Time    : 2020/6/13 9:40 上午</span></span><br><span class="line"><span class="string">@Author  : zhongxin</span></span><br><span class="line"><span class="string">@Email   : 490336534@qq.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'welcome'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = {</span><br><span class="line">    <span class="string">"/"</span>: home,</span><br><span class="line">    <span class="string">'hi'</span>: hi</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span>(<span class="params">env, start_response</span>):</span></span><br><span class="line">    url = env.get(<span class="string">"PATH_INFO"</span>)</span><br><span class="line">    resp = router.get(url)</span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        start_response(<span class="string">'404 not fount'</span>, [(<span class="string">'content-type'</span>, <span class="string">'text/plain'</span>), ])</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">b"not fount"</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        start_response(<span class="string">'200 OK'</span>, [(<span class="string">'content-type'</span>, <span class="string">'text/plain'</span>), ])</span><br><span class="line">    <span class="keyword">return</span> [resp().encode()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = make_server(<span class="string">""</span>, <span class="number">6001</span>, app)</span><br><span class="line">server.serve_forever()  <span class="comment"># poll_interval轮询时间</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用装饰器拓展"><a href="#使用装饰器拓展" class="headerlink" title="使用装饰器拓展"></a>使用装饰器拓展</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File    : day0_1.py</span></span><br><span class="line"><span class="string">@Time    : 2020/6/13 9:40 上午</span></span><br><span class="line"><span class="string">@Author  : zhongxin</span></span><br><span class="line"><span class="string">@Email   : 490336534@qq.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.url = {}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">            self.url[path] = func</span><br><span class="line">            func()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, env, start_response</span>):</span></span><br><span class="line">        path = env[<span class="string">"PATH_INFO"</span>]</span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">in</span> self.url:</span><br><span class="line">            status = <span class="string">'200 OK'</span></span><br><span class="line">            response_header = [(<span class="string">'content-type'</span>, <span class="string">'text/html'</span>)]</span><br><span class="line">            start_response(status, response_header)</span><br><span class="line">            <span class="keyword">return</span> self.url[path]()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            status = <span class="string">'404 Not Found'</span></span><br><span class="line">            response_header = [(<span class="string">'content-type'</span>, <span class="string">'text/html'</span>)]</span><br><span class="line">            start_response(status, response_header)</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">b"404 not found"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Route()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">b'welcome'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/hi'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">b'hello'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = make_server(<span class="string">""</span>, <span class="number">6001</span>, app)</span><br><span class="line">server.serve_forever()  <span class="comment"># poll_interval轮询时间</span></span><br></pre></td></tr></tbody></table></figure><p>一本<code>函数式编程</code>的书：《The Little Schemer》</p>]]></content>
      
      
      <categories>
          
          <category> Flask基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac安装tomcat</title>
      <link href="article/fea5375c.html"/>
      <url>article/fea5375c.html</url>
      
        <content type="html"><![CDATA[<h1 id="mac安装tomcat"><a href="#mac安装tomcat" class="headerlink" title="mac安装tomcat"></a>mac安装tomcat</h1><h2 id="下载tomcat"><a href="#下载tomcat" class="headerlink" title="下载tomcat"></a>下载tomcat</h2><p>前往官网下载：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfpwjp75i0j313c0sc431.jpg" alt="下载"></p><h2 id="解压tomcat"><a href="#解压tomcat" class="headerlink" title="解压tomcat"></a>解压tomcat</h2><p>将<code>apache-tomcat-9.0.36.tar.gz</code>解压并重命名为<code>Tomcat</code></p><h2 id="移动Tomcat"><a href="#移动Tomcat" class="headerlink" title="移动Tomcat"></a>移动Tomcat</h2><p>打开<code>访达</code>使用快捷键<code>Command+Shift+G</code>进入<code>/Library/</code>,将刚才解压并重命名的<code>Tomcat</code>放进去</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfpwop1khhj30cm0lmtnd.jpg" alt="快捷键"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfpwn6p8lxj30u00wu1kx.jpg" alt="Library"></p><span id="more"></span><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><p>进入终端输入</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /Library/Tomcat/bin/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 755 *.sh</span></span><br></pre></td></tr></tbody></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh ./startup.sh</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfpwrkmlyij316y0u0gwc.jpg" alt="测试"></p><p>在浏览器中输入<code>http://localhost:8080/</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfpwtbajd4j31b30u0b29.jpg" alt="访问页面"></p><h2 id="结束测试"><a href="#结束测试" class="headerlink" title="结束测试"></a>结束测试</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh ./shutdown.sh</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(封装和继承 预习5)</title>
      <link href="article/7196696d.html"/>
      <url>article/7196696d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-封装和继承-预习5"><a href="#Java自动化测试-封装和继承-预习5" class="headerlink" title="Java自动化测试(封装和继承 预习5)"></a>Java自动化测试(封装和继承 预习5)</h1><h2 id="方法-函数重载"><a href="#方法-函数重载" class="headerlink" title="方法/函数重载"></a>方法/函数重载</h2><p>规则：方法名一致，参数不一致，与返回值无关</p><ol><li>参数的个数不一样</li><li>参数的类型不一样</li><li>参数的顺序不一样<span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>{</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b)</span> </span>{</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>{</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.add(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">        s.add(<span class="number">4</span>);</span><br><span class="line">        s.add(<span class="number">4</span>,<span class="number">3.0</span>);</span><br><span class="line">        s.add(<span class="number">4.0</span>, <span class="number">3.0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="java内存"><a href="#java内存" class="headerlink" title="java内存"></a>java内存</h2><p>java内存包含了：</p><ul><li>堆</li><li>栈</li><li>方法区</li><li>寄存器</li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li>先进后出</li><li>局部变量，方法都在栈中</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul><li>new出来的对象在堆</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>通过函数的形式将一些代码细节包装起来，防止外部代码的随机访问。</p><p>要访问这些数据就必须通过调用函数来完成。</p><p>好处：</p><ul><li>提高了代码的可读性</li><li>提高了代码的可维护性</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">1</span> || size &gt; <span class="number">10</span>) {</span><br><span class="line">            System.out.println(<span class="string">"size设置失败"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line">        p.setSize(-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> size = p.getSize();</span><br><span class="line">        System.out.println(size);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>两个类之间通过<code>extends</code>关键字来描述父子关系，子类可以拥有父类的公共方法和公共属性。</p><ul><li>提高了代码的复用性</li><li>代码的维护性更高</li></ul><p>语法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 父类</span>{</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>{</span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>父类<code>Phone</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.extend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">public</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"show..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>子类<code>Phone4S</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.extend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone4S</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">siri</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"你好"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.extend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line">        Phone4S p4 = <span class="keyword">new</span> Phone4S();</span><br><span class="line">        p.call();</span><br><span class="line">        p4.call();</span><br><span class="line">        p4.siri();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>如果类不继承任何类，默认继承<code>Object</code></li><li>Java是单继承（一个类只能继承于一个类），多层继承</li><li>创建本类对象之前会先初始化父类对象</li><li>子类不能继承父类的private成员（属性，方法）</li></ol><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p><code>super</code>指向父类</p><p><code>super()</code>调用父类构造方法</p><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p><code>this</code>指向当前类（子类）</p><p><code>this()</code>调用本类其他构造</p><h2 id="方法重写-覆盖"><a href="#方法重写-覆盖" class="headerlink" title="方法重写/覆盖"></a>方法重写/覆盖</h2><p>前提条件：</p><ul><li>继承或者实现</li></ul><p>子父类中出现一摸一样的方法</p><p>作用：</p><ul><li>方法升级</li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ol><li>public</li></ol><p>公共的</p><ol start="2"><li>protected</li></ol><p>受保护的，必须继承后才能访问</p><ol start="3"><li>默认修饰符</li></ol><p>本类或者同一个包<code>pakage</code>下可以访问</p><ol start="4"><li>private</li></ol><p>私有的，只有本类可以访问</p><p>上面1～4 权限依次降低</p><h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><ul><li>static</li></ul><p>静态</p><ul><li>final</li></ul><p>常量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> b = <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfpul9rzm1j30ua0e2gno.jpg" alt="final"></p><ul><li>abstract</li></ul><p>抽象</p>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(面向对象和方法 预习4)</title>
      <link href="article/9cf0e0ca.html"/>
      <url>article/9cf0e0ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-面向对象和方法-预习4"><a href="#Java自动化测试-面向对象和方法-预习4" class="headerlink" title="Java自动化测试(面向对象和方法 预习4)"></a>Java自动化测试(面向对象和方法 预习4)</h1><h2 id="面向对象概念"><a href="#面向对象概念" class="headerlink" title="面向对象概念"></a>面向对象概念</h2><p>面向对象：把事情交给对象完成</p><p>面向过程：自己完成所有事情</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>模版：描述具有共性的一类事物</p><ul><li>属性用<code>变量</code>来描述</li><li>动态的行为用<code>函数</code>描述</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>类的具体化</p><h2 id="函数-方法"><a href="#函数-方法" class="headerlink" title="函数/方法"></a>函数/方法</h2><span id="more"></span><p>函数就是功能实现，它遵循了特定语法，一段具有特定功能代码。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>下面创建一个<code>Student</code>类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student</span></span><br><span class="line"><span class="keyword">package</span> com.zhongxin.oject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="comment">// javaBean POJO 没有main方法</span></span><br><span class="line">    <span class="comment">// 成员变量/成员属性 类中方法外</span></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    String name = <span class="string">"张三"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 方法体 具体完成的功能</span></span><br><span class="line">        System.out.println(<span class="string">"学生吃"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"学生睡觉"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObjectDemo</span></span><br><span class="line"><span class="keyword">package</span> com.zhongxin.oject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 创建Student类的对象</span></span><br><span class="line">        <span class="comment">// 类名 对象名 = new 类名()；</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line">        System.out.println(s1.name);</span><br><span class="line">        s1.eat();</span><br><span class="line">        s1.sleep();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="成员变量-成员属性"><a href="#成员变量-成员属性" class="headerlink" title="成员变量/成员属性"></a>成员变量/成员属性</h3><h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><blockquote><p>POJO:Plain Ordinary Java Object 简单普通的java对象</p><p>没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。</p></blockquote><h4 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h4><blockquote><p>JavaBean 是一种JAVA语言写成的<code>可重用组件</code>。</p><p>JavaBean符合一定规范编写的Java类，不是一种技术，而是一种规范。</p><p>大家针对这种规范，总结了很多开发技巧、工具函数。</p><p>符合这种规范的类，可以被其它的程序员或者框架使用。</p><p>它的方法命名，构造及行为必须符合特定的约定：所有属性为<code>private</code>。</p></blockquote><p>在类中，方法外的变量</p><p>成员变量是属于对象的，跟着对象走</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">String name = <span class="string">"张三"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="POJO和JavaBean的区别"><a href="#POJO和JavaBean的区别" class="headerlink" title="POJO和JavaBean的区别"></a>POJO和JavaBean的区别</h4><p>POJO严格地遵守简单对象的概念，而一些JavaBean中往往会封装一些简单逻辑。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>方法体：具体完成的功能</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"学生吃"</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>对于一个加法来说，需要给两个参数，并将需要返回一个值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.oject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = s1.add(a, b);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li>无参构造</li><li>有参构造，参数一般和属性一致</li></ul><blockquote><p>如果在类中定义了任意构造方法，那么java不再提供默认空参构造方法</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.oject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    String brand;</span><br><span class="line">    String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(<span class="keyword">int</span> s, String b, String c)</span> </span>{</span><br><span class="line">        size = s;</span><br><span class="line">        brand = b;</span><br><span class="line">        color = c;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.oject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Phone a = <span class="keyword">new</span> Phone();</span><br><span class="line">        System.out.println(a.size);</span><br><span class="line">        System.out.println(a.brand);</span><br><span class="line">        System.out.println(a.color);</span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone(<span class="number">10</span>, <span class="string">"apple"</span>, <span class="string">"红"</span>);</span><br><span class="line">        System.out.println(p.size);</span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.color);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>输出内容</p><blockquote><p>0<br>null<br>null<br>10<br>apple<br>红</p></blockquote><p>将构造方法的入参和成员变量同名</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(<span class="keyword">int</span> size, String brand, String color)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3><h4 id="局部变量的特点"><a href="#局部变量的特点" class="headerlink" title="局部变量的特点"></a>局部变量的特点</h4><ul><li>定义在<code>函数体</code>内</li><li>定义在函数参数列表里</li><li>代码块<code>{}</code>中</li></ul><h4 id="全局变量的特点"><a href="#全局变量的特点" class="headerlink" title="全局变量的特点"></a>全局变量的特点</h4><ul><li>定义在<code>类体</code>内</li><li>在函数外</li><li>在代码块外</li></ul><h4 id="生命周期（作用域）"><a href="#生命周期（作用域）" class="headerlink" title="生命周期（作用域）"></a>生命周期（作用域）</h4><ul><li>局部变量：出了包含他的<code>{}</code>就死亡</li><li>全局变量：对象不消亡就一直存在</li></ul><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(循环/条件控制语句 预习3)</title>
      <link href="article/6ff13756.html"/>
      <url>article/6ff13756.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-循环-条件控制语句-预习3"><a href="#Java自动化测试-循环-条件控制语句-预习3" class="headerlink" title="Java自动化测试(循环/条件控制语句 预习3)"></a>Java自动化测试(循环/条件控制语句 预习3)</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化值<span class="number">1</span>;循环终止条件<span class="number">2</span>;循环体执行后的语句<span class="number">4</span>){</span><br><span class="line">    循环体<span class="number">3</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) {</span><br><span class="line">    System.out.println(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><code>初始化值1</code>-&gt;<code>循环终止条件2</code>「true」-&gt;<code>循环体3</code>-&gt;<code>循环体执行后的语句4</code> -&gt;<code>循环终止条件2</code>「true」-&gt;<code>循环体3</code>-&gt;<code>循环体执行后的语句4</code>-&gt;…<code>循环终止条件2</code>「false」-&gt; <code>循环结束</code></p><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><blockquote><p>for(内部元素类型 变量名;集合){}</p></blockquote><h4 id="普通方式实现"><a href="#普通方式实现" class="headerlink" title="普通方式实现"></a>普通方式实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = {<span class="number">100</span>, <span class="number">24</span>, <span class="number">90</span>, <span class="number">78</span>};</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">  System.out.println(arr[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="增强方式实现"><a href="#增强方式实现" class="headerlink" title="增强方式实现"></a>增强方式实现</h4><ul><li>优点：代码少</li><li>缺点：不能直接获取索引</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr) {</span><br><span class="line">    System.out.println(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) {</span><br><span class="line">            sum += i;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;                  <span class="comment">// 初始化语句1</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">10</span>) {           <span class="comment">// 循环执行条件2</span></span><br><span class="line">            System.out.println(i);  <span class="comment">// 循环体3</span></span><br><span class="line">            i++;                    <span class="comment">// 循环体执行完毕之后的语句4</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>流程：<code>1234-&gt;2(true)-&gt;34-&gt;2(true)-&gt;......-&gt;2(false)-&gt;循环结束</code></p><h2 id="Do…While"><a href="#Do…While" class="headerlink" title="Do…While"></a>Do…While</h2><p>至少会执行一次循环体，其他和<code>while</code>一样</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i++;</span><br><span class="line">        } <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><blockquote><p>跳出整个循环</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) {</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) {</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    System.out.println(i);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></tbody></table></figure><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><blockquote><p>结束本次循环,继续下次循环</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakContinueDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></tbody></table></figure><h2 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h2><ul><li>switch</li><li>if … else</li><li>if else if … else</li><li>if … if … if </li></ul><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.ifdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IFDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) {</span><br><span class="line">            System.out.println(<span class="string">"恭喜你成年了"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) {</span><br><span class="line">            System.out.println(<span class="string">"可以访问本网站"</span>);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            System.out.println(<span class="string">"FBI WARNING!"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">if</span> (score == <span class="number">100</span>) {</span><br><span class="line">            System.out.println(<span class="string">"满分"</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (score&gt;=<span class="number">90</span>){</span><br><span class="line">            System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (score&gt;=<span class="number">60</span>){</span><br><span class="line">            System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>效率比if快</p><h4 id="结束的条件"><a href="#结束的条件" class="headerlink" title="结束的条件"></a>结束的条件</h4><ul><li>switch</li><li>右大括号</li></ul><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><ul><li>&lt;= int</li><li>String</li><li>枚举</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.ifdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (i) {</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"2"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"未知"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不使用break 形成<code>穿透</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.ifdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> mouth = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">switch</span> (mouth) {</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">"春"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                System.out.println(<span class="string">"夏"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                System.out.println(<span class="string">"秋"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"冬"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"未知"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><blockquote><p>打印</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.ifdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String start = <span class="string">"*"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) {</span><br><span class="line">                System.out.print(start);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>打印</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    *  </span><br><span class="line">   * * </span><br><span class="line">  * * *</span><br><span class="line"> * * * *</span><br><span class="line">* * * * *</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.ifdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span> - i; j++) {</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= i * <span class="number">2</span> - <span class="number">1</span>; x += <span class="number">2</span>) {</span><br><span class="line">                System.out.print(<span class="string">"* "</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(数组/运算符 预习2)</title>
      <link href="article/92816bb3.html"/>
      <url>article/92816bb3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-数组-运算符-预习2"><a href="#Java自动化测试-数组-运算符-预习2" class="headerlink" title="Java自动化测试(数组/运算符 预习2)"></a>Java自动化测试(数组/运算符 预习2)</h1><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>引用类型的变量它就是指的一个内存地址，一个位置信息</p><h3 id="引用类型分类"><a href="#引用类型分类" class="headerlink" title="引用类型分类"></a>引用类型分类</h3><ul><li>类</li><li>数组</li><li>接口</li><li>枚举<span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.variable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefVariable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="string">"中文"</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        s1 = s1 + <span class="string">"英文"</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组是一种数据结构，它是一个容器，用来盛放数据。不同类型的数组可用盛放不同类型的数据。</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>容量确定，定义的时候必须指定数组的<code>大小</code>。</li><li>类型确定，定义的时候必须声明数组的<code>类型</code>。</li></ol><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li>一维数组</li><li>多维数组</li></ol><h3 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h3><blockquote><p>创建一个数组，但是没有初始化数组的元素。这种情况需要显式的指定数组大小。</p></blockquote><p><code>数据类型[ ] 数组名 = new 数据类型[size];</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] myArr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建一个数组，并已知数组的内部元素</p></blockquote><p><code>类型[] 数组名 = {...};</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] myArr = {<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>};</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.variable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 定义语法1</span></span><br><span class="line"><span class="comment">         * 数据类型[ ] 数组名 = new 数据类型[size];</span></span><br><span class="line"><span class="comment">         * 定义语法2</span></span><br><span class="line"><span class="comment">         * 数据类型[ ] 数组名 = {数据1,数据2,数据3};</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="keyword">int</span>[] myArr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(myArr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] myArr1 = {<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>};</span><br><span class="line">        System.out.println(myArr1[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 数组长度</span></span><br><span class="line">        <span class="comment">// 最大索引 = 数组长度 - 1</span></span><br><span class="line">        System.out.println(myArr.length);</span><br><span class="line">        System.out.println(myArr1.length);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] a = {<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>};</span><br><span class="line"><span class="keyword">int</span>[] b = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line"><span class="keyword">long</span>[] c = {<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>};</span><br><span class="line"><span class="keyword">float</span>[] d = {<span class="number">1.1f</span>, <span class="number">1.2f</span>, <span class="number">1.3f</span>};</span><br><span class="line"><span class="keyword">double</span>[] e = {<span class="number">2.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>};</span><br><span class="line"><span class="keyword">boolean</span>[] f = {<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>};</span><br><span class="line">String[] h = {<span class="string">"Hello"</span>, <span class="string">"World"</span>};</span><br></pre></td></tr></tbody></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="二维数组定义语法1"><a href="#二维数组定义语法1" class="headerlink" title="二维数组定义语法1"></a>二维数组定义语法1</h3><p><code>数据类型[][] 数组名 = {{...}, {...}, {...}};</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = {{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}, {<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>}, {<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>}};</span><br></pre></td></tr></tbody></table></figure><h3 id="二维数组定义语法2"><a href="#二维数组定义语法2" class="headerlink" title="二维数组定义语法2"></a>二维数组定义语法2</h3><p><code>数据类型[][] 数组名 = 数据类型 [二维数组长度][二维数组中一维数组的长度];</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];<span class="comment">//{{0,0},{0,0}}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="越界"><a href="#越界" class="headerlink" title="越界"></a>越界</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(arr2[<span class="number">0</span>][<span class="number">100</span>]);</span><br></pre></td></tr></tbody></table></figure><blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ArrayIndexOutOfBoundsException: <span class="number">100</span></span><br><span class="line">at com.zhongxin.variable.ArrayDemo2.main(ArrayDemo2.java:<span class="number">18</span>)</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.variable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 二维数组定义语法1</span></span><br><span class="line"><span class="comment">         * 数据类型[][] 数组名 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};</span></span><br><span class="line"><span class="comment">         * 二维数组定义语法2</span></span><br><span class="line"><span class="comment">         * 数据类型[][] 数组名 = 数据类型 [二维数组长度][二维数组中一维数组的长度];</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr = {{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}, {<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>}, {<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>}};</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = arr[<span class="number">0</span>];</span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];<span class="comment">//{{0,0},{0,0}}</span></span><br><span class="line">        System.out.println(arr2[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            System.out.println(arr2[0][100]);</span></span><br><span class="line"><span class="comment">            越界</span></span><br><span class="line"><span class="comment">            Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 100</span></span><br><span class="line"><span class="comment">            at com.zhongxin.variable.ArrayDemo2.main(ArrayDemo2.java:18)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote><p>整数类型和整数类型运算只能得到整数类型</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">10</span> / <span class="number">3</span>);<span class="comment">//3</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">3</span>);<span class="comment">//3.3333333333333335</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>% 取模 取余<br>前面的数比后面的数小 那么就返回前面的值</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">10</span> % <span class="number">5</span>); <span class="comment">// 0</span></span><br><span class="line">System.out.println(<span class="number">5</span> % <span class="number">10</span>); <span class="comment">// 5 前面的数比后面的数小 那么就返回前面的值</span></span><br></pre></td></tr></tbody></table></figure><h4 id="自增-自减"><a href="#自增-自减" class="headerlink" title="自增 自减"></a>自增 自减</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">i++;</span><br><span class="line">System.out.println(i);<span class="comment">//2</span></span><br><span class="line">i--;</span><br><span class="line">System.out.println(i);<span class="comment">//1</span></span><br></pre></td></tr></tbody></table></figure><ul><li>参与运算 ++在<code>后面</code> 先把变量的值取出来赋值（赋值运算）再自增</li><li>参与运算 ++在<code>前面</code> 先把变量的值自增1，再把值取出来赋值</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = i++;</span><br><span class="line"><span class="keyword">int</span> y = ++i;</span><br><span class="line">System.out.println(x); <span class="comment">// 1</span></span><br><span class="line">System.out.println(i); <span class="comment">// 2</span></span><br><span class="line">System.out.println(y); <span class="comment">// 3</span></span><br><span class="line">System.out.println(i); <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//算术运算符</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> c = a + b;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        <span class="comment">// 整数类型和整数类型运算只能得到整数类型</span></span><br><span class="line">        System.out.println(<span class="number">10</span> / <span class="number">3</span>);<span class="comment">//3</span></span><br><span class="line">        System.out.println(<span class="number">10.0</span> / <span class="number">3</span>);<span class="comment">//3.3333333333333335</span></span><br><span class="line">        <span class="comment">// % 取模 取余</span></span><br><span class="line">        System.out.println(<span class="number">10</span> % <span class="number">5</span>); <span class="comment">// 0</span></span><br><span class="line">        System.out.println(<span class="number">5</span> % <span class="number">10</span>); <span class="comment">// 5 前面的数比后面的数小 那么就返回前面的值</span></span><br><span class="line">        <span class="comment">// ++ 自增</span></span><br><span class="line">        <span class="comment">// -- 自减</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);<span class="comment">//2</span></span><br><span class="line">        i--;</span><br><span class="line">        System.out.println(i);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//参与运算 ++在后面 先把变量的值取出来赋值（赋值运算）再自增</span></span><br><span class="line">        <span class="keyword">int</span> x = i++;</span><br><span class="line">        <span class="comment">//参与运算 ++在前面 先把变量的值自增1，再把值取出来赋值</span></span><br><span class="line">        <span class="keyword">int</span> y = ++i;</span><br><span class="line">        System.out.println(x); <span class="comment">// 1</span></span><br><span class="line">        System.out.println(i); <span class="comment">// 2</span></span><br><span class="line">        System.out.println(y); <span class="comment">// 3</span></span><br><span class="line">        System.out.println(i); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符返回boolean类型</p><ul><li><code>&gt;</code></li><li><code>&lt;</code></li><li><code>&gt;=</code></li><li><code>&lt;=</code></li><li><code>==</code></li><li><code>!=</code></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        System.out.println(a &gt; b);</span><br><span class="line">        System.out.println(a &lt; b);</span><br><span class="line">        System.out.println(a &gt;= b);</span><br><span class="line">        System.out.println(a &lt;= b);</span><br><span class="line">        System.out.println(a == b);</span><br><span class="line">        System.out.println(a != b);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><code>&amp;</code>与</li><li><code>|</code>或</li><li><code>!</code>非</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo3</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">'&amp;'</span>);</span><br><span class="line">        System.out.println(<span class="keyword">true</span> &amp; <span class="keyword">false</span>); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="keyword">false</span> &amp; <span class="keyword">true</span>); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="keyword">true</span> &amp; <span class="keyword">true</span>); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="keyword">false</span> &amp; <span class="keyword">false</span>); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">'|'</span>);</span><br><span class="line">        System.out.println(<span class="keyword">true</span> | <span class="keyword">false</span>); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="keyword">false</span> | <span class="keyword">true</span>); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="keyword">true</span> | <span class="keyword">true</span>); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="keyword">false</span> | <span class="keyword">false</span>); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">'!'</span>);</span><br><span class="line">        System.out.println(!<span class="keyword">false</span>); <span class="comment">//true</span></span><br><span class="line">        System.out.println(!<span class="keyword">true</span>); <span class="comment">//false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>&amp;&amp; || 和&amp; ｜最终结果是一样的 可以提高性能</p><p>造成短路，当逻辑运算符左边已经决定整个结果时,右边不执行</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">8</span>;</span><br><span class="line">System.out.println((a &lt; b) &amp; (a++ &gt; c));</span><br><span class="line">System.out.println(a); <span class="comment">// 11</span></span><br><span class="line">a = a - <span class="number">1</span>;</span><br><span class="line">System.out.println((a &lt; b) &amp;&amp; (a++ &gt; c));</span><br><span class="line">System.out.println(a); <span class="comment">//10</span></span><br></pre></td></tr></tbody></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符<code>=</code></p><p>扩展赋值运算符</p><ul><li><code>-=</code></li><li><code>+=</code></li><li><code>*=</code></li><li><code>/=</code></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo4</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 把10赋值给a变量</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        a += <span class="number">10</span>;<span class="comment">// a = a + 10 左边和右边进行运算之后赋值给左边</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><blockquote><p>大的变小的</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> x = (<span class="keyword">int</span>) d;</span><br><span class="line">System.out.println(x);</span><br></pre></td></tr></tbody></table></figure><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><blockquote><p>大的数据类型和小的数据类型运算时</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo4</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 把10赋值给a变量</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        a += <span class="number">10</span>;<span class="comment">// a = (int)(a + 10) 左边和右边进行运算之后赋值给左边</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制类型转换 大的变小的</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) d;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        <span class="comment">// 隐式类型转换 大的数据类型和小的数据类型运算时</span></span><br><span class="line">        System.out.println(<span class="number">10.0</span> / <span class="number">3</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><blockquote><p>又称三元运算符</p></blockquote><p><code>a ? b : c;</code></p><p>当<code>a</code>为真返回<code>b</code>否则返回<code>c</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo5</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> max = (a &gt; b) ? a : b;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自动化测试(基础知识/基本数据类型 预习1)</title>
      <link href="article/e68581b2.html"/>
      <url>article/e68581b2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java自动化测试-基础知识-基本数据类型-预习1"><a href="#Java自动化测试-基础知识-基本数据类型-预习1" class="headerlink" title="Java自动化测试(基础知识/基本数据类型 预习1)"></a>Java自动化测试(基础知识/基本数据类型 预习1)</h1><h2 id="java环境基础知识"><a href="#java环境基础知识" class="headerlink" title="java环境基础知识"></a>java环境基础知识</h2><p><code>JDK</code>：java development kit 开发工具</p><p><code>JRE</code>：Java 运行环境</p><p><code>JVM</code>：Java虚拟机（跨平台）</p><hr><span id="more"></span><p>java程序分为<code>编译</code> 和<code>运行</code></p><p>编译生成<code>.class</code>文件，jvm识别<code>.class</code>运行</p><p>编译命令：<code>javac HelloWorld.java</code></p><p>运行命令：<code>java HelloWorld</code></p><h2 id="首个java程序"><a href="#首个java程序" class="headerlink" title="首个java程序"></a>首个java程序</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello Java!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfl99pygjej316y0u0qah.jpg" alt="首个java"></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> javac HelloWorld.java</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java HelloWorld</span></span><br></pre></td></tr></tbody></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br></pre></td></tr></tbody></table></figure><h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注释多行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用IDEA创建一个项目"><a href="#使用IDEA创建一个项目" class="headerlink" title="使用IDEA创建一个项目"></a>使用IDEA创建一个项目</h2><h3 id="进入欢迎界面点击Create-New-Project"><a href="#进入欢迎界面点击Create-New-Project" class="headerlink" title="进入欢迎界面点击Create New Project"></a>进入欢迎界面点击<code>Create New Project</code></h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gflnpyb6jpj318w0u0gu5.jpg" alt="初始界面"></p><h3 id="选择使用的JDK"><a href="#选择使用的JDK" class="headerlink" title="选择使用的JDK"></a>选择使用的JDK</h3><p>先下载并安装JDK：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gflnqvtbscj31980u0dvb.jpg" alt="选中jdk"></p><h3 id="选择创建的项目模版"><a href="#选择创建的项目模版" class="headerlink" title="选择创建的项目模版"></a>选择创建的项目模版</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gflnrebv4sj31980u0ak5.jpg" alt="选择模版"></p><h3 id="写入创建的项目名并创建一个包"><a href="#写入创建的项目名并创建一个包" class="headerlink" title="写入创建的项目名并创建一个包"></a>写入创建的项目名并创建一个包</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gflnrsv33qj31980u0n7a.jpg" alt="项目名"></p><h3 id="查看项目目录结构"><a href="#查看项目目录结构" class="headerlink" title="查看项目目录结构"></a>查看项目目录结构</h3><p>上一步创建的<code>com.zhongxin</code>会变成<code>src-&gt;com-&gt;zhongxin</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gflnt5irdrj31bo0r4gs1.jpg" alt="目录结构"></p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><code>package com.zhongxin;</code>表示该类（HelloWorld）放在<code>com.zhongxin</code>包里面</li><li><code>public class HelloWorld {</code> java中的HelloWorld类 类是java中最小的单元</li><li><code>public static void main(String[] args) {</code>程序的入口main方法，固定写法</li><li><code>System.out.println("Hello World!");</code>向控制台输出</li></ol><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>java中含有特殊含义的英文单词</p><ol><li>public</li><li>void</li><li>。。。</li></ol><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol><li>包名:com.zhongxin</li><li>类名:HelloWorld</li><li>方法名:main</li><li>参数名/变量名:args</li><li>规则:不能以数字开头，不要用汉字</li></ol><h2 id="命名-驼峰命名方法"><a href="#命名-驼峰命名方法" class="headerlink" title="命名-驼峰命名方法"></a>命名-驼峰命名方法</h2><h3 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h3><p>每个单词首字母大写</p><p><code>H</code>ello<code>W</code>orld</p><h3 id="方法名-参数名"><a href="#方法名-参数名" class="headerlink" title="方法名/参数名"></a>方法名/参数名</h3><p>从第二个单词开始首字母大写</p><p>get<code>M</code>ax</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>变量就是用来存储数据的</p><p>变量=变化+存储量</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按类型分类（四类八种）</p><ol><li>基本数据类型变量</li><li>引用数据类型变量</li></ol><h2 id="基本类型-八大基本数据类型"><a href="#基本类型-八大基本数据类型" class="headerlink" title="基本类型-八大基本数据类型"></a>基本类型-八大基本数据类型</h2><h3 id="逻辑类型"><a href="#逻辑类型" class="headerlink" title="逻辑类型"></a>逻辑类型</h3><blockquote><p>boolean布尔类型，true/false</p></blockquote><h3 id="整型（整数）"><a href="#整型（整数）" class="headerlink" title="整型（整数）"></a>整型（整数）</h3><blockquote><p>byte 字节型 -128～127 <code>-2^7～2^7-1</code> 1字节</p><p>short 短整型 -32768～32767 <code>-2^15～2^15-1</code>2字节</p><p>int 整型 -2147483648～2147483647 <code>-2^31～2^31-1</code> 4字节</p><p>long 长整型 -9223372036854775808～9223372036854775807 <code>-2^63～2^-1</code> 8字节</p></blockquote><h3 id="浮点型（小数）"><a href="#浮点型（小数）" class="headerlink" title="浮点型（小数）"></a>浮点型（小数）</h3><blockquote><p>float单精度的浮点型</p><p>doule双精度的浮点型</p></blockquote><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><blockquote><p>char 数据长度只能是一位并且使用<code>'</code>包起来 2字节</p></blockquote><p>1024字节=1KB</p><p>1024KB=1MB</p><p>1024MB=1GB</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p><code>数据类型 变量名 = 变量值;</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhongxin.variable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span> bool1 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> bool2 = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">long</span> l1 = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">long</span> l2 = <span class="number">100L</span>;<span class="comment">//L 表示这个数的类型是long 推荐大写L</span></span><br><span class="line">        <span class="comment">// 整数值默认是int类型，往小的类型赋值不会出错，往大的类型必须注意int范围</span></span><br><span class="line">        <span class="comment">// 整数值默认是double，大的不能直接往小的里面放</span></span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">3.14F</span>; <span class="comment">// F表示这个数的类型是float 推荐大写F</span></span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">' '</span>; <span class="comment">//char 只能放一个值 不放也不行</span></span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">'1'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel合并小工具编写</title>
      <link href="article/edff8f63.html"/>
      <url>article/edff8f63.html</url>
      
        <content type="html"><![CDATA[<h1 id="Excel合并小工具编写"><a href="#Excel合并小工具编写" class="headerlink" title="Excel合并小工具编写"></a>Excel合并小工具编写</h1><p>由于女朋友太懒，又要让我干活，所以写一个简单的Excel合并小工具来帮她合并一下Excel。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdr2dy9wccj319g0u07ry.jpg" alt="待合并excel"></p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>由于从数据库导出来的数据过大，所以默认被分成了多个Sheet，现在的需要「将他们合并在一起进行数据透视操作」。</p><span id="more"></span><h2 id="使用到的库"><a href="#使用到的库" class="headerlink" title="使用到的库"></a>使用到的库</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></tbody></table></figure><ol><li>os:文件操作，方便进行文件名的修改等操作</li><li>threading:线程模块，可以方便进行多线程操作</li><li>tkinter:python自带的GUI界面</li><li>pandas:Excel数据处理的主力</li></ol><p>还用到了<code>pyinstaller</code>来进行打包，方便后续使用</p><h2 id="合并流程"><a href="#合并流程" class="headerlink" title="合并流程"></a>合并流程</h2><p>合并可以分为：</p><ul><li>读取Excel各Sheet内容</li><li>进行组合</li><li>写入新的Excel中</li></ul><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>入参为<code>path</code>和<code>name</code>，方便动态调整</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_df</span>(<span class="params">path, name</span>):</span></span><br><span class="line">    df = pd.DataFrame(pd.read_excel(path, sheet_name=name))</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></tbody></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>由于怕合并少了，所以计算一下<code>每个Sheet中内容条数</code> 和 <code>合并后的内容条数</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat_df</span>(<span class="params">df_list</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> df_list:</span><br><span class="line">        <span class="built_in">sum</span> += <span class="built_in">len</span>(i)</span><br><span class="line">        print(<span class="built_in">len</span>(i))</span><br><span class="line">    result = pd.concat(df_list, sort=<span class="literal">False</span>)</span><br><span class="line">    print(<span class="string">f'理论上合并后条数为<span class="subst">{<span class="built_in">sum</span>}</span>,实际为<span class="subst">{<span class="built_in">len</span>(result)}</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></tbody></table></figure><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_into_xls</span>(<span class="params">result, file_name=<span class="string">'result.xls'</span></span>):</span></span><br><span class="line">    writer = pd.ExcelWriter(file_name)</span><br><span class="line">    result.to_excel(writer, index=<span class="literal">False</span>)</span><br><span class="line">    writer.save()</span><br></pre></td></tr></tbody></table></figure><h3 id="流程组合"><a href="#流程组合" class="headerlink" title="流程组合"></a>流程组合</h3><p>通过os模块裁剪传入的excel文件路径，进行拆分重组</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p, name = os.path.split(file_path)</span><br><span class="line">_, n = os.path.splitext(file_path)</span><br><span class="line">new_path = os.path.join(p, <span class="string">f'(合并后)<span class="subst">{name.replace(n, <span class="string">".xlsx"</span>)}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.path.splitext('/Users/zhongxin/PycharmProjects/datawork/ZB-ECRC业务线路查询 3.10浙皖.xls')</span><br><span class="line">Out[3]: ('/Users/zhongxin/PycharmProjects/datawork/ZB-ECRC业务线路查询 3.10浙皖', '.xls')</span><br><span class="line">os.path.split('/Users/zhongxin/PycharmProjects/datawork/ZB-ECRC业务线路查询 3.10浙皖.xls')</span><br><span class="line">Out[4]: ('/Users/zhongxin/PycharmProjects/datawork', 'ZB-ECRC业务线路查询 3.10浙皖.xls')</span><br></pre></td></tr></tbody></table></figure><p>讲上述流程进行组合</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    file_path = path.get()</span><br><span class="line">    sheet_list = sheet.get().split(<span class="string">'|'</span>)</span><br><span class="line">    df_list = []</span><br><span class="line">    p, name = os.path.split(file_path)</span><br><span class="line">    _, n = os.path.splitext(file_path)</span><br><span class="line">    new_path = os.path.join(p, <span class="string">f'(合并后)<span class="subst">{name.replace(n, <span class="string">".xlsx"</span>)}</span>'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sheet_list:</span><br><span class="line">        df_list.append(get_df(file_path, i))</span><br><span class="line">    result = concat_df(df_list)</span><br><span class="line">    write_into_xls(result, new_path)</span><br></pre></td></tr></tbody></table></figure><h2 id="使用TK编写简单的GUI界面"><a href="#使用TK编写简单的GUI界面" class="headerlink" title="使用TK编写简单的GUI界面"></a>使用TK编写简单的GUI界面</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">top = Tk()</span><br><span class="line">top.title(<span class="string">'Excel合并工具'</span>)</span><br><span class="line">top.geometry(<span class="string">'600x400'</span>)</span><br><span class="line">frame = Frame(top)</span><br><span class="line">frame.pack()</span><br><span class="line">lab = Label(frame, text=<span class="string">'待合并Excel路径:   '</span>)</span><br><span class="line">lab.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=W)</span><br><span class="line">path = Entry(frame)</span><br><span class="line">path.insert(<span class="number">0</span>, <span class="string">'/Users/zhongxin/PycharmProjects/datawork/ZB-ECRC分销出货查询 4.10-4.11浙皖.xls'</span>)</span><br><span class="line">path.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, sticky=W)</span><br><span class="line"></span><br><span class="line">lab = Label(frame, text=<span class="string">'子sheet名称(使用|分割):   '</span>)</span><br><span class="line">lab.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, sticky=W)</span><br><span class="line">sheet = Entry(frame)</span><br><span class="line">sheet.insert(<span class="number">0</span>, <span class="string">'分销明细|分销明细_1'</span>)</span><br><span class="line">sheet.grid(row=<span class="number">1</span>, column=<span class="number">1</span>, sticky=W)</span><br><span class="line"></span><br><span class="line">btn1 = Button(frame, text=<span class="string">"开始合并"</span>, command=<span class="keyword">lambda</span>: thread_it(work), width=<span class="number">20</span>)</span><br><span class="line">btn1.grid(row=<span class="number">1</span>, column=<span class="number">2</span>, sticky=W)</span><br><span class="line"></span><br><span class="line">text = Text(top, width=<span class="number">20</span>, height=<span class="number">100</span>)</span><br><span class="line">text.pack(fill=X, side=BOTTOM)</span><br><span class="line">top.mainloop()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdr2pcu598j313k0totgt.jpg" alt="GUI界面"></p><h2 id="github路径"><a href="#github路径" class="headerlink" title="github路径"></a>github路径</h2><p><a href="https://github.com/zx490336534/ExcelConcat">https://github.com/zx490336534/ExcelConcat</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端自动化测试(三)</title>
      <link href="article/c2f6043e.html"/>
      <url>article/c2f6043e.html</url>
      
        <content type="html"><![CDATA[<h1 id="PC端自动化测试-三"><a href="#PC端自动化测试-三" class="headerlink" title="PC端自动化测试(三)"></a>PC端自动化测试(三)</h1><h2 id="编辑类控件的基本操作"><a href="#编辑类控件的基本操作" class="headerlink" title="编辑类控件的基本操作"></a>编辑类控件的基本操作</h2><h3 id="通过记事本来进行测试"><a href="#通过记事本来进行测试" class="headerlink" title="通过记事本来进行测试"></a>通过记事本来进行测试</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywinauto</span><br><span class="line"></span><br><span class="line">app = pywinauto.Application().start(<span class="string">"notepad.exe"</span>)</span><br><span class="line"><span class="comment"># 选择主窗口</span></span><br><span class="line">dlg = app[<span class="string">"无标题 - 记事本"</span>]</span><br><span class="line">dlg.print_control_identifiers()</span><br></pre></td></tr></tbody></table></figure><h3 id="输入内容"><a href="#输入内容" class="headerlink" title="输入内容"></a>输入内容</h3><p>选择编辑框并输入<code>Hello World!</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlg[<span class="string">"Edit"</span>].type_keys(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><ol><li>通过菜单选择替换</li><li>选择替换窗口<code>app["替换"]</code></li><li>选择查找编辑框并输入<code>World</code></li><li>选择替换为编辑框并输入<code>Python</code></li><li>点击全部替换按钮</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dlg.menu_select(<span class="string">"编辑-&gt;替换(R)"</span>)</span><br><span class="line">app[<span class="string">"替换"</span>].print_control_identifiers()</span><br><span class="line">app[<span class="string">"替换"</span>][<span class="string">"Edit1"</span>].type_keys(<span class="string">"World"</span>)</span><br><span class="line">app[<span class="string">"替换"</span>][<span class="string">"Edit2"</span>].type_keys(<span class="string">"Python"</span>) </span><br><span class="line">app[<span class="string">"替换"</span>][<span class="string">"Button3"</span>].click()</span><br></pre></td></tr></tbody></table></figure><h2 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h2><p>键盘操作模块：<code>pywinauto.keyboard</code></p><p><code>send_keys</code>方法</p><ul><li>按F5:<code>send_key("{VK_F5}")</code></li><li>按F5:<code>send_key("{F5}")</code></li><li>按回车:<code>send_key("{VK_RETURN}")</code></li><li>按字母A:<code>send_key('A')</code></li></ul><h3 id="常用按键"><a href="#常用按键" class="headerlink" title="常用按键"></a>常用按键</h3><ul><li>ESC：VK_ESCAPE</li><li>TAB：VK_TAB</li><li>Shift：VK_SHIFT</li><li>Ctrl：VK_CONTROL</li><li>Alt：VK_MENU</li><li>空格：VK_SPACK</li><li>退格：VK_BACK</li><li>左win：VK_LWIN</li><li>右win：VK_RWIN</li></ul><h3 id="键盘修饰符"><a href="#键盘修饰符" class="headerlink" title="键盘修饰符"></a>键盘修饰符</h3><ul><li><code>+</code>：按Shift</li><li><code>^</code>：按Ctrl</li><li><code>%</code>：按Alt</li></ul><p>例如<code>^s</code>相当于输入<code>ctrl+s</code></p><h2 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h2><p>鼠标操作模块：<code>pywinauto.mouse</code></p><ul><li>click：点击</li><li>double_click：双击</li><li>right_clik：右击</li><li>wheel_click：中间点击</li><li>press：按下</li><li>repleace：释放</li><li>move：移动</li><li>scrool：滚动</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pywinauto <span class="keyword">import</span> mouse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标单击(默认左键)</span></span><br><span class="line">mouse.click(coords=(<span class="number">580</span>,<span class="number">52</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标右键</span></span><br><span class="line">mouse.right_click(coords=(<span class="number">1000</span>,<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标双击</span></span><br><span class="line">mouse.double_click(button=<span class="string">"left"</span>,coords=(<span class="number">155</span>,<span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击鼠标中键</span></span><br><span class="line">mouse.wheel_click(coords=(<span class="number">1000</span>,<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按下鼠标</span></span><br><span class="line">mouse.press(coords=(<span class="number">72</span>,<span class="number">31</span>))</span><br><span class="line"><span class="comment"># 释放鼠标</span></span><br><span class="line">mouse.release(coords=(<span class="number">1000</span>,<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滑动鼠标滚轮</span></span><br><span class="line">mouse.scroll(coords=(<span class="number">1000</span>, <span class="number">500</span>), wheel_dist=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动鼠标位置</span></span><br><span class="line">mouse.move(coords=(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">50</span>):</span><br><span class="line">    mouse.move(coords=(i, i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部分无法直接点击的控件：获取控件中心点位置，双击点击</span></span><br><span class="line">rect = db_name.rectangle().mid_point()</span><br><span class="line">mouse.double_click(coords=(rect.x, rect.y))</span><br></pre></td></tr></tbody></table></figure><h2 id="查看系统提示"><a href="#查看系统提示" class="headerlink" title="查看系统提示"></a>查看系统提示</h2><p>在时钟附近有表示正在运行的应用程序的图标，也就是「系统托盘」，也被称为「通知区域」。</p><p>可以通过启动<code>Explorer.exe</code>应用程序，在<code>任务栏</code>的<code>用户提示通知区域</code>找到工具栏控件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pywinauto <span class="keyword">import</span> Application</span><br><span class="line"></span><br><span class="line">app = Application(<span class="string">"uia"</span>).connect(path=<span class="string">"explorer"</span>)</span><br><span class="line">icons = app[<span class="string">'任务栏'</span>][<span class="string">'用户提示通知区域'</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="结合Selenium实现文件上传"><a href="#结合Selenium实现文件上传" class="headerlink" title="结合Selenium实现文件上传"></a>结合Selenium实现文件上传</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywinauto</span><br><span class="line"><span class="keyword">from</span> pywinauto.keyboard <span class="keyword">import</span> send_keys</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">url= <span class="string">"https://www.layui.com/demo/upload.html"</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(url=url)</span><br><span class="line">browser.find_element_by_xpath(<span class="string">"//button[@id='test1']"</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用pywinauto来选择文件</span></span><br><span class="line">app = pywinauto.Desktop()</span><br><span class="line"><span class="comment"># 选择文件上传的窗口</span></span><br><span class="line">dlg = app[<span class="string">"打开"</span>]</span><br><span class="line">dlg.print_control_identifiers()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择文件地址输入框</span></span><br><span class="line">dlg[<span class="string">"Toolbar3"</span>].click()</span><br><span class="line">send_keys(<span class="string">"C:\images"</span>)</span><br><span class="line">send_keys(<span class="string">"{VK_RETURN}"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选中文件名输入框</span></span><br><span class="line">dlg[<span class="string">"文件名(&amp;N):Edit"</span>].type_keys(<span class="string">"9.png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击打开</span></span><br><span class="line">dlg[<span class="string">"打开(&amp;O)"</span>].click()</span><br></pre></td></tr></tbody></table></figure><h2 id="连接Navicat并操作"><a href="#连接Navicat并操作" class="headerlink" title="连接Navicat并操作"></a>连接Navicat并操作</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywinauto</span><br><span class="line"><span class="keyword">from</span> pywinauto <span class="keyword">import</span> mouse</span><br><span class="line"><span class="keyword">from</span> pywinauto.keyboard <span class="keyword">import</span> send_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavicatTest</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, path=<span class="literal">None</span>, precess=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="comment"># 初始化一个应用程序对象</span></span><br><span class="line">        <span class="keyword">if</span> path:</span><br><span class="line">            self.app = pywinauto.Application(backend=<span class="string">"uia"</span>).start(path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.app = pywinauto.Application(backend=<span class="string">"uia"</span>).connect(process=precess)</span><br><span class="line">        <span class="comment"># 选择主窗口</span></span><br><span class="line">        self.dlg = self.app[<span class="string">"Navicat for MySQL"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_connect</span>(<span class="params">self, title, host, port, user, password</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            新建连接</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 选择菜单栏</span></span><br><span class="line">        menu = self.dlg[<span class="string">"Menu"</span>]</span><br><span class="line">        <span class="comment"># 点击文件</span></span><br><span class="line">        menu.child_window(title=<span class="string">"文件"</span>, control_type=<span class="string">"MenuItem"</span>).click_input()</span><br><span class="line">        <span class="comment"># 点击新建连接</span></span><br><span class="line">        menu.item_by_path(<span class="string">"文件-&gt;新建连接..."</span>).click_input()</span><br><span class="line">        <span class="comment"># 选择新建连接窗口</span></span><br><span class="line">        new_dlg = self.app[<span class="string">"新建连接"</span>]</span><br><span class="line">        <span class="comment"># 连接名称输入框</span></span><br><span class="line">        new_dlg[<span class="string">"常规"</span>].Edit5.type_keys(title)</span><br><span class="line">        <span class="comment"># ip输入框</span></span><br><span class="line">        new_dlg[<span class="string">"常规"</span>].Edit1.type_keys(host)</span><br><span class="line">        <span class="comment"># 端口输入框</span></span><br><span class="line">        new_dlg[<span class="string">"常规"</span>].Edit4.type_keys(port)</span><br><span class="line">        <span class="comment"># 用户名输入框</span></span><br><span class="line">        new_dlg[<span class="string">"常规"</span>].Edit3.type_keys(user)</span><br><span class="line">        <span class="comment"># 密码输入框</span></span><br><span class="line">        new_dlg[<span class="string">"常规"</span>].Edit2.type_keys(password)</span><br><span class="line">        <span class="comment"># 点击确定按钮</span></span><br><span class="line">        new_dlg[<span class="string">"确定"</span>].click()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_connect</span>(<span class="params">self, title</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        打开连接或者数据库</span></span><br><span class="line"><span class="string">        :param title: 连接名或者数据库名</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 获取控制坐标中心点，进行点击，打开连接</span></span><br><span class="line">        db_name = self.dlg[<span class="string">"TTreeView"</span>].child_window(title=title, control_type=<span class="string">"TreeItem"</span>)</span><br><span class="line">        rect = db_name.rectangle().mid_point()</span><br><span class="line">        print(rect.x, rect.y)</span><br><span class="line">        mouse.double_click(coords=(rect.x, rect.y))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_connect</span>(<span class="params">self, title</span>):</span></span><br><span class="line">        <span class="string">"""删除连接"""</span></span><br><span class="line">        <span class="comment"># 获取控件中心点位置</span></span><br><span class="line">        db_name = self.dlg[<span class="string">"TTreeView"</span>].child_window(title=title, control_type=<span class="string">"TreeItem"</span>)</span><br><span class="line">        rect = db_name.rectangle().mid_point()</span><br><span class="line">        <span class="comment"># 鼠标在控件中心点，右击</span></span><br><span class="line">        mouse.right_click(coords=(rect.x, rect.y))</span><br><span class="line">        <span class="comment"># 删除连接</span></span><br><span class="line">        self.app[<span class="string">"上下文"</span>][<span class="string">"MenuItem5"</span>].click_input()</span><br><span class="line">        <span class="comment"># 选择删除窗口</span></span><br><span class="line">        self.app[<span class="string">"确认删除"</span>][<span class="string">"删除"</span>].click()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_coonnect</span>(<span class="params">self, title</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        关闭连接或者数据库</span></span><br><span class="line"><span class="string">        :param title: 连接名或者数据库名</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 获取控件中心点位置</span></span><br><span class="line">        db_name = self.dlg[<span class="string">"TTreeView"</span>].child_window(title=title, control_type=<span class="string">"TreeItem"</span>)</span><br><span class="line">        rect = db_name.rectangle().mid_point()</span><br><span class="line">        <span class="comment"># 鼠标在控件中心点，右击</span></span><br><span class="line">        mouse.right_click(coords=(rect.x, rect.y))</span><br><span class="line">        <span class="comment"># 删除连接</span></span><br><span class="line">        self.app[<span class="string">"上下文"</span>][<span class="string">"MenuItem2"</span>].click_input()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_database</span>(<span class="params">self, database</span>):</span></span><br><span class="line">        db_name = self.dlg[<span class="string">"TTreeView"</span>].child_window(title=database, control_type=<span class="string">"TreeItem"</span>)</span><br><span class="line">        rect = db_name.rectangle().mid_point()</span><br><span class="line">        mouse.right_click(coords=(rect.x, rect.y))</span><br><span class="line">        self.app[<span class="string">"上下文"</span>][<span class="string">"MenuItem4"</span>].click_input()</span><br><span class="line">        <span class="comment"># 选择删除窗口</span></span><br><span class="line">        self.app[<span class="string">"确认删除"</span>][<span class="string">"删除"</span>].click()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_database</span>(<span class="params">self, title, database, charset=<span class="string">"utf8 -- UTF-8 Unicode"</span></span>):</span></span><br><span class="line">        <span class="string">"""新建数据库"""</span></span><br><span class="line">        db_name = self.dlg[<span class="string">"TTreeView"</span>].child_window(title=title, control_type=<span class="string">"TreeItem"</span>)</span><br><span class="line">        rect = db_name.rectangle().mid_point()</span><br><span class="line">        mouse.right_click(coords=(rect.x, rect.y))</span><br><span class="line"></span><br><span class="line">        dlg = self.app[<span class="string">"上下文"</span>]</span><br><span class="line">        <span class="comment"># 点击新建连接</span></span><br><span class="line">        dlg.MenuItem8.click_input()</span><br><span class="line">        <span class="comment"># 获取新建连接的窗口</span></span><br><span class="line">        <span class="comment"># self.app["新建数据库"].print_control_identifiers()</span></span><br><span class="line">        <span class="comment"># 数据数据库名</span></span><br><span class="line">        self.app[<span class="string">"新建数据库"</span>][<span class="string">"常规"</span>].Edit3.type_keys(database)</span><br><span class="line">        self.app[<span class="string">"新建数据库"</span>][<span class="string">"常规"</span>].Edit2.type_keys(charset)</span><br><span class="line">        <span class="comment"># 键盘回车键，点击确定</span></span><br><span class="line">        send_keys(<span class="string">"{VK_RETURN}"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_find_dlg</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""新建查询窗口"""</span></span><br><span class="line">        find = self.dlg[<span class="string">"TTreeView"</span>].child_window(title=<span class="string">"查询"</span>, control_type=<span class="string">"TreeItem"</span>)</span><br><span class="line">        <span class="comment"># 获取查询的左边</span></span><br><span class="line">        rect = find.rectangle().mid_point()</span><br><span class="line">        <span class="comment"># 鼠标右击</span></span><br><span class="line">        mouse.right_click(coords=(rect.x, rect.y))</span><br><span class="line">        <span class="comment"># 选择出现的小窗口</span></span><br><span class="line">        dlg = self.app[<span class="string">"上下文"</span>]</span><br><span class="line">        <span class="comment"># 点击新建连接</span></span><br><span class="line">        dlg.MenuItem1.click_input()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_sql</span>(<span class="params">self, database, title, sql</span>):</span></span><br><span class="line">        <span class="string">"""查询sql"""</span></span><br><span class="line">        title = <span class="string">"无标题 @{} ({}) - 查询"</span>.<span class="built_in">format</span>(database, title)</span><br><span class="line">        find_dlg = self.app[title]</span><br><span class="line">        find_dlg[<span class="string">"TabControl"</span>].print_control_identifiers()</span><br><span class="line">        <span class="comment"># 获取编辑框</span></span><br><span class="line">        edit = find_dlg[<span class="string">"TabControl"</span>].Pane4</span><br><span class="line">        <span class="comment"># 获取编辑窗口控件位置</span></span><br><span class="line">        rect = edit.rectangle().mid_point()</span><br><span class="line">        mouse.click(coords=(rect.x, rect.y))</span><br><span class="line">        sql = <span class="string">"^a{}"</span>.<span class="built_in">format</span>(sql.replace(<span class="string">" "</span>, <span class="string">"{VK_SPACE}"</span>)) + <span class="string">";"</span></span><br><span class="line">        send_keys(sql)</span><br><span class="line">        <span class="comment"># 使用运行快捷键</span></span><br><span class="line">        send_keys(<span class="string">"^r"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    nav = NavicatTest(precess=<span class="number">1320</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新建连接</span></span><br><span class="line">    nav.new_connect(title=<span class="string">"python666"</span>, host=<span class="string">"localhost"</span>, port=<span class="number">3306</span>, user=<span class="string">"root"</span>, password=<span class="string">"mysql"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开连接</span></span><br><span class="line">    nav.open_connect(<span class="string">"win"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    nav.close_coonnect(<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开数据库</span></span><br><span class="line">    nav.open_connect(<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新建查询窗口</span></span><br><span class="line">    nav.new_find_dlg()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询数据</span></span><br><span class="line">    sql = <span class="string">"SELECT * FROM students"</span></span><br><span class="line">    nav.find_sql(<span class="string">"test"</span>, <span class="string">"win"</span>, sql)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 删除连接</span></span><br><span class="line">    nav.del_connect(<span class="string">"localhost_3306"</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> PC端自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> PC端自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端自动化测试(二)</title>
      <link href="article/bc052415.html"/>
      <url>article/bc052415.html</url>
      
        <content type="html"><![CDATA[<h1 id="PC端自动化测试（二）"><a href="#PC端自动化测试（二）" class="headerlink" title="PC端自动化测试（二）"></a>PC端自动化测试（二）</h1><p>测试对象：</p><ul><li>窗口</li><li>菜单</li><li>文件</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pywinauto.application <span class="keyword">import</span> Application</span><br><span class="line"><span class="comment"># 启动Navicat</span></span><br><span class="line">app = Application(<span class="string">"uia"</span>).start(<span class="string">r"D:\Navicat for MySQL\navicat.exe"</span>)</span><br><span class="line"><span class="comment"># 选择窗口</span></span><br><span class="line">dlg = app[<span class="string">"Navicat for MySQL"</span>]</span><br><span class="line"><span class="comment"># 选择菜单</span></span><br><span class="line">menu = dlg[<span class="string">"menu"</span>]</span><br><span class="line"><span class="comment"># 选择菜单项：文件</span></span><br><span class="line">file = menu.child_window(title=<span class="string">"文件"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="查看控件类型"><a href="#查看控件类型" class="headerlink" title="查看控件类型"></a>查看控件类型</h2><p><code>wrapper_object()</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dlg.wrapper_object() <span class="comment"># Dialog</span></span><br><span class="line"></span><br><span class="line">menu.wrapper_object() <span class="comment"># Menu</span></span><br><span class="line"></span><br><span class="line">file.wrapper_object() <span class="comment"># MenuItem</span></span><br></pre></td></tr></tbody></table></figure><h2 id="查看对象所支持的方法"><a href="#查看对象所支持的方法" class="headerlink" title="查看对象所支持的方法"></a>查看对象所支持的方法</h2><p><code>dir()</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span>(dlg.wrapper_object())</span><br></pre></td></tr></tbody></table></figure><h2 id="控件的文本内容获取"><a href="#控件的文本内容获取" class="headerlink" title="控件的文本内容获取"></a>控件的文本内容获取</h2><p><code>.texts()</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.texts() <span class="comment"># ['文件']</span></span><br></pre></td></tr></tbody></table></figure><h2 id="获取子元素"><a href="#获取子元素" class="headerlink" title="获取子元素"></a>获取子元素</h2><p><code>.children()</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dlg.children()</span><br><span class="line">menu.children()</span><br><span class="line">file.children()</span><br></pre></td></tr></tbody></table></figure><h2 id="获取控件的类名"><a href="#获取控件的类名" class="headerlink" title="获取控件的类名"></a>获取控件的类名</h2><p><code>.class_name()</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu.class_name()</span><br></pre></td></tr></tbody></table></figure><h2 id="获取控件的属性"><a href="#获取控件的属性" class="headerlink" title="获取控件的属性"></a>获取控件的属性</h2><p><code>menu.get_properties()</code></p><blockquote><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    'class_name': 'TActionMainMenuBar',</span><br><span class="line">    'friendly_class_name': 'Menu',</span><br><span class="line">    'texts': [''],</span><br><span class="line">    'control_id': 6555556,</span><br><span class="line">    'rectangle': &lt;RECT L780, T151, R1980, B185&gt;,</span><br><span class="line">    'is_visible': True,</span><br><span class="line">    'is_enabled': True,</span><br><span class="line">    'control_count': 6,</span><br><span class="line">    'is_keyboard_focusable': True,</span><br><span class="line">    'has_keyboard_focus': True,</span><br><span class="line">    'automation_id': '6555556'</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></blockquote><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><h3 id="截图窗口"><a href="#截图窗口" class="headerlink" title="截图窗口"></a>截图窗口</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pic = dlg.capture_as_image()</span><br><span class="line">pic.save(<span class="string">"dlg.png"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="截图菜单"><a href="#截图菜单" class="headerlink" title="截图菜单"></a>截图菜单</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pic1 = menu.capture_as_image()</span><br><span class="line">pic1.save(<span class="string">"menu.png"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="截图菜单项"><a href="#截图菜单项" class="headerlink" title="截图菜单项"></a>截图菜单项</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pic3 = file.capture_as_image()</span><br><span class="line">pic3.save(<span class="string">"file.png"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="菜单操作"><a href="#菜单操作" class="headerlink" title="菜单操作"></a>菜单操作</h2><ul><li>获取菜单的子菜单项</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu.items()</span><br></pre></td></tr></tbody></table></figure><ul><li>通过下标去选择菜单项</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu.item_by_index(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li>通过路径去选择菜单项</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu.item_by_path(<span class="string">'文件-&gt;新建连接...'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="菜单项的方法"><a href="#菜单项的方法" class="headerlink" title="菜单项的方法"></a>菜单项的方法</h2><ul><li>获取菜单项</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.items()</span><br></pre></td></tr></tbody></table></figure><ul><li>点击菜单项</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.click_input()</span><br></pre></td></tr></tbody></table></figure><ul><li>点击新建连接</li></ul><p>需要先点击文件出现了「新建连接…」后再点击</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file.click_input()</span><br><span class="line">menu.item_by_path(<span class="string">"文件-&gt;新建连接..."</span>).click_input()</span><br></pre></td></tr></tbody></table></figure><h2 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h2><ul><li>wait</li><li>wait_not</li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ol><li>wait_for：等待的状态</li></ol><ul><li>exists 表示该窗口是有效句柄</li><li>visible 表示该窗口未隐藏</li><li>enabled 表示未禁用窗口</li><li>ready 表示该窗口可见并启用</li><li>active 表示该窗口处于活动状态</li></ul><ol start="2"><li>timeout：超时时间</li><li>retry_interval：重试时间间隔</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等待窗口处于可见状态</span></span><br><span class="line">new_dlg.wait(wait_for=<span class="string">"ready"</span>,timeout=<span class="number">10</span>,retry_interval=<span class="number">1</span>)</span><br><span class="line">print(<span class="string">"等待通过，当前新建连接的窗口处于可见状态"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待窗口不处于可见状态</span></span><br><span class="line">new_dlg.wait_not(wait_for_not=<span class="string">"ready"</span>,timeout=<span class="number">10</span>,retry_interval=<span class="number">1</span>)</span><br><span class="line">print(<span class="string">"等待通过，当前新建连接的窗口不处于可见状态"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="等待CPU阀值"><a href="#等待CPU阀值" class="headerlink" title="等待CPU阀值"></a>等待CPU阀值</h3><p><code>wait_cpu_usage_lower</code></p><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ol><li><p>threshold 该进程CPU占用率</p></li><li><p>timeout：超时时间</p></li><li><p>retry_interval：重试时间间隔</p></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.wait_cpu_usage_lower(threshold=<span class="number">20</span>,timeout=<span class="number">5</span>,usage_interval=<span class="number">1</span>)</span><br><span class="line">print(<span class="string">"等待通过，当前该进程cup占用率低于%20"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="timings模块"><a href="#timings模块" class="headerlink" title="timings模块"></a>timings模块</h3><p>wait_until方法：</p><ul><li>Timeout 超时时间</li><li>retry_interval 重试时间</li><li>func 执行的函数</li><li>value 比较的值</li><li>Op 比较函数（默认为相等）</li><li>args 给执行函数传位置参数</li><li>kwargs 给执行函数传递关键字参数</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pywinauto.timings <span class="keyword">import</span> wait_until,Timings</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等待work返回的结果为5，继续往下执行</span></span><br><span class="line">wait_until(<span class="number">10</span>, <span class="number">1</span>, work, <span class="number">15</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li>讲全局计时设为默认</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Timings.Defaults()</span><br></pre></td></tr></tbody></table></figure><ul><li>时间延长，脚本执行速度降低为1/2（慢2倍）</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Timings.slow()</span><br></pre></td></tr></tbody></table></figure><ul><li>时间间断，所有计时器/2（快两倍）</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Timings.fast()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> PC端自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> PC端自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端自动化测试(一)</title>
      <link href="article/1334bf77.html"/>
      <url>article/1334bf77.html</url>
      
        <content type="html"><![CDATA[<h1 id="PC端自动化测试（一）"><a href="#PC端自动化测试（一）" class="headerlink" title="PC端自动化测试（一）"></a>PC端自动化测试（一）</h1><blockquote><p>pywinauto:同时支持控件操作和图像操作，支持Win32 API和MS UI Automation API</p><p>A set of Python modules to automate the Microsoft Windows GUI</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>python3环境（python3.5以上）</li><li>pip环境</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pywinauto</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd464p856qj31ht0u0wnl.jpg" alt="pip安装"></p><h2 id="应用程序的可访问技术"><a href="#应用程序的可访问技术" class="headerlink" title="应用程序的可访问技术"></a>应用程序的可访问技术</h2><h3 id="支持控件的访问技术"><a href="#支持控件的访问技术" class="headerlink" title="支持控件的访问技术"></a>支持控件的访问技术</h3><h4 id="Win32-API（backend-“win32”）-默认的backend"><a href="#Win32-API（backend-“win32”）-默认的backend" class="headerlink" title="Win32 API（backend=“win32”） 默认的backend"></a>Win32 API（backend=“win32”） 默认的backend</h4><p>MFC，VB6，VCL简单的WinForms控件和大多数旧的应用程序</p><h4 id="MS-UI-Automation-API（backend-“uia”）"><a href="#MS-UI-Automation-API（backend-“uia”）" class="headerlink" title="MS UI Automation API（backend=“uia”）"></a>MS UI Automation API（backend=“uia”）</h4><p>WinForms，WPF，Store apps，Qt5，浏览器</p><h3 id="进程数量"><a href="#进程数量" class="headerlink" title="进程数量"></a>进程数量</h3><h4 id="单进程"><a href="#单进程" class="headerlink" title="单进程"></a>单进程</h4><p><code>Application</code>作用范围是一个进程</p><h4 id="跨进程"><a href="#跨进程" class="headerlink" title="跨进程"></a>跨进程</h4><p><code>Desktop</code>作用范围可以跨进程</p><h2 id="GUI对象检查工具"><a href="#GUI对象检查工具" class="headerlink" title="GUI对象检查工具"></a>GUI对象检查工具</h2><h3 id="Inspect-exe"><a href="#Inspect-exe" class="headerlink" title="Inspect.exe"></a>Inspect.exe</h3><h3 id="spy-exe"><a href="#spy-exe" class="headerlink" title="spy++.exe"></a>spy++.exe</h3><h3 id="ViewWizard"><a href="#ViewWizard" class="headerlink" title="ViewWizard"></a>ViewWizard</h3><h2 id="打开应用程序"><a href="#打开应用程序" class="headerlink" title="打开应用程序"></a>打开应用程序</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pywinauto.application <span class="keyword">import</span> Application</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开指定的应用程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 打开windows自带的应用</span></span><br><span class="line">app = Application(backend=<span class="string">'uia'</span>).start(<span class="string">"notepad.exe"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 打开任意一个应用程序</span></span><br><span class="line">app = Application(backend=<span class="string">'uia'</span>).start(<span class="string">"exe路径"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="连接已经打开的应用程序"><a href="#连接已经打开的应用程序" class="headerlink" title="连接已经打开的应用程序"></a>连接已经打开的应用程序</h2><ul><li>通过进程号</li><li>通过窗口句柄</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Application(<span class="string">'uia'</span>).connect(process=<span class="number">4444</span>)</span><br><span class="line">app = Application(<span class="string">'uia'</span>).connect(handle=<span class="number">1904040</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd5dhxg1whj30f40mkmxw.jpg" alt="ViewWizard"></p><h2 id="选择指定的窗口"><a href="#选择指定的窗口" class="headerlink" title="选择指定的窗口"></a>选择指定的窗口</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：app[类名/标题] :推荐使用该方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.通过窗口类型来选择</span></span><br><span class="line">dlg = app[<span class="string">"TNavicatMainForm"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.通过窗口标题来选择</span></span><br><span class="line">dlg = app[<span class="string">"Navicat for MySQL"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：app.类名</span></span><br><span class="line">dlg =app.TNavicatMainForm</span><br><span class="line"></span><br><span class="line">dlg.print_control_identifiers()</span><br></pre></td></tr></tbody></table></figure><h2 id="操作窗口"><a href="#操作窗口" class="headerlink" title="操作窗口"></a>操作窗口</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 窗口最大化</span></span><br><span class="line">dlg.maximize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口最小化</span></span><br><span class="line">dlg.minimize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口恢复正常大小</span></span><br><span class="line">dlg.restore()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找窗口显示状态，最大化为1，正常为0</span></span><br><span class="line">status = dlg.get_show_state()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前窗口的坐标位置</span></span><br><span class="line">rect = dlg.rectangle()</span><br><span class="line">print(rect)<span class="comment"># （L548,T194,R1768,B1043）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭窗口</span></span><br><span class="line">dlg.close()</span><br></pre></td></tr></tbody></table></figure><h2 id="选择控件"><a href="#选择控件" class="headerlink" title="选择控件"></a>选择控件</h2><blockquote><p>控件：窗口上的内容</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择控件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># menu = dlg.Menu</span></span><br><span class="line">menu = dlg[<span class="string">"Menu"</span>]</span><br><span class="line">print(menu.print_control_identifiers()) <span class="comment"># 查看Menu上的控件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = menu.child_window(title=<span class="string">"文件"</span>, control_type=<span class="string">"MenuItem"</span>)</span><br><span class="line">file.print_control_identifiers()</span><br></pre></td></tr></tbody></table></figure><h2 id="控件的分类"><a href="#控件的分类" class="headerlink" title="控件的分类"></a>控件的分类</h2><ul><li>状态栏 StatusBar</li><li>按钮 Button</li><li>单选框 RadioButton</li><li>组合框 ComboBox</li><li>编辑栏 Edit</li><li>列表框 ListBox</li><li>弹出菜单 PopupMenu</li><li>工具栏 Toolbar</li><li>树状视图 Tree View</li><li>菜单项 MenuItem</li><li>静态内容 Static</li><li>复选框 CheckBox</li><li>组框 GroupBox</li><li>对话框 Dialog</li><li>头部内容 Header</li><li>列表显示控件 ListView</li><li>选项卡控件 TabControl</li><li>工具提示 ToolTips</li><li>菜单 Menu</li><li>窗格 Pane</li></ul>]]></content>
      
      
      <categories>
          
          <category> PC端自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> PC端自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试</title>
      <link href="article/160b2d7e.html"/>
      <url>article/160b2d7e.html</url>
      
        <content type="html"><![CDATA[<h1 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h1><h2 id="接口概念"><a href="#接口概念" class="headerlink" title="接口概念"></a>接口概念</h2><h3 id="接口是什么"><a href="#接口是什么" class="headerlink" title="接口是什么"></a>接口是什么</h3><p>传输数据的通道<br>主要包括：<br><code>内部接口</code>：同一个系统中模块与模块间的接口，前端后端接口；<br><code>外部接口</code>：跨系统平台与平台间的对接。</p><h3 id="接口测试是什么"><a href="#接口测试是什么" class="headerlink" title="接口测试是什么"></a>接口测试是什么</h3><p>是测试系统组件间接口的一种测试。</p><h3 id="常见接口类型-协议"><a href="#常见接口类型-协议" class="headerlink" title="常见接口类型/协议"></a>常见接口类型/协议</h3><ul><li><p>HTTP类型/协议:在数据处理上效率比较高</p></li><li><p>Webservice类型/协议:通过soap协议来获取数据，处理比http协议复杂的数据类型。本质上也是http协议 </p><h3 id="为什么要做接口测试"><a href="#为什么要做接口测试" class="headerlink" title="为什么要做接口测试"></a>为什么要做接口测试</h3></li><li><p>开发代码初期，UI和Web页面设计还没有到位，提前介入测试更早发现问题，否则底层的一个bug可能会引起外面的多个bug</p></li><li><p>处于接口安全层面考虑，前端进行限制容易绕过，需要同样测试后端的限制；测试接口验证数据的加密传输，例如用户密码</p><span id="more"></span><h3 id="接口测试原理"><a href="#接口测试原理" class="headerlink" title="接口测试原理"></a>接口测试原理</h3><p> 模拟客户端向服务器发送请求，服务器接收请求后对相应的请求做处理并向客户端返回响应结果，客户端接收结果的一个过程</p></li></ul><h3 id="常见http状态码"><a href="#常见http状态码" class="headerlink" title="常见http状态码"></a>常见http状态码</h3><ul><li>200：正常</li><li>302：重定向，被请求的文档已被临时移动到别处，此文档的新url在location响应头中给出</li><li>304：未修改，表示客户机上的缓存版本是最新的，应该继续使用。例如前端js</li><li>403：禁止，服务器接收客户端请求，但是拒绝处理它，通常由于权限问题限制</li><li>404：页面不存在</li><li>500：服务器异常</li><li>504：超时</li></ul><h2 id="接口测试流程"><a href="#接口测试流程" class="headerlink" title="接口测试流程"></a>接口测试流程</h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd2jq2yj0qj30460jmglv.jpg" alt="流程"></p><h3 id="获取接口需求"><a href="#获取接口需求" class="headerlink" title="获取接口需求"></a>获取接口需求</h3><ol><li>开发提供接口文档</li><li>通过抓包工具或者F12获取，并找开发确认</li></ol><h3 id="编写接口测试用例"><a href="#编写接口测试用例" class="headerlink" title="编写接口测试用例"></a>编写接口测试用例</h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd2jul3l52j3200086jtr.jpg" alt="接口测试用例"></p><h4 id="如何编写接口测试用例"><a href="#如何编写接口测试用例" class="headerlink" title="如何编写接口测试用例"></a>如何编写接口测试用例</h4><ul><li>接口的正常调用，检查接口返回响应结果信息和接口文档一致</li><li>接口的异常验证，包括长度，类型，必填项等异常，同步考虑边界值，数据类型</li><li>业务规则验证</li><li>接口的安全性验证，对于用户的敏感信息（密码，身份证号）进行加密</li><li>接口的性能验证，接口处理数据的时间也是测试的一个方面。牵扯到算法与代码的优化。</li></ul><h2 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h2><h3 id="jemeter"><a href="#jemeter" class="headerlink" title="jemeter"></a>jemeter</h3><ul><li>java开发，开源，免费</li><li>支持的协议种类丰富，版本更新速度快</li><li>接口功能，自动化，性能</li></ul><h3 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h3><h3 id="soapui"><a href="#soapui" class="headerlink" title="soapui"></a>soapui</h3><ul><li>webservice(soap)</li></ul><h3 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h3><ul><li>F12</li><li>Fiddler</li><li>Charles</li><li>Wireshark</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON必知必会</title>
      <link href="article/a0016df5.html"/>
      <url>article/a0016df5.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSON必知必会"><a href="#JSON必知必会" class="headerlink" title="JSON必知必会"></a>JSON必知必会</h1><p>阅读了一下JSON必知必会，由于日常使用JSON比较多，所以文中内容大部分都已经接触过了，大概通读耗时1h左右<br>PDF地址：<br>链接:<a href="https://pan.baidu.com/s/1iZQLR1zGJbH9Eoq3t_GYFQ">https://pan.baidu.com/s/1iZQLR1zGJbH9Eoq3t_GYFQ</a>  密码:x4lv</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><blockquote><p>JSON基于JavaScript对象字面量  </p></blockquote><p>JSON的全称是<code>Javascript Object Notation</code>「Javascript 对象表示法」<br>不过它是一种数据交换格式，是独立于语言的。</p><span id="more"></span><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>JSON中使用冒号<code>:</code>来分隔名称和值</li><li>始终需要被<code>双引号</code>包裹</li><li>全部内容需要被花括号包裹<code>{}</code><blockquote><p><code>{</code>：开始读取对象<br><code>}</code>：结束读取对象<br><code>[</code>：开始读取数组<br><code>]</code>：结束读取数组<br><code>:</code>：在名称-键值中分隔名称和值<br><code>,</code>：分隔「对象中的名称-值对」或「数组中的值」  </p></blockquote></li></ul><h3 id="语法验证"><a href="#语法验证" class="headerlink" title="语法验证"></a>语法验证</h3><ol><li>集成开发环境「IDE」自带</li><li><a href="https://jsonformatter.curiousconcept.com/">JSON Formatter &amp; Validator</a>: <a href="https://jsonformatter.curiousconcept.com/">https://jsonformatter.curiousconcept.com</a></li><li><a href="http://www.jsoneditoronline.org/">JSON Editor Online</a>:<a href="http://www.jsoneditoronline.org/">http://www.jsoneditoronline.org</a></li><li><a href="https://jsonlint.com/">JSONLint</a>:<a href="https://jsonlint.com/">https://jsonlint.com</a><h3 id="JSON的媒体类型"><a href="#JSON的媒体类型" class="headerlink" title="JSON的媒体类型"></a>JSON的媒体类型</h3>传递数据的时候，需要提前告知接收方数据是什么类型的。<br>媒体类型也有一些其他的称呼：「互联网媒体类型」，「内容类型」，「MIME类型」<br>它使用「类型/子类型」<br>JSON的MIME类型是<code>application/json</code><br>全部媒体类型列表可见：互联网数字分配机构「IANA」维护的列表<br><a href="http://www.iana.org/assignments/media-types/media-types.xhtml">http://www.iana.org/assignments/media-types/media-types.xhtml</a><h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h3><blockquote><p>字面量：字面意思和与其想要表达的意思是完全一致的值<br>最大可移植性：通过保证数据本身对平台和系统的兼容性来提供超越数据格式本身的可移植性<br>一致性验证：关注独特数据结构的验证  </p></blockquote></li></ol><h2 id="JSON的数据类型"><a href="#JSON的数据类型" class="headerlink" title="JSON的数据类型"></a>JSON的数据类型</h2><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><ul><li>数字<blockquote><p>整型<br>浮点数<br>定点数  </p></blockquote></li></ul><ul><li>字符和字符串</li><li>布尔类型<h3 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h3>由原始数据类型融合而成。<h3 id="JSON中的数据类型"><a href="#JSON中的数据类型" class="headerlink" title="JSON中的数据类型"></a>JSON中的数据类型</h3></li><li>对象</li><li>字符串</li><li>数字</li><li>布尔值</li><li>null</li><li>数组<h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><h4 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h4><h5 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    “promo”:"Say "Bob`s the best!” at checkout for free 8oz bag of kibble.”</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>当一个值以「“」开始时，它希望接下来的字符串文本以另一个双引号结尾<h5 id="正确"><a href="#正确" class="headerlink" title="正确"></a>正确</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    “promo”:"Say \"Bob`s the best!\” at checkout for free 8oz bag of kibble.”</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h4><code>\\</code><h4 id="正斜线"><a href="#正斜线" class="headerlink" title="正斜线"></a>正斜线</h4><code>\/</code><h4 id="退格符"><a href="#退格符" class="headerlink" title="退格符"></a>退格符</h4><code>\b</code><h4 id="换页符"><a href="#换页符" class="headerlink" title="换页符"></a>换页符</h4><code>\f</code><h4 id="制表符"><a href="#制表符" class="headerlink" title="制表符"></a>制表符</h4><code>\t</code><br><code>\t</code>-&gt;<code>\\t</code><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><code>\n</code><h4 id="回车符"><a href="#回车符" class="headerlink" title="回车符"></a>回车符</h4><code>\r</code><h4 id="十六进制字符"><a href="#十六进制字符" class="headerlink" title="十六进制字符"></a>十六进制字符</h4><code>\u后面跟十六进制字符</code><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3>JSON中布尔值仅使用小写形式：<code>true</code>，<code>false</code><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3>在编程中，null就用来表示 <del>0</del> ， <del>一无所有</del> ， <del>不存在</del> 等意思<br>在JSON中<code>null</code>必须小写<br>不要混淆<code>null</code>和<code>undefined</code><br><code>undefined</code>不是JSON中的数据类型<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3>数组始终应该被方括号<code>[]</code>包裹。在数组中，可以看到一个列表，列表项之间用「逗号」隔开。每个列表项都是合法的JSON数据类型<h2 id="JSON-Schema"><a href="#JSON-Schema" class="headerlink" title="JSON Schema"></a>JSON Schema</h2>Schema「模式」</li></ul><ol><li>JSON验证器负责 <del>验证语法错误</del> ，JSON Schema负责提供 <del>一致性校验</del> 。</li><li>JSON Schema是数据接收方的第一道防线，也是数据发送方节约时间，保证数据正确的好工具。</li><li>JSON Schema可以解决下列有关一致性验证的问题：</li></ol><ul><li>值的数据类型是否正确<blockquote><p>具体规定一个值是数字/字符串等类型  </p></blockquote></li><li>是否包含所需要的数据<blockquote><p>具体规定哪些数据是需要的，哪些是不需要的  </p></blockquote></li><li>值的形式是不是我需要的<blockquote><p>指定范围，最大值和最小值  </p></blockquote><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><a href="https://json-schema.org/">JSON Schema | The home of JSON Schema</a>：<a href="https://json-schema.org/">https://json-schema.org/</a></li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>JSON Schema本身就是一个JSON对象</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  “type”: "object”,</span><br><span class="line">  “properties”: {</span><br><span class="line">    “first_name”: { "type": "string" },</span><br><span class="line">    "last_name”: { “type”: “string” },</span><br><span class="line">    “birthday”: { “type”: "string”, “format": "date” },</span><br><span class="line">    “address": {</span><br><span class="line">      “type”: "object”,</span><br><span class="line">      “properties”: {</span><br><span class="line">        “street_address”: { “type”: “string” },</span><br><span class="line">        “city”: { “type”: “string” },</span><br><span class="line">        “state”: { “type”: “string” },</span><br><span class="line">        “country”: { “type” : “string” }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的JSON Schema可以校验如下JSON是否符合要求</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  “first_name”: “George",</span><br><span class="line">  "last_name": "Washington”,</span><br><span class="line">  “birthday”: “1732-02-22”,</span><br><span class="line">  “address”: {</span><br><span class="line">    “street_address”: “3200 Mount Vernon Memorial Highway”,</span><br><span class="line">    “city”: "Mount Vernon",</span><br><span class="line">    “state": “Virginia",</span><br><span class="line">    “country”: “United States”</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于概念比较简单但是比较多，直接可以查看官方文档，或者他人的翻译<br>官方英文文档：<br><a href="https://json-schema.org/understanding-json-schema/index.html">Understanding JSON Schema — Understanding JSON Schema 7.0 documentation</a>：<a href="https://json-schema.org/understanding-json-schema/index.html">https://json-schema.org/understanding-json-schema/index.html</a><br>网上中文学习材料<br><a href="https://blog.csdn.net/swinfans/article/details/89231247">JSON Schema 详解_Bossen的学习历程-CSDN博客</a>：<a href="https://blog.csdn.net/swinfans/article/details/89231247%E2%80%98">https://blog.csdn.net/swinfans/article/details/89231247‘</a></p><h3 id="通过Python进行JSON模式校验"><a href="#通过Python进行JSON模式校验" class="headerlink" title="通过Python进行JSON模式校验"></a>通过Python进行JSON模式校验</h3><ol><li>安装JSON校验模块<br><code>pip install jsonschema</code></li><li>使用官网例子<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> jsonschema <span class="keyword">import</span> validate</span><br><span class="line"></span><br><span class="line">schema = {</span><br><span class="line">    “<span class="built_in">type</span>”: “<span class="built_in">object</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>properties<span class="string">": {</span></span><br><span class="line"><span class="string">        “first_name”: {“type”: “string”},</span></span><br><span class="line"><span class="string">        “last_name"</span>: {“<span class="built_in">type</span>”: “string<span class="string">"},</span></span><br><span class="line"><span class="string">        “birthday"</span>: {“<span class="built_in">type</span>”: “string<span class="string">", “format”: "</span>date”},</span><br><span class="line">        “address<span class="string">": {</span></span><br><span class="line"><span class="string">            “type"</span>: “<span class="built_in">object</span>”,</span><br><span class="line">            “properties”: {</span><br><span class="line">                “street_address”: {“<span class="built_in">type</span>”: “string”},</span><br><span class="line">                <span class="string">"city”: {“type”: “string”},</span></span><br><span class="line"><span class="string">                "</span>state<span class="string">": {"</span><span class="built_in">type</span><span class="string">": "</span>string<span class="string">"},</span></span><br><span class="line"><span class="string">                “country”: {“type”: “string”}</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">test1 = {</span></span><br><span class="line"><span class="string">    “name"</span>: “George Washington”,</span><br><span class="line">    “birthday”: “February <span class="number">22</span>, <span class="number">1732</span><span class="string">",</span></span><br><span class="line"><span class="string">    “address”: “Mount Vernon, Virginia, United States”</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">test2 = {</span></span><br><span class="line"><span class="string">    “first_name”: “George”,</span></span><br><span class="line"><span class="string">    “last_name”: “Washington”,</span></span><br><span class="line"><span class="string">    “birthday”: “1732-02-22”,</span></span><br><span class="line"><span class="string">    “address”: {</span></span><br><span class="line"><span class="string">        “street_address”: “3200 Mount Vernon Memorial Highway”,</span></span><br><span class="line"><span class="string">        “city”: “Mount Vernon”,</span></span><br><span class="line"><span class="string">        “state”: “Virginia”,</span></span><br><span class="line"><span class="string">        “country”: “United States”</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure></li><li>校验<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">validate(instance=test1, schema=schema)</span><br><span class="line">validate(instance=test2, schema=schema)</span><br></pre></td></tr></tbody></table></figure>校验<code>test2</code>的时候没有报错<br>校验<code>test1</code>的时候报错<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/zhongxin/Desktop/ApiTest/test/20200203.py"</span>, line <span class="number">55</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    test_1()</span><br><span class="line">  File <span class="string">"/Users/zhongxin/Desktop/ApiTest/test/20200203.py"</span>, line <span class="number">47</span>, <span class="keyword">in</span> test_1</span><br><span class="line">    validate(instance=test1, schema=schema)</span><br><span class="line">  File <span class="string">"/Users/zhongxin/.local/share/virtualenvs/LearnDjango/lib/python3.7/site-packages/jsonschema/validators.py"</span>, line <span class="number">934</span>, <span class="keyword">in</span> validate</span><br><span class="line">    <span class="keyword">raise</span> error</span><br><span class="line">jsonschema.exceptions.ValidationError: <span class="string">'Mount Vernon, Virginia, United States'</span> <span class="keyword">is</span> <span class="keyword">not</span> of <span class="built_in">type</span> <span class="string">'object'</span></span><br><span class="line"></span><br><span class="line">Failed validating <span class="string">'type'</span> <span class="keyword">in</span> schema[<span class="string">'properties'</span>][<span class="string">'address'</span>]:</span><br><span class="line">    {<span class="string">'properties'</span>: {<span class="string">'city'</span>: {<span class="string">'type'</span>: <span class="string">'string'</span>},</span><br><span class="line">                    <span class="string">'country'</span>: {<span class="string">'type'</span>: <span class="string">'string'</span>},</span><br><span class="line">                    <span class="string">'state'</span>: {<span class="string">'type'</span>: <span class="string">'string'</span>},</span><br><span class="line">                    <span class="string">'street_address'</span>: {<span class="string">'type'</span>: <span class="string">'string'</span>}},</span><br><span class="line">     <span class="string">'type'</span>: <span class="string">'object'</span>}</span><br><span class="line"></span><br><span class="line">On instance[<span class="string">'address'</span>]:</span><br><span class="line">    <span class="string">'Mount Vernon, Virginia, United States'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="JSON中的安全问题"><a href="#JSON中的安全问题" class="headerlink" title="JSON中的安全问题"></a>JSON中的安全问题</h2>JSON本身不会构成什么威胁，它只是文本。不过由于它广泛应用于web相关，所以会有常见的两个安全问题：「跨站请求伪造」「跨站脚本攻击」<h3 id="跨站请求伪造"><a href="#跨站请求伪造" class="headerlink" title="跨站请求伪造"></a>跨站请求伪造</h3>「CSRF」是一种利用站点对用户浏览器信任而发起攻击的方式。<br>浏览器虽然对不同域名之间的站点资源分享有一定的限制规则，但是可以通过<code>&lt;script&gt;</code>标签来绕开。<br>在你完成某网站的登陆之后，浏览器会保存你与该网站的凭证。在此时如果访问包含危险<code>&lt;script&gt;</code>标签的网站，那么你的凭证信息就可能会被窃取利用。<h4 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h4></li></ol><ul><li>不在JSON中使用顶级数组</li><li>不要贪图GET代替POST的便利<h3 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h3><h4 id="跨站脚本攻击"><a href="#跨站脚本攻击" class="headerlink" title="跨站脚本攻击"></a>跨站脚本攻击</h4>「XSS」是注入攻击的一种<br>如果在JavaScript编程中使用<code>eval()</code>来对对象进行转换，那么就很有可能进行恶意代码的执行<h4 id="防护-1"><a href="#防护-1" class="headerlink" title="防护"></a>防护</h4>一般使用<code>JSON.parse()</code>函数代替<code>eval()</code>函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四十八)</title>
      <link href="article/5b8e00c1.html"/>
      <url>article/5b8e00c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四十八"><a href="#测试开发进阶-四十八" class="headerlink" title="测试开发进阶(四十八)"></a>测试开发进阶(四十八)</h1><h2 id="电量"><a href="#电量" class="headerlink" title="电量"></a>电量</h2><p>统计耗电本身也是一件耗电行为，所以软件统计方式其实都不是很精确</p><h3 id="统计方法-工具"><a href="#统计方法-工具" class="headerlink" title="统计方法/工具"></a>统计方法/工具</h3><ul><li>功耗仪：统计整机的耗电</li><li>腾讯GT工具</li><li>Battery Historian(Google 官方提供的工具，5.0及以后系统适用)</li></ul><p><a href="https://github.com/google/battery-historian">https://github.com/google/battery-historian</a></p><span id="more"></span><h3 id="手机投屏软件"><a href="#手机投屏软件" class="headerlink" title="手机投屏软件"></a>手机投屏软件</h3><p>windows：apowermirror</p><h3 id="Battery-Historian"><a href="#Battery-Historian" class="headerlink" title="Battery Historian"></a>Battery Historian</h3><p>从手机中导出bugreport文件上传至页面，在网页中生成详细的图表数据来展示手机各模块电量消耗过程，然后通过App数据的分析制定出相关的电量优化的方法</p><ul><li>安装GO python Java</li><li>使用Docker</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 9999:9999 registry.cn-beijing.aliyuncs.com/center1/google_battery</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1ga142i5s9lj315k0mwtbg.jpg" alt="google_battery"></p><h4 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h4><h5 id="记录唤醒锁的信息"><a href="#记录唤醒锁的信息" class="headerlink" title="记录唤醒锁的信息"></a>记录唤醒锁的信息</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell dumpsys batterystats --<span class="built_in">enable</span> full-wake-history</span></span><br></pre></td></tr></tbody></table></figure><h5 id="重置电量数据"><a href="#重置电量数据" class="headerlink" title="重置电量数据"></a>重置电量数据</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell dumpsys batterystats --reset</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1ga134tp4ghj315804eaav.jpg" alt="重置"></p><h5 id="采集电量数据"><a href="#采集电量数据" class="headerlink" title="采集电量数据"></a>采集电量数据</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Android7.0之后</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb bugreport bugreport.zip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Android7.0之前</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb bugreport &gt; bugreport.txt</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1ga138bppx3j30u80u07m7.jpg" alt="电量数据"></p><h2 id="流畅度"><a href="#流畅度" class="headerlink" title="流畅度"></a>流畅度</h2><h3 id="帧率-amp-刷新频率"><a href="#帧率-amp-刷新频率" class="headerlink" title="帧率 &amp; 刷新频率"></a>帧率 &amp; 刷新频率</h3><p><code>Refresh Rate</code>屏幕在一秒内刷新屏幕的次数，取决于硬件的固定参数，如60Hz</p><p><code>Frame Rate</code>GPU在一秒内绘制操作的帧数，例如30fps，60fps</p><h3 id="卡顿root-cause"><a href="#卡顿root-cause" class="headerlink" title="卡顿root cause"></a>卡顿root cause</h3><p>大多数用户感受到卡顿等性能问题的主要根源都是因为渲染性能，android系统无法及时完成那些复杂的界面渲染操作，就产生了卡顿/不流畅的想象</p><h3 id="FPS指标"><a href="#FPS指标" class="headerlink" title="FPS指标"></a>FPS指标</h3><ul><li>fps低，但是不觉得App卡</li></ul><p>因为本来就用不到那么高的fps，屏幕没有绘制要求，那么fps就为0</p><ul><li>app停止操作后，fps还是一直变化</li></ul><p>屏幕每一帧的合成都是针对手机里面所有的进程，当前app停止后其他进程可能还在绘制</p><h3 id="计算流畅度"><a href="#计算流畅度" class="headerlink" title="计算流畅度"></a>计算流畅度</h3><ul><li>系统合成帧率</li></ul><blockquote><p>数据形式最为直观，游戏/视频等连续绘制的应用可以考虑选用，但不适用于绝大多数非连续绘制的应用</p></blockquote><ul><li>流畅度(SM:SMoothness)</li></ul><blockquote><p>数据形式和FPS类似，可以很好的弥补FPS无法准确刻画非连续绘制的应用显示性能的缺陷</p><ul><li>原理：在VSync机制中1s内Loop运行的次数</li><li>当流畅度越小的时候说明当前程序越卡顿</li></ul></blockquote><h3 id="指标获取"><a href="#指标获取" class="headerlink" title="指标获取"></a>指标获取</h3><h4 id="FPS获取"><a href="#FPS获取" class="headerlink" title="FPS获取"></a>FPS获取</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell dumpsys gfxinfo 包名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb shell dumpsys gfxinfo com.sankuai.meituan</span></span><br></pre></td></tr></tbody></table></figure><p>Draw+Prepare+Process+Execute=完整显示一帧的时间</p><p>这个时间需要小于16.67ms才能保证不丢帧</p><ul><li>计算总数据的行数(跳过第一行)</li></ul><blockquote><p>frameCount = rowNum</p></blockquote><ul><li>计算每帧的渲染时间</li></ul><blockquote><p>renderTime = Draw + Prepare + Process + Execute</p></blockquote><ul><li>当渲染时间renderTime大于16.67ms，该帧渲染超时,算一次丢帧，需要用掉额外的Vsync个数为(多需要同步的信号)</li></ul><blockquote><ul><li>16.67整数倍</li></ul><p>vsyncOverNum=int(renderTime/16.67)-1</p><ul><li>非16.67整数倍</li></ul><p>vsyncOverNum=int(renderTime/16.67)-1</p></blockquote><ul><li>fps计算公式</li></ul><blockquote><p>fps=frameCount*60/(frameCount+vsyncOverNum=int)</p></blockquote><h4 id="SM获取"><a href="#SM获取" class="headerlink" title="SM获取"></a>SM获取</h4><p>腾讯GT</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1ga14kprtg4j30u018hn90.jpg" alt="GT"></p><h3 id="流畅度影响因素"><a href="#流畅度影响因素" class="headerlink" title="流畅度影响因素"></a>流畅度影响因素</h3><ul><li>UI渲染</li></ul><blockquote><p>界面过度渲染</p><p>布局边界合理性</p></blockquote><ul><li>UI线程复杂运算</li><li>频繁GC垃圾回收</li></ul><h3 id="UI渲染"><a href="#UI渲染" class="headerlink" title="UI渲染"></a>UI渲染</h3><p>UI渲染由CPU和GPU两个部分协同完成</p><ul><li>CPU负责UI布局元素的Measure，Layout，Draw等相关运算执行。如果布局边界不合理，会导致卡顿</li><li>GPU负责栅格化，将UI元素绘制到屏幕上，如果界面过度绘制，也可能导致卡顿</li></ul><h4 id="页面的过度绘制"><a href="#页面的过度绘制" class="headerlink" title="页面的过度绘制"></a>页面的过度绘制</h4><p>一个像素点绘制次数超过1次</p><p>开发者选项-&gt;调试GPU过度绘制</p><ul><li>没颜色：没有过度绘制</li><li>蓝色：1倍过度绘制，1个像素点绘制2次</li><li>绿色：2倍 3次</li><li>浅红色：3倍 4次</li><li>深红色：4倍以上 5次以上</li></ul><p>蓝色和绿色可以接受</p><h4 id="UI线程复杂运算"><a href="#UI线程复杂运算" class="headerlink" title="UI线程复杂运算"></a>UI线程复杂运算</h4><p>当android应用启动时，系统会为应用创建一个主线程，负责和UI组件进行交互</p><p>如果主线程里面进行复杂运算就会造成界面无响应/卡顿/不流畅(ANR已经是卡顿的极致了)</p><ul><li>TraceView</li></ul><p>分析方法执行时间</p><ul><li>StrictMode(严苛模式)</li></ul><p>在代码里或者开发者选项中开启，查看应用哪些操作在主线程上执行时间过长</p><p>当一些操作违背了严格模式时，屏幕四周会闪烁红色，同时输出StrictMode的相关信息到LOGCAT日志中</p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四十七)</title>
      <link href="article/92dcbfcd.html"/>
      <url>article/92dcbfcd.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四十七"><a href="#测试开发进阶-四十七" class="headerlink" title="测试开发进阶(四十七)"></a>测试开发进阶(四十七)</h1><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>使用adb获取日志</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb logcat</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> adb logcat &gt; logcat_1215.log</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x5coc9pyj316y0u0toq.jpg" alt="查看日志"></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x5eq03plj31b30u0hdt.jpg" alt="日志"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I/SystemServer(  553): Package Manager</span><br><span class="line">D/SELinuxMMAC(  553): Couldn't find install policy /data/security/mac_permissions.xml</span><br><span class="line">W/PackageManager(  553): Unknown permission com.android.smspush.WAPPUSH_MANAGER_BIND in package com.android.phone</span><br></pre></td></tr></tbody></table></figure><p>其中<code>I</code> <code>D</code> <code>W</code>表示日志优先级，类似于<code>Info</code> <code>Error</code></p><ul><li><p><code>I</code>:INFO</p></li><li><p><code>D</code>:DEBUG</p></li><li><p><code>W</code>:WARING</p></li><li><p><code>E</code>:ERROR</p></li></ul><p>斜杠后面表示日志的<code>输出模块</code></p><p>括号中为当前的<code>进程号</code></p><p>冒号后面内容为<code>日志主体</code></p><p>拉取<code>traces.txt</code>文件(追踪信息)</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb pull /data/anr/traces.txt /Users/zhongxin/Desktop</span></span><br></pre></td></tr></tbody></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p><code>fatal exception</code>严重异常</p></li><li><p><code>ANR IN</code></p></li></ul><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>很多时候，手机发热发烫。是因为CPU使用率过高，CPU过于繁忙，会导致手机无法响应用户，整体性能降低，用户体验会很差，也容易引起ANR等一些列问题</p><p>CPU使用率分为：<code>用户态</code> <code>系统态</code> <code>空闲态</code></p><ul><li>用户态：CPU处于用户态执行的时间</li><li>系统态：CPU处于系统内核执行的时间</li><li>空闲态：CPU处于空闲系统进程执行的时间</li></ul><p>CPU使用率=CPU执行非系统空闲进程的时间/CPU总的执行时间</p><ul><li>HZ</li></ul><p>Linux核心每隔固定周期会发出timer interrupt（IRQ 0），HZ是用来定义每一秒有几次timer interrupt</p><ul><li>Tick</li></ul><p>Tick是HZ的倒数，Tick = 1/HZ </p><p>即timer interrupt每发生一次中断的时间</p><ul><li>Jiffies</li></ul><p>Linux核心变数，是一个unsigned long类型的变量，它被用来记录系统自开机以来，已经过了多少tick。</p><p>每发生一次timer interrupt，Jiffies变数会被+1</p><p>CPU使用率=(用户态Jiffies + 系统态Jiffies)/总Jiffies</p><h4 id="CPU指标获取"><a href="#CPU指标获取" class="headerlink" title="CPU指标获取"></a>CPU指标获取</h4><h5 id="读取proc文件"><a href="#读取proc文件" class="headerlink" title="读取proc文件"></a>读取proc文件</h5><ul><li><code>/proc/stat</code></li><li><code>/proc/&lt;pid&gt;/stat</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x66z16xbj317f0u0wpn.jpg" alt="proc"></p><p><code>cpu0</code>表示CPU核心</p><p><code>cpu1</code>表示CPU的第二个核心</p><p><code>cpu</code>表示总和</p><p>查看模拟器的配置：双核的CPU</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x68mtbkaj310s0u0agv.jpg" alt="配置"></p><p>查找对于app的cpu使用情况</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x6aht7bej317401at99.jpg" alt="查看PID"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/1757/<span class="built_in">stat</span></span>    </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x6b9l8zbj317f0u0n5k.jpg" alt="指定app的情况"></p><p>获取当前进程的Jiffies</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/1757/<span class="built_in">stat</span> | awk -F <span class="string">" "</span> <span class="string">'{print $14,$15}'</span></span></span><br></pre></td></tr></tbody></table></figure><h5 id="第三方工具GT-soloPi"><a href="#第三方工具GT-soloPi" class="headerlink" title="第三方工具GT/soloPi"></a>第三方工具GT/soloPi</h5><p><a href="https://gt.qq.com/download.html">https://gt.qq.com/download.html</a></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x6hl05kzj30u0187aij.jpg" alt="GT"></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x6kbsedpj30ta18cag2.jpg" alt="GT"></p><p>将日志保存到文件中</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x6lw4zmmj30my0hkgmd.jpg" alt="保存"></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x6meq6sqj319i0aswln.jpg" alt="查看日志"></p><p>拉取至本地</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb pull /sdcard/GT/GW/com.sankuai.meituan/5.5.4/20191215/Pcp0_com.sankuai.meituan_20191215100605.csv /Users/zhongxin/Desktop</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x6p4lj4tj30f4136gpb.jpg" alt="查看cpu数据"></p><p>soloPi无法安装到模拟器，暂不演示</p><h3 id="启动时间"><a href="#启动时间" class="headerlink" title="启动时间"></a>启动时间</h3><p><code>2-5-8原则</code></p><h4 id="App启动方式"><a href="#App启动方式" class="headerlink" title="App启动方式"></a>App启动方式</h4><ul><li>冷启动</li></ul><p>后台没有进程，系统会重新创建一个新的进程分配给该应用</p><ul><li>热启动</li></ul><p>后台已有该进程，会从已有进程来启动应用</p><hr><p>查找包名</p><p>android 7.0以下</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell dumpsys activity | find <span class="string">"mFocusedActivity"</span></span></span><br></pre></td></tr></tbody></table></figure><p>android 8.0以上</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell dumpsys activity | find <span class="string">"mResumedActivity"</span></span></span><br></pre></td></tr></tbody></table></figure><hr><ol><li>查看启动时间</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell am start -W -n com.lemon.lemonban/com.lemon.lemonban.activity.WelcomeActivity</span></span><br></pre></td></tr></tbody></table></figure><p>程序员角度：获取打开应用到第一帧出现的时间</p><ol start="2"><li>使用soloPi来进行屏幕录制</li><li>录屏数帧</li></ol><p>人工录制后数帧数</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell screenrecord --bugreport /sdcard/launch.mp4</span></span><br></pre></td></tr></tbody></table></figure><h3 id="流量"><a href="#流量" class="headerlink" title="流量"></a>流量</h3><p>手机上网所产生的流量数据。</p><h4 id="读取proc文件-1"><a href="#读取proc文件-1" class="headerlink" title="读取proc文件"></a>读取proc文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/net/xt_qtaguid/stats</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x7c82or3j315q0u0gzq.jpg" alt="流量"></p><ul><li>iface 网络性质 wlan-wifi流量 lo本地流量 rmnet0-3g/2g流量</li><li>uid_tag_int 应用UID</li><li>cnt_set 应用前后台标识位 1-前台 0-后台</li><li>rx_bytes 接收数据</li><li>tx_bytes 传输数据</li></ul><p>查看具体app的流量</p><p>使用<code>ps</code>找到对于应用的<code>uid</code>：u0_a35 = 10000+35</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x7d4hu6rj317i01i3zd.jpg" alt="uid"></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9x7hadgeqj31de01eweq.jpg" alt="100035"></p><p>lo:网络类型</p><p>10035:应用UID</p><p>0:后台</p><p>132324:接收的流量数据消耗</p><p>2321:发送的流量数据消耗</p><h3 id="电量"><a href="#电量" class="headerlink" title="电量"></a>电量</h3><p>电量影响因素</p><ul><li>cpu</li><li>wakelock(保持唤醒锁)</li><li>无线数据(2G/3G/4G)</li><li>wiif</li><li>蓝牙</li><li>传感器</li><li>相机</li><li>闪光灯</li><li>GPS</li></ul><h4 id="power-profile-xml文件：决定电量测试是否准备的标准文件"><a href="#power-profile-xml文件：决定电量测试是否准备的标准文件" class="headerlink" title="power_profile.xml文件：决定电量测试是否准备的标准文件"></a>power_profile.xml文件：决定电量测试是否准备的标准文件</h4><ol><li>手机中的每个组件，如CPU，LCD，GPS，WIFI，BT等，运行时的能耗标准都保存在power_profile.xml中</li><li>由于android手机厂商的差异，每个硬件模块耗电信息不同，所以每个厂商都会对power_profile.xml进行定制</li><li>android耗电量通过代码估算，没有硬件参与汇报，准确度取决于厂商ROM所提供的power_profile.xml文件，不同厂商的power_profile.xml准确度及源码有差异，因此不同手机，不同版本的数据可能存在较大差异</li><li>系统源码PowerProfile读取power_profile.xml，并提供API访问部件电流数值</li><li>怎么获取power_profile.xml：反编译framework-res.apk</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四十六)</title>
      <link href="article/dd4a747.html"/>
      <url>article/dd4a747.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四十六"><a href="#测试开发进阶-四十六" class="headerlink" title="测试开发进阶(四十六)"></a>测试开发进阶(四十六)</h1><h3 id="为什么要做APP专项测试"><a href="#为什么要做APP专项测试" class="headerlink" title="为什么要做APP专项测试"></a>为什么要做APP专项测试</h3><ul><li>奔溃(crash)</li><li>卡顿</li><li>兼容性问题(占据大多数时间)</li><li>发热/发烫</li></ul><blockquote><p>硬件耗电-&gt;产生热量</p></blockquote><ul><li>响应慢</li></ul><blockquote><p>2-5-8原则</p><p>2秒钟 -&gt; 优</p><p>5秒钟 -&gt; 可以接受</p><p>8秒钟 -&gt; 不能接受</p></blockquote><span id="more"></span><h2 id="专项纬度"><a href="#专项纬度" class="headerlink" title="专项纬度"></a>专项纬度</h2><h3 id="场景测试"><a href="#场景测试" class="headerlink" title="场景测试"></a>场景测试</h3><h4 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h4><ul><li>testin云测</li><li>STF实验室平台</li></ul><h4 id="压力稳定性测试"><a href="#压力稳定性测试" class="headerlink" title="压力稳定性测试"></a>压力稳定性测试</h4><ul><li>Monkey</li></ul><h4 id="弱网测试"><a href="#弱网测试" class="headerlink" title="弱网测试"></a>弱网测试</h4><ul><li>fiddler代理</li><li>network Emulator toolkit</li><li>Facebook ATC</li></ul><h4 id="安全测试"><a href="#安全测试" class="headerlink" title="安全测试"></a>安全测试</h4><ul><li>BurpSuite</li><li>ApkTool/Dex2Jar/JD-GUI反编译</li><li>安装包签名</li><li>账户安全</li></ul><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><ul><li>proc文件-Jiffies</li><li>GT/soloPi</li></ul><h4 id="电量测试"><a href="#电量测试" class="headerlink" title="电量测试"></a>电量测试</h4><ul><li>腾讯GT</li><li>battery historian</li></ul><h4 id="流量测试"><a href="#流量测试" class="headerlink" title="流量测试"></a>流量测试</h4><ul><li>proc文件</li><li>腾讯GT</li></ul><h4 id="启动时间"><a href="#启动时间" class="headerlink" title="启动时间"></a>启动时间</h4><ul><li>adb shell am start</li><li>soloPi插件</li></ul><h4 id="流畅度专项"><a href="#流畅度专项" class="headerlink" title="流畅度专项"></a>流畅度专项</h4><ul><li>卡顿root cause</li><li>FPS/SM</li><li>GPU呈现模式/GT</li><li>卡顿分析</li></ul><blockquote><ul><li>页面多度绘制</li><li>TraceView/StrictMode</li><li>频繁GC</li></ul></blockquote><h4 id="内存专项"><a href="#内存专项" class="headerlink" title="内存专项"></a>内存专项</h4><ul><li>内存泄露/溢出</li><li>内存占用</li><li>LMK</li><li>leakcanary</li></ul><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9vdjlvyboj31nq0u0qco.jpg" alt="专项测试"></p><h2 id="兼容性测试-1"><a href="#兼容性测试-1" class="headerlink" title="兼容性测试"></a>兼容性测试</h2><p>由于移动端的碎片化特征，需要确保App产品能够在不同系统版本，不同屏幕分辨率，不同系统定制ROM也能够有好的用户体验</p><ul><li>系统版本兼容</li></ul><blockquote><p>Android: </p></blockquote><ul><li><p>2.2 2.3 milestone</p></li><li><p>4.0 4.1 4.2 4.4</p></li><li><p>5.0 5.1</p></li><li><p>6.0 6.1</p></li><li><p>7.0 7.1</p></li><li><p>8.0 8.1</p></li><li><p>9</p></li></ul><blockquote><p>IOS:</p></blockquote><ul><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li></ul><hr><ul><li>系统定制ROM兼容(Android)</li></ul><p>小米MIUI</p><p>华为EMUI</p><p>魅族flyme</p><hr><ul><li>屏幕分辨率兼容</li></ul><hr><p><code>APP流量数据</code><a href="https://tongji.baidu.com/research/app">https://tongji.baidu.com/research/app</a></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9vdqwab0dj31b30u01kx.jpg" alt="APP流量数据"></p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ul><li>云测平台</li><li>自建STF平台:<a href="http://www.lemfix.com/topics/341">http://www.lemfix.com/topics/341</a></li></ul><h2 id="压力稳定性测试-1"><a href="#压力稳定性测试-1" class="headerlink" title="压力稳定性测试"></a>压力稳定性测试</h2><p>App长时间在前/后台运行，用户对于App的稳定性有更高的要求。</p><p>通过稳定性测试来避免奔溃(crash)/无响应(ANR)/内存泄露等问题。</p><ul><li>Monkey <strong>支持Android</strong></li></ul><p>优点：</p><blockquote><p>Google原生工具，使用简单，开源</p></blockquote><p>缺点:</p><blockquote><p>基于坐标,遍历深度不够,无详细报告</p></blockquote><hr><ul><li>Maxim <strong>支持Android</strong></li></ul><p>优点:</p><blockquote><p>基于uiautomator引擎实现，多种模式运行</p></blockquote><p>缺点:</p><blockquote><p>不开源，无法定制</p></blockquote><hr><ul><li>FastMonkey <strong>支持IOS</strong></li></ul><p>优点:</p><blockquote><p>基于XCTestWD，swiftmonkey二次开发，无需插桩 效率高</p></blockquote><p>缺点:</p><blockquote><p>配置复杂</p></blockquote><hr><h2 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h2><ul><li>安装</li></ul><p><a href="https://www.douban.com/note/701408420/">https://www.douban.com/note/701408420/</a></p><ul><li>查看版本</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb version</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9vgwz1xkzj313a04ut9t.jpg" alt="查看版本"></p><ul><li>查看设备连接情况</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb devices</span></span><br></pre></td></tr></tbody></table></figure><p>使用「夜神模拟器」</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9vh2j9i86j318205yjsq.jpg" alt="连接模拟器"></p><ul><li>杀死/重启adb服务</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb kill-server</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb start-server</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看当前运行的包名<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell dumpsys activity | find <span class="string">"mFocusedActivity"</span></span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>dumpsys:解析信息</p><p>activity:页面名字</p><h3 id="monkey"><a href="#monkey" class="headerlink" title="monkey"></a>monkey</h3><p>乱点1000次</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell monkey 1000</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9vh62oiegj30ya0u0x27.jpg" alt="乱点1000次"></p><p><code>-p</code>用于约束限制,用此参数指定一个或多个包(App名字)</p><p>指定包之后，Monkey将只允许系统启动指定的App，如果不指定则允许启动设备中的所有APP</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell monkey -p com.lemon.lemonban 1000</span></span><br></pre></td></tr></tbody></table></figure><p><code>-s</code>用于指定伪随机数生成器的seed值</p><p>如果seed相同，则两次Monkey测试所产生的事件序列也相同</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提前指定，第一次Monkey测试出了bug</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb shell monkey -p com.lemon.lemonban -s 101 1000</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二次测试的流程和第一次一样就可以保证复现</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb shell monkey -p com.lemon.lemonban -s 101 1000</span></span><br></pre></td></tr></tbody></table></figure><p><code>-v</code>日志级别</p><ul><li><code>-v</code></li></ul><p>默认值，仅提供启动提示，测试完成，最终结果</p><ul><li><code>-v -v</code></li></ul><p>提供较为详细的日志，包括每个发送到Activity的事件信息</p><ul><li><code>-v -v -v</code></li></ul><p>最详细的日志，包括了测试中选中/未选中的Activity信息</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell monkey -p com.lemon.lemonban -v -v 1000</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> adb shell monkey -p com.lemon.lemonban -v -v -v 1000</span> </span><br></pre></td></tr></tbody></table></figure><p><code>--throttle &lt;毫秒&gt;</code></p><p>指定用户操作间的时延</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell monkey -p com.lemon.lemonban --throttle 3000 1000</span></span><br></pre></td></tr></tbody></table></figure><p><code>--randomize-throttle</code></p><p>指定随机延时，单位毫秒</p><p>执行1000次随机事件，间隔在0～300毫秒之间</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell monkey -p com.lemon.lemonban --throttle 300 --randomize-throttle  1000</span></span><br></pre></td></tr></tbody></table></figure><ul><li>杀死monky</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入shell</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> shell</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -9 &lt;monky-pid&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="事件百分比"><a href="#事件百分比" class="headerlink" title="事件百分比"></a>事件百分比</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9vfu9163pj30xc0mzdho.jpg" alt="事件百分比"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell monkey -p com.lemon.lemonban --pct-touch 100 1000</span></span><br></pre></td></tr></tbody></table></figure><p>设置全部（100%）为点击事件执行1000次</p><h2 id="弱网测试-1"><a href="#弱网测试-1" class="headerlink" title="弱网测试"></a>弱网测试</h2><p>现在APP网络环境复杂，如果APP没有对网络异常进行兼容处理，那么用户可能在日常使用中遇到APP闪退，ANR（程序无响应），数据丢失等问题</p><p>低于2G速度属于弱网，3G也可以划分为弱网，一般WIFI不划入弱网测试范畴</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9vg4se4oij30xg0dk769.jpg" alt="弱网定义"></p><p>工具：</p><ul><li>fiddler/charles</li></ul><p>代理限速，设置延时</p><blockquote><p>按照Charles抓取手机报文的方式<strong>设置代理</strong></p></blockquote><ul><li>Network Emulator Toolkit</li></ul><p>网卡限速，设置丢包和延时</p><ul><li>facebook ATC</li></ul><p>Linux 工具，需要部署环境，后续设备接入热点即可</p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四十五)</title>
      <link href="article/94dbef35.html"/>
      <url>article/94dbef35.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四十五"><a href="#测试开发进阶-四十五" class="headerlink" title="测试开发进阶(四十五)"></a>测试开发进阶(四十五)</h1><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="删除无用的网络"><a href="#删除无用的网络" class="headerlink" title="删除无用的网络"></a>删除无用的网络</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker network prune</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除无用的数据卷"><a href="#删除无用的数据卷" class="headerlink" title="删除无用的数据卷"></a>删除无用的数据卷</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume prune</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h3><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定版本信息</span></span><br><span class="line">version: <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定服务(启动容器)</span></span><br><span class="line">services: </span><br><span class="line">    <span class="comment"># 服务名:项目根目录小写_指定的服务名_服务个数的序号</span></span><br><span class="line">    <span class="comment"># deploydjango_db_1</span></span><br><span class="line">    db:</span><br><span class="line">      <span class="comment"># 指定镜像的名称</span></span><br><span class="line">      image: mariadb</span><br><span class="line">      <span class="comment"># 覆盖默认的CMO,指定运行容器时(docker run)需要运行的命令或者参数</span></span><br><span class="line">      command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line">      volumes: </span><br><span class="line">        - mysql_db:/var/lib/mysql</span><br><span class="line">      <span class="comment"># 指定容器重启的策略</span></span><br><span class="line">      restart: always</span><br><span class="line">      <span class="comment"># 指定环境变量</span></span><br><span class="line">      environment: </span><br><span class="line">        MYSQL_ROOT_PASSWORD: pythonvip</span><br><span class="line">        MYSQL_DATABASE: test</span><br><span class="line"></span><br><span class="line">    django_app:</span><br><span class="line">      <span class="comment"># 指定容器的启动依赖</span></span><br><span class="line">      <span class="comment"># 只有当db容器启动后,再启动 django_app容器</span></span><br><span class="line">      depends_on: </span><br><span class="line">          - db</span><br><span class="line">      <span class="comment"># 指定Dockerfile所在的路径</span></span><br><span class="line">      build: ./django_app_docker</span><br><span class="line">        <span class="comment"># 指定构建的镜像名</span></span><br><span class="line">      image: keyou1/django_app</span><br><span class="line">      restart: always</span><br><span class="line">      volumes: </span><br><span class="line">        - logs:/usr/src/app/logs</span><br><span class="line">        - django_code:/usr/src/app/LearnDjango/</span><br><span class="line">    web:</span><br><span class="line">      depends_on: </span><br><span class="line">        - django_app</span><br><span class="line">      build: ./nginx_docker</span><br><span class="line">      image: keyou1/lemon-test-nginx</span><br><span class="line">      restart: always</span><br><span class="line">      <span class="comment"># 端口映射</span></span><br><span class="line">      ports: </span><br><span class="line">        - <span class="string">"8866:80"</span></span><br><span class="line">        - <span class="string">"8000:8000"</span></span><br><span class="line">      volumes: </span><br><span class="line">        - logs:/var/log/nginx/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器使用的数据卷</span></span><br><span class="line">volumes: </span><br><span class="line">    <span class="comment"># deploydjango_mysql_db</span></span><br><span class="line">    <span class="comment"># 数据卷名为:项目根目录小写_指定的数据卷名</span></span><br><span class="line">    mysql_db:</span><br><span class="line">    django_code:</span><br><span class="line">    logs:</span><br></pre></td></tr></tbody></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在docker-compose.yml文件所在路径下</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up</span></span><br></pre></td></tr></tbody></table></figure><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>以之前完成的<code>ApiTest</code>项目为例：</p><ol><li>收集静态文件</li></ol><p>在<code>setting.py</code>文件中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 收集静态文件</span></span><br><span class="line"><span class="comment"># 1. 在项目根路径下创建xx文件夹</span></span><br><span class="line"><span class="comment"># 2. 执行收集命令 python manage.py collectstatic</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'front_ends/static'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9o0ahgvxoj30c205iq35.jpg" alt="收集静态文件"></p><ol start="2"><li>前端代码打包</li></ol><p><code>lemon-test/package.json</code></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9o0ckxekqj30zy0pstd4.jpg" alt="打包"></p><p>打包结果：</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9o0ddr3rdj30by0bwq3h.jpg" alt="打包"></p><p>将两者合并</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9o0hjoru8j30c60aqq3g.jpg" alt="合并"></p><ol start="3"><li>放置到nginx中</li></ol><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9o0oy3grwj30b00eq752.jpg" alt="nginx"></p><ol start="4"><li>运行项目Dockerfile并推送至Docker Hub</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> $ docker build ./ -t  apitest:last</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录docker hub</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker login</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker tag apitest:last zhongxin1111/apitest</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> docker push zhongxin1111/apitest</span></span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>运行<code>docker-compose.yml</code></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定版本信息</span></span><br><span class="line">version: <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定服务(启动容器)</span></span><br><span class="line">services: </span><br><span class="line">    <span class="comment"># 服务名:项目根目录小写_指定的服务名_服务个数的序号</span></span><br><span class="line">    <span class="comment"># deploydjango_db_1</span></span><br><span class="line">    db:</span><br><span class="line">      <span class="comment"># 指定镜像的名称</span></span><br><span class="line">      image: mariadb</span><br><span class="line">      <span class="comment"># 覆盖默认的CMO,指定运行容器时(docker run)需要运行的命令或者参数</span></span><br><span class="line">      command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line">      volumes: </span><br><span class="line">        - mysql_db:/var/lib/mysql</span><br><span class="line">      <span class="comment"># 指定容器重启的策略</span></span><br><span class="line">      restart: always</span><br><span class="line">      <span class="comment"># 指定环境变量</span></span><br><span class="line">      environment: </span><br><span class="line">        MYSQL_ROOT_PASSWORD: pythonvip</span><br><span class="line">        MYSQL_DATABASE: test</span><br><span class="line"></span><br><span class="line">    django_app:</span><br><span class="line">      <span class="comment"># 指定容器的启动依赖</span></span><br><span class="line">      <span class="comment"># 只有当db容器启动后,再启动 django_app容器</span></span><br><span class="line">      depends_on: </span><br><span class="line">          - db</span><br><span class="line">      <span class="comment"># 指定Dockerfile所在的路径</span></span><br><span class="line">      build: ./django_app_docker</span><br><span class="line">        <span class="comment"># 指定构建的镜像名</span></span><br><span class="line">      image: zhongxin1111/apitest</span><br><span class="line">      restart: always</span><br><span class="line">      volumes: </span><br><span class="line">        - logs:/usr/src/app/logs</span><br><span class="line">        - django_code:/usr/src/app/LearnDjango/</span><br><span class="line">    web:</span><br><span class="line">      depends_on: </span><br><span class="line">        - django_app</span><br><span class="line">      build: ./nginx_docker</span><br><span class="line">      image: keyou1/lemon-test-nginx</span><br><span class="line">      restart: always</span><br><span class="line">      <span class="comment"># 端口映射</span></span><br><span class="line">      ports: </span><br><span class="line">        - <span class="string">"8866:80"</span></span><br><span class="line">        - <span class="string">"8000:8000"</span></span><br><span class="line">      volumes: </span><br><span class="line">        - logs:/var/log/nginx/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器使用的数据卷</span></span><br><span class="line">volumes: </span><br><span class="line">    <span class="comment"># deploydjango_mysql_db</span></span><br><span class="line">    <span class="comment"># 数据卷名为:项目根目录小写_指定的数据卷名</span></span><br><span class="line">    mysql_db:</span><br><span class="line">    django_code:</span><br><span class="line">    logs:</span><br></pre></td></tr></tbody></table></figure><p>具体代码见：</p><p><a href="https://github.com/zx490336534/ApiTest/tree/master/DeployApiTest">https://github.com/zx490336534/ApiTest/tree/master/DeployApiTest</a></p><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><ul><li>集群</li><li>大型应用</li><li>高性能 高效率 高可用</li><li>无中心设计</li><li>横向 纵向伸缩</li><li>多主机网络</li><li>服务发现</li><li>负载均衡</li><li>回滚更新</li></ul><h3 id="Swarm-manager"><a href="#Swarm-manager" class="headerlink" title="Swarm manager"></a>Swarm manager</h3><ul><li>切换 加入 移除 维护 节点</li><li>最小的集群至少需要5个节点</li></ul><h3 id="Swarm-work"><a href="#Swarm-work" class="headerlink" title="Swarm work"></a>Swarm work</h3><ul><li>运行任务的节点</li><li>托管容器任务</li></ul><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><ul><li>初始化</li><li>docker swarm</li></ul><p>由于没有环境，所以不再深入</p><p>见：<a href="https://docs.docker.com/swarm/">https://docs.docker.com/swarm/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四十四)</title>
      <link href="article/9270b848.html"/>
      <url>article/9270b848.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四十四"><a href="#测试开发进阶-四十四" class="headerlink" title="测试开发进阶(四十四)"></a>测试开发进阶(四十四)</h1><p>运行一个页面</p><p><strong>index.html</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p><strong>运行nginx</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name my_web -d -v <span class="variable">$PWD</span>/index.html:/usr/share/nginx/html/index.html -p 6688:80 nginx:alpine</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9m9osikmuj30hw0a0aas.jpg" alt="index"></p><p><strong>查看Docker网络信息</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect my_web</span></span><br><span class="line"></span><br><span class="line">"Networks": {</span><br><span class="line">    "bridge": {</span><br><span class="line">        "IPAMConfig": null,</span><br><span class="line">        "Links": null,</span><br><span class="line">        "Aliases": null,</span><br><span class="line">        "NetworkID": "df9d31e0e839edd40d10b32b0459fc178efc4a7d22ee9d06090e7c47dd135bfc",</span><br><span class="line">        "EndpointID": "c905dc6442971d9e6a2b36581f7081b0bf976aec477fe01dd0596cbed7647de0",</span><br><span class="line">        "Gateway": "172.17.0.1",</span><br><span class="line">        "IPAddress": "172.17.0.2",</span><br><span class="line">        "IPPrefixLen": 16,</span><br><span class="line">        "IPv6Gateway": "",</span><br><span class="line">        "GlobalIPv6Address": "",</span><br><span class="line">        "GlobalIPv6PrefixLen": 0,</span><br><span class="line">        "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">        "DriverOpts": null</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it my_web ip a</span></span><br><span class="line"></span><br><span class="line">inet 127.0.0.1/8 scope host lo</span><br><span class="line">inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9m9sy02fuj31ec0kgdnk.jpg" alt="网络情况"></p><h2 id="network"><a href="#network" class="headerlink" title="network"></a>network</h2><h3 id="docker0"><a href="#docker0" class="headerlink" title="docker0"></a>docker0</h3><p>默认容器与宿主机之间沟通的桥梁</p><h3 id="网络类型"><a href="#网络类型" class="headerlink" title="网络类型"></a>网络类型</h3><ul><li>bridge(默认)</li></ul><p>nat网络模型,虚拟路由器</p><ul><li>host</li></ul><p>与宿主机共享网络<code>--net=host</code></p><ul><li>none</li></ul><p>不配置网络<code>--net=none</code></p><ul><li>overlay</li></ul><p>不同网络进行通信</p><p>与一同容器共享网络<code>--net=container:容器名</code></p><h3 id="查看docker网络列表"><a href="#查看docker网络列表" class="headerlink" title="查看docker网络列表"></a>查看docker网络列表</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker network ls</span></span><br><span class="line"></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">df9d31e0e839        bridge              bridge              local</span><br><span class="line">b58ef02d2c13        host                host                local</span><br><span class="line">544544bfb357        none                null                local</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ma80yhzrj3158080gpq.jpg" alt="网络列表"></p><h4 id="创建一个网络"><a href="#创建一个网络" class="headerlink" title="创建一个网络"></a>创建一个网络</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker network create my_net</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ma9ud4tsj315208uwgx.jpg" alt="创建一个网络"></p><p>在该网络下创建两个容器</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name my_web1 --network my_net -d -v <span class="variable">$PWD</span>/index.html:/usr/share/nginx/html/index.html -p 6689:80 nginx:alpine</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name my_web2 --network my_net -d -v <span class="variable">$PWD</span>/index.html:/usr/share/nginx/html/index.html -p 6690:80 nginx:alpine</span></span><br></pre></td></tr></tbody></table></figure><p>查看当前创建的网络</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker network inspect my_net</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9madvkln3j31f00iyq8x.jpg" alt="当前创建的网络"></p><p>可以发现</p><ul><li><p><code>my_web1</code>的网络地址为<code>172.18.0.2/16</code></p></li><li><p><code>my_web2</code>的网络地址为<code>172.18.0.3/16</code></p></li></ul><p>测试一下两者是否相通</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it my_web1 ping -c2 172.18.0.3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it my_web2 ping -c2 172.18.0.2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 还可以通过容器名访问</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it my_web2 ping -c2 my_web1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it my_web1 ping -c2 my_web2</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9maft1iooj31g20k8dlv.jpg" alt="网络通信"></p><h3 id="使用host"><a href="#使用host" class="headerlink" title="使用host"></a>使用host</h3><p>与宿主机网络完全一致</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name my_web3 --network host -d -v <span class="variable">$PWD</span>/index.html:/usr/share/nginx/html/index.html -p 6689:80 nginx:alpine</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it my_web3 ip a</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9majepug5j30zy0u0x0p.jpg" alt="查看网络"></p><h3 id="使用none"><a href="#使用none" class="headerlink" title="使用none"></a>使用none</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name my_web4 --network none -d -v <span class="variable">$PWD</span>/index.html:/usr/share/nginx/html/index.html -p 6689:80 nginx:alpine</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it my_web4 ip a</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9makhs2vkj31lq0d0djt.jpg" alt="none"></p><h3 id="批量删除my-web"><a href="#批量删除my-web" class="headerlink" title="批量删除my_web"></a>批量删除my_web</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f $(docker ps|awk <span class="string">'/my_web/ {print $1}'</span>)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="批量删除Exited的内容"><a href="#批量删除Exited的内容" class="headerlink" title="批量删除Exited的内容"></a>批量删除Exited的内容</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f $(docker ps -a|awk <span class="string">'/Exited/ {print $1}'</span>)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h2><ul><li>使用数据卷实现数据持久化</li><li>数据备份/数据共享</li></ul><h3 id="搭建一个个人博客"><a href="#搭建一个个人博客" class="headerlink" title="搭建一个个人博客"></a>搭建一个个人博客</h3><p>运行mysql</p><p><code>-e</code>环境变量</p><p><code>-d</code>后台执行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mydb --network my_net -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span></span><br></pre></td></tr></tbody></table></figure><p>运行wordpress</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name myblog --network my_net -d -e WORDPRESS_DB_HOST=mydb -e WORDPRESS_DB_PASSWORD=123456 -p 6688:80 wordpress</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9mb0cnwvqj31b30u07n1.jpg" alt="个人博客"></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9mb1b8lxjj31b30u0au9.jpg" alt="个人博客1"></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9mb1yeafqj31b30u0h8q.jpg" alt="个人博客2"></p><h3 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume create myvol</span></span><br></pre></td></tr></tbody></table></figure><p><strong>与数据库映射</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mydb --network my_net -e MYSQL_ROOT_PASSWORD=123456 -d -v myvol:/var/lib/mysql mysql:5.7</span></span><br></pre></td></tr></tbody></table></figure><p>mysql产生的数据会自动同步到数据卷</p><p>这样删除<code>mydb</code>也可以恢复数据</p><h3 id="查看数据卷"><a href="#查看数据卷" class="headerlink" title="查看数据卷"></a>查看数据卷</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume inspect myvol</span></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "CreatedAt": "2019-12-05T16:24:37Z",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Labels": {},</span><br><span class="line">        "Mountpoint": "/var/lib/docker/volumes/myvol/_data",</span><br><span class="line">        "Name": "myvol",</span><br><span class="line">        "Options": {},</span><br><span class="line">        "Scope": "local"</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9mb7vgk2ej316q0fsjug.jpg" alt="查看数据卷"></p><p>使用管理员账号进入<code>/var/lib/docker/volumes/myvol/_data</code>可以查看存储的数据</p><h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume rm myvol</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p><strong>fun.py</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cowpy <span class="keyword">import</span> cow</span><br><span class="line"></span><br><span class="line">print(cow.milk_random_cow(<span class="string">"Hello,Everyone"</span>))</span><br></pre></td></tr></tbody></table></figure><p><strong>requirements.txt</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cowpy==1.1.0</span><br></pre></td></tr></tbody></table></figure><p><strong>Dockerfile</strong></p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"zhongxin &lt;490336534@qq.com&gt;"</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">"This is simple example."</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python"</span>,<span class="string">"fun.py"</span>]</span></span><br></pre></td></tr></tbody></table></figure><p>创建</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build ./ -t animal</span></span><br></pre></td></tr></tbody></table></figure><p>使用</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name animal --rm animal</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9mbrkhmxtj316y0u0thm.jpg" alt="运行"></p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p>使用<code>FROM</code>来指定base image镜像(在base image的基础上来操作)，放在首行</p></li><li><p><code>LABEL</code>指明作者，不执行的指令</p></li><li><p><code>WORKDIR</code>相当于<code>cd</code>命令，如果进入的目录不存在，会创建</p></li><li><p><code>COPY</code>相当于<code>cp</code>命令，宿主机中的内容「前」 复制到 容器中「后」</p></li><li><p><code>./</code>为当前目录<code>WORKDIR</code></p></li><li><p><code>ADD</code>和<code>COPY</code>命令类似，他会将一个压缩文件解压后，复制到容器中</p></li><li><p><code>RUN</code>在容器中执行linux命令需要使用RUN</p></li><li><p>可以执行多个<code>RUN</code></p></li><li><p><code>COPY . .</code>把相对于Dockerfile文件所在路径的所有文件拷贝到容器的当前目录</p></li><li><p><code>CMD</code>当镜像运行的时候会默认执行的命令</p></li></ul><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>在已存在的image顶层执行命令，创建一个新的layer层</p><p>往往将需要安装的依赖，使用一个RUN来创建。多个命令可以用<code>&amp;&amp;</code>来拼接</p><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>在容器内创建环境变量</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> username=zhongxin \</span><br><span class="line">password=<span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p><code>VOLUME</code>命令指定的目录「容器中」才能被映射</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>将容器中的端口暴露出来</p><h4 id="ENTRYPOINT-和-CMD"><a href="#ENTRYPOINT-和-CMD" class="headerlink" title="ENTRYPOINT 和 CMD"></a>ENTRYPOINT 和 CMD</h4><p><strong>不同点</strong></p><p>CMD</p><ul><li>运行容器时，不加任何参数，会自动执行CMD，如果添加参数会忽略CMD</li><li>有多个CMD，则只有最后一个会执行，其他都被忽略</li><li>可以给ENTRYPOINT传参</li></ul><blockquote><p>CMD[“p1”,”p2”]</p><p>如果ENTRYPOINT使用shell格式，CMO会被忽略</p><p>如果ENTRYPOINT使用exec格式，CMO会和它进行组合</p></blockquote><p>ENTRYPOINT </p><ul><li>运行容器时，如果添加参数不会忽略ENTRYPOINT </li></ul><p><strong>相同点</strong></p><ul><li>只有1个CMD或者ENTRYPOINT时，没有区别</li><li>shell格式和exec格式</li></ul><blockquote><p>shell格式:ls /</p><p>exec格式:[“ls”,”/“]</p><p>一定要「双引号」</p></blockquote><p>CMD和ENTRYPOINT一起使用的时候，</p><ul><li>不入参为ENTRYPOINT+CMD</li><li>入参为为ENTRYPOINT+参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四十三)</title>
      <link href="article/68335747.html"/>
      <url>article/68335747.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四十三"><a href="#测试开发进阶-四十三" class="headerlink" title="测试开发进阶(四十三)"></a>测试开发进阶(四十三)</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p><a href="https://www.cnblogs.com/keyou1/p/11511067.html">史上最全Docker环境安装指南-让安装docker简单到爆</a>:<a href="https://www.cnblogs.com/keyou1/p/11511067.html">https://www.cnblogs.com/keyou1/p/11511067.html</a></p><h2 id="例子-使用Docker运行python程序"><a href="#例子-使用Docker运行python程序" class="headerlink" title="例子:使用Docker运行python程序"></a>例子:使用Docker运行python程序</h2><p>新建一个py文件</p><span id="more"></span><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"print('Hello Docker')"</span> &gt;&gt; test.py</span></span><br></pre></td></tr></tbody></table></figure><p>运行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --name mypy --rm -v <span class="variable">$PWD</span>:/app -w /app python:alpine python test.py</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jzdmt2rdj31f80pa0z3.jpg" alt="运行"></p><h2 id="镜像-amp-容器"><a href="#镜像-amp-容器" class="headerlink" title="镜像&amp;容器"></a>镜像&amp;容器</h2><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><ul><li>Docker Hub查找现有镜像</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker search xxx</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jyjt2488j31ba0u04mk.jpg" alt="查找"></p><ul><li>查看本地镜像</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image ls</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jzflpa4zj31bi0u01kx.jpg" alt="查看本地镜像"></p><ul><li>查看<code>IMAGE ID</code></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images -q</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看镜像<code>具体信息</code></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect python</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image inspect python</span></span><br></pre></td></tr></tbody></table></figure><ul><li>删除镜像</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi xxx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image rm xxx</span></span><br></pre></td></tr></tbody></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul><li>查看正在运行的容器</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jzpgxqu4j31j40k6tgf.jpg" alt="ps其他操作"></p><ul><li>查看全部容器</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a</span></span><br></pre></td></tr></tbody></table></figure><ul><li>停止容器</li><li>重启容器</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop xxx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker restart xxx</span></span><br></pre></td></tr></tbody></table></figure><ul><li>暂停容器</li><li>恢复容器</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pause xxx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker unpause xxx</span></span><br></pre></td></tr></tbody></table></figure><ul><li>列出容器上运行的所有历史命令</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">history</span> xxx</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看容器的进程和资源利用</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top xxx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stats xxx</span></span><br></pre></td></tr></tbody></table></figure><ul><li>删除容器</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm xxx</span></span><br></pre></td></tr></tbody></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>几个重要的命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --<span class="built_in">help</span>| grep -E <span class="string">'\-i,|\-t,|\-d,|\-v,|\-p,|\-P,|\-\-name'</span></span></span><br><span class="line">  -d, --detach                         Run container in background and print container ID</span><br><span class="line">  -i, --interactive                    Keep STDIN open even if not attached</span><br><span class="line">      --name string                    Assign a name to the container</span><br><span class="line">  -p, --publish list                   Publish a container's port(s) to the host</span><br><span class="line">  -P, --publish-all                    Publish all exposed ports to random ports</span><br><span class="line">  -t, --tty                            Allocate a pseudo-TTY</span><br><span class="line">  -v, --volume list                    Bind mount a volume</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9k034sxu7j31rq0c4tg0.jpg" alt="常用命令"></p><p><code>-i</code>与容器交互</p><p><code>-t</code>开启终端</p><p>一般<code>-i</code>和<code>-t</code>需要一起使用</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it centos /bin/bash</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9k08a22vyj318w0nkk09.jpg" alt="进入容器"></p><p><code>--name</code>给容器命名</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name 666 -it centos</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9k09jx0t9j324609a7cc.jpg" alt="命名"></p><p><code>-d</code>在后台运行</p><ul><li>进入正在运行的容器</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it 666 /bin/bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it 666 /bin/sh</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四十二)</title>
      <link href="article/16c0776c.html"/>
      <url>article/16c0776c.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四十二"><a href="#测试开发进阶-四十二" class="headerlink" title="测试开发进阶(四十二)"></a>测试开发进阶(四十二)</h1><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><blockquote><p>文本处理工具，处理数据并生成结果报告</p></blockquote><ul><li><code>awk ‘BEGIN{}pattern{commands}END{}’ file</code></li><li><code>some command | awk ‘BEGIN{}pattern{commands}END{}’</code></li></ul><p><strong>BEGIN</strong>处理数据之前执行</p><p><strong>pattern</strong>匹配模式</p><p><strong>commands</strong>处理的命令</p><p><strong>END</strong>处理数据之后执行</p><span id="more"></span><h3 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h3><ul><li><code>$0</code>整行内容</li><li><code>$1~$n</code>当前行的第1～n个字段</li><li><code>NF</code>当前行字段数</li><li><code>NR</code>当前行号，从1开始</li><li><code>FS</code>输入字段分割符，默认为空格或tab键</li><li><code>RS</code>输入行分割符，默认为回车符</li><li><code>OFS</code>输入字段分割符，默认为空格</li><li><code>ORS</code>输入行分割符，默认为回车符</li></ul><hr><p><strong>输出以<code>:</code>分割的最后一列内容</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'BEGIN{FS=":"} {print $NF}'</span> passwd</span></span><br></pre></td></tr></tbody></table></figure><p><strong>输出以<code>:</code>分割的<code>games</code>开头的行到<code>new</code>开头的行的最后一列内容</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'BEGIN{FS=":"}/^games/,/^new/{print $NF}'</span> passwd</span></span><br></pre></td></tr></tbody></table></figure><h3 id="printf格式符"><a href="#printf格式符" class="headerlink" title="printf格式符"></a>printf格式符</h3><ul><li><code>%s</code>字符串</li><li><code>%d</code>十进制数字</li><li><code>%f</code>浮点数</li><li><code>+</code>右对齐</li><li><code>-</code>左对齐</li></ul><hr><p>以<code>%s\n</code>的格式输出</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'BEGIN{FS=":"}/^games/,/^new/{printf "%s\n" , $1}'</span> passwd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'BEGIN{FS=":"}/^games/,/^new/{printf "%20s\n" , $1}'</span> passwd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'BEGIN{FS=":"}/^games/,/^new/{printf "%20s  %s\n" , $1,$NF}'</span> passwd</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h79saz30j314i0e4tar.jpg" alt="awk1"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'BEGIN{FS=":"}/^games/,/^new/{printf "%-20s\t%-20s\n" , $1,$NF}'</span> passwd</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h7b67buaj315w05ojsb.jpg" alt="awk2"></p><p><strong>格式化输出以s开头的行好和第一列内容</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'BEGIN{FS=":"}/^s/{printf "%d\t%-10s\n" , NR,$1}'</span> passwd</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h7eet3k8j30zy07a0tn.jpg" alt="awk3"></p><p><strong>格式化输出第三例大于100的内容</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -F <span class="string">":"</span> <span class="string">'$3 &gt; 100 {printf "%-10s\t%-10s\n",$1,$(NF-1)}'</span> passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h7n26eg7j312m0cwjta.jpg" alt="awk4"></p><p><strong>添加头部和尾部</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -F <span class="string">":"</span> <span class="string">'BEGIN{printf "%-10s\t%-10s\n","username","path"}$3 &gt; 100 {COUNT++;printf "%-10s\t%-10s\n",$1,$(NF-1)}END{printf "%-10s\t%-10s\n","totally",COUNT}'</span> passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h7sgygswj30f60e2400.jpg" alt="awk5"></p><h3 id="使用文件"><a href="#使用文件" class="headerlink" title="使用文件"></a>使用文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> awk1.awk</span></span><br><span class="line">BEGIN{</span><br><span class="line">    printf "%-20s\t%-20s\n","UserName","Path"</span><br><span class="line">}</span><br><span class="line">{</span><br><span class="line">    if ($3 &gt; 100){</span><br><span class="line">        COUNT++</span><br><span class="line">        printf "%-20s\t%-20s\n",$1,$(NF-1)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">END{</span><br><span class="line">    printf "%-20s\t%-20s\n","Totally",COUNT</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -F <span class="string">':'</span> -f awk1.awk  passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h7zmwl13j30pa0e8409.jpg" alt="awk6"></p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h88qqxn7j31tw0u0tw4.jpg" alt="日志文件"></p><h3 id="获取每个测试人员执行的用例数"><a href="#获取每个测试人员执行的用例数" class="headerlink" title="获取每个测试人员执行的用例数"></a>获取每个测试人员执行的用例数</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BEGIN{</span><br><span class="line">    printf "%-10s%-10s\n","Tester","TotalTestcases"</span><br><span class="line">}</span><br><span class="line">{</span><br><span class="line">    USERS[$4] += 1</span><br><span class="line">}</span><br><span class="line">END{</span><br><span class="line">    for (u in USERS){</span><br><span class="line">        printf "%-10s%-10s\n",u,USERS[u]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -f 1201.awk testcases.log</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h89guc1zj30ns068gm9.jpg" alt="文件处理1"></p><h3 id="统计每位测试人员执行用例成功和失败的总数"><a href="#统计每位测试人员执行用例成功和失败的总数" class="headerlink" title="统计每位测试人员执行用例成功和失败的总数"></a>统计每位测试人员执行用例成功和失败的总数</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BEGIN{</span><br><span class="line">    printf "%-10s%-12s%-12s\n","Tester","PassTotal","FailTotal"</span><br><span class="line">}</span><br><span class="line">{   </span><br><span class="line">    if ($5 == "Pass"){</span><br><span class="line">        SUCCESS[$4] += 1</span><br><span class="line">    }</span><br><span class="line">    else if($5 == "Fail"){</span><br><span class="line">        FAIL[$4] += 2</span><br><span class="line">    }</span><br><span class="line">    USERS[$4] += 1</span><br><span class="line">}</span><br><span class="line">END{</span><br><span class="line">    for (u in USERS){</span><br><span class="line">        printf "%-10s%-12s%-12s\n",u,SUCCESS[u],FAIL[u]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -f 1201_2.awk testcases.log</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h8ho7aksj30oy06imxy.jpg" alt="文件处理2"></p><h3 id="同时分别统计每位测试人员执行用例CRITICAL、ERROR日志等级数以及所有测试人员每项总数"><a href="#同时分别统计每位测试人员执行用例CRITICAL、ERROR日志等级数以及所有测试人员每项总数" class="headerlink" title="同时分别统计每位测试人员执行用例CRITICAL、ERROR日志等级数以及所有测试人员每项总数"></a>同时分别统计每位测试人员执行用例CRITICAL、ERROR日志等级数以及所有测试人员每项总数</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">BEGIN{</span><br><span class="line">    printf "%-10s%-12s%-12s%-12s%-12s\n","Tester","PassTotal","FailTotal","CRITICALATotal","ERRORTotal"</span><br><span class="line">}</span><br><span class="line">{   </span><br><span class="line">    if ($5 == "Pass"){</span><br><span class="line">        SUCCESS[$4] += 1</span><br><span class="line">        s += 1</span><br><span class="line">    }</span><br><span class="line">    else if($5 == "Fail"){</span><br><span class="line">        FAIL[$4] += 1</span><br><span class="line">        f += 1</span><br><span class="line">    }</span><br><span class="line">    if($3 == "CRITICAL"){</span><br><span class="line">        CRITICAL[$4] += 1</span><br><span class="line">        c += 1</span><br><span class="line">    }</span><br><span class="line">    else if($3 == "ERROR"){</span><br><span class="line">        ERROR[$4] += 1</span><br><span class="line">        e += 1</span><br><span class="line">    }</span><br><span class="line">    USERS[$4] += 1</span><br><span class="line">}</span><br><span class="line">END{</span><br><span class="line">    for (u in USERS){</span><br><span class="line">        printf "%-10s%-12s%-12s%-12s%-12s\n",u,SUCCESS[u],FAIL[u],CRITICAL[u],ERROR[u]</span><br><span class="line">    }</span><br><span class="line">    printf "%-10s%-12s%-12s%-12s%-12s\n","Total",s,f,c,e</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9h8zounn1j30p007cgmp.jpg" alt="文件处理3"></p><h3 id="使用shell脚本来实现，并显示菜单，选择不同的选项则打印不同的内容"><a href="#使用shell脚本来实现，并显示菜单，选择不同的选项则打印不同的内容" class="headerlink" title="使用shell脚本来实现，并显示菜单，选择不同的选项则打印不同的内容"></a>使用shell脚本来实现，并显示菜单，选择不同的选项则打印不同的内容</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhongxin</span></span><br><span class="line">echo "one:统计每位测试人员执行用例的总数"</span><br><span class="line">echo "two:分别统计每位测试人员执行用例成功和失败的总数"</span><br><span class="line">echo "three:同时分别统计每位测试人员执行用例CRITICAL、ERROR日志等级数以及所有测试人员每项总数"</span><br><span class="line">read -p "请输入选择的模式:" modes</span><br><span class="line">echo ${modes}</span><br><span class="line">case ${modes} in</span><br><span class="line">    one)</span><br><span class="line">    awk -f ./1201.awk testcases.log</span><br><span class="line">    ;;</span><br><span class="line">    two)</span><br><span class="line">    awk -f ./1201_2.awk testcases.log</span><br><span class="line">    ;;</span><br><span class="line">    three)</span><br><span class="line">    awk -f ./1201_3.awk testcases.log</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">    echo "请输入正确的模式"</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四十一)</title>
      <link href="article/b9f1ec0e.html"/>
      <url>article/b9f1ec0e.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四十一"><a href="#测试开发进阶-四十一" class="headerlink" title="测试开发进阶(四十一)"></a>测试开发进阶(四十一)</h1><h2 id="校验Shell格式"><a href="#校验Shell格式" class="headerlink" title="校验Shell格式"></a>校验Shell格式</h2><p><a href="https://www.shellcheck.net/">https://www.shellcheck.net/</a></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e4yt9j2zj31910u043p.jpg" alt="shellcheck"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><blockquote><p>只要满足条件，就一直循环</p></blockquote><span id="more"></span><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while 条件</span><br><span class="line">do</span><br><span class="line">执行语句</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhongxin</span></span><br><span class="line"></span><br><span class="line">a=1</span><br><span class="line">while [ ${a} -lt 5 ]</span><br><span class="line">do </span><br><span class="line">    echo ${a}</span><br><span class="line">    a=$((${a}+1))</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case 变量名 in</span><br><span class="line">值1)</span><br><span class="line">指令1</span><br><span class="line">值2)</span><br><span class="line">指令2</span><br><span class="line">值3)</span><br><span class="line">指令3</span><br><span class="line">*)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 条件都不满足</span></span><br><span class="line">指令4</span><br><span class="line">esac</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhongxin</span></span><br><span class="line"></span><br><span class="line">case "$2" in</span><br><span class="line">    +)</span><br><span class="line">        echo "$1 + $3 = $(($1+$3))"</span><br><span class="line">        ;;</span><br><span class="line">    -)</span><br><span class="line">        echo "$1 - $3 = $(($1-$3))"</span><br><span class="line">        ;;</span><br><span class="line">    \*)</span><br><span class="line">        echo "$1 * $3 = $(($1*$3))"</span><br><span class="line">        ;;</span><br><span class="line">    /)</span><br><span class="line">        echo "$1 / $3 = $(($1/$3))"</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo "$2 不是合法的运算符"</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e58tsz9qj30oe0cotae.jpg" alt="case"></p><h2 id="文本处理三剑客"><a href="#文本处理三剑客" class="headerlink" title="文本处理三剑客"></a>文本处理三剑客</h2><ul><li>grep </li><li>sed</li><li>awk</li></ul><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ul><li><code>grep [option][pattern][file1,file2]</code></li><li><code>some command | grep [option][pattern]</code></li></ul><p><strong>常用选项</strong></p><p><code>-i</code>忽略大小写</p><p><code>-c</code>只输出匹配行的数量</p><p><code>-n</code>显示行号</p><p><code>-r</code>递归搜索</p><p><code>-E</code>支持拓展正则表达式</p><p><code>-w</code>匹配整个单词</p><p><code>-l</code>只列出匹配的文件名</p><p><code>-F</code>不支持正则，按字符串字面意思进行匹配</p><p>最基础用法</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep mail passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e5q2ssjfj30j602mdg2.jpg" alt="基础用法"></p><p>大小写不敏感</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep New passwd</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> grep New passwd -i</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e5qk3ot3j30k803kjrt.jpg" alt="大小写敏感"></p><p>匹配有多少行符合要求</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep New passwd -i -c</span></span><br><span class="line">1</span><br></pre></td></tr></tbody></table></figure><p>显示匹配的内容的行号</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep New passwd -i -n</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e5r5531sj30ng04eq3g.jpg" alt="行"></p><p>查找路径下的内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep -r <span class="string">"bash"</span> ./</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e5knjcotj30js08o75q.jpg" alt="递归检索">只输出文件名</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep -rl <span class="string">"bash"</span> ./</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e5lg6da9j30kc07m74x.jpg" alt="递归检索2"></p><p>正则匹配</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">"s{2}"</span> passwd -E</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e5rgplhjj30l603wwez.jpg" alt="正则匹配"></p><p>匹配整个单词</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">"oo"</span> passwd -w</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">"root"</span> passwd -w</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e5pcrn89j30l2030dg7.jpg" alt="-w"></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><code>/dev/null</code>相当于linux中的回收站</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">"<span class="variable">$USER</span>"</span> passwd  &gt; /dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$USER</span>是存在的"</span>|| <span class="built_in">echo</span> <span class="string">"<span class="variable">$USER</span>是不存在的"</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e5xybpm7j317a050wfh.jpg" alt="查找"></p><p>查看是否运行了docker</p><p><code>-v</code>：排除</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看ps中包含docker的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps -aux | grep docker</span> </span><br><span class="line">root     24521  0.0  0.0  14224  1088 pts/0    S+   23:21   0:00 grep --color=auto docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 排除grep</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps -aux | grep docker | grep -v grep</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看符合的个数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps -aux | grep docker | grep -v grep | wc -l</span></span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e60zivn5j310603g74x.jpg" alt="查找ps中"></p><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><ul><li>流编辑器,对文本进行逐行处理</li><li><code>sed [option] "pattern command" file</code></li><li><code>some command | sed [option] "pattern command"</code></li></ul><p>常用选项<code>[option]</code></p><p><code>-n</code>只打印模式匹配的行</p><p><code>-f</code>加载存放动作的文件</p><p><code>-r</code>支持拓展正则</p><p><code>-i</code>直接修改文件</p><p>匹配模式<code>pattern</code></p><p><code>5</code> 只处理第五行</p><p><code>5,10</code>只处理第五行到第十行</p><p><code>/pattern1/</code>只处理能匹配到pattern1的行</p><p><code>/pattern1/,/pattern2/</code>只处理从匹配到pattern1的行到匹配pattern2的行</p><p><code>command</code>命令</p><p>查询<code>p</code></p><p>新增</p><ul><li><code>a</code>在匹配行的后面新增</li><li><code>i</code>在匹配行前新增</li><li><code>r</code>外部文件读入,行后新增</li><li><code>w</code>匹配行写入外部文件</li></ul><p>删除<code>d</code></p><p>修改</p><ul><li><code>s/old/new</code>,只修改匹配行中第一个old</li><li><code>s/old/new/g</code>修改匹配行中所有的old</li><li><code>s/old/new/ig</code>忽略大小写</li></ul><hr><p><code>p</code>相当于print</p><p>匹配的行打印两次</p><p>原始行+匹配的行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">"p"</span> passwd</span></span><br></pre></td></tr></tbody></table></figure><p>只打印匹配的行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -n <span class="string">"p"</span> passwd</span></span><br></pre></td></tr></tbody></table></figure><p>匹配<code>mail</code>的那行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">"/mail/ p"</span> passwd -n</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e68o8tyej30mq02omxe.jpg" alt="image-20191128232924959"></p><p>匹配以s开头的内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -n <span class="string">"/^s/ p"</span> passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e6eut18zj30z007s0ui.jpg" alt="正则匹配"></p><p>匹配mail开头的行到s开头的行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -n <span class="string">"/^mail/,/^s/ p"</span> passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e6idvri2j30wq0aimze.jpg" alt="匹配"></p><p>在3，4，5行前面添加内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">'3,5 i Add content before the current line'</span> passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e7m09xbvj31380kuwj8.jpg" alt="添加内容"></p><p>正式写入需要加<code>-i</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">'3,5 i Add content before the current line'</span> passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e7musctsj315y0rudlc.jpg" alt="正式写入"></p><p>插入文件的内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"testfile"</span> &gt;&gt; a.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">'/man/,/mail/ r a.txt'</span> passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e7ppncvjj31720u079w.jpg" alt="插入文件内容"></p><p>匹配内容写入文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">'/man/,/mail/ w b.txt'</span> passwd</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e7qwmx8gj30rm06odgr.jpg" alt="写入文件"></p><p>删除内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">'/test/ d'</span> passwd</span> </span><br></pre></td></tr></tbody></table></figure><p>修改</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">'3,6 s/nologin/666/'</span> passwd |head</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9e7uslhglj30rc09edhg.jpg" alt="修改"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四十)</title>
      <link href="article/b294d54f.html"/>
      <url>article/b294d54f.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四十"><a href="#测试开发进阶-四十" class="headerlink" title="测试开发进阶(四十)"></a>测试开发进阶(四十)</h1><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $((<span class="number">10</span> + <span class="number">20</span>))</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 30</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> one=25</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> two=12</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $((one+two))</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 37</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9btmw3tu7j30tq076jt7.jpg" alt="1"></p><span id="more"></span><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $((one&gt;two))</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $((one&lt;two))</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 0</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9btnufcbaj30t204wq3t.jpg" alt="2"></p><h3 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $(expr <span class="variable">$one</span>+<span class="variable">$two</span>)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 25+12</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $(expr <span class="variable">$one</span> + <span class="variable">$two</span>)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 37</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9btp8qj2rj30ws04ywfn.jpg" alt="3"></p><p>比较大小需要转义</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $(expr <span class="variable">$one</span> \&gt; <span class="variable">$two</span>)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $(expr <span class="variable">$one</span> \&lt; <span class="variable">$two</span>)</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9btrpp1ztj30x804ugmn.jpg" alt="4"></p><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>条件成立，返回0</li><li>条件不成立，返回1</li></ul><h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3><ul><li><code>&amp;&amp;</code></li><li><code>｜｜</code></li></ul><h3 id="文件表达式"><a href="#文件表达式" class="headerlink" title="文件表达式"></a>文件表达式</h3><ul><li><code>-f</code>判断输入内容是非为一个文件</li><li><code>-d</code>判断输入内容是非为一个目录</li><li><code>-x</code>判断输入内容是非可执行</li><li><code>-e</code>判断文件是非存在</li></ul><h3 id="数值操作符"><a href="#数值操作符" class="headerlink" title="数值操作符"></a>数值操作符</h3><ul><li><code>-eq</code>相等</li><li><code>-gt</code>大于</li><li><code>-lt</code>小于</li><li><code>-ne</code>不等于</li></ul><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><ul><li><code>==</code></li><li><code>!=</code></li></ul><h3 id="进行判断"><a href="#进行判断" class="headerlink" title="进行判断"></a>进行判断</h3><p><code>test</code>和<code>[]</code>效果一致</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> [ 1 = 2 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"条件不成立"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> [ 1 = 2 ] || <span class="built_in">echo</span> <span class="string">"条件不成立"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">test</span> 1 = 2 &amp;&amp; <span class="built_in">echo</span> <span class="string">"条件不成立"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">test</span> 1 = 2 || <span class="built_in">echo</span> <span class="string">"条件不成立"</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9bty7dp7fj310604w40m.jpg" alt="5"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9btznv9szj310u03igmu.jpg" alt="6"></p><p>查看使用方法</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> man [ ]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> man <span class="built_in">test</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h2><h3 id="格式要求"><a href="#格式要求" class="headerlink" title="格式要求"></a>格式要求</h3><ul><li>在文件首行指定执行shell的程序</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9buc02o7zj30hi02ujri.jpg" alt="7"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhongxin</span> </span><br></pre></td></tr></tbody></table></figure><ul><li>后缀建议为<code>.sh</code></li><li>执行失败时,使用<code>exit</code>返回非零值，来退出程序</li><li>默认锁进4个空格</li></ul><h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一种方式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bash 1126.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二种方式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x 1126.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./1126.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三种方式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> 1126.sh</span></span><br></pre></td></tr></tbody></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释：<code>#</code></li><li>多行注释</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhongxin</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">要注释的内容</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">pwd</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9bukfgdtxj30io0560t3.jpg" alt="8"></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="格式一"><a href="#格式一" class="headerlink" title="格式一"></a>格式一</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">函数名()</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="格式二"><a href="#格式二" class="headerlink" title="格式二"></a>格式二</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">function 函数名</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhongxin</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">要注释的内容</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">hello()</span><br><span class="line">{</span><br><span class="line">    echo "Hello,Shell"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">function greet</span><br><span class="line">{</span><br><span class="line">    echo "Hello,zx"</span><br><span class="line">}</span><br><span class="line">greet</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9buqg8f3dj30i003k3yp.jpg" alt="9"></p><h4 id="入参"><a href="#入参" class="headerlink" title="入参"></a>入参</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function greet</span><br><span class="line">{</span><br><span class="line">    echo "Hello,$1"</span><br><span class="line">    echo "Hello,$2"</span><br><span class="line">    echo "Hello,$3"</span><br><span class="line">}</span><br><span class="line">greet 'a' 'b' 'c'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9burp7jw4j30hg04yjro.jpg" alt="10"></p><p>接收命令行传参</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greet $1 $2 $3</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9busz55f0j30km06qjrr.jpg" alt="11"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhongxin</span></span><br><span class="line"></span><br><span class="line">read -p "请输入你的姓名:" name</span><br><span class="line">read -p "请输入你的年龄:" age</span><br><span class="line">read -p "请输入你的爱好:" </span><br><span class="line">function info</span><br><span class="line">{</span><br><span class="line">    # -e 运行\n换行</span><br><span class="line">    echo -e "你的姓名为:${name}\n你的年龄为:${age}\n你的爱好为:${REPLY}"</span><br><span class="line">}</span><br><span class="line">info</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9buye4528j30m806wgmj.jpg" alt="12"></p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件1 ]</span><br><span class="line">then</span><br><span class="line">    指令1</span><br><span class="line">elif [ 条件2 ]</span><br><span class="line">then</span><br><span class="line">    指令2</span><br><span class="line">else</span><br><span class="line">    指令2</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p>例子：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhongxin</span></span><br><span class="line"></span><br><span class="line">read -p "输入你的年龄:"</span><br><span class="line"></span><br><span class="line">if [ ${REPLY} -ge 70 ]</span><br><span class="line">then</span><br><span class="line">    echo "好好养生"</span><br><span class="line">elif [ ${REPLY} -ge 18 ]</span><br><span class="line">then</span><br><span class="line">    echo "好好工作"</span><br><span class="line">else</span><br><span class="line">    echo "好好学习"</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9bv5qkppbj30k208a3zh.jpg" alt="13"></p><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 值 in 列表</span><br><span class="line">do</span><br><span class="line">    执行语句</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><p><strong>例子</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dirs=$(ls /)</span><br><span class="line">for i in ${dirs}</span><br><span class="line">do</span><br><span class="line">    index=$((${index} + 1))</span><br><span class="line">    echo "${index}.${i}"</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9bvgl0e69j30ls0lygn6.jpg" alt="15"></p><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">max=10</span><br><span class="line">for ((i=1;i&lt;=max;i++))</span><br><span class="line">do</span><br><span class="line">    执行语句</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><p><strong>例子</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhongxin</span></span><br><span class="line"></span><br><span class="line">max=10</span><br><span class="line">for ((i=0;i&lt;=max;i++))</span><br><span class="line">do</span><br><span class="line">    echo "i=${i}"</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9bva4ahzhj30ia0aomxl.jpg" alt="14"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十九)</title>
      <link href="article/2d7f092b.html"/>
      <url>article/2d7f092b.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十九"><a href="#测试开发进阶-三十九" class="headerlink" title="测试开发进阶(三十九)"></a>测试开发进阶(三十九)</h1><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p>使用一个简单的get函数返回需要的内容</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">statistics = {</span><br><span class="line">    <span class="string">'projects_count'</span>: projects_count,</span><br><span class="line">    <span class="string">'interfaces_count'</span>: interfaces_count,</span><br><span class="line">    <span class="string">'testcases_count'</span>: testcases_count,</span><br><span class="line">    <span class="string">'testsuits_count'</span>: testsuits_count,</span><br><span class="line">    <span class="string">'configures_count'</span>: configures_count,</span><br><span class="line">    <span class="string">'envs_count'</span>: envs_count,</span><br><span class="line">    <span class="string">'debug_talks_count'</span>: debug_talks_count,</span><br><span class="line">    <span class="string">'reports_count'</span>: reports_count,</span><br><span class="line">    <span class="string">'success_rate'</span>: success_rate,</span><br><span class="line">    <span class="string">'fail_rate'</span>: fail_rate,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>他们都是从数据库中计算并统计出来的</p><p>需要有权限才能访问</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission_classes = [permissions.IsAuthenticated]</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> interfaces.models <span class="keyword">import</span> Interfaces</span><br><span class="line"><span class="keyword">from</span> testcases.models <span class="keyword">import</span> Testcases</span><br><span class="line"><span class="keyword">from</span> testsuits.models <span class="keyword">import</span> Testsuits</span><br><span class="line"><span class="keyword">from</span> configures.models <span class="keyword">import</span> Configures</span><br><span class="line"><span class="keyword">from</span> envs.models <span class="keyword">import</span> Envs</span><br><span class="line"><span class="keyword">from</span> debugtalks.models <span class="keyword">import</span> DebugTalks</span><br><span class="line"><span class="keyword">from</span> reports.models <span class="keyword">import</span> Reports</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SummaryAPIView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回统计信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    permission_classes = [permissions.IsAuthenticated]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取统计信息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        user = request.user</span><br><span class="line">        user_info = {</span><br><span class="line">            <span class="string">'username'</span>: user.username,</span><br><span class="line">            <span class="string">'role'</span>: <span class="string">'管理员'</span> <span class="keyword">if</span> user.is_superuser <span class="keyword">else</span> <span class="string">'普通用户'</span>,</span><br><span class="line">            <span class="string">'date_joined'</span>: user.date_joined.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) <span class="keyword">if</span> user.date_joined <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">            <span class="string">'last_login'</span>: user.last_login.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) <span class="keyword">if</span> user.last_login <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        projects_count = Projects.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).count()</span><br><span class="line">        interfaces_count = Interfaces.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).count()</span><br><span class="line">        testcases_count = Testcases.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).count()</span><br><span class="line">        testsuits_count = Testsuits.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).count()</span><br><span class="line">        configures_count = Configures.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).count()</span><br><span class="line">        envs_count = Envs.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).count()</span><br><span class="line">        debug_talks_count = DebugTalks.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).count()</span><br><span class="line">        reports_count = Reports.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).count()</span><br><span class="line"></span><br><span class="line">        run_testcases_success_count = Reports.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).aggregate(Sum(<span class="string">'success'</span>))[</span><br><span class="line">                                          <span class="string">'success__sum'</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">        run_testcases_total_count = Reports.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>).aggregate(Sum(<span class="string">'count'</span>))[<span class="string">'count__sum'</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> run_testcases_total_count:</span><br><span class="line">            success_rate = <span class="built_in">int</span>((run_testcases_success_count / run_testcases_total_count) * <span class="number">100</span>)</span><br><span class="line">            fail_rate = <span class="number">100</span> - success_rate</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            success_rate = <span class="number">0</span></span><br><span class="line">            fail_rate = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        statistics = {</span><br><span class="line">            <span class="string">'projects_count'</span>: projects_count,</span><br><span class="line">            <span class="string">'interfaces_count'</span>: interfaces_count,</span><br><span class="line">            <span class="string">'testcases_count'</span>: testcases_count,</span><br><span class="line">            <span class="string">'testsuits_count'</span>: testsuits_count,</span><br><span class="line">            <span class="string">'configures_count'</span>: configures_count,</span><br><span class="line">            <span class="string">'envs_count'</span>: envs_count,</span><br><span class="line">            <span class="string">'debug_talks_count'</span>: debug_talks_count,</span><br><span class="line">            <span class="string">'reports_count'</span>: reports_count,</span><br><span class="line">            <span class="string">'success_rate'</span>: success_rate,</span><br><span class="line">            <span class="string">'fail_rate'</span>: fail_rate,</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(data={</span><br><span class="line">            <span class="string">'user'</span>: user_info,</span><br><span class="line">            <span class="string">'statistics'</span>: statistics</span><br><span class="line">        })</span><br></pre></td></tr></tbody></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ol><li>项目管理-<strong>项目新增</strong></li><li>维护<strong>内置函数</strong>debugtalk.py</li><li>环境管理-<strong>环境新增</strong></li><li>接口管理-<strong>接口新增</strong></li><li>配置管理-<strong>配置新增</strong></li><li>用例管理-<strong>用例新增</strong></li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>安装操作系统</li><li>安装python</li><li>mysql</li><li>搭建Django环境–各种模块的安装</li><li>nginx</li><li>gunicorn</li><li>docker</li><li>docker-compose</li><li>docker-swarm</li></ol><p>由于还没有学习<code>docker</code>暂时不继续，先行学习<code>docker</code></p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><blockquote><ol><li>命令解释器</li><li>shell就是在操作系统和应用程序之间的一个命令翻译工具</li></ol></blockquote><h3 id="shell的分类"><a href="#shell的分类" class="headerlink" title="shell的分类"></a>shell的分类</h3><ul><li>Winodws中</li></ul><blockquote><p>cmd.exe命令提示字符</p></blockquote><ul><li>linux中</li></ul><blockquote><ul><li><p>sh</p></li><li><p>bash</p></li><li><p>zsh</p></li></ul></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>head：默认获取文件前十行</p></li><li><p>tail：默认获取文件后十行</p></li></ul><p>获取一个区间，第10～13行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> head -n13 xxx | tail -n4</span></span><br></pre></td></tr></tbody></table></figure><ul><li>cut：取出文本指定列</li></ul><blockquote><p>-d:指定分割符</p><p>-f:指定列</p></blockquote><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name Age Score</span><br><span class="line">a 25 90</span><br><span class="line">b 26 91</span><br><span class="line">c 27 92</span><br><span class="line">d 28 93</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cut -d<span class="string">" "</span> -f1 learn_cut.txt</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9950u4m13j30n60e0aaz.jpg" alt="1"></p><ul><li>uniq:去除重复项</li></ul><blockquote><p>-d:仅打印有重复的元素</p><p>-c:打印元素重复的个数</p></blockquote><ul><li>sort:对文本的内容进行排序</li></ul><blockquote><p>默认以字符串的ASCII码数值从小到大排序</p><p>-n:以数值大小排序</p><p>-r:倒序</p><p>-t:指定分割符，默认为空格</p><p>-knum:指定以某个字段来排序</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以:分割的第三列的数值大小排列</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sort -t<span class="string">":"</span> -k3 -n /etc/passwd</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g995cfyp7dj30xq0s4wky.jpg" alt="2"></p><ul><li>wc「word count」计算文本数量</li></ul><blockquote><p>-l:打印行数</p><p>-w:打印单词数</p><p>-c:打印字节数</p><p>-L:打印最长行的字节数</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>本地变量</li><li>全局变量</li><li>内置变量</li></ul><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><blockquote><p>等号前后不能有空格</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> username=<span class="string">"89"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> username=a b <span class="comment"># 错误</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> username=<span class="string">"a b"</span> <span class="comment">#正确</span></span> </span><br></pre></td></tr></tbody></table></figure><ul><li>单引号:所见即所得</li></ul><p>不能插值</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> p=python</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> u=<span class="string">'I love $p'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$u</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> i=<span class="string">"I love <span class="variable">$p</span>"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$i</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g995jh928hj30ha080my6.jpg" alt="3"></p><p><strong>将命令的结果返回给变量</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> o=$(ls)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> p=`ls`</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g995lbu2hnj30fi032q37.jpg" alt="4"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g995mbl9ubj30f003ajrn.jpg" alt="5"></p><h4 id="（局部）全局变量"><a href="#（局部）全局变量" class="headerlink" title="（局部）全局变量"></a>（局部）全局变量</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> env</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g995ocjvm5j30u00watff.jpg" alt="6"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$USER</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g995ouza78j30gk02kt8t.jpg" alt="7"></p><h5 id="定义全局变量"><a href="#定义全局变量" class="headerlink" title="定义全局变量"></a>定义全局变量</h5><ol><li>export 变量</li><li>export 变量=值</li></ol><p>在<code>～/.bashrc</code>中创建才是真正的全局变量</p><h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h4><ul><li><code>$0</code>:获取当前执行的shell脚本文件名，包括脚本路径</li><li><code>$n</code>:当前shell脚本的第n个参数(n&gt;9需要使用<code>${10}</code>)</li><li><code>$#</code>:获取当前shell命令行中参数的总个数</li><li><code>$?</code>:获取执行的上一个命令的返回值(0为成功，非0为失败)</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "参数的总个数:$#"</span><br><span class="line">echo "脚本名为:$0"</span><br><span class="line">echo "第二个参数:$2"</span><br><span class="line">echo "第十个参数:${10}"</span><br><span class="line">echo "获取所有参数:$*"</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g995ztf71aj30so0ao0uf.jpg" alt="8"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十八)</title>
      <link href="article/31aee3cf.html"/>
      <url>article/31aee3cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十八"><a href="#测试开发进阶-三十八" class="headerlink" title="测试开发进阶(三十八)"></a>测试开发进阶(三十八)</h1><h2 id="用例模块"><a href="#用例模块" class="headerlink" title="用例模块"></a>用例模块</h2><p>需要使用httprunner来进行用例的执行与报告的生成</p><p>所以我们需要生成一个yaml用例文件，再执行它</p><span id="more"></span><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@action(<span class="params">methods=[<span class="string">'post'</span>], detail=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    instance = self.get_object()</span><br><span class="line">    serializer = self.get_serializer(instance, data=request.data)</span><br><span class="line">    serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">    datas = serializer.validated_data</span><br><span class="line">    env_id = datas.get(<span class="string">'env_id'</span>)</span><br><span class="line">    testcase_dir_path = os.path.join(settings.SUITES_DIR, datetime.strftime(datetime.now(), <span class="string">'%Y%m%d%H%M%S%f'</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(testcase_dir_path):</span><br><span class="line">        os.mkdir(testcase_dir_path)</span><br><span class="line">    env = Envs.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=env_id, is_delete=<span class="literal">False</span>).first()</span><br><span class="line">    <span class="comment"># 生成yaml用例文件</span></span><br><span class="line">    common.generate_testcase_files(instance, env, testcase_dir_path)</span><br><span class="line">    <span class="comment"># 运行用例</span></span><br><span class="line">    <span class="keyword">return</span> common.run_testcase(instance, testcase_dir_path)</span><br></pre></td></tr></tbody></table></figure><h3 id="生成yaml用例"><a href="#生成yaml用例" class="headerlink" title="生成yaml用例"></a>生成yaml用例</h3><p>官方文档有一个例子：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">config:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">testcase</span> <span class="string">description</span></span><br><span class="line">    <span class="attr">variables:</span> {}</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">test:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">/api/get-token</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">        <span class="attr">headers:</span></span><br><span class="line">            <span class="attr">Content-Type:</span> <span class="string">application/json</span></span><br><span class="line">            <span class="attr">User-Agent:</span> <span class="string">python-requests/2.18.4</span></span><br><span class="line">            <span class="attr">app_version:</span> <span class="number">2.8</span><span class="number">.6</span></span><br><span class="line">            <span class="attr">device_sn:</span> <span class="string">FwgRiO7CNA50DSU</span></span><br><span class="line">            <span class="attr">os_platform:</span> <span class="string">ios</span></span><br><span class="line">        <span class="attr">json:</span></span><br><span class="line">            <span class="attr">sign:</span> <span class="string">9c0c7e51c91ae963c833a4ccbab8d683c4a90c98</span></span><br><span class="line">        <span class="attr">method:</span> <span class="string">POST</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://127.0.0.1:5000/api/get-token</span></span><br><span class="line">    <span class="attr">extract:</span></span><br><span class="line">        <span class="attr">token:</span> <span class="string">content.token</span></span><br><span class="line">    <span class="attr">validate:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">status_code</span>, <span class="number">200</span>]</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">headers.Content-Type</span>, <span class="string">application/json</span>]</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">content.success</span>, <span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">test:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">/api/users/1000</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">        <span class="attr">headers:</span></span><br><span class="line">            <span class="attr">Content-Type:</span> <span class="string">application/json</span></span><br><span class="line">            <span class="attr">User-Agent:</span> <span class="string">python-requests/2.18.4</span></span><br><span class="line">            <span class="attr">device_sn:</span> <span class="string">FwgRiO7CNA50DSU</span></span><br><span class="line">            <span class="attr">token:</span> <span class="string">$token</span></span><br><span class="line">        <span class="attr">json:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">user1</span></span><br><span class="line">            <span class="attr">password:</span> <span class="string">'123456'</span></span><br><span class="line">        <span class="attr">method:</span> <span class="string">POST</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://127.0.0.1:5000/api/users/1000</span></span><br><span class="line">    <span class="attr">validate:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">status_code</span>, <span class="number">201</span>]</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">headers.Content-Type</span>, <span class="string">application/json</span>]</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">content.success</span>, <span class="literal">true</span>]</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">content.msg</span>, <span class="string">user</span> <span class="string">created</span> <span class="string">successfully.</span>]</span><br></pre></td></tr></tbody></table></figure><p>上述一个yaml对应的json格式为：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"config"</span>: {</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"testcase description"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: {</span><br><span class="line">        <span class="attr">"base_url"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"headers"</span>: {</span><br><span class="line">          <span class="attr">"User-Agent"</span>: <span class="string">"python-requests/2.18.4"</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"variables"</span>: [],</span><br><span class="line">      <span class="attr">"output"</span>: [<span class="string">"token"</span>],</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"/abs-path/to/demo-quickstart-2.yml"</span>,</span><br><span class="line">      <span class="attr">"refs"</span>: {</span><br><span class="line">        <span class="attr">"env"</span>: {},</span><br><span class="line">        <span class="attr">"debugtalk"</span>: {</span><br><span class="line">          <span class="attr">"variables"</span>: {</span><br><span class="line">            <span class="attr">"SECRET_KEY"</span>: <span class="string">"DebugTalk"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="attr">"functions"</span>: {</span><br><span class="line">            <span class="attr">"gen_random_string"</span>: &lt;function gen_random_string at <span class="number">0x108596268</span>&gt;,</span><br><span class="line">            <span class="attr">"get_sign"</span>: &lt;function get_sign at <span class="number">0x1085962f0</span>&gt;,</span><br><span class="line">            <span class="attr">"get_user_id"</span>: &lt;function get_user_id at <span class="number">0x108596378</span>&gt;,</span><br><span class="line">            <span class="attr">"get_account"</span>: &lt;function get_account at <span class="number">0x108596400</span>&gt;,</span><br><span class="line">            <span class="attr">"get_os_platform"</span>: &lt;function get_os_platform at <span class="number">0x108596488</span>&gt;</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"def-api"</span>: {},</span><br><span class="line">        <span class="attr">"def-testcase"</span>: {}</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"teststeps"</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"/api/get-token"</span>,</span><br><span class="line">        <span class="attr">"request"</span>: {</span><br><span class="line">          <span class="attr">"url"</span>: <span class="string">"http://127.0.0.1:5000/api/get-token"</span>,</span><br><span class="line">          <span class="attr">"method"</span>: <span class="string">"POST"</span>,</span><br><span class="line">          <span class="attr">"headers"</span>: {<span class="attr">"Content-Type"</span>: <span class="string">"application/json"</span>, <span class="attr">"app_version"</span>: <span class="string">"2.8.6"</span>, <span class="attr">"device_sn"</span>: <span class="string">"FwgRiO7CNA50DSU"</span>, <span class="attr">"os_platform"</span>: <span class="string">"ios"</span>, <span class="attr">"user_agent"</span>: <span class="string">"iOS/10.3"</span>},</span><br><span class="line">          <span class="attr">"json"</span>: {<span class="attr">"sign"</span>: <span class="string">"9c0c7e51c91ae963c833a4ccbab8d683c4a90c98"</span>}</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"extract"</span>: [</span><br><span class="line">          {<span class="attr">"token"</span>: <span class="string">"content.token"</span>}</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"validate"</span>: [</span><br><span class="line">          {<span class="attr">"eq"</span>: [<span class="string">"status_code"</span>, <span class="number">200</span>]},</span><br><span class="line">          {<span class="attr">"eq"</span>: [<span class="string">"headers.Content-Type"</span>, <span class="string">"application/json"</span>]},</span><br><span class="line">          {<span class="attr">"eq"</span>: [<span class="string">"content.success"</span>, <span class="literal">true</span>]}</span><br><span class="line">        ]</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"/api/users/1000"</span>,</span><br><span class="line">        <span class="attr">"request"</span>: {<span class="attr">"url"</span>: <span class="string">"http://127.0.0.1:5000/api/users/1000"</span>, <span class="attr">"method"</span>: <span class="string">"POST"</span>, <span class="attr">"headers"</span>: {<span class="attr">"Content-Type"</span>: <span class="string">"application/json"</span>, <span class="attr">"device_sn"</span>: <span class="string">"FwgRiO7CNA50DSU"</span>, <span class="attr">"token"</span>: <span class="string">"$token"</span>},</span><br><span class="line">        <span class="attr">"json"</span>: {<span class="attr">"name"</span>: <span class="string">"user1"</span>, <span class="attr">"password"</span>: <span class="string">"123456"</span>}},</span><br><span class="line">        <span class="attr">"validate"</span>: [</span><br><span class="line">          {<span class="attr">"eq"</span>: [<span class="string">"status_code"</span>, <span class="number">201</span>]},</span><br><span class="line">          {<span class="attr">"eq"</span>: [<span class="string">"headers.Content-Type"</span>, <span class="string">"application/json"</span>]},</span><br><span class="line">          {<span class="attr">"eq"</span>: [<span class="string">"content.success"</span>, <span class="literal">true</span>]},</span><br><span class="line">          {<span class="attr">"eq"</span>: [<span class="string">"content.msg"</span>, <span class="string">"user created successfully."</span>]}</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  {...} # another testcase</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>所以我们需要通过一个函数将已有的接口，环境，配置写入一份yaml中</p><p>将对应的<code>debugtalk.py</code>存放在yaml文件附近</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_testcase_files</span>(<span class="params">instance, env, testcase_dir_path</span>):</span></span><br><span class="line">    testcase_list = []</span><br><span class="line">    config = {</span><br><span class="line">        <span class="string">'config'</span>: {</span><br><span class="line">            <span class="string">'name'</span>: instance.name,</span><br><span class="line">            <span class="string">'request'</span>: {</span><br><span class="line">                <span class="string">'base_url'</span>: env.base_url <span class="keyword">if</span> env <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    testcase_list.append(config)</span><br><span class="line"></span><br><span class="line">    include = json.loads(instance.include, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">    request = json.loads(instance.request, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">    interface_name = instance.interface.name</span><br><span class="line">    project_name = instance.interface.project.name</span><br><span class="line">    testcase_dir_path = os.path.join(testcase_dir_path, project_name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(testcase_dir_path):</span><br><span class="line">        os.mkdir(testcase_dir_path)</span><br><span class="line">        debugtalk_obj = DebugTalks.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, project__name=project_name).first()</span><br><span class="line">        <span class="keyword">if</span> debugtalk_obj:</span><br><span class="line">            debugtalk = debugtalk_obj.debugtalk</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            debugtalk = <span class="string">''</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(testcase_dir_path, <span class="string">'debugtalk.py'</span>),</span><br><span class="line">                  mode=<span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> one_file:</span><br><span class="line">            one_file.write(debugtalk)</span><br><span class="line">        testcase_dir_path = os.path.join(testcase_dir_path, interface_name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(testcase_dir_path):</span><br><span class="line">            os.mkdir(testcase_dir_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'config'</span> <span class="keyword">in</span> include:</span><br><span class="line">            config_id = include.get(<span class="string">'config'</span>)</span><br><span class="line">            config_obj = Configures.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, <span class="built_in">id</span>=config_id).first()</span><br><span class="line">            <span class="keyword">if</span> config_obj:</span><br><span class="line">                config_request = json.loads(config_obj.request, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">                config_request.get(<span class="string">'config'</span>).get(<span class="string">'request'</span>).setdefault(<span class="string">'base_url'</span>, env.base_url)</span><br><span class="line">                config_request[<span class="string">'config'</span>][<span class="string">'name'</span>] = instance.name</span><br><span class="line">                testcase_list[<span class="number">0</span>] = config_request</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'testcases'</span> <span class="keyword">in</span> include:</span><br><span class="line">                <span class="keyword">for</span> t_id <span class="keyword">in</span> include.get(<span class="string">'testcases'</span>):</span><br><span class="line">                    testcase_obj = Testcases.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, <span class="built_in">id</span>=t_id).first()</span><br><span class="line">                    <span class="keyword">if</span> testcase_obj:</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            testcase_request = json.loads(testcase_obj.request, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                            testcase_request = <span class="string">''</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        testcase_list.append(testcase_request)</span><br><span class="line">    testcase_list.append(request)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(testcase_dir_path, instance.name + <span class="string">'.yml'</span>), <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> one_file:</span><br><span class="line">        yaml.dump(testcase_list, one_file, allow_unicode=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="执行yaml文件"><a href="#执行yaml文件" class="headerlink" title="执行yaml文件"></a>执行yaml文件</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8z26iap8lj30wk0u044w.jpg" alt="https://cn.httprunner.org/development/dev-api/"></p><p>从<a href="https://cn.httprunner.org/development/dev-api/%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%87%BA%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BC%A0%E5%85%A5yaml%E8%B7%AF%E5%BE%84%E6%9D%A5%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95">https://cn.httprunner.org/development/dev-api/可以看出，我们可以通过传入yaml路径来执行测试</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_testcase</span>(<span class="params">instance, testcase_dir_path</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    运行用例</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    :param instance: 实例</span></span><br><span class="line"><span class="string">    :param testcase_dir_path: 用例根目录路径</span></span><br><span class="line"><span class="string">    :return dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    runner = HttpRunner()</span><br><span class="line">    <span class="comment"># runner.run(testcase_dir_path)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        runner.run(testcase_dir_path)</span><br><span class="line">    <span class="keyword">except</span> ParamsError:</span><br><span class="line">        logger.error(<span class="string">"用例参数有误"</span>)</span><br><span class="line">        data = {</span><br><span class="line">            <span class="string">"msg"</span>: <span class="string">"用例参数有误"</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Response(data, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    runner.summary = timestamp_to_datetime(runner.summary, <span class="built_in">type</span>=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        report_name = instance.name</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        report_name = <span class="string">'被遗弃的报告'</span> + <span class="string">'-'</span> + datetime.strftime(datetime.now(), <span class="string">'%Y%m%d%H%M%S'</span>)</span><br><span class="line"></span><br><span class="line">    report_id = create_report(runner, report_name=report_name)</span><br><span class="line">    data_dict = {</span><br><span class="line">        <span class="string">"id"</span>: report_id</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Response(data_dict, status=status.HTTP_201_CREATED)</span><br></pre></td></tr></tbody></table></figure><p>报告中的时间格式需要进行调整</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_report</span>(<span class="params">runner, report_name=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建测试报告</span></span><br><span class="line"><span class="string">    :param runner:</span></span><br><span class="line"><span class="string">    :param report_name:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    time_stamp = <span class="built_in">int</span>(runner.summary[<span class="string">"time"</span>][<span class="string">"start_at"</span>])</span><br><span class="line">    start_datetime = datetime.fromtimestamp(time_stamp).strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    runner.summary[<span class="string">'time'</span>][<span class="string">'start_datetime'</span>] = start_datetime</span><br><span class="line">    <span class="comment"># duration保留3位小数</span></span><br><span class="line">    runner.summary[<span class="string">'time'</span>][<span class="string">'duration'</span>] = <span class="built_in">round</span>(runner.summary[<span class="string">'time'</span>][<span class="string">'duration'</span>], <span class="number">3</span>)</span><br><span class="line">    report_name = report_name <span class="keyword">if</span> report_name <span class="keyword">else</span> start_datetime</span><br><span class="line">    runner.summary[<span class="string">'html_report_name'</span>] = report_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> runner.summary[<span class="string">'details'</span>]:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> record <span class="keyword">in</span> item[<span class="string">'records'</span>]:</span><br><span class="line">                record[<span class="string">'meta_data'</span>][<span class="string">'response'</span>][<span class="string">'content'</span>] = record[<span class="string">'meta_data'</span>][<span class="string">'response'</span>][<span class="string">'content'</span>]. \</span><br><span class="line">                    decode(<span class="string">'utf-8'</span>)</span><br><span class="line">                record[<span class="string">'meta_data'</span>][<span class="string">'response'</span>][<span class="string">'cookies'</span>] = <span class="built_in">dict</span>(record[<span class="string">'meta_data'</span>][<span class="string">'response'</span>][<span class="string">'cookies'</span>])</span><br><span class="line"></span><br><span class="line">                request_body = record[<span class="string">'meta_data'</span>][<span class="string">'request'</span>][<span class="string">'body'</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(request_body, <span class="built_in">bytes</span>):</span><br><span class="line">                    record[<span class="string">'meta_data'</span>][<span class="string">'request'</span>][<span class="string">'body'</span>] = request_body.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    summary = json.dumps(runner.summary, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    report_name = report_name + <span class="string">'_'</span> + datetime.strftime(datetime.now(), <span class="string">'%Y%m%d%H%M%S'</span>)</span><br><span class="line">    report_path = runner.gen_html_report(html_report_name=report_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(report_path, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> stream:</span><br><span class="line">        reports = stream.read()</span><br><span class="line"></span><br><span class="line">    test_report = {</span><br><span class="line">        <span class="string">'name'</span>: report_name,</span><br><span class="line">        <span class="string">'result'</span>: runner.summary.get(<span class="string">'success'</span>),</span><br><span class="line">        <span class="string">'success'</span>: runner.summary.get(<span class="string">'stat'</span>).get(<span class="string">'successes'</span>),</span><br><span class="line">        <span class="string">'count'</span>: runner.summary.get(<span class="string">'stat'</span>).get(<span class="string">'testsRun'</span>),</span><br><span class="line">        <span class="string">'html'</span>: reports,</span><br><span class="line">        <span class="string">'summary'</span>: summary</span><br><span class="line">    }</span><br><span class="line">    report_obj = Reports.objects.create(**test_report)</span><br><span class="line">    <span class="keyword">return</span> report_obj.<span class="built_in">id</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8z28dxvesj31b30u04ln.jpg" alt="结果"></p><p>其他模块的执行与报告展示也调用了这两个函数</p><p><a href="https://github.com/zx490336534/ApiTest">https://github.com/zx490336534/ApiTest</a></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十七)</title>
      <link href="article/f8fc5cc3.html"/>
      <url>article/f8fc5cc3.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十七"><a href="#测试开发进阶-三十七" class="headerlink" title="测试开发进阶(三十七)"></a>测试开发进阶(三十七)</h1><h2 id="报告模块"><a href="#报告模块" class="headerlink" title="报告模块"></a>报告模块</h2><h3 id="报告下载-中文文件"><a href="#报告下载-中文文件" class="headerlink" title="报告下载-中文文件"></a>报告下载-中文文件</h3><p>下载时候如果报告名中有中文，则可能出现乱码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.encoding <span class="keyword">import</span> escape_uri_path</span><br><span class="line">report_path_final = escape_uri_path(report_filename)  <span class="comment"># 中文乱码的解决办法</span></span><br></pre></td></tr></tbody></table></figure><p>使用<code>escape_uri_path</code>可以解决</p><span id="more"></span><h3 id="报告展示"><a href="#报告展示" class="headerlink" title="报告展示"></a>报告展示</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">retrieve</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    instance = self.get_object()</span><br><span class="line">    serializer = self.get_serializer(instance)</span><br><span class="line">    datas = serializer.data</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        datas[<span class="string">'summary'</span>] = json.loads(datas[<span class="string">'summary'</span>], encoding=<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> Response(datas)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vnb9y2ekj31b30u07pc.jpg" alt="image-20191112225407620"></p><h2 id="配置模块"><a href="#配置模块" class="headerlink" title="配置模块"></a>配置模块</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vo4qt74bj31b30u07mt.jpg" alt="配置管理"></p><p>配置管理页面展示需要展示</p><ul><li><code>配置名称</code></li><li><code>所属项目</code></li><li><code>所属接口</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vo6d32ecj31hc05gmyl.jpg" alt="configures"></p><p>其中：<code>配置信息</code>里面的外键是<code>所属接口</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vo77nnttj31fg0c00w7.jpg" alt="interface"></p><p><code>接口</code>里面的外键是<code>所属项目</code></p><p>所以要在序列化器中处理掉这里面的关系</p><h3 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h3><p><code>InterfacesAnotherSerializer</code>拿到</p><ul><li>项目名称</li><li>项目ID</li><li>接口ID</li></ul><p><code>ConfiguresSerializer</code>里面用<code>InterfacesAnotherSerializer</code>拿到的东西进行展示</p><p>注意：<code>create</code>中<code>validated_data</code>拿到的是一个对象，需要</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interface_dict = validated_data.pop(<span class="string">'interface'</span>)</span><br><span class="line">validated_data[<span class="string">'interface_id'</span>] = interface_dict[<span class="string">'iid'</span>]</span><br></pre></td></tr></tbody></table></figure><p>将它变成对应的ID</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vobwvyr3j31b30u01hk.jpg" alt="image-20191112232930521"></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"next"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"previous"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"results"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"登录接口配置_自动化测试平台项目"</span>,</span><br><span class="line">            <span class="attr">"interface"</span>: {</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"登录接口_自动化测试平台项目"</span>,</span><br><span class="line">                <span class="attr">"project"</span>: <span class="string">"自动化测试平台项目"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="attr">"author"</span>: <span class="string">"柠檬小姐姐"</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"查询项目列表配置_前程贷项目"</span>,</span><br><span class="line">            <span class="attr">"interface"</span>: {</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"查看项目列表接口_前程贷P2P金融项目"</span>,</span><br><span class="line">                <span class="attr">"project"</span>: <span class="string">"前程贷P2P金融项目"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="attr">"author"</span>: <span class="string">"柠檬小姐姐"</span></span><br><span class="line">        }</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"total_pages"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"current_page_num"</span>: <span class="number">1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> interfaces.models <span class="keyword">import</span> Interfaces</span><br><span class="line"><span class="keyword">from</span> utils.validates <span class="keyword">import</span> whether_existed_project_id, whether_existed_interface_id</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Configures</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfacesAnotherSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    project = serializers.StringRelatedField(help_text=<span class="string">'项目名称'</span>)</span><br><span class="line">    <span class="comment"># 项目ID</span></span><br><span class="line">    pid = serializers.IntegerField(write_only=<span class="literal">True</span>, validators=[whether_existed_project_id], help_text=<span class="string">'项目ID'</span>)</span><br><span class="line">    <span class="comment"># 接口ID</span></span><br><span class="line">    iid = serializers.IntegerField(write_only=<span class="literal">True</span>, validators=[whether_existed_interface_id], help_text=<span class="string">'接口ID'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Interfaces</span><br><span class="line">        fields = (<span class="string">'iid'</span>, <span class="string">'name'</span>, <span class="string">'project'</span>, <span class="string">'pid'</span>)</span><br><span class="line">        extra_kwargs = {</span><br><span class="line">            <span class="string">'name'</span>:</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">'read_only'</span>: <span class="literal">True</span></span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, attrs</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        校验项目ID是否与接口ID一致</span></span><br><span class="line"><span class="string">        :param attrs:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Interfaces.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=attrs[<span class="string">'iid'</span>], project_id=attrs[<span class="string">'pid'</span>], is_delete=<span class="literal">False</span>).exists():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'项目和接口信息不对应！'</span>)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfiguresSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        配置序列化器</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    interface = InterfacesAnotherSerializer(help_text=<span class="string">'项目ID和接口ID'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Configures</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'interface'</span>, <span class="string">'author'</span>, <span class="string">'request'</span>)</span><br><span class="line">        extra_kwargs = {</span><br><span class="line">            <span class="string">'request'</span>: {</span><br><span class="line">                <span class="string">'write_only'</span>: <span class="literal">True</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        interface_dict = validated_data.pop(<span class="string">'interface'</span>)</span><br><span class="line">        validated_data[<span class="string">'interface_id'</span>] = interface_dict[<span class="string">'iid'</span>]</span><br><span class="line">        <span class="keyword">return</span> Configures.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'interface'</span> <span class="keyword">in</span> validated_data:</span><br><span class="line">            interface_dict = validated_data.pop(<span class="string">'interface'</span>)</span><br><span class="line">            validated_data[<span class="string">'interface_id'</span>] = interface_dict[<span class="string">'iid'</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().update(instance, validated_data)</span><br></pre></td></tr></tbody></table></figure><p>在<code>utils.validates.whether_existed_project_id</code>中检查项目id是否存在</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whether_existed_project_id</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    检查项目id是否存在</span></span><br><span class="line"><span class="string">    :param value:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'所选项目有误！'</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> Projects.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, <span class="built_in">id</span>=value).exists():</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'所选项目不存在！'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>查看<code>lemon-test/src/components/page/ConfigureAdd.vue</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        editVisible: <span class="literal">false</span>,   <span class="comment">// 新增配置弹框是否显示标识</span></span><br><span class="line">        apiMsgData: {</span><br><span class="line">            id: <span class="literal">null</span>,</span><br><span class="line">            name: <span class="string">""</span>,</span><br><span class="line">            header: [{<span class="attr">key</span>: <span class="literal">null</span>, <span class="attr">value</span>: <span class="literal">null</span>}],</span><br><span class="line">            globalVar: [{<span class="attr">key</span>: <span class="literal">null</span>, <span class="attr">value</span>: <span class="literal">null</span>, <span class="attr">param_type</span>: <span class="string">'string'</span>}],</span><br><span class="line">        },</span><br><span class="line">        bodyShow: <span class="string">'second'</span>,</span><br><span class="line">        otherShow: <span class="string">'first'</span>,</span><br><span class="line">        paramTypes: [<span class="string">'string'</span>, <span class="string">'int'</span>, <span class="string">'float'</span>, <span class="string">'boolean'</span>],</span><br><span class="line">        cell: <span class="built_in">Object</span>(),</span><br><span class="line">        project_names: [],</span><br><span class="line">        selected_project_id: <span class="literal">null</span>,</span><br><span class="line">        selected_interface_id: <span class="literal">null</span>,</span><br><span class="line">        selected_configure_id: <span class="literal">null</span>,</span><br><span class="line">        configure_name: <span class="literal">null</span>,  <span class="comment">// 配置名称</span></span><br><span class="line">        author: <span class="string">''</span>,     <span class="comment">// 用例编写人员</span></span><br><span class="line">        interfaces: [],</span><br><span class="line">        configures: [],</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要后台返回一个字典：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">datas = {</span><br><span class="line">    <span class="string">"author"</span>: config_obj.author,</span><br><span class="line">    <span class="string">"configure_name"</span>: config_name,</span><br><span class="line">    <span class="string">"selected_interface_id"</span>: selected_interface_id,</span><br><span class="line">    <span class="string">"selected_project_id"</span>: selected_project_id,</span><br><span class="line">    <span class="string">"header"</span>: config_headers_list,</span><br><span class="line">    <span class="string">"globalVar"</span>: config_variables_list</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Configures</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> ConfiguresSerializer</span><br><span class="line"><span class="keyword">from</span> interfaces.models <span class="keyword">import</span> Interfaces</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> handle_datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfiguresViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">    返回配置信息（多个）列表数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    create:</span></span><br><span class="line"><span class="string">    创建配置信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    返回配置信息（单个）详情数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    update:</span></span><br><span class="line"><span class="string">    更新（全）配置信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    partial_update:</span></span><br><span class="line"><span class="string">    更新（部分）配置信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    destroy:</span></span><br><span class="line"><span class="string">    删除配置信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    获取配置详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Configures.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = ConfiguresSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticated,)</span><br><span class="line">    ordering_fields = (<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_destroy</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        instance.is_delete = <span class="literal">True</span></span><br><span class="line">        instance.save()  <span class="comment"># 逻辑删除</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        config_obj = self.get_object()</span><br><span class="line">        <span class="comment"># 不建议使用eval()</span></span><br><span class="line">        config_request = json.loads(config_obj.request, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理请求头数据</span></span><br><span class="line">        config_headers = config_request[<span class="string">'config'</span>][<span class="string">'request'</span>].get(<span class="string">'headers'</span>)</span><br><span class="line">        config_headers_list = handle_datas.handle_data4(config_headers)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理全局变量数据</span></span><br><span class="line">        config_variables = config_request[<span class="string">'config'</span>].get(<span class="string">'variables'</span>)</span><br><span class="line">        config_variables_list = handle_datas.handle_data2(config_variables)</span><br><span class="line"></span><br><span class="line">        config_name = config_request[<span class="string">'config'</span>][<span class="string">'name'</span>]</span><br><span class="line">        selected_interface_id = config_obj.interface_id</span><br><span class="line">        <span class="comment"># 接口所属的项目ID</span></span><br><span class="line">        selected_project_id = Interfaces.objects.get(<span class="built_in">id</span>=selected_interface_id).project_id</span><br><span class="line"></span><br><span class="line">        datas = {</span><br><span class="line">            <span class="string">"author"</span>: config_obj.author,</span><br><span class="line">            <span class="string">"configure_name"</span>: config_name,</span><br><span class="line">            <span class="string">"selected_interface_id"</span>: selected_interface_id,</span><br><span class="line">            <span class="string">"selected_project_id"</span>: selected_project_id,</span><br><span class="line">            <span class="string">"header"</span>: config_headers_list,</span><br><span class="line">            <span class="string">"globalVar"</span>: config_variables_list</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(datas)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vomy2u2zj31b30u0nks.jpg" alt="image-20191112233956495"></p><h2 id="用例模块"><a href="#用例模块" class="headerlink" title="用例模块"></a>用例模块</h2><h3 id="序列化器-1"><a href="#序列化器-1" class="headerlink" title="序列化器"></a>序列化器</h3><p>list接口对应的序列化器：<code>TestcasesSerializer</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vpky1qq1j31b30u07qf.jpg" alt="TestcasesSerializer"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> interfaces.models <span class="keyword">import</span> Interfaces</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> validates</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Testcases</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestcasesSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用例序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    interface = InterfacesAnotherSerializer(help_text=<span class="string">"所属接口和项目信息"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Testcases</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'interface'</span>, <span class="string">'include'</span>, <span class="string">'author'</span>, <span class="string">'request'</span>)</span><br><span class="line">        extra_kwargs = {</span><br><span class="line">            <span class="string">'include'</span>: {</span><br><span class="line">                <span class="string">'write_only'</span>: <span class="literal">True</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">'request'</span>: {</span><br><span class="line">                <span class="string">'write_only'</span>: <span class="literal">True</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        interface_dict = validated_data.pop(<span class="string">'interface'</span>)</span><br><span class="line">        validated_data[<span class="string">'interface_id'</span>] = interface_dict[<span class="string">'iid'</span>]</span><br><span class="line">        <span class="keyword">return</span> Testcases.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'interface'</span> <span class="keyword">in</span> validated_data:</span><br><span class="line">            interface_dict = validated_data.pop(<span class="string">'interface'</span>)</span><br><span class="line">            validated_data[<span class="string">'interface_id'</span>] = interface_dict[<span class="string">'iid'</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().update(instance, validated_data)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="用例编辑"><a href="#用例编辑" class="headerlink" title="用例编辑"></a>用例编辑</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vpmnbl25j31b30u0dz4.jpg" alt="编辑1"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vpnaz2sjj31b30u01au.jpg" alt="编辑2"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8vpnof7hbj31b30u0k9n.jpg" alt="编辑3"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Testcases</span><br><span class="line"><span class="keyword">from</span> interfaces.models <span class="keyword">import</span> Interfaces</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> TestcasesSerializer, TestcasesRunSerializer</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> handle_datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestcasesViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">    返回用例（多个）列表数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    create:</span></span><br><span class="line"><span class="string">    创建用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    返回用例（单个）详情数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    update:</span></span><br><span class="line"><span class="string">    更新（全）用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    partial_update:</span></span><br><span class="line"><span class="string">    更新（部分）用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    destroy:</span></span><br><span class="line"><span class="string">    删除用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    run:</span></span><br><span class="line"><span class="string">    运行用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    details:</span></span><br><span class="line"><span class="string">    获取用例详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Testcases.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = TestcasesSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticated,)</span><br><span class="line">    ordering_fields = (<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_destroy</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        instance.is_delete = <span class="literal">True</span></span><br><span class="line">        instance.save()  <span class="comment"># 逻辑删除</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">"""获取用例详情信息"""</span></span><br><span class="line">        <span class="comment"># Testcase对象</span></span><br><span class="line">        testcase_obj = self.get_object()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用例前置信息</span></span><br><span class="line">        testcase_include = json.loads(testcase_obj.include, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用例请求信息</span></span><br><span class="line">        testcase_request = json.loads(testcase_obj.request, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        testcase_request_datas = testcase_request.get(<span class="string">'test'</span>).get(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理用例的validate列表</span></span><br><span class="line">        <span class="comment"># 将[{'check': 'status_code', 'expected':200, 'comparator': 'equals'}]</span></span><br><span class="line">        <span class="comment"># 转化为[{key: 'status_code', value: 200, comparator: 'equals', param_type: 'string'}]</span></span><br><span class="line">        testcase_validate = testcase_request.get(<span class="string">'test'</span>).get(<span class="string">'validate'</span>)</span><br><span class="line">        testcase_validate_list = handle_datas.handle_data1(testcase_validate)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理用例的param数据</span></span><br><span class="line">        testcase_params = testcase_request_datas.get(<span class="string">'params'</span>)</span><br><span class="line">        testcase_params_list = handle_datas.handle_data4(testcase_params)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理用例的header列表</span></span><br><span class="line">        testcase_headers = testcase_request_datas.get(<span class="string">'headers'</span>)</span><br><span class="line">        testcase_headers_list = handle_datas.handle_data4(testcase_headers)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理用例variables变量列表</span></span><br><span class="line">        testcase_variables = testcase_request.get(<span class="string">'test'</span>).get(<span class="string">'variables'</span>)</span><br><span class="line">        testcase_variables_list = handle_datas.handle_data2(testcase_variables)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理form表单数据</span></span><br><span class="line">        testcase_form_datas = testcase_request_datas.get(<span class="string">'data'</span>)</span><br><span class="line">        testcase_form_datas_list = handle_datas.handle_data6(testcase_form_datas)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理json数据</span></span><br><span class="line">        <span class="comment"># testcase_json_datas = str(testcase_request_datas.get('json'))</span></span><br><span class="line">        testcase_json_datas = json.dumps(testcase_request_datas.get(<span class="string">'json'</span>), ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理extract数据</span></span><br><span class="line">        testcase_extract_datas = testcase_request.get(<span class="string">'test'</span>).get(<span class="string">'extract'</span>)</span><br><span class="line">        testcase_extract_datas_list = handle_datas.handle_data3(testcase_extract_datas)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理parameters数据</span></span><br><span class="line">        testcase_parameters_datas = testcase_request.get(<span class="string">'test'</span>).get(<span class="string">'parameters'</span>)</span><br><span class="line">        testcase_parameters_datas_list = handle_datas.handle_data3(testcase_parameters_datas)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理setupHooks数据</span></span><br><span class="line">        testcase_setup_hooks_datas = testcase_request.get(<span class="string">'test'</span>).get(<span class="string">'setup_hooks'</span>)</span><br><span class="line">        testcase_setup_hooks_datas_list = handle_datas.handle_data5(testcase_setup_hooks_datas)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理teardownHooks数据</span></span><br><span class="line">        testcase_teardown_hooks_datas = testcase_request.get(<span class="string">'test'</span>).get(<span class="string">'teardown_hooks'</span>)</span><br><span class="line">        testcase_teardown_hooks_datas_list = handle_datas.handle_data5(testcase_teardown_hooks_datas)</span><br><span class="line"></span><br><span class="line">        selected_configure_id = testcase_include.get(<span class="string">'config'</span>)</span><br><span class="line">        selected_interface_id = testcase_obj.interface_id</span><br><span class="line">        selected_project_id = Interfaces.objects.get(<span class="built_in">id</span>=selected_interface_id).project_id</span><br><span class="line">        selected_testcase_id = testcase_include.get(<span class="string">'testcases'</span>)</span><br><span class="line"></span><br><span class="line">        datas = {</span><br><span class="line">            <span class="string">"author"</span>: testcase_obj.author,</span><br><span class="line">            <span class="string">"testcase_name"</span>: testcase_obj.name,</span><br><span class="line">            <span class="string">"selected_configure_id"</span>: selected_configure_id,</span><br><span class="line">            <span class="string">"selected_interface_id"</span>: selected_interface_id,</span><br><span class="line">            <span class="string">"selected_project_id"</span>: selected_project_id,</span><br><span class="line">            <span class="string">"selected_testcase_id"</span>: selected_testcase_id,</span><br><span class="line"></span><br><span class="line">            <span class="string">"method"</span>: testcase_request_datas.get(<span class="string">'method'</span>),</span><br><span class="line">            <span class="string">"url"</span>: testcase_request_datas.get(<span class="string">'url'</span>),</span><br><span class="line">            <span class="string">"param"</span>: testcase_params_list,</span><br><span class="line">            <span class="string">"header"</span>: testcase_headers_list,</span><br><span class="line">            <span class="string">"variable"</span>: testcase_form_datas_list,  <span class="comment"># form表单请求数据</span></span><br><span class="line">            <span class="string">"jsonVariable"</span>: testcase_json_datas,</span><br><span class="line"></span><br><span class="line">            <span class="string">"extract"</span>: testcase_extract_datas_list,</span><br><span class="line">            <span class="string">"validate"</span>: testcase_validate_list,</span><br><span class="line">            <span class="string">"globalVar"</span>: testcase_variables_list,  <span class="comment"># 变量</span></span><br><span class="line">            <span class="string">"parameterized"</span>: testcase_parameters_datas_list,</span><br><span class="line">            <span class="string">"setupHooks"</span>: testcase_setup_hooks_datas_list,</span><br><span class="line">            <span class="string">"teardownHooks"</span>: testcase_teardown_hooks_datas_list,</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Response(datas)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十六)</title>
      <link href="article/67f44449.html"/>
      <url>article/67f44449.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十六"><a href="#测试开发进阶-三十六" class="headerlink" title="测试开发进阶(三十六)"></a>测试开发进阶(三十六)</h1><h2 id="项目模块"><a href="#项目模块" class="headerlink" title="项目模块"></a>项目模块</h2><h3 id="list优化"><a href="#list优化" class="headerlink" title="list优化"></a>list优化</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">    page = self.paginate_queryset(queryset)</span><br><span class="line">    <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">        datas = serializer.data</span><br><span class="line">        datas = get_count_by_project(datas)</span><br><span class="line">        <span class="keyword">return</span> self.get_paginated_response(datas)</span><br><span class="line"></span><br><span class="line">    serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">    datas = serializer.data</span><br><span class="line">    datas = get_count_by_project(datas)</span><br><span class="line">    <span class="keyword">return</span> Response(datas)</span><br></pre></td></tr></tbody></table></figure><p>这个<code>list</code>其实就是拷贝了父类中的<code>list</code>方法</p><span id="more"></span><p>使用</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>().<span class="built_in">list</span>(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p>调用父类的<code>list</code>方法</p><p>查看返回的<code>Response</code>对象</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8qw8j1ptxj31fn0u0apb.jpg" alt="返回的Response对象"></p><p>所以优化为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    response = <span class="built_in">super</span>().<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line">    response.data[<span class="string">'results'</span>] = get_count_by_project(response.data[<span class="string">'results'</span>])</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></tbody></table></figure><h3 id="重写get-serializer-class"><a href="#重写get-serializer-class" class="headerlink" title="重写get_serializer_class"></a>重写get_serializer_class</h3><p><code>names</code>中的<code>serializer</code>使用<code>serializers.ProjectNameSerializer</code></p><p>为了让它可以直接使用<code>self.get_serializer</code>方法，重写<code>get_serializer_class</code></p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the class to use for the serializer.</span></span><br><span class="line"><span class="string">    Defaults to using `self.serializer_class`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You may want to override this if you need to provide different</span></span><br><span class="line"><span class="string">    serializations depending on the incoming request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    (Eg. admins get full serialization, others get basic serialization)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> self.serializer_class <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, (</span><br><span class="line">        <span class="string">"'%s' should either include a `serializer_class` attribute, "</span></span><br><span class="line">        <span class="string">"or override the `get_serializer_class()` method."</span></span><br><span class="line">        % self.__class__.__name__</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.serializer_class</span><br></pre></td></tr></tbody></table></figure><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.action == <span class="string">'names'</span>:</span><br><span class="line">        <span class="keyword">return</span> serializers.ProjectNameSerializer</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.serializer_class</span><br></pre></td></tr></tbody></table></figure><h2 id="报告模块"><a href="#报告模块" class="headerlink" title="报告模块"></a>报告模块</h2><h3 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Reports</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportsSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    报告序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Reports</span><br><span class="line">        exclude = (<span class="string">'update_time'</span>, <span class="string">'is_delete'</span>)</span><br><span class="line">        extra_kwargs = {</span><br><span class="line">            <span class="string">'html'</span>: {</span><br><span class="line">                <span class="string">'write_only'</span>: <span class="literal">True</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">'create_time'</span>: {</span><br><span class="line">                <span class="string">'read_only'</span>: <span class="literal">True</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        report_name = validated_data[<span class="string">'name'</span>]</span><br><span class="line">        validated_data[<span class="string">'name'</span>] = <span class="string">f"<span class="subst">{report_name}</span>_<span class="subst">{datetime.strftime(datetime.now(), <span class="string">'%Y%m%d%H%M%S'</span>)}</span>"</span></span><br><span class="line">        report = Reports.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> report</span><br></pre></td></tr></tbody></table></figure><p>从数据库中可以看出其中<code>html</code>是一串字符串，它需要转换成html格式才可以正常展示，所以在接口返回的内容中不应该包含它，设置它为只写模式<code>write_only</code></p><p>对<code>create</code>函数进行重定义</p><p>下面是数据库中显示的内容</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8uxblkawnj31vq0hmtfn.jpg" alt="数据库"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = models.CharField(<span class="string">'报告名称'</span>, max_length=<span class="number">200</span>, unique=<span class="literal">True</span>, help_text=<span class="string">'报告名称'</span>)</span><br></pre></td></tr></tbody></table></figure><p>查看<code>models</code>文件可以看到<code>name</code>字段是唯一的「<code>unique=True</code>」所以我们在添加的时候需要携带上当前的时间信息</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>定义一个类<code>ReportsViewSet</code>还是继承<code>ModelViewSet</code></p><p>其他和之前的类似</p><p>其中要注意的是一个<code>download</code>接口</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> StreamingHttpResponse</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> reports.utils <span class="keyword">import</span> format_output, get_file_contents</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Reports</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> ReportsSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportsViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">    返回测试报告（多个）列表数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    create:</span></span><br><span class="line"><span class="string">    创建测试报告</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    返回测试报告（单个）详情数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    update:</span></span><br><span class="line"><span class="string">    更新（全）测试报告</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    partial_update:</span></span><br><span class="line"><span class="string">    更新（部分）测试报告</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    destroy:</span></span><br><span class="line"><span class="string">    删除测试报告</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Reports.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = ReportsSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticated,)</span><br><span class="line">    ordering_fields = (<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_destroy</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        instance.is_delete = <span class="literal">True</span></span><br><span class="line">        instance.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        response = <span class="built_in">super</span>().<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line">        response.data[<span class="string">'results'</span>] = format_output(response.data[<span class="string">'results'</span>])</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">detail=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self, request, pk=<span class="literal">None</span></span>):</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        html = instance.html</span><br><span class="line">        name = instance.name</span><br><span class="line">        mtch = re.match(<span class="string">r'(.*_)\d+'</span>, name)</span><br><span class="line">        <span class="keyword">if</span> mtch:</span><br><span class="line">            mtch = mtch.group(<span class="number">1</span>) + datetime.strftime(datetime.now(), <span class="string">'%Y%m%d%H%M%S'</span>) + <span class="string">'.html'</span></span><br><span class="line">        report_dir = os.path.join(settings.BASE_DIR, <span class="string">'reports'</span>)</span><br><span class="line">        report_path = os.path.join(report_dir, mtch)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(report_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html)</span><br><span class="line">        response = StreamingHttpResponse(get_file_contents(report_path))</span><br><span class="line">        response[<span class="string">'Content-Type'</span>] = <span class="string">"application/octet-stream"</span></span><br><span class="line">        response[<span class="string">'Content-Disposition'</span>] = <span class="string">"attachment; filename*=UTF-8''{}"</span>.<span class="built_in">format</span>(name)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></tbody></table></figure><p>每次下载之后我们都会在本地存放一次，然后我们需要以数据流的方式返回html报告</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = StreamingHttpResponse(get_file_contents(report_path))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_contents</span>(<span class="params">filename, chunk_size=<span class="number">512</span></span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            c = f.read(chunk_size)</span><br><span class="line">            <span class="keyword">if</span> c:</span><br><span class="line">                <span class="keyword">yield</span> c</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure><p>这里用到了分段的方式，每512字节返回一次，直到全部返回完毕</p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十五)</title>
      <link href="article/fefb0c3b.html"/>
      <url>article/fefb0c3b.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十五"><a href="#测试开发进阶-三十五" class="headerlink" title="测试开发进阶(三十五)"></a>测试开发进阶(三十五)</h1><h2 id="导入测试数据"><a href="#导入测试数据" class="headerlink" title="导入测试数据"></a>导入测试数据</h2><h3 id="在Pycharm中连接数据库"><a href="#在Pycharm中连接数据库" class="headerlink" title="在Pycharm中连接数据库"></a>在Pycharm中连接数据库</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ptunalkij30h00u8n08.jpg" alt="Pycharm连接数据库"></p><h3 id="执行sql"><a href="#执行sql" class="headerlink" title="执行sql"></a>执行sql</h3><p>测试数据在：<code>https://github.com/zx490336534/ApiTest/tree/master/test</code>按照顺序执行</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ptt4ftkcj30k60wwgr2.jpg" alt="执行sql"></p><span id="more"></span><h3 id="选择执行的目标"><a href="#选择执行的目标" class="headerlink" title="选择执行的目标"></a>选择执行的目标</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ptt9dnxvj30u00z310d.jpg" alt="选择执行的目标"></p><h2 id="处理时间格式"><a href="#处理时间格式" class="headerlink" title="处理时间格式"></a>处理时间格式</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8pv1waszdj31b30u0hd0.jpg" alt="时间"></p><p>从数据库中可以看出，使用<code>models.DateTimeField</code>生成的时间数据格式为<code>2019-11-06 06:21:19.355242</code></p><p>我们需要返回一个``2019-11-06 06:21:19`的内容</p><p>所以我们需要重写<code>list</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">    page = self.paginate_queryset(queryset)</span><br><span class="line">    <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">        datas = serializer.data</span><br><span class="line">        datas = get_count_by_project(datas)</span><br><span class="line">        <span class="keyword">return</span> self.get_paginated_response(datas)</span><br><span class="line"></span><br><span class="line">    serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">    datas = serializer.data</span><br><span class="line">    datas = get_count_by_project(datas)</span><br><span class="line">    <span class="keyword">return</span> Response(datas)</span><br></pre></td></tr></tbody></table></figure><p>将对数据的处理写在<code>get_count_by_project</code>函数中</p><p>通过调试可以看到获取到的datas对象为一个包含字典的列表</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8pv5fmw27j31su0q4ti2.jpg" alt="datas"></p><p>很容易的想到使用<code>正则</code>来进行提取，并修改字典内容</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mtch = re.search(<span class="string">r'(.*)T(.*)\..*?'</span>, item[<span class="string">'create_time'</span>])</span><br><span class="line">item[<span class="string">'create_time'</span>] = mtch.group(<span class="number">1</span>) + <span class="string">' '</span> + mtch.group(<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="获取项目数据"><a href="#获取项目数据" class="headerlink" title="获取项目数据"></a>获取项目数据</h2><h3 id="获取接口总数"><a href="#获取接口总数" class="headerlink" title="获取接口总数"></a>获取接口总数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">project_id = item[<span class="string">'id'</span>]</span><br><span class="line">interfaces_testcases_objs = Interfaces.objects.values(<span class="string">'id'</span>).annotate(testcases=Count(<span class="string">'testcases'</span>)). \</span><br><span class="line">    <span class="built_in">filter</span>(project_id=project_id, is_delete=<span class="literal">False</span>)</span><br><span class="line">interfaces_count = interfaces_testcases_objs.count()</span><br></pre></td></tr></tbody></table></figure><p><code>interfaces_testcases_objs</code>相当于调用了以下SQL语句</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `tb_interfaces`.`id`, <span class="built_in">COUNT</span>(`tb_testcases`.`id`) <span class="keyword">AS</span> `testcases` <span class="keyword">FROM</span> `tb_interfaces` <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> `tb_testcases` <span class="keyword">ON</span> (`tb_interfaces`.`id` <span class="operator">=</span> `tb_testcases`.`interface_id`) <span class="keyword">WHERE</span> (`tb_interfaces`.`is_delete` <span class="operator">=</span> <span class="literal">False</span> <span class="keyword">AND</span> `tb_interfaces`.`project_id` <span class="operator">=</span> <span class="number">1</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> `tb_interfaces`.`id` <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">NULL</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取用例总数"><a href="#获取用例总数" class="headerlink" title="获取用例总数"></a>获取用例总数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testcases_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> one_dict <span class="keyword">in</span> interfaces_testcases_objs:</span><br><span class="line">    testcases_count += one_dict[<span class="string">'testcases'</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="获取配置数量"><a href="#获取配置数量" class="headerlink" title="获取配置数量"></a>获取配置数量</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interfaces_configures_objs = Interfaces.objects.values(<span class="string">'id'</span>).annotate(configures=Count(<span class="string">'configures'</span>)). \</span><br><span class="line">    <span class="built_in">filter</span>(project_id=project_id, is_delete=<span class="literal">False</span>)</span><br><span class="line">configures_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> one_dict <span class="keyword">in</span> interfaces_configures_objs:</span><br><span class="line">    configures_count += one_dict[<span class="string">'configures'</span>]</span><br></pre></td></tr></tbody></table></figure><p>相当于执行了以下SQL</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `tb_interfaces`.`id`, <span class="built_in">COUNT</span>(`tb_configures`.`id`) <span class="keyword">AS</span> `configures` <span class="keyword">FROM</span> `tb_interfaces` <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> `tb_configures` <span class="keyword">ON</span> (`tb_interfaces`.`id` <span class="operator">=</span> `tb_configures`.`interface_id`) <span class="keyword">WHERE</span> (`tb_interfaces`.`is_delete` <span class="operator">=</span> <span class="literal">False</span> <span class="keyword">AND</span> `tb_interfaces`.`project_id` <span class="operator">=</span> <span class="number">1</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> `tb_interfaces`.`id` <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">NULL</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取测试套件总数"><a href="#获取测试套件总数" class="headerlink" title="获取测试套件总数"></a>获取测试套件总数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testsuits_count = Testsuits.objects.<span class="built_in">filter</span>(project_id=project_id, is_delete=<span class="literal">False</span>).count()</span><br></pre></td></tr></tbody></table></figure><h3 id="整个函数"><a href="#整个函数" class="headerlink" title="整个函数"></a>整个函数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="keyword">from</span> interfaces.models <span class="keyword">import</span> Interfaces</span><br><span class="line"><span class="keyword">from</span> testsuits.models <span class="keyword">import</span> Testsuits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_count_by_project</span>(<span class="params">datas</span>):</span></span><br><span class="line">    datas_list = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> datas:</span><br><span class="line">        mtch = re.search(<span class="string">r'(.*)T(.*)\..*?'</span>, item[<span class="string">'create_time'</span>])</span><br><span class="line">        item[<span class="string">'create_time'</span>] = mtch.group(<span class="number">1</span>) + <span class="string">' '</span> + mtch.group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        project_id = item[<span class="string">'id'</span>]</span><br><span class="line">        interfaces_testcases_objs = Interfaces.objects.values(<span class="string">'id'</span>).annotate(testcases=Count(<span class="string">'testcases'</span>)). \</span><br><span class="line">            <span class="built_in">filter</span>(project_id=project_id, is_delete=<span class="literal">False</span>)</span><br><span class="line">        interfaces_count = interfaces_testcases_objs.count()</span><br><span class="line">        testcases_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> one_dict <span class="keyword">in</span> interfaces_testcases_objs:</span><br><span class="line">            testcases_count += one_dict[<span class="string">'testcases'</span>]</span><br><span class="line"></span><br><span class="line">        interfaces_configures_objs = Interfaces.objects.values(<span class="string">'id'</span>).annotate(configures=Count(<span class="string">'configures'</span>)). \</span><br><span class="line">            <span class="built_in">filter</span>(project_id=project_id, is_delete=<span class="literal">False</span>)</span><br><span class="line">        configures_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> one_dict <span class="keyword">in</span> interfaces_configures_objs:</span><br><span class="line">            configures_count += one_dict[<span class="string">'configures'</span>]</span><br><span class="line"></span><br><span class="line">        testsuits_count = Testsuits.objects.<span class="built_in">filter</span>(project_id=project_id, is_delete=<span class="literal">False</span>).count()</span><br><span class="line"></span><br><span class="line">        item[<span class="string">'interfaces'</span>] = interfaces_count</span><br><span class="line">        item[<span class="string">'testsuits'</span>] = testsuits_count</span><br><span class="line">        item[<span class="string">'testcases'</span>] = testcases_count</span><br><span class="line">        item[<span class="string">'configures'</span>] = configures_count</span><br><span class="line"></span><br><span class="line">        datas_list.append(item)</span><br><span class="line">    <span class="keyword">return</span> datas_list</span><br></pre></td></tr></tbody></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8pvd3f1izj31b30u04nw.jpg" alt="结果"></p><h2 id="返回分页内容"><a href="#返回分页内容" class="headerlink" title="返回分页内容"></a>返回分页内容</h2><p>配置<code>setting.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'utils.pagination.PageNumberPaginationManual'</span>,</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>编写自定义分页操作</p><p><code>utils.pagination.PageNumberPaginationManual</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> pagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageNumberPaginationManual</span>(<span class="params">pagination.PageNumberPagination</span>):</span></span><br><span class="line">    max_page_size = <span class="number">50</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span></span><br><span class="line">    page_query_description = <span class="string">'第几页'</span></span><br><span class="line">    page_size_query_description = <span class="string">'每页几条'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        response = <span class="built_in">super</span>(PageNumberPaginationManual, self).get_paginated_response(data)</span><br><span class="line">        response.data[<span class="string">'total_pages'</span>] = self.page.paginator.num_pages</span><br><span class="line">        response.data[<span class="string">'current_page_num'</span>] = self.page.number</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8pvpe9dq9j31iu0m8gpf.jpg" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十四)</title>
      <link href="article/f8505b46.html"/>
      <url>article/f8505b46.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十四"><a href="#测试开发进阶-三十四" class="headerlink" title="测试开发进阶(三十四)"></a>测试开发进阶(三十四)</h1><h2 id="数据库模型图"><a href="#数据库模型图" class="headerlink" title="数据库模型图"></a>数据库模型图</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8nkdchqsbj30ya0u07cd.jpg" alt="数据库模型图"></p><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><p>根据上面的数据库设计，创建9个app</p><ul><li>configures</li><li>debugtalks</li><li>envs</li><li>interfaces</li><li>projects</li><li>reports</li><li>testsuits</li><li>testcases</li><li>user<span id="more"></span>完成注册</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'apps'</span>))</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">    <span class="string">'configures.apps.ConfiguresConfig'</span>,</span><br><span class="line">    <span class="string">'debugtalks.apps.DebugtalksConfig'</span>,</span><br><span class="line">    <span class="string">'envs.apps.EnvsConfig'</span>,</span><br><span class="line">    <span class="string">'interfaces.apps.InterfacesConfig'</span>,</span><br><span class="line">    <span class="string">'projects.apps.ProjectsConfig'</span>,</span><br><span class="line">    <span class="string">'reports.apps.ReportsConfig'</span>,</span><br><span class="line">    <span class="string">'testsuits.apps.TestsuitsConfig'</span>,</span><br><span class="line">    <span class="string">'testcases.apps.TestcasesConfig'</span>,</span><br><span class="line">    <span class="string">'user.apps.UserConfig'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8nkvg37fnj317q0skwme.jpg" alt="项目结构"></p><h2 id="抽象数据库基类"><a href="#抽象数据库基类" class="headerlink" title="抽象数据库基类"></a>抽象数据库基类</h2><p>从数据库模型图可以看出，有很多部分都重复了</p><ul><li>create_time</li><li>update_time</li><li>is_delete</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    数据库表公共字段</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">"创建时间"</span>, help_text=<span class="string">"创建时间"</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="literal">True</span>, verbose_name=<span class="string">"更新时间"</span>, help_text=<span class="string">"更新时间"</span>)</span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">"逻辑删除"</span>, help_text=<span class="string">"逻辑删除"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 为抽象模型类, 用于其他模型来继承，数据库迁移时不会创建BaseModel表</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line">        verbose_name = <span class="string">"公共字段表"</span></span><br><span class="line">        db_table = <span class="string">'BaseModel'</span></span><br></pre></td></tr></tbody></table></figure><p><code>default=False</code>默认情况下不删除</p><h2 id="各模块的模型"><a href="#各模块的模型" class="headerlink" title="各模块的模型"></a>各模块的模型</h2><p><code>configures</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configures.models.Configures</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.base_models <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configures</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(verbose_name=<span class="string">'id主键'</span>, primary_key=<span class="literal">True</span>, help_text=<span class="string">'id主键'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">'配置名称'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'配置名称'</span>)</span><br><span class="line">    interface = models.ForeignKey(<span class="string">'interfaces.Interfaces'</span>,</span><br><span class="line">                                  on_delete=models.CASCADE,</span><br><span class="line">                                  related_name=<span class="string">'configures'</span>,</span><br><span class="line">                                  help_text=<span class="string">'所属接口'</span>)</span><br><span class="line">    author = models.CharField(<span class="string">'编写人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'编写人员'</span>)</span><br><span class="line">    request = models.TextField(<span class="string">'请求信息'</span>, help_text=<span class="string">'请求信息'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'tb_configures'</span></span><br><span class="line">        verbose_name = <span class="string">'配置信息'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></figure><p><code>debugtalks</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># debugtalks.models.DebugTalks</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.base_models <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DebugTalks</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(verbose_name=<span class="string">'id主键'</span>, primary_key=<span class="literal">True</span>, help_text=<span class="string">'id主键'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">'debugtalk文件名称'</span>, max_length=<span class="number">200</span>, default=<span class="string">'debugtalk.py'</span>, help_text=<span class="string">'debugtalk文件名称'</span>)</span><br><span class="line">    debugtalk = models.TextField(null=<span class="literal">True</span>, default=<span class="string">'#debugtalk.py'</span>, help_text=<span class="string">'debugtalk.py文件'</span>)</span><br><span class="line">    project = models.OneToOneField(<span class="string">'projects.Projects'</span>, on_delete=models.CASCADE,</span><br><span class="line">                                   related_name=<span class="string">'debugtalks'</span>, help_text=<span class="string">'所属项目'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'tb_debugtalks'</span></span><br><span class="line">        verbose_name = <span class="string">'debugtalk.py文件'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></figure><p><code>interfaces</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># interfaces.models.Interfaces</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.base_models <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interfaces</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(verbose_name=<span class="string">'id主键'</span>, primary_key=<span class="literal">True</span>, help_text=<span class="string">'id主键'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">'接口名称'</span>, max_length=<span class="number">200</span>, unique=<span class="literal">True</span>, help_text=<span class="string">'接口名称'</span>)</span><br><span class="line">    project = models.ForeignKey(<span class="string">'projects.Projects'</span>, on_delete=models.CASCADE,</span><br><span class="line">                                related_name=<span class="string">'interfaces'</span>, help_text=<span class="string">'所属项目'</span>)</span><br><span class="line">    tester = models.CharField(<span class="string">'测试人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'测试人员'</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">'简要描述'</span>, max_length=<span class="number">200</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, help_text=<span class="string">'简要描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'tb_interfaces'</span></span><br><span class="line">        verbose_name = <span class="string">'接口信息'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></figure><p><code>projects</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projects.models.Projects</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.base_models <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Projects</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(verbose_name=<span class="string">'id主键'</span>, primary_key=<span class="literal">True</span>, help_text=<span class="string">'id主键'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">'项目名称'</span>, max_length=<span class="number">200</span>, unique=<span class="literal">True</span>, help_text=<span class="string">'项目名称'</span>)</span><br><span class="line">    leader = models.CharField(<span class="string">'负责人'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'项目负责人'</span>)</span><br><span class="line">    tester = models.CharField(<span class="string">'测试人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'项目测试人员'</span>)</span><br><span class="line">    programmer = models.CharField(<span class="string">'开发人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'开发人员'</span>)</span><br><span class="line">    publish_app = models.CharField(<span class="string">'发布应用'</span>, max_length=<span class="number">100</span>, help_text=<span class="string">'发布应用'</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">'简要描述'</span>, max_length=<span class="number">200</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, default=<span class="string">''</span>, help_text=<span class="string">'简要描述'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'tb_projects'</span></span><br><span class="line">        verbose_name = <span class="string">'项目信息'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></figure><p><code>reports</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reports.models.Reports</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.base_models <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reports</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(verbose_name=<span class="string">'id主键'</span>, primary_key=<span class="literal">True</span>, help_text=<span class="string">'id主键'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">'报告名称'</span>, max_length=<span class="number">200</span>, unique=<span class="literal">True</span>, help_text=<span class="string">'报告名称'</span>)</span><br><span class="line">    result = models.BooleanField(<span class="string">'执行结果'</span>, default=<span class="number">1</span>, help_text=<span class="string">'执行结果'</span>)   <span class="comment"># 1为成功, 0为失败</span></span><br><span class="line">    count = models.IntegerField(<span class="string">'用例总数'</span>, help_text=<span class="string">'总用例数'</span>)</span><br><span class="line">    success = models.IntegerField(<span class="string">'成功总数'</span>, help_text=<span class="string">'成功总数'</span>)</span><br><span class="line">    html = models.TextField(<span class="string">'报告HTML源码'</span>, help_text=<span class="string">'报告HTML源码'</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, default=<span class="string">''</span>)</span><br><span class="line">    summary = models.TextField(<span class="string">'报告详情'</span>, help_text=<span class="string">'报告详情'</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, default=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'tb_reports'</span></span><br><span class="line">        verbose_name = <span class="string">'测试报告'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></figure><p><code>testcases</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># testcases.models.Testcases</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.base_models <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testcases</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(verbose_name=<span class="string">'id主键'</span>, primary_key=<span class="literal">True</span>, help_text=<span class="string">'id主键'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">'用例名称'</span>, max_length=<span class="number">50</span>, unique=<span class="literal">True</span>, help_text=<span class="string">'用例名称'</span>)</span><br><span class="line">    interface = models.ForeignKey(<span class="string">'interfaces.Interfaces'</span>, on_delete=models.CASCADE,</span><br><span class="line">                                  help_text=<span class="string">'所属接口'</span>)</span><br><span class="line">    <span class="comment"># include = models.ForeignKey('', on_delete=models.SET_NULL, null=True, related_name='testcases')</span></span><br><span class="line">    include = models.TextField(<span class="string">'前置'</span>, null=<span class="literal">True</span>, help_text=<span class="string">'用例执行前置顺序'</span>)</span><br><span class="line">    author = models.CharField(<span class="string">'编写人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'编写人员'</span>)</span><br><span class="line">    request = models.TextField(<span class="string">'请求信息'</span>, help_text=<span class="string">'请求信息'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'tb_testcases'</span></span><br><span class="line">        verbose_name = <span class="string">'用例信息'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></figure><p><code>testsuits</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># testsuits.models.Testsuits</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.base_models <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testsuits</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(verbose_name=<span class="string">'id主键'</span>, primary_key=<span class="literal">True</span>, help_text=<span class="string">'id主键'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">'套件名称'</span>, max_length=<span class="number">200</span>, unique=<span class="literal">True</span>, help_text=<span class="string">'套件名称'</span>)</span><br><span class="line">    project = models.ForeignKey(<span class="string">'projects.Projects'</span>, on_delete=models.CASCADE,</span><br><span class="line">                                related_name=<span class="string">'testsuits'</span>, help_text=<span class="string">'所属项目'</span>)</span><br><span class="line">    <span class="comment"># include = models.TextField(null=False)</span></span><br><span class="line">    include = models.TextField(<span class="string">'包含的接口'</span>, null=<span class="literal">False</span>, help_text=<span class="string">'包含的接口'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'tb_testsuits'</span></span><br><span class="line">        verbose_name = <span class="string">'套件信息'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></figure><h2 id="projects需求"><a href="#projects需求" class="headerlink" title="projects需求"></a><code>projects</code>需求</h2><ul><li>删除项目时，只进行逻辑删除</li><li>获取项目列表信息时，要求能获取此项目下的「接口总数」，「用例总数」，「配置总数」，「套件总数」，同时输出创建时间，格式为2019-11-05 11:43:00</li><li>要求提供获取此项目下的所有项目名的接口</li><li>要求提供获取此项目下的所有接口信息的接口</li></ul><h3 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> debugtalks.models <span class="keyword">import</span> DebugTalks</span><br><span class="line"><span class="keyword">from</span> interfaces.models <span class="keyword">import</span> Interfaces</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Projects</span><br><span class="line">        exclude = (<span class="string">'update_time'</span>, <span class="string">'is_delete'</span>)</span><br><span class="line"></span><br><span class="line">        extra_kwargs = {</span><br><span class="line">            <span class="string">'create_time'</span>: {</span><br><span class="line">                <span class="string">'read_only'</span>: <span class="literal">True</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        project_obj = <span class="built_in">super</span>().create(validated_data)</span><br><span class="line">        DebugTalks.objects.create(project=project_obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> project_obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectNameSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Projects</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceNameSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Interfaces</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'tester'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfacesByProjectIdSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    interfaces_set = InterfaceNameSerializer(read_only=<span class="literal">True</span>, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Projects</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'interfaces_set'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>继承<code>ModelViewSet</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> NotFound</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> serializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> .utils <span class="keyword">import</span> get_count_by_project</span><br><span class="line"><span class="keyword">from</span> interfaces.models <span class="keyword">import</span> Interfaces</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">    返回项目（多个）列表数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    create:</span></span><br><span class="line"><span class="string">    创建项目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    返回项目（单个）详情数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    update:</span></span><br><span class="line"><span class="string">    更新（全）项目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    partial_update:</span></span><br><span class="line"><span class="string">    更新（部分）项目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    destroy:</span></span><br><span class="line"><span class="string">    删除项目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    names:</span></span><br><span class="line"><span class="string">    返回所有项目ID和名称</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    interfaces:</span></span><br><span class="line"><span class="string">    返回某个项目的所有接口信息（ID和名称）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Projects.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = serializer.ProjectModelSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticated,)</span><br><span class="line">    ordering_fields = (<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_destroy</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        instance.is_delete = <span class="literal">True</span></span><br><span class="line">        instance.save()  <span class="comment"># 逻辑删除</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">'get'</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">names</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        queryset = self.get_queryset()</span><br><span class="line">        serializer = serializer.ProjectNameSerializer(instance=queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">'get'</span>], detail=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">interfaces</span>(<span class="params">self, request, pk=<span class="literal">None</span></span>):</span></span><br><span class="line">        interface_objs = Interfaces.objects.<span class="built_in">filter</span>(project_id=pk, is_delete=<span class="literal">False</span>)</span><br><span class="line">        one_list = []</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> interface_objs:</span><br><span class="line">            one_list.append({</span><br><span class="line">                <span class="string">'id'</span>: obj.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">'name'</span>: obj.name</span><br><span class="line">            })</span><br><span class="line">        <span class="keyword">return</span> Response(data=one_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            datas = serializer.data</span><br><span class="line">            datas = get_count_by_project(datas)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(datas)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        datas = serializer.data</span><br><span class="line">        datas = get_count_by_project(datas)</span><br><span class="line">        <span class="keyword">return</span> Response(datas)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十三)</title>
      <link href="article/213b449.html"/>
      <url>article/213b449.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十三"><a href="#测试开发进阶-三十三" class="headerlink" title="测试开发进阶(三十三)"></a>测试开发进阶(三十三)</h1><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">登录接口</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">${ENV(USERNAME)}</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">${ENV(PASSWORD)}</span></span><br><span class="line"><span class="attr">request:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://127.0.0.1:8000/user/login/</span></span><br><span class="line">    <span class="attr">method:</span> <span class="string">POST</span></span><br><span class="line">    <span class="attr">headers:</span></span><br><span class="line">        <span class="attr">Content-Type:</span> <span class="string">"application/json"</span></span><br><span class="line">    <span class="attr">json:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">$username</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">$password</span></span><br><span class="line"><span class="attr">validate:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">"status_code"</span>, <span class="number">200</span>]</span><br><span class="line"><span class="attr">extract:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uname:</span> <span class="string">content.username</span></span><br></pre></td></tr></tbody></table></figure><p>可以修改<code>variables</code>定义变量，导入环境变量作为值</p><p><code>request</code>中可以使用<code>$变量名</code>来获取<code>variables</code>区域下的变量</p><span id="more"></span><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>可以调用<code>debugtalk.py</code>中的函数</p><p>例如在该文件中添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_agent</span>():</span></span><br><span class="line">    user_agents = [<span class="string">'Mozilla/5.0 AAA'</span>, <span class="string">'Mozilla/5.0 BBB'</span>, <span class="string">'Mozilla/5.0 CCC'</span>]</span><br><span class="line">    <span class="keyword">return</span> random.choice(user_agents)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">登录接口</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">${ENV(USERNAME)}</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">${ENV(PASSWORD)}</span></span><br><span class="line"><span class="attr">request:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://127.0.0.1:8000/user/login/</span></span><br><span class="line">    <span class="attr">method:</span> <span class="string">POST</span></span><br><span class="line">    <span class="attr">headers:</span></span><br><span class="line">        <span class="attr">Content-Type:</span> <span class="string">"application/json"</span></span><br><span class="line">        <span class="attr">User-Agent:</span> <span class="string">${get_user_agent()}</span></span><br><span class="line">    <span class="attr">json:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">$username</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">$password</span></span><br><span class="line"><span class="attr">validate:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">"status_code"</span>, <span class="number">200</span>]</span><br></pre></td></tr></tbody></table></figure><p>使用<code>${get_user_agent()}</code></p><p>这样就可以动态的使用<code>User-Agent</code></p><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><p>可以用的响应属性：</p><ul><li>available</li><li>response</li><li>status_code</li><li>cookies</li><li> elapsed</li><li>headers </li><li>content</li><li>text </li><li>json</li><li>encoding</li><li>ok</li><li>reason</li><li>url</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">"headers.Content-Type"</span>, <span class="string">"application/json"</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> {<span class="attr">check:</span> <span class="string">"headers.Content-Type"</span>,<span class="attr">comparator:</span> <span class="string">"eq"</span>,<span class="attr">expect:</span> <span class="string">"application/json"</span>}</span><br></pre></td></tr></tbody></table></figure><p>上面两种写法效果一致</p><blockquote><ul><li>check：指定断言哪一个字段（实际值）</li></ul></blockquote><p><code>python3.7/site-packages/httprunner/built_in.py</code></p><blockquote><ul><li>comparator：指定断言的规则<ul><li>eq 等于</li><li>lt小于</li><li>lte</li><li>gt大于</li><li>gte</li><li>str_eq</li><li>len_eq长度等于</li><li>len_gt</li><li>contains 包含</li></ul></li></ul></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">built-in comparators</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">equals</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> check_value == expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">less_than</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> check_value &lt; expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">less_than_or_equals</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> check_value &lt;= expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greater_than</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> check_value &gt; expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greater_than_or_equals</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> check_value &gt;= expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_equals</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> check_value != expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_equals</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> builtin_str(check_value) == builtin_str(expect_value)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length_equals</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(expect_value, integer_types)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(check_value) == expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length_greater_than</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(expect_value, integer_types)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(check_value) &gt; expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length_greater_than_or_equals</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(expect_value, integer_types)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(check_value) &gt;= expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length_less_than</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(expect_value, integer_types)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(check_value) &lt; expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length_less_than_or_equals</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(expect_value, integer_types)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(check_value) &lt;= expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contains</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(check_value, (<span class="built_in">list</span>, <span class="built_in">tuple</span>, <span class="built_in">dict</span>, basestring))</span><br><span class="line">    <span class="keyword">assert</span> expect_value <span class="keyword">in</span> check_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contained_by</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(expect_value, (<span class="built_in">list</span>, <span class="built_in">tuple</span>, <span class="built_in">dict</span>, basestring))</span><br><span class="line">    <span class="keyword">assert</span> check_value <span class="keyword">in</span> expect_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">type_match</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_type</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(name, <span class="built_in">type</span>):</span><br><span class="line">            <span class="keyword">return</span> name</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(name, basestring):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> __builtins__[name]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(check_value, get_type(expect_value))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regex_match</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(expect_value, basestring)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(check_value, basestring)</span><br><span class="line">    <span class="keyword">assert</span> re.match(expect_value, check_value)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startswith</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> builtin_str(check_value).startswith(builtin_str(expect_value))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">endswith</span>(<span class="params">check_value, expect_value</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> builtin_str(check_value).endswith(builtin_str(expect_value))</span><br></pre></td></tr></tbody></table></figure><blockquote><ul><li>expect预期结果</li></ul></blockquote><h2 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h2><p><code>testcases/login.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">"登录接口测试"</span></span><br><span class="line">    <span class="attr">variables:</span></span><br><span class="line">        <span class="attr">device_sn:</span> <span class="string">"ABC"</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">${ENV(USERNAME)}</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">${ENV(PASSWORD)}</span></span><br><span class="line">    <span class="attr">base_url:</span> <span class="string">"http://127.0.0.1:8000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">teststeps:</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">登录</span></span><br><span class="line">    <span class="attr">api:</span> <span class="string">api/login.yml</span></span><br><span class="line">    <span class="attr">validate:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">"status_code"</span>, <span class="number">200</span>]</span><br></pre></td></tr></tbody></table></figure><p>继承<code>api/login.yml</code>会与本区域定义的<code>validate</code>合并覆盖</p><p>一般api路径下的断言只进行基础类型的断言例如<code>status_code</code></p><p>testcases会进行其他的断言</p><h3 id="方式一：使用yaml"><a href="#方式一：使用yaml" class="headerlink" title="方式一：使用yaml"></a>方式一：使用yaml</h3><p><code>testsuites/api_testsuite.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">接口测试套件</span></span><br><span class="line">    <span class="attr">base_url:</span> <span class="string">"http://127.0.0.1:8000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">testcases:</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">登录接口</span></span><br><span class="line">    <span class="attr">testcase:</span> <span class="string">testcases/login.yml</span></span><br><span class="line">    <span class="attr">parameters:</span></span><br><span class="line">        <span class="comment"># 方式一</span></span><br><span class="line">        <span class="comment"># 多个具有关联性的参数，需要将其定义在一起，并且采用短横线进行连接</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">title-username-password-status_code-contain_msg:</span></span><br><span class="line">              <span class="bullet">-</span> [<span class="string">"正常登录"</span>, <span class="string">"zhongxin"</span>, <span class="string">"123456"</span>, <span class="number">200</span>, <span class="string">"token"</span>]</span><br><span class="line">              <span class="bullet">-</span> [<span class="string">"密码错误"</span>, <span class="string">"zhongxin"</span>, <span class="string">"1234567"</span>, <span class="number">400</span>, <span class="string">"non_field_errors"</span>]</span><br><span class="line">              <span class="bullet">-</span> [<span class="string">"账号错误"</span>, <span class="string">"zhongxin11"</span>, <span class="string">"123456"</span>, <span class="number">400</span>, <span class="string">"non_field_errors"</span>]</span><br><span class="line">              <span class="bullet">-</span> [<span class="string">"用户名为空"</span>, <span class="string">""</span>, <span class="string">"123456"</span>, <span class="number">400</span>, <span class="string">"username"</span>]</span><br><span class="line">              <span class="bullet">-</span> [<span class="string">"密码为空"</span>, <span class="string">"zhongxin"</span>, <span class="string">""</span>, <span class="number">400</span>, <span class="string">"password"</span>]</span><br></pre></td></tr></tbody></table></figure><p>运行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hrun testsuites/api_testsuite.yml</span></span><br></pre></td></tr></tbody></table></figure><p>查看报告</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8jf2fbbn1j31b30u0aum.jpg" alt="报告"></p><h3 id="方式二：读取文件"><a href="#方式二：读取文件" class="headerlink" title="方式二：读取文件"></a>方式二：读取文件</h3><p>新建一个csv文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">title,username,password,status_code,contain_msg</span></span><br><span class="line"><span class="string">正常登录,</span> <span class="string">zhongxin,</span> <span class="number">123456</span><span class="string">,</span> <span class="number">200</span><span class="string">,</span> <span class="string">token</span></span><br><span class="line"><span class="string">密码错误,</span> <span class="string">zhongxin,</span> <span class="number">1234567</span><span class="string">,</span> <span class="number">400</span><span class="string">,</span> <span class="string">non_field_errors</span></span><br><span class="line"><span class="string">账号错误,</span> <span class="string">zhongxin11,</span> <span class="number">123456</span><span class="string">,</span> <span class="number">400</span><span class="string">,</span> <span class="string">non_field_errors</span></span><br><span class="line"><span class="string">用户名为空,</span> <span class="string">,</span> <span class="number">123456</span><span class="string">,</span> <span class="number">400</span><span class="string">,</span> <span class="string">username</span></span><br><span class="line"><span class="string">密码为空,</span> <span class="string">zhongxin,</span> <span class="string">,</span> <span class="number">400</span><span class="string">,</span> <span class="string">password</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">title-username-password-status_code-contain_msg:</span> <span class="string">${P(datas/accounts.csv)}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="方式三：使用函数"><a href="#方式三：使用函数" class="headerlink" title="方式三：使用函数"></a>方式三：使用函数</h3><p>在<code>debugtalk.py</code>添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_accounts</span>():</span></span><br><span class="line">    accounts = [</span><br><span class="line">        {<span class="string">"title"</span>: <span class="string">"正常登录"</span>, <span class="string">"username"</span>: <span class="string">"zhongxin"</span>, <span class="string">"password"</span>: <span class="string">"123456"</span>, <span class="string">"status_code"</span>: <span class="number">200</span>, <span class="string">"contain_msg"</span>: <span class="string">"token"</span>},</span><br><span class="line">        {<span class="string">"title"</span>: <span class="string">"密码错误"</span>, <span class="string">"username"</span>: <span class="string">"zhongxin"</span>, <span class="string">"password"</span>: <span class="string">"1234567"</span>, <span class="string">"status_code"</span>: <span class="number">400</span>, <span class="string">"contain_msg"</span>: <span class="string">"non_field_errors"</span>},</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> accounts</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">title-username-password-status_code-contain_msg:</span> <span class="string">${get_accounts()}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用py文件调用httprunner"><a href="#使用py文件调用httprunner" class="headerlink" title="使用py文件调用httprunner"></a>使用py文件调用httprunner</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> httprunner.api <span class="keyword">import</span> HttpRunner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建HttpRunner对象</span></span><br><span class="line"><span class="comment"># failfast:False 用例执行失败后不终止</span></span><br><span class="line">runner = HttpRunner(failfast=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 运行用例</span></span><br><span class="line"><span class="comment"># run方法支持如下参数</span></span><br><span class="line"><span class="comment"># yaml用例文件的路径</span></span><br><span class="line"><span class="comment"># 字典(用例的信息)</span></span><br><span class="line">runner.run(<span class="string">'/Users/zhongxin/Desktop/httprunner_learn/testcases/login.yml'</span>)</span><br><span class="line">print(runner.summary)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十二)</title>
      <link href="article/7ce09462.html"/>
      <url>article/7ce09462.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十二"><a href="#测试开发进阶-三十二" class="headerlink" title="测试开发进阶(三十二)"></a>测试开发进阶(三十二)</h1><h2 id="开启跨域"><a href="#开启跨域" class="headerlink" title="开启跨域"></a>开启跨域</h2><p>安装<code>django-cors-headers</code></p><ol><li>添加应用</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">    <span class="string">'user.apps.UserConfig'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>2.添加中间件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>添加白名单</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span>  <span class="comment"># 所有域名都允许，默认False</span></span><br><span class="line"><span class="comment"># CORS_ORIGIN_WHITELIST = [</span></span><br><span class="line"><span class="comment">#     # 指定可以访问后端的域名</span></span><br><span class="line"><span class="comment">#     "http://127.0.0.1:8080",</span></span><br><span class="line"><span class="comment">#     "http://localhost:8080",</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span>  <span class="comment"># 语序跨域时携带Cookie，默认False</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8hqcrkp9ej31b30u01hq.jpg" alt="登录完成"></p><h2 id="HttpRunner"><a href="#HttpRunner" class="headerlink" title="HttpRunner"></a>HttpRunner</h2><p>接口测试有哪些方法</p><ul><li>工具：Postman</li><li>使用代码创建接口测试框架</li></ul><p>用例数据存放在哪？excel</p><p>unittest + ddt 数据驱动，测数据与测试代码分离</p><p>日志器</p><p>配置文件</p><p>数据库校验：pymysql</p><p>发起请求：request</p><p>参数化：正则匹配</p><p>接口依赖：动态创建类属性的方式来处理</p><p>Jenkins实现持续集成</p><p>HttpRunner 将上述框架进行封装，几乎可以零代码，高效率的进行测试</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install httprunner</span></span><br></pre></td></tr></tbody></table></figure><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hrun --startproject httprunner_learn</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8hrbjligej30ki0fkta5.jpg" alt="创建项目"></p><h3 id="最小单元"><a href="#最小单元" class="headerlink" title="最小单元"></a>最小单元</h3><p>新建<code>api/login.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">登录接口</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">    <span class="attr">var1:</span> <span class="string">value1</span></span><br><span class="line">    <span class="attr">var2:</span> <span class="string">value2</span></span><br><span class="line"><span class="attr">request:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://127.0.0.1:8000/user/login/</span></span><br><span class="line">    <span class="attr">method:</span> <span class="string">POST</span></span><br><span class="line">    <span class="attr">headers:</span></span><br><span class="line">        <span class="attr">Content-Type:</span> <span class="string">"application/json"</span></span><br><span class="line">    <span class="attr">json:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">zhongxin</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">validate:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">"status_code"</span>, <span class="number">200</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhongxindeMacBook-Pro:httprunner_learn zhongxin$ hrun api/login.ym</span><br></pre></td></tr></tbody></table></figure><h3 id="查看报告"><a href="#查看报告" class="headerlink" title="查看报告"></a>查看报告</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8hrgd3ueej31b30u0qlz.jpg" alt="报告"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8hrhph7lrj31b30u01dd.jpg" alt="测试2"></p><h3 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h3><p><code>.env</code>文件:<code>${ENV(USERNAME)}</code></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USERNAME=zhongxin</span><br><span class="line">PASSWORD=123456</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">登录接口</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">    <span class="attr">var1:</span> <span class="string">value1</span></span><br><span class="line">    <span class="attr">var2:</span> <span class="string">value2</span></span><br><span class="line"><span class="attr">request:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://127.0.0.1:8000/user/login/</span></span><br><span class="line">    <span class="attr">method:</span> <span class="string">POST</span></span><br><span class="line">    <span class="attr">headers:</span></span><br><span class="line">        <span class="attr">Content-Type:</span> <span class="string">"application/json"</span></span><br><span class="line">    <span class="attr">json:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">${ENV(USERNAME)}</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">${ENV(PASSWORD)}</span></span><br><span class="line"><span class="attr">validate:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">"status_code"</span>, <span class="number">200</span>]</span><br></pre></td></tr></tbody></table></figure><p>查看完整日志：<code> hrun api/login.yml --log-level debug</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ hrun /Users/zhongxin/Desktop/httprunner_learn/api/login.yml --log-level debug</span><br><span class="line">INFO     Loading environment variables from /Users/zhongxin/Desktop/httprunner_learn/.env</span><br><span class="line">DEBUG    Set OS environment variable: USERNAME</span><br><span class="line">DEBUG    Set OS environment variable: PASSWORD</span><br><span class="line">INFO     Start to run testcase: </span><br><span class="line">登录接口</span><br><span class="line">INFO     POST http://127.0.0.1:8000/user/login/</span><br><span class="line">DEBUG    request kwargs(raw): {'headers': {'Content-Type': 'application/json'}, 'json': {'username': 'zhongxin', 'password': '123456'}, 'verify': True}</span><br><span class="line">DEBUG    processed request:</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> POST http://127.0.0.1:8000/user/login/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> kwargs: {<span class="string">'headers'</span>: {<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>}, <span class="string">'json'</span>: {<span class="string">'username'</span>: <span class="string">'zhongxin'</span>, <span class="string">'password'</span>: <span class="string">'123456'</span>}, <span class="string">'verify'</span>: True, <span class="string">'timeout'</span>: 120}</span></span><br><span class="line">DEBUG    </span><br><span class="line">================== request details ==================</span><br><span class="line">url              : 'http://127.0.0.1:8000/user/login/'</span><br><span class="line">method           : 'POST'</span><br><span class="line">headers          : {'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '46'}</span><br><span class="line">body             : b'{"username": "zhongxin", "password": "123456"}'</span><br><span class="line"></span><br><span class="line">DEBUG    </span><br><span class="line">================== response details ==================</span><br><span class="line">ok               : True</span><br><span class="line">url              : 'http://127.0.0.1:8000/user/login/'</span><br><span class="line">status_code      : 200</span><br><span class="line">reason           : 'OK'</span><br><span class="line">cookies          : {}</span><br><span class="line">encoding         : None</span><br><span class="line">headers          : {'Date': 'Thu, 31 Oct 2019 14:45:53 GMT', 'Server': 'WSGIServer/0.2 CPython/3.7.1', 'Content-Type': 'application/json', 'Vary': 'Accept, Origin', 'Allow': 'POST, OPTIONS', 'X-Frame-Options': 'SAMEORIGIN', 'Content-Length': '199'}</span><br><span class="line">content_type     : 'application/json'</span><br><span class="line">json             : {'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6Inpob25neGluIiwiZXhwIjoxNTcyNjE5NTUzLCJlbWFpbCI6IjQ5MDMzNjUzNEBxcS5jb20ifQ.yzGNYIZhpeoDqHzZKg_VOY9kuBpmhHAxqqfEyn91BHA'}</span><br><span class="line"></span><br><span class="line">INFO     status_code: 200, response_time(ms): 205.25 ms, response_length: 199 bytes</span><br><span class="line"></span><br><span class="line">DEBUG    start to validate.</span><br><span class="line">DEBUG    extract: status_code=&gt; 200</span><br><span class="line">DEBUG    validate: status_code equals 200(int)==&gt; pass</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.215s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">DEBUG    No html report template specified, use default.</span><br><span class="line">INFO     Start to render Html report ...</span><br><span class="line">INFO     Generated Html report: /Users/zhongxin/reports/1572533153.html</span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十一)</title>
      <link href="article/d3d10f00.html"/>
      <url>article/d3d10f00.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十一"><a href="#测试开发进阶-三十一" class="headerlink" title="测试开发进阶(三十一)"></a>测试开发进阶(三十一)</h1><h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><h3 id="Json-Web-Token认证"><a href="#Json-Web-Token认证" class="headerlink" title="Json Web Token认证"></a>Json Web Token认证</h3><p>最常见的认证机制</p><ul><li>Session认证</li><li>Token认证<span id="more"></span><h4 id="Session认证"><a href="#Session认证" class="headerlink" title="Session认证"></a>Session认证</h4></li></ul><p>保持在服务端，增加服务器开销</p><p>分布式架构中，难以维持Session会话同步</p><p>CSRF攻击风险(跨站请求)</p><h4 id="Token认证"><a href="#Token认证" class="headerlink" title="Token认证"></a>Token认证</h4><p>保存在客户端</p><p>跨语言，跨平台</p><p>扩展性强</p><p>鉴权性能高</p><h3 id="JWT（Json-Web-Token）"><a href="#JWT（Json-Web-Token）" class="headerlink" title="JWT（Json Web Token）"></a>JWT（Json Web Token）</h3><p>由三部分组成</p><ul><li>header</li></ul><p>声明类型</p><p>声明加密算法</p><p>base64加密，可以解密</p><ul><li>playload</li></ul><p>存放过期时间，签发用户等</p><p>可以添加用户的非敏感信息</p><p>base64加密，可以解密</p><ul><li>signature</li></ul><p>由三部分组成</p><p>使用base64加密之后的header + . + 使用base64加密之后的playload + 使用HS256算法加密，同时secret加盐处理</p><h3 id="安装djangorestframework-jwt"><a href="#安装djangorestframework-jwt" class="headerlink" title="安装djangorestframework-jwt"></a>安装djangorestframework-jwt</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install djangorestframework-jwt</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在<code>setting.py</code>中添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [</span><br><span class="line">        <span class="comment"># 使用JWT Token认证</span></span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</span><br><span class="line">        <span class="comment"># Basic类型的认证（账号和密码）</span></span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="comment"># Session会话认证</span></span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">    ],</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><p>用户处：<code>user/urls.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'login/'</span>, obtain_jwt_token),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>主路由：</p><p><code>ApiTest/urls.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'users/'</span>, include(<span class="string">'user.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>不登录的访问</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8erahlowrj31b30u0tqr.jpg" alt="不登录的访问"></p><p>登录后的返回内容</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8erod3881j31wi0f80tr.jpg" alt="登录"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8erozathgj31b30u0dyd.jpg" alt="获取到token"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP <span class="number">200</span> OK</span><br><span class="line">Allow: POST, OPTIONS</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Vary: Accept</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"token"</span>: <span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6Inpob25neGluIiwiZXhwIjoxNTcyMzA5MzQ2LCJlbWFpbCI6IjQ5MDMzNjUzNEBxcS5jb20ifQ.ZDEeBAgSuPyvh1KBnF1sSY9w22guSRHXm8sbgqEWusg"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">base64.b64decode(<span class="string">'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9'</span>)</span><br><span class="line"><span class="comment"># b'{"typ":"JWT","alg":"HS256"}'</span></span><br></pre></td></tr></tbody></table></figure><p>认证过期时间</p><p><code>./site-packages/rest_framework_jwt/settings.py</code></p><p>第40行</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(seconds=<span class="number">300</span>),</span><br></pre></td></tr></tbody></table></figure><p>Token默认过期时间5分钟</p><p>自行修改过期时间<code>ApiTest/settings.py</code></p><p>过期时间为1天</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JWT_AUTH = {</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>请求Token 头</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'JWT_AUTH_HEADER_PREFIX'</span>: <span class="string">'JWT'</span>,</span><br></pre></td></tr></tbody></table></figure><h3 id="使用httpie发起包含token的内容"><a href="#使用httpie发起包含token的内容" class="headerlink" title="使用httpie发起包含token的内容"></a>使用httpie发起包含token的内容</h3><p>安装<code>httpie-jwt-auth</code>插件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> JWT_AUTH_TOKEN=<span class="string">'你的token'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> JWT_AUTH_PREFIX=<span class="string">'JWT'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> http -A jwt :8000/projects/ page==2 size==2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="修改载荷"><a href="#修改载荷" class="headerlink" title="修改载荷"></a>修改载荷</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwt_response_payload_handler</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the response data for both the login and refresh views.</span></span><br><span class="line"><span class="string">    Override to return a custom response such as including the</span></span><br><span class="line"><span class="string">    serialized representation of the User.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def jwt_response_payload_handler(token, user=None, request=None):</span></span><br><span class="line"><span class="string">        return {</span></span><br><span class="line"><span class="string">            'token': token,</span></span><br><span class="line"><span class="string">            'user': UserSerializer(user, context={'request': request}).data</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="string">'token'</span>: token</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>在<code>utils/jwt_handler.py</code>重写</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwt_response_payload_handler</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="string">'token'</span>: token,</span><br><span class="line">        <span class="string">'user_id'</span>: user.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">'username'</span>: user.username,</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JWT_AUTH = {</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">    <span class="string">'JWT_PAYLOAD_GET_USERNAME_HANDLER'</span>: <span class="string">'utils.jwt_handler.jwt_response_payload_handler'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Django自带的用户模型"><a href="#Django自带的用户模型" class="headerlink" title="Django自带的用户模型"></a>Django自带的用户模型</h3><p><code>django.contrib.auth.models.User</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8fgqdhr9xj31s80ne40z.jpg" alt="用户模型"></p><p>查看settings.py可以发现，默认注册了<code>django.contrib.auth</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8fgreca8lj30ou0egtaj.jpg" alt="注册的APP"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8fgsd4egdj326y0iqq6x.jpg" alt="数据库中的用户部分"></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ul><li>用户名（6-20位，不重复）</li><li>邮箱（符合邮箱格式）</li><li>密码（6-20位，和确认密码一致）</li><li>确认密码（6-20位，和密码一致）</li></ul><p><code>user/serializers.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    password_conform = serializers.CharField(label=<span class="string">'确认密码'</span>,</span><br><span class="line">                                             min_length=<span class="number">6</span>,</span><br><span class="line">                                             max_length=<span class="number">20</span>,</span><br><span class="line">                                             write_only=<span class="literal">True</span>,</span><br><span class="line">                                             help_text=<span class="string">'确认密码'</span>,</span><br><span class="line">                                             error_messages={<span class="string">'min_length'</span>: <span class="string">'仅允许6～20个字符的确认密码'</span>,</span><br><span class="line">                                                             <span class="string">'max_length'</span>: <span class="string">'仅允许6～20个字符的确认密码'</span>}</span><br><span class="line">                                             )</span><br><span class="line">    token = serializers.CharField(label=<span class="string">'生成token'</span>,</span><br><span class="line">                                  read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'email'</span>, <span class="string">'password_conform'</span>, <span class="string">'token'</span>)</span><br><span class="line">        extra_kwargs = {</span><br><span class="line">            <span class="string">'username'</span>: {</span><br><span class="line">                <span class="string">'label'</span>: <span class="string">'用户名'</span>,</span><br><span class="line">                <span class="string">'help_text'</span>: <span class="string">'用户名'</span>,</span><br><span class="line">                <span class="string">'min_length'</span>: <span class="number">6</span>,</span><br><span class="line">                <span class="string">'max_length'</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="string">'error_messages'</span>: {<span class="string">'min_length'</span>: <span class="string">'仅允许6～20个字符的用户名'</span>,</span><br><span class="line">                                   <span class="string">'max_length'</span>: <span class="string">'仅允许6～20个字符的用户名'</span>}</span><br><span class="line">            },</span><br><span class="line">            <span class="string">'email'</span>: {</span><br><span class="line">                <span class="string">'label'</span>: <span class="string">'邮箱'</span>,</span><br><span class="line">                <span class="string">'help_text'</span>: <span class="string">'邮箱'</span>,</span><br><span class="line">                <span class="string">'write_only'</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">'required'</span>: <span class="literal">True</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">'password'</span>: {</span><br><span class="line">                <span class="string">'label'</span>: <span class="string">'密码'</span>,</span><br><span class="line">                <span class="string">'help_text'</span>: <span class="string">'密码'</span>,</span><br><span class="line">                <span class="string">'write_only'</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">'min_length'</span>: <span class="number">6</span>,</span><br><span class="line">                <span class="string">'max_length'</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="string">'error_messages'</span>: {<span class="string">'min_length'</span>: <span class="string">'仅允许6～20个字符的密码'</span>,</span><br><span class="line">                                   <span class="string">'max_length'</span>: <span class="string">'仅允许6～20个字符的密码'</span>}</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p><code>user/urls.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'login/'</span>, obtain_jwt_token),</span><br><span class="line">    path(<span class="string">'register/'</span>, views.RegisterView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><code>user/views.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> CreateAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user.serializers <span class="keyword">import</span> RegisterSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterView</span>(<span class="params">CreateAPIView</span>):</span></span><br><span class="line">    serializer_class = RegisterSerializer</span><br><span class="line">    authentication_classes = (JSONWebTokenAuthentication,)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三十)</title>
      <link href="article/8ffb6d81.html"/>
      <url>article/8ffb6d81.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三十"><a href="#测试开发进阶-三十" class="headerlink" title="测试开发进阶(三十)"></a>测试开发进阶(三十)</h1><p><strong>欢迎关注我的公众号「测试游记」</strong></p><h2 id="生成API文档"><a href="#生成API文档" class="headerlink" title="生成API文档"></a>生成API文档</h2><ul><li>coreapi</li><li>Pygments</li><li>Markdown</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install coreapi</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install Pygments</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install Markdown</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="使用coreapi"><a href="#使用coreapi" class="headerlink" title="使用coreapi"></a>使用coreapi</h3><ul><li>DRF框架(&gt;3.10)需要添加</li></ul><p>指定用于支持coreapi的shcema</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">'DEFAULT_SCHEMA_CLASS'</span>: <span class="string">'rest_framework.schemas.coreapi.AutoSchema'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>LearnDjango/urls.py</code>添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'interfaces.urls'</span>)),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'projects.urls'</span>)),</span><br><span class="line">    path(<span class="string">'docs/'</span>, include_docs_urls(title=<span class="string">'测试平台接口文档'</span>,</span><br><span class="line">                                    description=<span class="string">'这是一个接口文档平台'</span>))</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8b7k5bmvcj31b30u0e2c.jpg" alt="接口文档效果"></p><h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><ul><li>单一方法的视图</li></ul><p>直接给视图类添加注释</p><ul><li>多个方法的视图</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsListCreateViewSet</span>(<span class="params">ListCreateAPIView</span>):</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  get:</span></span><br><span class="line"><span class="string">  返回所有项目信息</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  post:</span></span><br><span class="line"><span class="string">  新建项目</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></tbody></table></figure><ul><li>视图集</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  create:</span></span><br><span class="line"><span class="string">  创建项目</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  retrieve:</span></span><br><span class="line"><span class="string">  获取项目详情数据</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  update:</span></span><br><span class="line"><span class="string">  完整更新项目</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  partial_update:</span></span><br><span class="line"><span class="string">  部分更新项目</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  destroy:</span></span><br><span class="line"><span class="string">  删除项目</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  list:</span></span><br><span class="line"><span class="string">  获取项目列表数据</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  names:</span></span><br><span class="line"><span class="string">  获取所有项目名称</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  interfaces:</span></span><br><span class="line"><span class="string">  获取指定项目的所有接口数据</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8b7sm8rrzj31b30u07qg.jpg" alt="注释效果"></p><h3 id="使用drf-yasg"><a href="#使用drf-yasg" class="headerlink" title="使用drf-yasg"></a>使用drf-yasg</h3><p>支持swagger</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install drf-yasg</span></span><br></pre></td></tr></tbody></table></figure><p>添加到<code>INSTALLED_APPS</code>中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'drf_yasg'</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>在<code>LearnDjango/urls.py</code>中<strong>添加</strong>以下部分</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line"><span class="keyword">from</span> drf_yasg.views <span class="keyword">import</span> get_schema_view</span><br><span class="line"><span class="keyword">from</span> drf_yasg <span class="keyword">import</span> openapi</span><br><span class="line"></span><br><span class="line">schema_view = get_schema_view(</span><br><span class="line">    openapi.Info(</span><br><span class="line">        title=<span class="string">'API接口文档'</span>,</span><br><span class="line">        default_version=<span class="string">'v1'</span>,</span><br><span class="line">        description=<span class="string">'这是一个接口文档平台'</span>,</span><br><span class="line">        <span class="comment"># terms_of_service='http://api.xxx.com',</span></span><br><span class="line">        contact=openapi.Contact(email=<span class="string">'490336534@qq.com'</span>),</span><br><span class="line">        license=openapi.License(name=<span class="string">'BSD License'</span>)</span><br><span class="line">    ),</span><br><span class="line">    public=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r'^swagger(?P&lt;format&gt;\.json|\.yaml)$'</span>,</span><br><span class="line">            schema_view.without_ui(cache_timeout=<span class="number">0</span>), name=<span class="string">'schema-json'</span>),</span><br><span class="line">    path(<span class="string">'swagger/'</span>, schema_view.with_ui(<span class="string">'swagger'</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">'schema-swagger'</span>),</span><br><span class="line">    path(<span class="string">'redoc/'</span>, schema_view.with_ui(<span class="string">'redoc'</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">'schema-redoc'</span>)</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>访问：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/swagger.json</span><br></pre></td></tr></tbody></table></figure><p>返回json格式数据</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8b88kx3uij31b30u0e5b.jpg" alt="返回json数据"></p><p>访问</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/swagger.yaml</span><br></pre></td></tr></tbody></table></figure><p>会自动下载一份yaml文件</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8b8aj525lj31b30u01j0.jpg" alt="yaml文件"></p><p>访问</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/swagger/</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8b8b3poyaj31b30u0qlo.jpg" alt="swagger接口文档"></p><p>访问</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/redoc/</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8b8cxvbb8j31b30u0qji.jpg" alt="redoc文档"></p><h2 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8b9cfbiioj30jm0c475d.jpg" alt="创建项目"></p><h3 id="添加日志器"><a href="#添加日志器" class="headerlink" title="添加日志器"></a>添加日志器</h3><p><code>ApiTest/settings.py</code>中添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = {</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_exising_loggers'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'formatters'</span>: {</span><br><span class="line">        <span class="string">'verbose'</span>: {</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(asctime)s - [%(levelname)s] - [msg]%(message)s'</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">'simple'</span>: {</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(asctime)s - [%(levelname)s] - %(name)s - [msg]%(message)s - [%(filename)s:%(lineno)d ]'</span></span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'filters'</span>: {</span><br><span class="line">        <span class="string">'require_debug_true'</span>: {</span><br><span class="line">            <span class="string">'()'</span>: <span class="string">'django.utils.log.RequireDebugTrue'</span>,</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'handlers'</span>: {</span><br><span class="line">        <span class="string">'console'</span>: {</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'filters'</span>: [<span class="string">'require_debug_true'</span>],</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span>,</span><br><span class="line">        },</span><br><span class="line">        <span class="string">'file'</span>: {</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: os.path.join(BASE_DIR, <span class="string">'logs/mytest.log'</span>),  <span class="comment"># 日志文件的位置</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span></span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'loggers'</span>: {</span><br><span class="line">        <span class="string">'mytest'</span>: {  <span class="comment"># 定义了一个名为mytest的日志器</span></span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'file'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>  <span class="comment"># 日志器接收的最低日志级别</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h3><h4 id="创建user子应用"><a href="#创建user子应用" class="headerlink" title="创建user子应用"></a>创建user子应用</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manage.py@ApiTest &gt; startapp user</span><br></pre></td></tr></tbody></table></figure><h4 id="添加INSTALLED-APPS"><a href="#添加INSTALLED-APPS" class="headerlink" title="添加INSTALLED_APPS"></a>添加INSTALLED_APPS</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'user.apps.UserConfig'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十九)</title>
      <link href="article/4b692fc9.html"/>
      <url>article/4b692fc9.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十九"><a href="#测试开发进阶-二十九" class="headerlink" title="测试开发进阶(二十九)"></a>测试开发进阶(二十九)</h1><p><strong>欢迎关注我的公众号「测试游记」</strong></p><h2 id="再次优化"><a href="#再次优化" class="headerlink" title="再次优化"></a>再次优化</h2><p>查看<code>rest_framework.generics.CreateAPIView</code></p><p><code>rest_framework.generics.ListAPIView</code></p><p>可以看到很多重复的代码</p><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g88eh1f4hkj323t0u0178.jpg" alt="image-20191023202028076"></p><p><code>rest_framework.generics.ListCreateAPIView</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListCreateAPIView</span>(<span class="params">mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                        mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                        GenericAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for listing a queryset or creating a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p>所以直接继承</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> projects.serializer <span class="keyword">import</span> ProjectModelSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">generics.ListCreateAPIView</span>):</span></span><br><span class="line">    ordering_fields = [<span class="string">'name'</span>, <span class="string">'leader'</span>]</span><br><span class="line">    queryset = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ProjectModelSerializer</span><br><span class="line">    filter_backends = [DjangoFilterBackend]</span><br><span class="line">    filterset_fields = [<span class="string">'name'</span>, <span class="string">'leader'</span>, <span class="string">'tester'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectDetail</span>(<span class="params">generics.RetrieveUpdateDestroyAPIView</span>):</span></span><br><span class="line">    queryset = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ProjectModelSerializer</span><br></pre></td></tr></tbody></table></figure><h3 id="现有问题"><a href="#现有问题" class="headerlink" title="现有问题"></a>现有问题</h3><ul><li>两个类视图，不能合并</li><li>有相同的get方法</li><li>两个类视图所对应的url地址不一致</li></ul><h2 id="再次优化-1"><a href="#再次优化-1" class="headerlink" title="再次优化"></a>再次优化</h2><p>优化思路：使用动作来触发，而不是请求方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br></pre></td></tr></tbody></table></figure><p><code>viewsets</code>不再支持<code>get/post/put/delete</code>等请求方法，而只支持action动作</p><p>但是<code>ViewSet</code>类中没有提供<code>get_object()</code>,<code>get_serializer</code>等方法</p><p>继承<code>viewsets.GenericViewSet</code></p><p>将两个类合成一个类</p><p>修改url</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> projects <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'project/'</span>, views.ProjectsViewSet.as_view({</span><br><span class="line">        <span class="string">'get'</span>: <span class="string">'list'</span>,</span><br><span class="line">        <span class="string">'post'</span>: <span class="string">'create'</span></span><br><span class="line">    }), name=<span class="string">'projects_list'</span>),</span><br><span class="line">    path(<span class="string">'project/&lt;int:pk&gt;/'</span>, views.ProjectsViewSet.as_view({</span><br><span class="line">        <span class="string">'get'</span>: <span class="string">'retrieve'</span>,</span><br><span class="line">        <span class="string">'put'</span>: <span class="string">'update'</span>,</span><br><span class="line">        <span class="string">'delete'</span>: <span class="string">'destroy'</span></span><br><span class="line">    }), name=<span class="string">'project_detail'</span>)</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g88fkq05bsj323q0u0dut.jpg" alt="viewsets.ModelViewSet"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> projects.serializer <span class="keyword">import</span> ProjectModelSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    ordering_fields = [<span class="string">'name'</span>, <span class="string">'leader'</span>]</span><br><span class="line">    queryset = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ProjectModelSerializer</span><br><span class="line">    filter_backends = [DjangoFilterBackend]</span><br><span class="line">    filterset_fields = [<span class="string">'name'</span>, <span class="string">'leader'</span>, <span class="string">'tester'</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>Django中</p><ul><li>View</li></ul><p>DRF中</p><ul><li>APIView</li><li>GenericAPIView</li><li>mixins扩展类</li><li>CreateAPIView(合并拓展类)</li></ul><p>视图集</p><blockquote><p>action和请求方法的映射</p></blockquote><ul><li>ViewSet</li><li>GenericViewSet </li><li>CreateViewSet</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br></pre></td></tr></tbody></table></figure><ol><li>创建SimpleRouter路由对象</li><li>注册路由</li></ol><blockquote><p>第一个参数prefix为路由前缀，一般添加为应用名称即可<br>第二个参数viewset为视图集「不要加as_view」</p></blockquote><ol start="3"><li>将自动生成的路由添加到列表中</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> projects <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建SimpleRouter路由对象</span></span><br><span class="line">router = routers.SimpleRouter()</span><br><span class="line"><span class="comment"># 2.注册路由</span></span><br><span class="line"><span class="comment"># 第一个参数prefix为路由前缀，一般添加为应用名称即可</span></span><br><span class="line"><span class="comment"># 第二个参数viewset为视图集「不要加as_view」</span></span><br><span class="line">router.register(<span class="string">r'projects'</span>,views.ProjectsViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">        <span class="comment"># 将自动生成的路由添加到列表中</span></span><br><span class="line">    path(<span class="string">''</span>,include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><h3 id="自定义action"><a href="#自定义action" class="headerlink" title="自定义action"></a>自定义action</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">methods=<span class="literal">None</span>, detail=<span class="literal">None</span>, url_path=<span class="literal">None</span>, url_name=<span class="literal">None</span>, **kwargs</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Mark a ViewSet method as a routable action.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Set the `detail` boolean to determine if this action should apply to</span></span><br><span class="line"><span class="string">    instance/detail requests or collection/list requests.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    methods = [<span class="string">'get'</span>] <span class="keyword">if</span> (methods <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">else</span> methods</span><br><span class="line">    methods = [method.lower() <span class="keyword">for</span> method <span class="keyword">in</span> methods]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> detail <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, (</span><br><span class="line">        <span class="string">"@action() missing required argument: 'detail'"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># name and suffix are mutually exclusive</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">in</span> kwargs <span class="keyword">and</span> <span class="string">'suffix'</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">"`name` and `suffix` are mutually exclusive arguments."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        func.mapping = MethodMapper(func, methods)</span><br><span class="line"></span><br><span class="line">        func.detail = detail</span><br><span class="line">        func.url_path = url_path <span class="keyword">if</span> url_path <span class="keyword">else</span> func.__name__</span><br><span class="line">        func.url_name = url_name <span class="keyword">if</span> url_name <span class="keyword">else</span> func.__name__.replace(<span class="string">'_'</span>, <span class="string">'-'</span>)</span><br><span class="line">        func.kwargs = kwargs</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set descriptive arguments for viewsets</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs <span class="keyword">and</span> <span class="string">'suffix'</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            func.kwargs[<span class="string">'name'</span>] = pretty_name(func.__name__)</span><br><span class="line">        func.kwargs[<span class="string">'description'</span>] = func.__doc__ <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></tbody></table></figure><p>可以使用action装饰器来声明自定义的动作</p><p>默认情况下,实例方法名就是动作名</p><p><code>methods</code>参数用于指定该动作支持的请求方法，默认为get</p><p><code>detail</code>用于指定该动作要处理的是否为详情资源对象「url是否需要传递pk值」</p><p>在<code>url.py</code>中添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'project/names/'</span>, views.ProjectsViewSet.as_view({</span><br><span class="line">    <span class="string">'get'</span>, <span class="string">'names'</span></span><br><span class="line">}))</span><br></pre></td></tr></tbody></table></figure><p>新增序列化器</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectNameSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Projects</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br></pre></td></tr></tbody></table></figure><p>在<code>view</code>中添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@action(<span class="params">methods=[<span class="string">'get'</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">names</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    queryset = self.get_queryset()</span><br><span class="line">    serializer = ProjectNameSerializer(instance=queryset, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></tbody></table></figure><p>同理添加Interface</p><p>需要通过<code>projects/1/interfaces/</code>来拿到<code>id=1</code>的<code>interfaces</code>信息</p><p>添加序列化器</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfacesNameSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Interfaces</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'tester'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfacesByProjectIdSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    interfaces_set = InterfacesNameSerializer(read_only=<span class="literal">True</span>, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Projects</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'interfaces_sets'</span>)</span><br></pre></td></tr></tbody></table></figure><p>添加自定义action</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@action(<span class="params">detail=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interfaces</span>(<span class="params">self, reques, *args, **kwargs</span>):</span></span><br><span class="line">    instance = self.get_queryset()</span><br><span class="line">    serializer = InterfacesByProjectIdSerializer(instance=instance)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></tbody></table></figure><h3 id="查看路由"><a href="#查看路由" class="headerlink" title="查看路由"></a>查看路由</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g88hbs56wvj31220io0w3.jpg" alt="路由"></p><p>添加<code>url_path</code>和<code>url_name</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@action(<span class="params">methods=[<span class="string">'get'</span>], detail=<span class="literal">False</span>, url_path=<span class="string">'nm'</span>, url_name=<span class="string">'url_name'</span></span>)</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g88hfjb3cfj30u805875b.jpg" alt="修改名称"></p><blockquote><p>url_path url的路径名<br>url_name url的别名「应用名称-url_name」</p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http :8000/projects/names/</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g88hkaeyd8j31bi0u0ne5.jpg" alt="image-20191023220718885"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十八)</title>
      <link href="article/57b8c52d.html"/>
      <url>article/57b8c52d.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十八"><a href="#测试开发进阶-二十八" class="headerlink" title="测试开发进阶(二十八)"></a>测试开发进阶(二十八)</h1><p><strong>欢迎关注我的公众号「测试游记」</strong></p><blockquote><p>如果前端请求头中没有指定Accept 默认返回json格式的数据</p></blockquote><h3 id="text-html"><a href="#text-html" class="headerlink" title="text/html"></a>text/html</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http -v :8000/project/1/ Accept:text/html</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87b8dlvmuj316y0u0ami.jpg" alt="返回页面"></p><h3 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http -v :8000/project/1/ Accept:application/json</span></span><br></pre></td></tr></tbody></table></figure><p>![返回json](../../../Library/Application Support/typora-user-images/image-20191022214337309.png)</p><h2 id="使用GenericAPIView重写ProjectDetail"><a href="#使用GenericAPIView重写ProjectDetail" class="headerlink" title="使用GenericAPIView重写ProjectDetail"></a>使用GenericAPIView重写ProjectDetail</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectDetail</span>(<span class="params">GenericAPIView</span>):</span></span><br><span class="line">    queryset = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ProjectModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        project = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance=project)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_200_OK)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87bnhnr92j30g00t6gpd.jpg" alt="GenericAPIView"></p><p>从源码中可以看到<code>GenericAPIView</code>中实现了<code>get_object</code>方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_object</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the object the view is displaying.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You may want to override this if you need to provide non-standard</span></span><br><span class="line"><span class="string">    queryset lookups.  Eg if objects are referenced using multiple</span></span><br><span class="line"><span class="string">    keyword arguments in the url conf.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perform the lookup filtering.</span></span><br><span class="line">    lookup_url_kwarg = self.lookup_url_kwarg <span class="keyword">or</span> self.lookup_field</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> lookup_url_kwarg <span class="keyword">in</span> self.kwargs, (</span><br><span class="line">        <span class="string">'Expected view %s to be called with a URL keyword argument '</span></span><br><span class="line">        <span class="string">'named "%s". Fix your URL conf, or set the `.lookup_field` '</span></span><br><span class="line">        <span class="string">'attribute on the view correctly.'</span> %</span><br><span class="line">        (self.__class__.__name__, lookup_url_kwarg)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    filter_kwargs = {self.lookup_field: self.kwargs[lookup_url_kwarg]}</span><br><span class="line">    obj = get_object_or_404(queryset, **filter_kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># May raise a permission denied</span></span><br><span class="line">    self.check_object_permissions(self.request, obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></tbody></table></figure><p>查看<code>self.lookup_field</code>可以找到</p><p><code>lookup_field = 'pk'</code></p><p>进入<code>get_object_or_404</code>可以看到一个解包，这样就拿到了查询集中<code>id=1</code>的内容</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87bqwvg1wj30u00y0akf.jpg" alt="解包"></p><p>所以使用<code>lookup_field</code>类属性，可以修改传入的内容命名</p><ul><li>使用<code>get_serializer</code>获取序列化器</li></ul><h2 id="全局指定排序"><a href="#全局指定排序" class="headerlink" title="全局指定排序"></a>全局指定排序</h2><p>在<code>LearnDjango/settings.py</code>中添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">"DEFAULT_RENDERER_CLASSES"</span>: (</span><br><span class="line">        <span class="comment"># json渲染器为第一优先级</span></span><br><span class="line">        <span class="string">"rest_framework.renderers.JSONRenderer"</span>,</span><br><span class="line">        <span class="comment"># 可浏览的API渲染为第二优先级</span></span><br><span class="line">        <span class="string">"rest_framework.renderers.BrowsableAPIRenderer"</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: [<span class="string">'rest_framework.filters.OrderingFilter'</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install django-filter</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>添加<code>django_filters</code>APP</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'django_filters'</span>,</span><br><span class="line">    <span class="comment"># 注册子应用</span></span><br><span class="line">    <span class="comment"># 子应用名.apps.子应用名首字母大写Config</span></span><br><span class="line">    <span class="string">'projects.apps.ProjectsConfig'</span>,</span><br><span class="line">    <span class="string">'interfaces.apps.InterfacesConfig'</span>,</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>在<code>projects/views.py</code>导入</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br></pre></td></tr></tbody></table></figure><p>在<code>projects.views.ProjectsList</code>添加    </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.在类视图中指定过滤引擎</span></span><br><span class="line">filter_backends = [DjangoFilterBackend]</span><br><span class="line"><span class="comment"># 6.指定过滤的字段</span></span><br><span class="line">filterset_fields = [<span class="string">'name'</span>, <span class="string">'leader'</span>]</span><br></pre></td></tr></tbody></table></figure><p>查询</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http :8000/project/ name==<span class="string">'测试游记1'</span></span></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http :8000/project/ name=='测试游记1'</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Length: 130</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Tue, 22 Oct 2019 14:19:31 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Accept, Origin, Cookie</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "desc": "6666",</span><br><span class="line">        "id": 2,</span><br><span class="line">        "interfaces_set": [],</span><br><span class="line">        "name": "测试游记1",</span><br><span class="line">        "programer": "zhong1",</span><br><span class="line">        "publish_app": "公众号1",</span><br><span class="line">        "tester": "zx1"</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87cb7puzej316y0u0qex.jpg" alt="过滤"></p><h3 id="在全局指定"><a href="#在全局指定" class="headerlink" title="在全局指定"></a>在全局指定</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">"DEFAULT_RENDERER_CLASSES"</span>: (</span><br><span class="line">        <span class="comment"># json渲染器为第一优先级</span></span><br><span class="line">        <span class="string">"rest_framework.renderers.JSONRenderer"</span>,</span><br><span class="line">        <span class="comment"># 可浏览的API渲染为第二优先级</span></span><br><span class="line">        <span class="string">"rest_framework.renderers.BrowsableAPIRenderer"</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: [<span class="string">'rest_framework.filters.OrderingFilter'</span>,</span><br><span class="line">                                <span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">"DEFAULT_RENDERER_CLASSES"</span>: (</span><br><span class="line">        <span class="comment"># json渲染器为第一优先级</span></span><br><span class="line">        <span class="string">"rest_framework.renderers.JSONRenderer"</span>,</span><br><span class="line">        <span class="comment"># 可浏览的API渲染为第二优先级</span></span><br><span class="line">        <span class="string">"rest_framework.renderers.BrowsableAPIRenderer"</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: [<span class="string">'rest_framework.filters.OrderingFilter'</span>,</span><br><span class="line">                                <span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>],</span><br><span class="line">    <span class="comment"># 在全局指定分页的引擎</span></span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="comment"># 同时必须指定每页显示的条数</span></span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">3</span>,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改<code>projects.views.ProjectsList#get</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, reuqest</span>):</span></span><br><span class="line">   <span class="comment"># 使用get_queryset获取查询集</span></span><br><span class="line">    project_qs = self.get_queryset() </span><br><span class="line">    <span class="comment"># 使用filter_queryset方法过滤查询</span></span><br><span class="line">    project_qs = self.filter_queryset(project_qs)  </span><br><span class="line">    <span class="comment"># 使用paginate_queryset进行分页，然后返回分页之后的查询集</span></span><br><span class="line">    page = self.paginate_queryset(project_qs)  </span><br><span class="line">    <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        serializer = self.get_serializer(instance=page, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line">    serializer = self.get_serializer(instance=project_qs, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_200_OK)</span><br></pre></td></tr></tbody></table></figure><p>分页后</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http :8000/project/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Length: 520</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Tue, 22 Oct 2019 14:41:54 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Accept, Origin, Cookie</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    "count": 5,</span><br><span class="line">    "next": "http://localhost:8000/project/?page=2",</span><br><span class="line">    "previous": null,</span><br><span class="line">    "results": [</span><br><span class="line">        {</span><br><span class="line">            "desc": "666",</span><br><span class="line">            "id": 1,</span><br><span class="line">            "interfaces_set": [</span><br><span class="line">                "Interfaces object (1)",</span><br><span class="line">                "Interfaces object (2)"</span><br><span class="line">            ],</span><br><span class="line">            "name": "测试游记",</span><br><span class="line">            "programer": "zhong",</span><br><span class="line">            "publish_app": "公众号",</span><br><span class="line">            "tester": "zx"</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            "desc": "6666",</span><br><span class="line">            "id": 2,</span><br><span class="line">            "interfaces_set": [],</span><br><span class="line">            "name": "测试游记1",</span><br><span class="line">            "programer": "zhong1",</span><br><span class="line">            "publish_app": "公众号1",</span><br><span class="line">            "tester": "zx1"</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            "desc": "666",</span><br><span class="line">            "id": 3,</span><br><span class="line">            "interfaces_set": [],</span><br><span class="line">            "name": "「测试游记」-创建",</span><br><span class="line">            "programer": "zx",</span><br><span class="line">            "publish_app": "公众号",</span><br><span class="line">            "tester": "zx"</span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ </span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87cy6ohwjj31bi0u04gw.jpg" alt="分页后"></p><h2 id="自定义分页"><a href="#自定义分页" class="headerlink" title="自定义分页"></a>自定义分页</h2><p>在<code>utils.pagination.PageNumberPaginationManual</code>新写一个类继承于<code>PageNumberPagination</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageNumberPaginationManual</span>(<span class="params">PageNumberPagination</span>):</span></span><br><span class="line">    page_query_param = <span class="string">'p'</span>  <span class="comment"># url中查询关键字从page修改为p</span></span><br><span class="line">    page_size = <span class="number">2</span>  <span class="comment"># 每页显示的条数为2</span></span><br><span class="line">    max_page_size = <span class="number">50</span>  <span class="comment"># 分页的最大的page_size</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87d1z9ia0j31bi0u04i7.jpg" alt="image-20191022224552266"></p><h2 id="在某个类中指定分页"><a href="#在某个类中指定分页" class="headerlink" title="在某个类中指定分页"></a>在某个类中指定分页</h2><p>添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pagination_class = PageNumberPaginationManual</span><br></pre></td></tr></tbody></table></figure><h2 id="再次优化"><a href="#再次优化" class="headerlink" title="再次优化"></a>再次优化</h2><p>借鉴<code>python3.7/site-packages/rest_framework/mixins.py</code></p><p>查看<code>rest_framework.mixins.ListModelMixin</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List a queryset.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></tbody></table></figure><p>发现和<code>projects.views.ProjectsList#get</code>一样</p><p>修改<code>get</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">mixins.ListModelMixin, GenericAPIView</span>):</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p>全部优化后：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> projects.serializer <span class="keyword">import</span> ProjectModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   GenericAPIView</span>):</span></span><br><span class="line">    ordering_fields = [<span class="string">'name'</span>, <span class="string">'leader'</span>]</span><br><span class="line">    queryset = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ProjectModelSerializer</span><br><span class="line">    filter_backends = [DjangoFilterBackend]</span><br><span class="line">    filterset_fields = [<span class="string">'name'</span>, <span class="string">'leader'</span>, <span class="string">'tester'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectDetail</span>(<span class="params">mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    mixins.UpdateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    mixins.DestroyModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    GenericAPIView</span>):</span></span><br><span class="line">    queryset = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ProjectModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十七)</title>
      <link href="article/9eea7a21.html"/>
      <url>article/9eea7a21.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十七"><a href="#测试开发进阶-二十七" class="headerlink" title="测试开发进阶(二十七)"></a>测试开发进阶(二十七)</h1><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><h3 id="PrimaryKeyRelatedField"><a href="#PrimaryKeyRelatedField" class="headerlink" title="PrimaryKeyRelatedField"></a>PrimaryKeyRelatedField</h3><p><code>interfaces/serializer.py</code>中创建序列化器</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> interfaces.models <span class="keyword">import</span> Interfaces</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Interfaces</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>测试</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">IN[2]: from interfaces.serializer import InterfaceModelSerializer</span><br><span class="line">IN[3]: InterfaceModelSerializer()</span><br><span class="line"></span><br><span class="line">Out[4]: </span><br><span class="line">InterfaceModelSerializer():</span><br><span class="line">    id = IntegerField(label='ID', read_only=True)</span><br><span class="line">    name = CharField(help_text='项目名称', label='项目名称', max_length=200, validators=[&lt;UniqueValidator(queryset=Interfaces.objects.all())&gt;])</span><br><span class="line">    tester = CharField(help_text='测试人员', label='测试人员', max_length=50)</span><br><span class="line">    desc = CharField(allow_blank=True, allow_null=True, help_text='简要描述', label='简要描述', required=False, style={'base_template': 'textarea.html'})</span><br><span class="line">    project = PrimaryKeyRelatedField(help_text='所属项目', label='所属项目', queryset=Projects.objects.all())</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><h4 id="数据库模型中的外键字段默认会生产PrimaryKeyRelatedField序列化器字段"><a href="#数据库模型中的外键字段默认会生产PrimaryKeyRelatedField序列化器字段" class="headerlink" title="数据库模型中的外键字段默认会生产PrimaryKeyRelatedField序列化器字段"></a>数据库模型中的外键字段默认会生产PrimaryKeyRelatedField序列化器字段</h4><h4 id="序列化输出的值为外键ID值"><a href="#序列化输出的值为外键ID值" class="headerlink" title="序列化输出的值为外键ID值"></a>序列化输出的值为外键ID值</h4></blockquote><p>序列化输出</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from interfaces.models import Interfaces</span><br><span class="line">one_interface = Interfaces.objects.get(id=1)</span><br><span class="line">one_interface</span><br><span class="line">Out[7]: &lt;Interfaces: Interfaces object (1)&gt;</span><br><span class="line">interface_serializer = InterfaceModelSerializer(one_interface)</span><br><span class="line">interface_serializer.data</span><br><span class="line">Out[9]: {'id': 1, 'name': '登录接口', 'tester': 'zx', 'desc': '66', 'project': 1}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82miheb2gj31eg0aa410.jpg" alt="序列化输出"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82mjiwi3dj313q08wabl.jpg" alt="数据库"></p><h3 id="字符串关联字段StringRelatedField"><a href="#字符串关联字段StringRelatedField" class="headerlink" title="字符串关联字段StringRelatedField"></a>字符串关联字段StringRelatedField</h3><p>重写<code>project</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project = serializers.StringRelatedField(label=<span class="string">'所属项目'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from interfaces.models import Interfaces</span><br><span class="line">from interfaces.serializer import InterfaceModelSerializer</span><br><span class="line">one = Interfaces.objects.get(id=1)</span><br><span class="line">one_s = InterfaceModelSerializer(one)</span><br><span class="line">one_s.data</span><br><span class="line">Out[6]: {'id': 1, 'project': '测试游记', 'name': '登录接口', 'tester': 'zx', 'desc': '66'}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82molqip3j31j20boaco.jpg" alt="字符串关联字段"></p><blockquote><h4 id="StringRelatedField-此字段将被序列化为关联对象字符串表达形式-str-方法返回值"><a href="#StringRelatedField-此字段将被序列化为关联对象字符串表达形式-str-方法返回值" class="headerlink" title="StringRelatedField 此字段将被序列化为关联对象字符串表达形式(__str__方法返回值)"></a>StringRelatedField 此字段将被序列化为关联对象字符串表达形式(<code>__str__</code>方法返回值)</h4></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project = serializers.SlugRelatedField(slug_field=<span class="string">'tester'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="指定字段数据SlugRelatedField"><a href="#指定字段数据SlugRelatedField" class="headerlink" title="指定字段数据SlugRelatedField"></a>指定字段数据SlugRelatedField</h3><blockquote><p>SlugRelatedField 此字段被序列化为关联对象的指定字段数据</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project = serializers.SlugRelatedField(slug_field=<span class="string">'name'</span>,read_only=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from interfaces.serializer import InterfaceModelSerializer</span><br><span class="line">from interfaces.models import Interfaces</span><br><span class="line">one = Interfaces.objects.get(id=1)</span><br><span class="line">one_s = InterfaceModelSerializer(one)</span><br><span class="line">one_s.data</span><br><span class="line">Out[6]: {'id': 1, 'project': '测试游记', 'name': '登录接口', 'tester': 'zx', 'desc': '66'}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82n1p6wodj31k408wq5e.jpg" alt="SlugRelatedField"></p><h3 id="关联对象的序列化器"><a href="#关联对象的序列化器" class="headerlink" title="关联对象的序列化器"></a>关联对象的序列化器</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> projects.serializer <span class="keyword">import</span> ProjectModelSerializer</span><br><span class="line">project = ProjectModelSerializer(label=<span class="string">'所属项目'</span>, read_only=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from interfaces.serializer import InterfaceModelSerializer</span><br><span class="line">from interfaces.models import Interfaces</span><br><span class="line">one = Interfaces.objects.get(id=1)</span><br><span class="line">one_s = InterfaceModelSerializer(one)</span><br><span class="line">one_s.data</span><br><span class="line">Out[6]: {'id': 1, 'project': OrderedDict([('id', 1), ('name', '测试游记'), ('tester', 'zx'), ('programer', 'zhong'), ('publish_app', '公众号'), ('desc', '666')]), 'name': '登录接口', 'tester': 'zx', 'desc': '66'}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82n3ikj73j31xm0gk0wh.jpg" alt="对象序列化器"></p><h3 id="反向指定"><a href="#反向指定" class="headerlink" title="反向指定"></a>反向指定</h3><blockquote><h3 id="父表中默认不会生产关联字段-从表-可以手动指定，字段名默认为子表模型类名「小写-set」"><a href="#父表中默认不会生产关联字段-从表-可以手动指定，字段名默认为子表模型类名「小写-set」" class="headerlink" title="父表中默认不会生产关联字段(从表),可以手动指定，字段名默认为子表模型类名「小写_set」"></a>父表中默认不会生产关联字段(从表),可以手动指定，字段名默认为子表模型类名「小写_set」</h3></blockquote><p><code>projects.serializer.ProjectModelSerializer</code>中添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interfaces_set = serializers.StringRelatedField(many=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from projects.serializer import ProjectModelSerializer</span><br><span class="line">from projects.models import Projects</span><br><span class="line">p = Projects.objects.get(id=1)</span><br><span class="line">ProjectModelSerializer(p).data</span><br><span class="line">Out[5]: {'id': 1, 'name': '测试游记', 'interfaces_set': ['Interfaces object (1)', 'Interfaces object (2)'], 'tester': 'zx', 'programer': 'zhong', 'publish_app': '公众号', 'desc': '666'}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82naxo90tj31t80gujvd.jpg" alt="反向指定"></p><h2 id="优化视图-请求"><a href="#优化视图-请求" class="headerlink" title="优化视图-请求"></a>优化视图-请求</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br></pre></td></tr></tbody></table></figure><p>当视图继承<code>APIView</code>之后，请求实例方法中的第二个参数<code>request</code>为<code>Request对象</code>，是对Django中的<code>HttpRequest对象</code>进行的拓展</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82nv4dgsaj313m0u0dxz.jpg" alt="Request对象"></p><h3 id="发送json"><a href="#发送json" class="headerlink" title="发送json"></a>发送json</h3><p><code>http :8000/project/ &lt; projects.json</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82nwubc28j31fq0u0k1h.jpg" alt="request.data"></p><h3 id="发送form表单"><a href="#发送form表单" class="headerlink" title="发送form表单"></a>发送form表单</h3><p><code>http -f :8000/project/ &lt; projects.form</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=测试游记项目&amp;leader=icon&amp;tester=zhongxin&amp;programer=zhong3&amp;publish_app=公众号&amp;desc=无</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82nzy5p6ij31fq0u0n83.jpg" alt="request.data"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82o03ht0cj31fq0u0dqs.jpg" alt="request.POST"></p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><ul><li>对Django中的HttpRequest进行拓展</li></ul><blockquote><p>根据请求头中的Content-Type自动进行解析</p><p>无论前端发送那种格式数据，都可以以相同的方式读取</p></blockquote><ul><li>request.data</li></ul><blockquote><p>类似于Django中的request.POST和request.FILES</p><p>可以对POST，PUT，PATCH的请求体进行解析</p><p>支持form表单传参，支持json格式传参</p></blockquote><ul><li>request.query_params</li></ul><blockquote><p>类似Django中的request.GET</p><p>获取查询字符串参数</p></blockquote><ul><li>支持Django.request中所有的对象和方法</li></ul><h2 id="优化视图-渲染"><a href="#优化视图-渲染" class="headerlink" title="优化视图-渲染"></a>优化视图-渲染</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br></pre></td></tr></tbody></table></figure><p><code>LearnDjango/settings.py</code>中添加：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定默认渲染类</span></span><br><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">"DEFAULT_RENDERER_CLASSES"</span>: (</span><br><span class="line">        <span class="comment"># json渲染器为第一优先级</span></span><br><span class="line">        <span class="string">"rest_framework.renderers.JSONRenderer"</span>,</span><br><span class="line">        <span class="comment"># 可浏览的API渲染为第二优先级</span></span><br><span class="line">        <span class="string">"rest_framework.renderers.BrowsableAPIRenderer"</span>,</span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改<code>projects.views.ProjectDetail#get</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">    project = self.get_object(pk)</span><br><span class="line">    serializer = ProjectSerializer(instance=project)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></tbody></table></figure><h3 id="渲染1"><a href="#渲染1" class="headerlink" title="渲染1"></a>渲染1</h3><p><code> http :8000/project/1/</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(LearnDjango) zhongxindeMacBook-Pro:apitest zhongxin$ http :8000/project/1/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Allow: GET, PUT, DELETE, HEAD, OPTIONS</span><br><span class="line">Content-Length: 120</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 18 Oct 2019 13:34:44 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Accept, Origin, Cookie</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    "desc": "666",</span><br><span class="line">    "id": 1,</span><br><span class="line">    "leader": "zx_94",</span><br><span class="line">    "name": "测试游记",</span><br><span class="line">    "programer": "zhong",</span><br><span class="line">    "publish_app": "公众号",</span><br><span class="line">    "tester": "zx"</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82ojmzujrj316y0u0156.jpg" alt="返回json"></p><h3 id="渲染2"><a href="#渲染2" class="headerlink" title="渲染2"></a>渲染2</h3><p>浏览器中输入：<code>http://127.0.0.1:8000/project/1/</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82oifeql5j31b30u0neu.jpg" alt="返回web界面"></p><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>参数</p><ul><li>data</li></ul><blockquote><p>序列化处理后的数据</p><p>一般为serializer.data「python基本数据类型：字典，嵌套字典的列表」</p></blockquote><ul><li>status</li></ul><blockquote><p>状态码，默认200</p></blockquote><ul><li>template_name</li></ul><blockquote><p>模版名称，使用HTMLRenderer渲染时需要指明</p></blockquote><ul><li>headers</li></ul><blockquote><p>用于存放响应头信息的字典</p></blockquote><ul><li>content_type</li></ul><blockquote><p>响应头中的Content-Type</p><p>通常此参数无需设置，会自动根据前端所需类型数据来设置该参数</p></blockquote><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82omty9k0j30u00wqai5.jpg" alt="状态码"></p><p>修改<code>get</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">    project = self.get_object(pk)</span><br><span class="line">    serializer = ProjectSerializer(instance=project)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_200_OK)</span><br></pre></td></tr></tbody></table></figure><h2 id="支持分页，排序的父类GenericAPIView"><a href="#支持分页，排序的父类GenericAPIView" class="headerlink" title="支持分页，排序的父类GenericAPIView"></a>支持分页，排序的父类GenericAPIView</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br></pre></td></tr></tbody></table></figure><ol><li>在视图类中指定过滤引擎</li><li>指定需要排序的字段</li><li>指定查询集</li><li>指定模型序列化器</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">GenericAPIView</span>):</span></span><br><span class="line">    <span class="comment"># 1.在视图类中指定过滤引擎</span></span><br><span class="line">    <span class="comment"># OrderingFilter排序</span></span><br><span class="line">    filter_backends = [filters.OrderingFilter]</span><br><span class="line">    <span class="comment"># 2.指定需要排序的字段</span></span><br><span class="line">    ordering_fields = [<span class="string">'name'</span>, <span class="string">'leader'</span>]</span><br><span class="line">    <span class="comment"># 3.指定查询集</span></span><br><span class="line">    queryset = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 4.指定模型序列化器</span></span><br><span class="line">    serializer_class = ProjectModelSerializer</span><br></pre></td></tr></tbody></table></figure><p>查看<code>rest_framework.generics.GenericAPIView#get_queryset</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Get the list of items for this view.</span></span><br><span class="line"><span class="string">    This must be an iterable, and may be a queryset.</span></span><br><span class="line"><span class="string">    Defaults to using `self.queryset`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This method should always be used rather than accessing `self.queryset`</span></span><br><span class="line"><span class="string">    directly, as `self.queryset` gets evaluated only once, and those results</span></span><br><span class="line"><span class="string">    are cached for all subsequent requests.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You may want to override this if you need to provide different</span></span><br><span class="line"><span class="string">    querysets depending on the incoming request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    (Eg. return a list of items that is specific to the user)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> self.queryset <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, (</span><br><span class="line">        <span class="string">"'%s' should either include a `queryset` attribute, "</span></span><br><span class="line">        <span class="string">"or override the `get_queryset()` method."</span></span><br><span class="line">        % self.__class__.__name__</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    queryset = self.queryset</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(queryset, QuerySet):</span><br><span class="line">        <span class="comment"># Ensure queryset is re-evaluated on each request.</span></span><br><span class="line">        queryset = queryset.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> queryset</span><br></pre></td></tr></tbody></table></figure><p>所以：<code>project_qs = Projects.objects.all()</code>和<code>project_qs = self.get_queryset()</code>一致</p><p>查看<code>rest_framework.generics.GenericAPIView#get_serializer</code>和<code>rest_framework.generics.GenericAPIView#get_serializer_class</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the serializer instance that should be used for validating and</span></span><br><span class="line"><span class="string">    deserializing input, and for serializing output.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    serializer_class = self.get_serializer_class()</span><br><span class="line">    kwargs[<span class="string">'context'</span>] = self.get_serializer_context()</span><br><span class="line">    <span class="keyword">return</span> serializer_class(*args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the class to use for the serializer.</span></span><br><span class="line"><span class="string">    Defaults to using `self.serializer_class`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You may want to override this if you need to provide different</span></span><br><span class="line"><span class="string">    serializations depending on the incoming request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    (Eg. admins get full serialization, others get basic serialization)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> self.serializer_class <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, (</span><br><span class="line">        <span class="string">"'%s' should either include a `serializer_class` attribute, "</span></span><br><span class="line">        <span class="string">"or override the `get_serializer_class()` method."</span></span><br><span class="line">        % self.__class__.__name__</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.serializer_class</span><br></pre></td></tr></tbody></table></figure><p>所以：<code>serializer = ProjectSerializer(instance=project_qs, many=True)</code>和<code>serializer = self.get_serializer(instance=project_qs, many=True)</code>一致</p><h2 id="本轮优化后的视图"><a href="#本轮优化后的视图" class="headerlink" title="本轮优化后的视图"></a>本轮优化后的视图</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> projects.serializer <span class="keyword">import</span> ProjectSerializer, ProjectModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status, filters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">GenericAPIView</span>):</span></span><br><span class="line">    <span class="comment"># 1.在视图类中指定过滤引擎</span></span><br><span class="line">    <span class="comment"># OrderingFilter排序</span></span><br><span class="line">    filter_backends = [filters.OrderingFilter]</span><br><span class="line">    <span class="comment"># 2.指定需要排序的字段</span></span><br><span class="line">    ordering_fields = [<span class="string">'name'</span>, <span class="string">'leader'</span>, <span class="string">'id'</span>]</span><br><span class="line">    <span class="comment"># 3.指定查询集</span></span><br><span class="line">    queryset = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 4.指定模型序列化器</span></span><br><span class="line">    serializer_class = ProjectModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, reuqest</span>):</span></span><br><span class="line">        project_qs = self.get_queryset()</span><br><span class="line">        project_qs = self.filter_queryset(project_qs)</span><br><span class="line">        serializer = self.get_serializer(instance=project_qs, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        serializer = ProjectSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.errors)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectDetail</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span>(<span class="params">self, pk</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Projects.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">        <span class="keyword">except</span> Projects.DoesNotExist:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        project = self.get_object(pk)</span><br><span class="line">        serializer = ProjectSerializer(instance=project)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        project = self.get_object(pk)</span><br><span class="line">        serializer = ProjectSerializer(instance=project, data=request.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.errors)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        project = self.get_object(pk)</span><br><span class="line">        project.delete()</span><br><span class="line">        <span class="keyword">return</span> Response({}, status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></tbody></table></figure><h3 id="正序"><a href="#正序" class="headerlink" title="正序"></a>正序</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82pnfhomyj31b30u0h7f.jpg" alt="正排序"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http :8000/project/?ordering=id</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Length: 711</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 18 Oct 2019 14:14:51 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Accept, Origin, Cookie</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "desc": "666",</span><br><span class="line">        "id": 1,</span><br><span class="line">        "interfaces_set": [</span><br><span class="line">            "Interfaces object (1)",</span><br><span class="line">            "Interfaces object (2)"</span><br><span class="line">        ],</span><br><span class="line">        "name": "测试游记",</span><br><span class="line">        "programer": "zhong",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "6666",</span><br><span class="line">        "id": 2,</span><br><span class="line">        "interfaces_set": [],</span><br><span class="line">        "name": "测试游记1",</span><br><span class="line">        "programer": "zhong1",</span><br><span class="line">        "publish_app": "公众号1",</span><br><span class="line">        "tester": "zx1"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "666",</span><br><span class="line">        "id": 3,</span><br><span class="line">        "interfaces_set": [],</span><br><span class="line">        "name": "「测试游记」-创建",</span><br><span class="line">        "programer": "zx",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "「测试游记」",</span><br><span class="line">        "id": 7,</span><br><span class="line">        "interfaces_set": [],</span><br><span class="line">        "name": "1015项目",</span><br><span class="line">        "programer": "zhong2",</span><br><span class="line">        "publish_app": "公众号2",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "无",</span><br><span class="line">        "id": 8,</span><br><span class="line">        "interfaces_set": [],</span><br><span class="line">        "name": "测试游记项目",</span><br><span class="line">        "programer": "zhong3",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zhongxin"</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ </span><br></pre></td></tr></tbody></table></figure><h3 id="倒序"><a href="#倒序" class="headerlink" title="倒序"></a>倒序</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http :8000/project/?ordering=-id</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Length: 711</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 18 Oct 2019 14:15:51 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Accept, Origin, Cookie</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "desc": "无",</span><br><span class="line">        "id": 8,</span><br><span class="line">        "interfaces_set": [],</span><br><span class="line">        "name": "测试游记项目",</span><br><span class="line">        "programer": "zhong3",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zhongxin"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "「测试游记」",</span><br><span class="line">        "id": 7,</span><br><span class="line">        "interfaces_set": [],</span><br><span class="line">        "name": "1015项目",</span><br><span class="line">        "programer": "zhong2",</span><br><span class="line">        "publish_app": "公众号2",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "666",</span><br><span class="line">        "id": 3,</span><br><span class="line">        "interfaces_set": [],</span><br><span class="line">        "name": "「测试游记」-创建",</span><br><span class="line">        "programer": "zx",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "6666",</span><br><span class="line">        "id": 2,</span><br><span class="line">        "interfaces_set": [],</span><br><span class="line">        "name": "测试游记1",</span><br><span class="line">        "programer": "zhong1",</span><br><span class="line">        "publish_app": "公众号1",</span><br><span class="line">        "tester": "zx1"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "666",</span><br><span class="line">        "id": 1,</span><br><span class="line">        "interfaces_set": [</span><br><span class="line">            "Interfaces object (1)",</span><br><span class="line">            "Interfaces object (2)"</span><br><span class="line">        ],</span><br><span class="line">        "name": "测试游记",</span><br><span class="line">        "programer": "zhong",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82pnt3r3hj31b30u0aud.jpg" alt="倒排序"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十六)</title>
      <link href="article/1e262ab.html"/>
      <url>article/1e262ab.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十六"><a href="#测试开发进阶-二十六" class="headerlink" title="测试开发进阶(二十六)"></a>测试开发进阶(二十六)</h1><p>欢迎关注我的公众号「测试游记」</p><h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><ol><li>序列化器中定义的类属性字段，往往与模型类字段一一对应</li><li>label选项相当于<code>verbose_name</code>;</li><li>定义的序列化器字段，默认既可以进行序列化输出，也可以进行反序列化输入<span id="more"></span><h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3></li></ol><ul><li><code>read_only = True</code> 指定该字段只能进行序列化输出</li><li><code>write_only = True</code> 指定该字段只进行反序列化输入，但不进行序列化输出</li><li><code>required</code>该字段在反序列化时必须传入，默认为True</li><li><code>default</code>反序列化时使用的默认值</li><li><code>allow_null</code>该字段是否允许传入None，默认False</li><li><code>validators</code>该字段使用的校验器</li><li><code>error_messages</code>包含错误key与错误信息的字典（下面有例子）</li><li><code>label</code>用于HTML展示API页面时，显示的字段名称</li></ul><h3 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h3><ul><li><code>max_length</code>最大长度</li><li><code>min_length</code>最小长度</li><li><code>allow_blank</code>是否允许为空</li><li><code>trim_whitespace</code>是否截断空白字符</li><li><code>max_value</code>最小值</li><li><code>min_value</code>最大值</li></ul><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><ol><li>调用序列化器对象的<code>is_valid</code>方法，才开始校验前端参数</li><li>如果校验成功，则返回<code>True</code>，校验失败返回<code>False</code></li><li><code>raise_exception=True</code>，校验失败后会抛出异常</li><li>当调用<code>is_valid</code>方法之后，才可以调用<code>errors</code>属性「校验的错误提示(字典)」</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(serializer.errors)</span><br></pre></td></tr></tbody></table></figure><p>在序列化器中增加<code>validators</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.validators <span class="keyword">import</span> UniqueValidator</span><br><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"></span><br><span class="line">name = serializers.CharField(</span><br><span class="line">        label=<span class="string">'项目名称'</span>,</span><br><span class="line">        max_length=<span class="number">200</span>,</span><br><span class="line">        help_text=<span class="string">'项目名称'</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            UniqueValidator(</span><br><span class="line">                queryset=Projects.objects.<span class="built_in">all</span>(),</span><br><span class="line">                message=<span class="string">'项目名不能重复'</span></span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure><p>编写一份创建项目的json<br><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80binslxij30ks0cutaf.jpg" alt="创建项目json"></p><p>发送一个创建请求</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http POST :8000/project/ &lt; projects.json</span> </span><br><span class="line">zhongxindeMacBook-Pro:apitest zhongxin$ http POST :8000/project/ &lt; projects.json </span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 56</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Wed, 16 Oct 2019 12:34:16 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Origin</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    "name": [</span><br><span class="line">        "项目名不能重复"</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80bjfd1opj316y0u048p.jpg" alt="请求结果"></p><h3 id="自定义校验"><a href="#自定义校验" class="headerlink" title="自定义校验"></a>自定义校验</h3><p>自己编写一个校验器</p><p>需求：项目名称中必须包含<code>项目</code>关键字</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_unique_project_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    项目名称中需要包含「项目」关键字</span></span><br><span class="line"><span class="string">    :param name:前端传递给我的项目名称</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'项目'</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(detail=<span class="string">'项目名称中必须包含「项目」'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = serializers.CharField(</span><br><span class="line">    label=<span class="string">'项目名称'</span>,</span><br><span class="line">    max_length=<span class="number">200</span>,</span><br><span class="line">    help_text=<span class="string">'项目名称'</span>,</span><br><span class="line">    validators=[</span><br><span class="line">        UniqueValidator(</span><br><span class="line">            queryset=Projects.objects.<span class="built_in">all</span>(),</span><br><span class="line">            message=<span class="string">'项目名不能重复'</span></span><br><span class="line">        ), is_unique_project_name</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80bk2c8jsj316y0u0wp4.jpg" alt="请求结果"></p><h3 id="单字段校验"><a href="#单字段校验" class="headerlink" title="单字段校验"></a>单字段校验</h3><p>在序列化器内部增加<code>def validate_name(self, value):</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单字段的校验</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_name</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value.endswith(<span class="string">'项目'</span>):</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'项目名称必须以「项目」结尾'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># projects.json</span><br><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"测试游记1"</span>,</span><br><span class="line">  <span class="attr">"leader"</span>: <span class="string">"zhongxin"</span>,</span><br><span class="line">  <span class="attr">"tester"</span>: <span class="string">"zhongxin"</span>,</span><br><span class="line">  <span class="attr">"programer"</span>: <span class="string">"zhong3"</span>,</span><br><span class="line">  <span class="attr">"publish_app"</span>: <span class="string">"公众号"</span>,</span><br><span class="line">  <span class="attr">"desc"</span>: <span class="string">"无"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80bs2zwkuj316y0u07eu.jpg" alt="校验"></p><p>修改<code>projects.json</code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># projects.json</span><br><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"测试游记项目1"</span>,</span><br><span class="line">  <span class="attr">"leader"</span>: <span class="string">"zhongxin"</span>,</span><br><span class="line">  <span class="attr">"tester"</span>: <span class="string">"zhongxin"</span>,</span><br><span class="line">  <span class="attr">"programer"</span>: <span class="string">"zhong3"</span>,</span><br><span class="line">  <span class="attr">"publish_app"</span>: <span class="string">"公众号"</span>,</span><br><span class="line">  <span class="attr">"desc"</span>: <span class="string">"无"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80btfshr0j316y0u0n7f.jpg" alt="测试2"></p><h3 id="多字段校验"><a href="#多字段校验" class="headerlink" title="多字段校验"></a>多字段校验</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, attrs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80bz0ljxtj31e60u07bk.jpg" alt="多字段"></p><p>这里<code>name</code>为<code>None</code>是因为上面单字段校验没有返回value</p><p>修改后再次测试</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_name</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value.endswith(<span class="string">'项目'</span>):</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'项目名称必须以「项目」结尾'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80c0s6uasj311i0myq9z.jpg" alt="测试2"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, attrs</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    多字段联合校验</span></span><br><span class="line"><span class="string">    需求：tester和leader中有「icon」</span></span><br><span class="line"><span class="string">    :param attrs:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'icon'</span> <span class="keyword">not</span> <span class="keyword">in</span> attrs[<span class="string">'tester'</span>] <span class="keyword">and</span> <span class="string">'icon'</span> <span class="keyword">not</span> <span class="keyword">in</span> attrs[<span class="string">'leader'</span>]:</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'「icon」必须是项目负责人或者在项目的测试人员'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80c3u7csrj316y0u0tj9.jpg" alt="测试"></p><p>修改<code>projects.json</code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># projects.json</span><br><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"测试游记项目"</span>,</span><br><span class="line">  <span class="attr">"leader"</span>: <span class="string">"icon"</span>,</span><br><span class="line">  <span class="attr">"tester"</span>: <span class="string">"zhongxin"</span>,</span><br><span class="line">  <span class="attr">"programer"</span>: <span class="string">"zhong3"</span>,</span><br><span class="line">  <span class="attr">"publish_app"</span>: <span class="string">"公众号"</span>,</span><br><span class="line">  <span class="attr">"desc"</span>: <span class="string">"无"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80c6ctdebj316y0u04a3.jpg" alt="正确测试"></p><h3 id="校验器的顺序"><a href="#校验器的顺序" class="headerlink" title="校验器的顺序"></a>校验器的顺序</h3><ol><li>字段定义时的限制，包含<code>validators</code>列表条目从左到右进行校验</li><li>单字段「<code>validate_字段名</code>」的校验</li><li>多字段联合校验「<code>validate</code>方法」</li></ol><h2 id="优化视图内代码"><a href="#优化视图内代码" class="headerlink" title="优化视图内代码"></a>优化视图内代码</h2><blockquote><ul><li><p>如果在创建序列化器对象时候，只给data传参，那么调用save()方法实际调用的就是序列化器对象的<code>create()</code>方法</p></li><li><p>在创建序列化器对象时，同时给instance和data传参,那么调用save()方法实际调用的就是序列化器对象的<code>update()</code>方法</p></li></ul></blockquote><p>序列化器类<code>ProjectSerializer</code>中增加<code>create</code>和<code>update</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Projects.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">    instance.name = validated_data[<span class="string">'name'</span>]</span><br><span class="line">    instance.leader = validated_data[<span class="string">'leader'</span>]</span><br><span class="line">    instance.tester = validated_data[<span class="string">'tester'</span>]</span><br><span class="line">    instance.programer = validated_data[<span class="string">'programer'</span>]</span><br><span class="line">    instance.publish_app = validated_data[<span class="string">'publish_app'</span>]</span><br><span class="line">    instance.desc = validated_data[<span class="string">'desc'</span>]</span><br><span class="line">    instance.save()</span><br><span class="line">    <span class="keyword">return</span> instance</span><br></pre></td></tr></tbody></table></figure><h3 id="修改post请求"><a href="#修改post请求" class="headerlink" title="修改post请求"></a>修改post请求</h3><p>从</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    新建项目</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">    serializer = ProjectSerializer(data=python_data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors)</span><br><span class="line">    project = Projects.objects.create(**serializer.validated_data)</span><br><span class="line">    serializer = ProjectSerializer(instance=project)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br></pre></td></tr></tbody></table></figure><p>改为</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    新建项目</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">    serializer = ProjectSerializer(data=python_data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors)</span><br><span class="line">    serializer.save()</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="修改put请求"><a href="#修改put请求" class="headerlink" title="修改put请求"></a>修改put请求</h3><p>从</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">    project = self.get_object(pk)</span><br><span class="line">    json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">    serializer = ProjectSerializer(data=python_data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors)</span><br><span class="line">    project.name = serializer.validated_data[<span class="string">'name'</span>]</span><br><span class="line">    project.leader = serializer.validated_data[<span class="string">'leader'</span>]</span><br><span class="line">    project.tester = serializer.validated_data[<span class="string">'tester'</span>]</span><br><span class="line">    project.programer = serializer.validated_data[<span class="string">'programer'</span>]</span><br><span class="line">    project.publish_app = serializer.validated_data[<span class="string">'publish_app'</span>]</span><br><span class="line">    project.desc = serializer.validated_data[<span class="string">'desc'</span>]</span><br><span class="line">    project.save()</span><br><span class="line"></span><br><span class="line">    serializer = ProjectSerializer(instance=project)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br></pre></td></tr></tbody></table></figure><p>改为</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">    project = self.get_object(pk)</span><br><span class="line">    json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">    serializer = ProjectSerializer(instance=project, data=python_data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors)</span><br><span class="line">    serializer.save()</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="优化序列化器"><a href="#优化序列化器" class="headerlink" title="优化序列化器"></a>优化序列化器</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 指定参考哪一个模型类来创建</span></span><br><span class="line">        model = Projects</span><br><span class="line">        <span class="comment"># 指定为模型类的哪些字段，来生成序列化器</span></span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In[2]:from projects import serializer</span><br><span class="line">In[3]:serializer.ProjectModelSerializer()</span><br><span class="line">Out[3]: </span><br><span class="line">ProjectModelSerializer():</span><br><span class="line">    id = IntegerField(label='ID', read_only=True)</span><br><span class="line">    name = CharField(help_text='项目名称', label='项目名称', max_length=200, validators=[&lt;UniqueValidator(queryset=Projects.objects.all())&gt;])</span><br><span class="line">    leader = CharField(help_text='负责人', label='负责人', max_length=50)</span><br><span class="line">    tester = CharField(help_text='测试人员', label='测试人员', max_length=50)</span><br><span class="line">    programer = CharField(help_text='开发人员', label='开发人员', max_length=50)</span><br><span class="line">    publish_app = CharField(help_text='发布应用', label='发布应用', max_length=50)</span><br><span class="line">    desc = CharField(allow_blank=True, allow_null=True, help_text='简要描述', label='简要描述', required=False, style={'base_template': 'textarea.html'})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g80df362lzj31r60p8gs5.jpg" alt="简化序列化器"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fields = (<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'leader'</span>, <span class="string">'tester'</span>, <span class="string">'programer'</span>, <span class="string">'publish_app'</span>)</span><br><span class="line">exclude = (<span class="string">'publish_app'</span>)</span><br><span class="line">read_only_fields = (<span class="string">'leader'</span>,<span class="string">'tester'</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><p><code>fields</code>:指定显示哪些</p></li><li><p><code>exclude</code>:指定排除哪些</p></li><li><p><code>read_only_fields</code>:指定<code>read_only=True</code>的字段</p></li></ul><p>如果需要修改<code>name</code>的校验，自定义一个<code>name</code>字段</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    name = serializers.CharField(</span><br><span class="line">        label=<span class="string">'项目名称'</span>,</span><br><span class="line">        max_length=<span class="number">200</span>,</span><br><span class="line">        help_text=<span class="string">'项目名称'</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            UniqueValidator(</span><br><span class="line">                queryset=Projects.objects.<span class="built_in">all</span>(),</span><br><span class="line">                message=<span class="string">'项目名不能重复'</span></span><br><span class="line">            ), is_unique_project_name</span><br><span class="line">        ],</span><br><span class="line">        error_messages={<span class="string">'max_length'</span>: <span class="string">'长度不能超过200个字节'</span>}</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Projects</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        read_only_fields = (<span class="string">'leader'</span>, <span class="string">'tester'</span>)</span><br></pre></td></tr></tbody></table></figure><p>也可以增加<code>extra_kwargs</code>增加其他内容</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    <span class="comment"># 指定参考哪一个模型类来创建</span></span><br><span class="line">    model = Projects</span><br><span class="line">    <span class="comment"># 指定为模型类的哪些字段，来生成序列化器</span></span><br><span class="line">    fields = <span class="string">'__all__'</span></span><br><span class="line">    extra_kwargs = {</span><br><span class="line">        <span class="string">'leader'</span>: {</span><br><span class="line">            <span class="string">'write_only'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'error_messages'</span>: {<span class="string">'max_length'</span>: <span class="string">'长度不能超过50个字节'</span>}</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>测试一下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Out[3]: </span><br><span class="line">ProjectModelSerializer():</span><br><span class="line">    id = IntegerField(label='ID', read_only=True)</span><br><span class="line">    name = CharField(error_messages={'max_length': '长度不能超过200个字节'}, help_text='项目名称', label='项目名称', max_length=200, validators=[&lt;UniqueValidator(queryset=&lt;QuerySet [&lt;Projects: 测试游记&gt;, &lt;Projects: 测试游记1&gt;, &lt;Projects: 「测试游记」-创建&gt;, &lt;Projects: 1015项目&gt;, &lt;Projects: 测试游记项目&gt;]&gt;)&gt;, &lt;function is_unique_project_name&gt;])</span><br><span class="line">    leader = CharField(error_messages={'max_length': '长度不能超过50个字节'}, help_text='负责人', label='负责人', max_length=50, write_only=True)</span><br><span class="line">    tester = CharField(help_text='测试人员', label='测试人员', max_length=50)</span><br><span class="line">    programer = CharField(help_text='开发人员', label='开发人员', max_length=50)</span><br><span class="line">    publish_app = CharField(help_text='发布应用', label='发布应用', max_length=50)</span><br><span class="line">    desc = CharField(allow_blank=True, allow_null=True, help_text='简要描述', label='简要描述', required=False, style={'base_template': 'textarea.html'})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十五)</title>
      <link href="article/98ed2ad9.html"/>
      <url>article/98ed2ad9.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十五"><a href="#测试开发进阶-二十五" class="headerlink" title="测试开发进阶(二十五)"></a>测试开发进阶(二十五)</h1><p>欢迎关注我的公众号「测试游记」</p><h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><ul><li>代码冗余极其严重，不符合优秀测开风格</li><li>数据校验非常麻烦，且可复用性差</li><li> 编码没有统一的规范，杂乱无章的感觉</li><li>写的代码非常多，不够简洁</li><li>仅支持json格式的传参，不支持form表单传参</li><li>仅能返回json格式的数据，其他类型不支持</li><li>列表页视图没有分页，过滤，排序功能</li></ul><h2 id="Django-REST-framework"><a href="#Django-REST-framework" class="headerlink" title="Django REST framework"></a>Django REST framework</h2><blockquote><ol><li>在Django框架基础上，进行二次开发</li><li>用于构建Restful API</li><li>简称为DRF框架或REST freamwork框架</li></ol></blockquote><span id="more"></span><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>提供了强大的Serializer序列化器，可以高效地进行序列化与反序列化操作</li><li>提供了丰富的类视图，Mixin扩展类，ViewSet视图集</li><li>提供了直观的Web API界面</li><li>多种身份认证和权限认证</li><li>强大的排序，过滤，分页，搜索，限流等功能</li><li>可扩展性，插件丰富</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install djangorestframework</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>LearnDjango/settings.py</code>中添加<code>'rest_framework'</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'projects.apps.ProjectsConfig'</span>,</span><br><span class="line">    <span class="string">'interfaces.apps.InterfacesConfig'</span>,</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h3 id="快速创建实例"><a href="#快速创建实例" class="headerlink" title="快速创建实例"></a>快速创建实例</h3><p>新建<code>projects/serializer.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectModelSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Projects</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></tbody></table></figure><p><code>projects/views.py</code>中增加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> projects.serializer <span class="keyword">import</span> ProjectModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    queryset = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ProjectModelSerializer</span><br></pre></td></tr></tbody></table></figure><p>修改两个路由</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projects/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> projects <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">'projects'</span>, views.ProjectViewSet)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'project/'</span>, views.ProjectsList.as_view()),</span><br><span class="line">    path(<span class="string">'project/&lt;int:pk&gt;/'</span>, views.ProjectDetail.as_view()),</span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls</span><br><span class="line"></span><br><span class="line"><span class="comment"># LearnDjango/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'interfaces/'</span>, include(<span class="string">'interfaces.urls'</span>)),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'projects.urls'</span>)),</span><br><span class="line">    path(<span class="string">'api/'</span>, include(<span class="string">'rest_framework.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>查看结果</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7y5j4ols4j31b30u0wuk.jpg" alt="首页"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7y5mdyh7gj30u00wkgw2.jpg" alt="接口页"></p><h2 id="逐步优化之前的代码"><a href="#逐步优化之前的代码" class="headerlink" title="逐步优化之前的代码"></a>逐步优化之前的代码</h2><p>之前「快速创建实例」部分为演示最终效果，现在先恢复到原有状态</p><h3 id="创建序列化"><a href="#创建序列化" class="headerlink" title="创建序列化"></a>创建序列化</h3><p>创建<code>projects/serializer.py</code></p><p><strong>需要输出哪些字段，那么在序列化器中就定义哪些字段</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.继承Serializer类或者子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建项目序列化器类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># label选项相当于verbose_name</span></span><br><span class="line">    <span class="comment"># help_text相当于帮助信息</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(label=<span class="string">'ID'</span>)</span><br><span class="line">    name = serializers.CharField(label=<span class="string">'项目名称'</span>, max_length=<span class="number">200</span>, help_text=<span class="string">'项目名称'</span>)</span><br><span class="line">    tester = serializers.CharField(label=<span class="string">'测试人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'测试人员'</span>)</span><br><span class="line">    programer = serializers.CharField(label=<span class="string">'开发人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'开发人员'</span>)</span><br><span class="line">    publish_app = serializers.CharField(label=<span class="string">'发布应用'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'发布应用'</span>)</span><br><span class="line">    <span class="comment"># allow_null相当于模型类中的null</span></span><br><span class="line">    <span class="comment"># allow_blank相当于模型类中的blank</span></span><br><span class="line">    desc = serializers.CharField(label=<span class="string">'简要描述'</span>, help_text=<span class="string">'简要描述'</span>, allow_blank=<span class="literal">True</span>, default=<span class="string">''</span>, allow_null=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="查询单个内容"><a href="#查询单个内容" class="headerlink" title="查询单个内容"></a>查询单个内容</h3><p>修改<code>projects.views.ProjectDetail#get</code></p><blockquote><h4 id="1-通过模型类对象-或者查询集-传给instance-就可以进行序列化操作"><a href="#1-通过模型类对象-或者查询集-传给instance-就可以进行序列化操作" class="headerlink" title="1.通过模型类对象(或者查询集),传给instance 就可以进行序列化操作"></a>1.通过模型类对象(或者查询集),传给instance 就可以进行序列化操作</h4><h4 id="2-通过序列化器ProjectSerializer对象的data属性，就可以获取转化后的字典"><a href="#2-通过序列化器ProjectSerializer对象的data属性，就可以获取转化后的字典" class="headerlink" title="2.通过序列化器ProjectSerializer对象的data属性，就可以获取转化后的字典"></a>2.通过序列化器ProjectSerializer对象的data属性，就可以获取转化后的字典</h4></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> projects.serializer <span class="keyword">import</span> ProjectSerializer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectDetail</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        project = Projects.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">        serializer = ProjectSerializer(instance=project)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br></pre></td></tr></tbody></table></figure><h4 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http :8000/project/1/</span></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http :8000/project/1/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 135</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 14 Oct 2019 16:06:10 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Origin</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    "desc": "666",</span><br><span class="line">    "id": 1,</span><br><span class="line">    "name": "测试游记",</span><br><span class="line">    "programer": "zhong",</span><br><span class="line">    "publish_app": "公众号",</span><br><span class="line">    "tester": "zx"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7y6i19nyqj316y0u0k2c.jpg" alt="测试1"></p><h3 id="查询多个内容"><a href="#查询多个内容" class="headerlink" title="查询多个内容"></a>查询多个内容</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, reuqest</span>):</span></span><br><span class="line">        project_qs = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = ProjectSerializer(instance=project_qs, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><p>设置<code>many</code>为<code>True</code>可以获取多个内容</p><h4 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http :8000/project/</span></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http :8000/project/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 438</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 14 Oct 2019 16:15:58 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Origin</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "desc": "666",</span><br><span class="line">        "id": 1,</span><br><span class="line">        "name": "测试游记",</span><br><span class="line">        "programer": "zhong",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "6666",</span><br><span class="line">        "id": 2,</span><br><span class="line">        "name": "测试游记1",</span><br><span class="line">        "programer": "zhong1",</span><br><span class="line">        "publish_app": "公众号1",</span><br><span class="line">        "tester": "zx1"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "666",</span><br><span class="line">        "id": 3,</span><br><span class="line">        "name": "「测试游记」-创建",</span><br><span class="line">        "programer": "zx",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7y6pwd84sj31bi0u0dyj.jpg" alt="测试2"></p><h3 id="反序列化部分优化"><a href="#反序列化部分优化" class="headerlink" title="反序列化部分优化"></a>反序列化部分优化</h3><p><strong>调用序列化器对象的is_valid方法，开始校验前端参数</strong></p><ul><li>校验成功返回True</li><li>校验失败返回False</li></ul><blockquote><p><code>serializer.is_valid(raise_exception=True)</code> raise_exception=True校验失败会抛出异常 </p><p>当调用<code>is_valid</code>方法后，才可以调用<code>errors</code>属性，获取校验的错误提示「字典格式」</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        新建项目</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">        python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">        serializer = ProjectSerializer(data=python_data)</span><br><span class="line">        <span class="comment"># 校验前端输入的数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.errors)</span><br><span class="line">        project = Projects.objects.create(**serializer.validated_data)</span><br><span class="line">        serializer = ProjectSerializer(instance=project)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="测试3"><a href="#测试3" class="headerlink" title="测试3"></a>测试3</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http :8000/project/ name=1015项目 tester=zx programer=zhong2  publish_app=公众号2 desc=「测试游记」</span></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http :8000/project/ name=1015项目 tester=zx programer=zhong2  publish_app=公众号2 desc=「测试游记」</span><br><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Content-Length: 162</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Mon, 14 Oct 2019 16:26:19 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Origin</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    "desc": "「测试游记」",</span><br><span class="line">    "id": 7,</span><br><span class="line">    "name": "1015项目",</span><br><span class="line">    "programer": "zhong2",</span><br><span class="line">    "publish_app": "公众号2",</span><br><span class="line">    "tester": "zx"</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7y71q1pr6j316y0u07h6.jpg" alt="测试3"></p><h4 id="测试4"><a href="#测试4" class="headerlink" title="测试4"></a>测试4</h4><p>再次发送相同内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http :8000/project/ name=1015项目 tester=zx programer=zhong2  publish_app=公众号2 desc=「测试游记」</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7y768aeykj316y0u0ako.jpg" alt="测试4"></p><p>上面这个错误有些不合理。</p><p>修改<code>projects.serializer.ProjectSerializer</code>中的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> = serializers.IntegerField(label=<span class="string">'ID'</span>, read_only=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><p>增加<code>read_only=True</code>，指定该字段只能进行序列化输出「只读」，不进行反序列化。其他字段默认即可以进行序列化输出，也可以反序列化输出</p><p><code>write_only=True</code>和<code>read_only=True</code>相反，只支持反序列化，不支持序列化。</p><h2 id="第二次优化的完整代码"><a href="#第二次优化的完整代码" class="headerlink" title="第二次优化的完整代码"></a>第二次优化的完整代码</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse, Http404</span><br><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> projects.serializer <span class="keyword">import</span> ProjectSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, reuqest</span>):</span></span><br><span class="line">        project_qs = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = ProjectSerializer(instance=project_qs, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        新建项目</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">        python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">        serializer = ProjectSerializer(data=python_data)</span><br><span class="line">        <span class="comment"># 校验前端输入的数据</span></span><br><span class="line">        <span class="comment"># 调用序列化器对象的is_valid方法，开始校验前端参数</span></span><br><span class="line">        <span class="comment"># serializer.is_valid(raise_exception=True) raise_exception=True校验失败会抛出异常</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.errors)</span><br><span class="line">        project = Projects.objects.create(**serializer.validated_data)</span><br><span class="line">        serializer = ProjectSerializer(instance=project)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectDetail</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span>(<span class="params">self, pk</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Projects.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">        <span class="keyword">except</span> Projects.DoesNotExist:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        project = self.get_object(pk)</span><br><span class="line">        serializer = ProjectSerializer(instance=project)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        project = self.get_object(pk)</span><br><span class="line">        json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">        python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">        serializer = ProjectSerializer(data=python_data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.errors)</span><br><span class="line">        project.name = serializer.validated_data[<span class="string">'name'</span>]</span><br><span class="line">        project.leader = serializer.validated_data[<span class="string">'leader'</span>]</span><br><span class="line">        project.tester = serializer.validated_data[<span class="string">'tester'</span>]</span><br><span class="line">        project.programer = serializer.validated_data[<span class="string">'programer'</span>]</span><br><span class="line">        project.publish_app = serializer.validated_data[<span class="string">'publish_app'</span>]</span><br><span class="line">        project.desc = serializer.validated_data[<span class="string">'desc'</span>]</span><br><span class="line">        project.save()</span><br><span class="line"></span><br><span class="line">        serializer = ProjectSerializer(instance=project)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        project = self.get_object(pk)</span><br><span class="line">        project.delete()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse({}, safe=<span class="literal">True</span>, status=<span class="number">204</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十四)</title>
      <link href="article/9e467da4.html"/>
      <url>article/9e467da4.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十四"><a href="#测试开发进阶-二十四" class="headerlink" title="测试开发进阶(二十四)"></a>测试开发进阶(二十四)</h1><p>欢迎关注我的公众号「测试游记」</p><h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><p>官方文档：<a href="https://restfulapi.net/">https://restfulapi.net/</a></p><p>一种开发理念「是设计风格 而不是标准」</p><blockquote><p>REST is acronym for <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer.</p></blockquote><span id="more"></span><p>每一个URL代表一种「<strong>资源</strong>」</p><p>具体要对资源做什么操作，要体现在请求方式上，而不是URL上</p><ul><li>json格式数据</li><li>text文本</li><li>图片，视频等</li></ul><p>客户端和服务器之间，传递这种资源的某种表现形式</p><ul><li>通过请求头中的<code>Content-Type</code>来指明传给服务端的参数类型</li></ul><blockquote><p>text/plain</p><p>application/xml</p><p>text/html</p><p>application/json</p><p>image/gif</p><p>image/jpeg</p><p>Application/x-www-form-urlencoded</p></blockquote><ul><li>通过请求头中<code>Accept</code>来指明希望接受服务端的数据类型</li></ul><blockquote><p><code>Accept:application/json,application/xml;q=0.9,*/*;q=0.8</code></p></blockquote><ul><li>POST：创建「create」</li><li>GET：获取「read」</li><li>PUT：更新，替换「update/replace」</li><li>PATCH：部分更新「Partial update/modify」</li><li>DELETE：删除「delete」</li></ul><h3 id="设计规则"><a href="#设计规则" class="headerlink" title="设计规则"></a>设计规则</h3><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><ul><li>尽量使用名词复数形式</li><li>往往与数据库的表名对应</li></ul><h4 id="过滤条件"><a href="#过滤条件" class="headerlink" title="过滤条件"></a>过滤条件</h4><p>一般记录数量较多，服务器不可能将所有数据都返回给前端</p><p>例如：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?page=2&amp;size=10 指定页数，条数</span><br><span class="line">?sort=name 指定排序</span><br></pre></td></tr></tbody></table></figure><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>尽量使用专用域名</p><p>前后端分离之后，前后端都有一个域名</p><p>例如<code>http://api.xxx.xxx</code></p><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><ul><li>在url中呈现版本号</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://api.xxx.xxx/app/0.1</span><br></pre></td></tr></tbody></table></figure><ul><li>在请求头中呈现</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Accept: application/vnd.example.v0.2+json</span><br><span class="line">Accept: application/vnd.example+json;version=1.1</span><br></pre></td></tr></tbody></table></figure><h4 id="常见请求含义"><a href="#常见请求含义" class="headerlink" title="常见请求含义"></a>常见请求含义</h4><ul><li>GET(SELECT):从服务器获取资源(一项或多项)</li><li>POST(CREATE):从服务器新建一个资源</li><li>PUT(UPDATE):从服务器更新资源(客户端提供改变后的完整资源)</li><li>DELETE(DELETE):从服务器删除资源</li><li>PATCH(UPDATE WHERE):在服务器部分更新资源(客户端提供改变的属性)</li><li>HEAD:获取资源的元数据</li><li>OPTIONS:获取关于资源的哪些属性是客户端可以改变的信息</li></ul><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><ul><li>200:OK</li></ul><p>「GET」服务器成功返回用户请求的数据</p><ul><li>201:CREATED</li></ul><p>「POST/PUT/PATCH」用户新建或修改数据成功</p><ul><li>204:NO CONTENT</li></ul><p>「DELETE」用户删除数据成功</p><ul><li>400:INVALID REQUEST</li></ul><p>「POST/PUT/PATCH」用户请求有误（请求参数有误）</p><ul><li>401:Unauthorized</li></ul><p>「*」用户没有权限（令牌，用户名，密码错误）</p><ul><li>403:Forbidden</li></ul><p>「*」表示用户得到授权（与401错误相对），但是访问是被禁止的</p><ul><li>404:NOT FOUND</li></ul><p>「*」用户请求路径不存在</p><ul><li>500:INTERNAL SERVER ERROR</li></ul><p>「*」服务器发生错误</p><h2 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><h3 id="最原始设计"><a href="#最原始设计" class="headerlink" title="最原始设计"></a>最原始设计</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><ol><li>从数据库中获取所有的项目信息</li><li>将数据库模型实例转化为字典类型「Json数组」「嵌套字典的列表」</li><li><strong>注意</strong>：JsonResponse第一个参数默认只能为dict字典，如果要设为其他类型，需要将safe设为False</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LearnDjango/projects/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, reuqest</span>):</span></span><br><span class="line">        <span class="comment"># 1.从数据库中获取所有的项目信息</span></span><br><span class="line">        project_qs = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 2.将数据库模型实例转化为字典类型「Json数组」「嵌套字典的列表」</span></span><br><span class="line">        project_list = []</span><br><span class="line">        <span class="keyword">for</span> project <span class="keyword">in</span> project_qs:</span><br><span class="line">            project_list.append(</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">'name'</span>: project.name,</span><br><span class="line">                    <span class="string">'leader'</span>: project.leader,</span><br><span class="line">                    <span class="string">'tester'</span>: project.tester,</span><br><span class="line">                    <span class="string">'programer'</span>: project.programer,</span><br><span class="line">                    <span class="string">'publish_app'</span>: project.publish_app,</span><br><span class="line">                    <span class="string">'desc'</span>: project.desc</span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        <span class="comment"># JsonResponse第一个参数默认只能为dict字典，如果要设为其他类型，需要将safe设为False</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(project_list, safe=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LearnDjango/projects/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> projects <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'project/'</span>, views.ProjectsList.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># LearnDjango/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'projects.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http http://127.0.0.1:8000/project/</span></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http http://127.0.0.1:8000/project/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 650</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 11 Oct 2019 13:02:56 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Origin</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "desc": "666",</span><br><span class="line">        "leader": "zx_94",</span><br><span class="line">        "name": "测试游记",</span><br><span class="line">        "programer": "zhong",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "6666",</span><br><span class="line">        "leader": "zx_94_1",</span><br><span class="line">        "name": "测试游记1",</span><br><span class="line">        "programer": "zhong1",</span><br><span class="line">        "publish_app": "公众号1",</span><br><span class="line">        "tester": "zx1"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "666",</span><br><span class="line">        "leader": "zx_94",</span><br><span class="line">        "name": "「测试游记」-创建",</span><br><span class="line">        "programer": "zx",</span><br><span class="line">        "publish_app": "公众号",</span><br><span class="line">        "tester": "zx"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "desc": "666",</span><br><span class="line">        "leader": "钟鑫",</span><br><span class="line">        "name": "10月1日作业",</span><br><span class="line">        "programer": "钟鑫",</span><br><span class="line">        "publish_app": "国庆作业",</span><br><span class="line">        "tester": "钟鑫"</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ukbsl2w4j31bi0u0tta.jpg" alt="GET"></p><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><ol><li>从前端获取json格式的数据，转化为Python中的类型</li></ol><blockquote><p>为了严谨性，这里需要做各种复杂的校验</p><p>比如：是否为json,传递的项目数据是否符合要求,有些必传参数是否携带</p></blockquote><ol start="2"><li>向数据库中新增项目</li><li>将模型类转化为字典，然后返回</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    新建项目</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 1.从前端获取json格式的数据，转化为Python中的类型</span></span><br><span class="line">    <span class="comment"># 为了严谨性，这里需要做各种复杂的校验</span></span><br><span class="line">    <span class="comment"># 比如：是否为json,传递的项目数据是否符合要求,有些必传参数是否携带</span></span><br><span class="line">    json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 2.向数据库中新增项目</span></span><br><span class="line">    project = Projects.objects.create(**python_data)</span><br><span class="line">    <span class="comment"># 3.将模型类转化为字典，然后返回</span></span><br><span class="line">    one_dict = {</span><br><span class="line">        <span class="string">'name'</span>: project.name,</span><br><span class="line">        <span class="string">'leader'</span>: project.leader,</span><br><span class="line">        <span class="string">'tester'</span>: project.tester,</span><br><span class="line">        <span class="string">'programer'</span>: project.programer,</span><br><span class="line">        <span class="string">'publish_app'</span>: project.publish_app,</span><br><span class="line">        <span class="string">'desc'</span>: project.desc</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(one_dict)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http POST http://127.0.0.1:8000/project/ name=10月11日「测试游记」 leader=zx tester=zx programer=zx publish_app=10月11日内容 desc=测试post请求</span></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http POST http://127.0.0.1:8000/project/ name=10月11日「测试游记」 leader=zx tester=zx programer=zx publish_app=10月11日内容 desc=测试post请求</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 202</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 11 Oct 2019 13:31:46 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Origin</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    "desc": "测试post请求",</span><br><span class="line">    "leader": "zx",</span><br><span class="line">    "name": "10月11日「测试游记」",</span><br><span class="line">    "programer": "zx",</span><br><span class="line">    "publish_app": "10月11日内容",</span><br><span class="line">    "tester": "zx"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ul4ap73uj316y0u0wru.jpg" alt="POST"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ul5344iqj31b30u0twb.jpg" alt="查看数据库"></p><h4 id="GET具体内容"><a href="#GET具体内容" class="headerlink" title="GET具体内容"></a>GET具体内容</h4><ol><li>校验前端传递的pk(项目ID)值,类型是否正确(正整数),在数据库中是否存在等「先省略」</li><li>获取指定pk值的项目</li><li>将模型类转化为字典，然后返回</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projects/views.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectDetail</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        <span class="comment"># 1.校验前端传递的pk(项目ID)值,类型是否正确(正整数),在数据库中是否存在等「先省略」</span></span><br><span class="line">        <span class="comment"># 2.获取指定pk值的项目</span></span><br><span class="line">        project = Projects.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">        <span class="comment"># 3.将模型类转化为字典，然后返回</span></span><br><span class="line">        one_dict = {</span><br><span class="line">            <span class="string">'name'</span>: project.name,</span><br><span class="line">            <span class="string">'leader'</span>: project.leader,</span><br><span class="line">            <span class="string">'tester'</span>: project.tester,</span><br><span class="line">            <span class="string">'programer'</span>: project.programer,</span><br><span class="line">            <span class="string">'publish_app'</span>: project.publish_app,</span><br><span class="line">            <span class="string">'desc'</span>: project.desc</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(one_dict)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projects/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> projects <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'project/'</span>, views.ProjectsList.as_view()),</span><br><span class="line">    path(<span class="string">'project/&lt;int:pk&gt;/'</span>, views.ProjectDetail.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http :8000/project/1/</span></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http :8000/project/1/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 145</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 11 Oct 2019 13:42:44 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Origin</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    "desc": "666",</span><br><span class="line">    "leader": "zx_94",</span><br><span class="line">    "name": "测试游记",</span><br><span class="line">    "programer": "zhong",</span><br><span class="line">    "publish_app": "公众号",</span><br><span class="line">    "tester": "zx"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ulfci6qvj316y0u0gws.jpg" alt="GET具体内容"></p><h4 id="PUT具体内容"><a href="#PUT具体内容" class="headerlink" title="PUT具体内容"></a>PUT具体内容</h4><ol><li>校验前端传递的pk(项目ID)值,类型是否正确(正整数),在数据库中是否存在等「先省略」</li><li>获取指定pk值的项目</li><li>从前端获取json格式的数据，转化为Python中的类型</li></ol><blockquote><p>为了严谨性，这里需要做各种复杂的校验</p><p>比如：是否为json,传递的项目数据是否符合要求,有些必传参数是否携带</p></blockquote><ol start="4"><li>更新项目</li><li>将模型类转化为字典，然后返回</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">    <span class="comment"># 1.校验前端传递的pk(项目ID)值,类型是否正确(正整数),在数据库中是否存在等「先省略」</span></span><br><span class="line">    <span class="comment"># 2.获取指定pk值的项目</span></span><br><span class="line">    project = Projects.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">    <span class="comment"># 3.从前端获取json格式的数据，转化为Python中的类型</span></span><br><span class="line">    <span class="comment"># 为了严谨性，这里需要做各种复杂的校验</span></span><br><span class="line">    <span class="comment"># 比如：是否为json,传递的项目数据是否符合要求,有些必传参数是否携带</span></span><br><span class="line">    json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 4.更新项目</span></span><br><span class="line">    project.name = python_data[<span class="string">'name'</span>]</span><br><span class="line">    project.leader = python_data[<span class="string">'leader'</span>]</span><br><span class="line">    project.tester = python_data[<span class="string">'tester'</span>]</span><br><span class="line">    project.programer = python_data[<span class="string">'programer'</span>]</span><br><span class="line">    project.publish_app = python_data[<span class="string">'publish_app'</span>]</span><br><span class="line">    project.desc = python_data[<span class="string">'desc'</span>]</span><br><span class="line">    project.save()</span><br><span class="line">    <span class="comment"># 5.将模型类转化为字典，然后返回</span></span><br><span class="line">    one_dict = {</span><br><span class="line">        <span class="string">'name'</span>: project.name,</span><br><span class="line">        <span class="string">'leader'</span>: project.leader,</span><br><span class="line">        <span class="string">'tester'</span>: project.tester,</span><br><span class="line">        <span class="string">'programer'</span>: project.programer,</span><br><span class="line">        <span class="string">'publish_app'</span>: project.publish_app,</span><br><span class="line">        <span class="string">'desc'</span>: project.desc</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(one_dict, status=<span class="number">201</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http PUT :8000/project/5/ name=10月11日「测试游记」 leader=zhongxin tester=zx programer=zx publish_app=10月11日内容 desc=测试post请求</span></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http PUT :8000/project/5/ name=10月11日「测试游记」 leader=zhongxin tester=zx programer=zx publish_app=10月11日内容 desc=测试post请求</span><br><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Content-Length: 208</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 11 Oct 2019 13:53:49 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Origin</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    "desc": "测试post请求",</span><br><span class="line">    "leader": "zhongxin",</span><br><span class="line">    "name": "10月11日「测试游记」",</span><br><span class="line">    "programer": "zx",</span><br><span class="line">    "publish_app": "10月11日内容",</span><br><span class="line">    "tester": "zx"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ulqyc5pqj316y0u07gt.jpg" alt="PUT"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ulrh5hzfj31b30u0h9v.jpg" alt="修改后"></p><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><ol><li>校验前端传递的pk(项目ID)值,类型是否正确(正整数),在数据库中是否存在等「先省略」</li><li>获取指定pk值的项目</li><li>删除</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">    <span class="comment"># 1.校验前端传递的pk(项目ID)值,类型是否正确(正整数),在数据库中是否存在等「先省略」</span></span><br><span class="line">    <span class="comment"># 2.获取指定pk值的项目</span></span><br><span class="line">    project = Projects.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">    project.delete()</span><br><span class="line">    <span class="keyword">return</span> JsonResponse({}, safe=<span class="literal">True</span>, status=<span class="number">204</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> http DELETE :8000/project/6/</span></span><br><span class="line">zhongxindeMacBook-Pro:~ zhongxin$ http DELETE :8000/project/6/</span><br><span class="line">HTTP/1.1 204 No Content</span><br><span class="line">Content-Length: 2</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 11 Oct 2019 14:03:45 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.7.1</span><br><span class="line">Vary: Origin</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7um1bvffwj316y0u0gxr.jpg" alt="DELETE"></p><h3 id="原始设计小结"><a href="#原始设计小结" class="headerlink" title="原始设计小结"></a>原始设计小结</h3><p><strong>创建接口的任务</strong></p><ol><li>校验用户数据</li><li>将请求的数据(如json格式)转换为模型类对象</li></ol><blockquote><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><ul><li>将其他格式（json,xml等）转换为程序中的数据类型</li><li>将json格式的字符串转换为Django中的模型类对象</li></ul></blockquote><ol start="3"><li>操作数据库</li><li>将模型类对象转换为响应的数据（如json格式）</li></ol><blockquote><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><ul><li>将程序中的数据类型转换为其他格式（json，xml等）</li><li>例如将Django中的模型类对象转换为json字符串</li></ul></blockquote><h3 id="数据增删改查流程"><a href="#数据增删改查流程" class="headerlink" title="数据增删改查流程"></a>数据增删改查流程</h3><ul><li>增</li></ul><blockquote><p>校验请求参数 -&gt; 反序列化 -&gt; 保存数据 -&gt; 将保存的对象序列化并返回</p></blockquote><ul><li>删</li></ul><blockquote><p>判断要删除的数据是否存在 -&gt; 执行数据删除</p></blockquote><ul><li>改</li></ul><blockquote><p>判断要修改的数据是否存在 -&gt; 校验请求参数 -&gt; 反序列化 -&gt; 保存数据 -&gt; 将保存的数据序列号并返回</p></blockquote><ul><li>查</li></ul><blockquote><p>查询数据库 -&gt; 将数据序列化并返回</p></blockquote><h3 id="原始设计代码"><a href="#原始设计代码" class="headerlink" title="原始设计代码"></a>原始设计代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsList</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, reuqest</span>):</span></span><br><span class="line">        <span class="comment"># 1.从数据库中获取所有的项目信息</span></span><br><span class="line">        project_qs = Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 2.将数据库模型实例转化为字典类型「Json数组」「嵌套字典的列表」</span></span><br><span class="line">        project_list = []</span><br><span class="line">        <span class="keyword">for</span> project <span class="keyword">in</span> project_qs:</span><br><span class="line">            project_list.append(</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">'name'</span>: project.name,</span><br><span class="line">                    <span class="string">'leader'</span>: project.leader,</span><br><span class="line">                    <span class="string">'tester'</span>: project.tester,</span><br><span class="line">                    <span class="string">'programer'</span>: project.programer,</span><br><span class="line">                    <span class="string">'publish_app'</span>: project.publish_app,</span><br><span class="line">                    <span class="string">'desc'</span>: project.desc</span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        <span class="comment"># JsonResponse第一个参数默认只能为dict字典，如果要设为其他类型，需要将safe设为False</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(project_list, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        新建项目</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 1.从前端获取json格式的数据，转化为Python中的类型</span></span><br><span class="line">        <span class="comment"># 为了严谨性，这里需要做各种复杂的校验</span></span><br><span class="line">        <span class="comment"># 比如：是否为json,传递的项目数据是否符合要求,有些必传参数是否携带</span></span><br><span class="line">        json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">        python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">        <span class="comment"># 2.向数据库中新增项目</span></span><br><span class="line">        project = Projects.objects.create(**python_data)</span><br><span class="line">        <span class="comment"># 3.将模型类转化为字典，然后返回</span></span><br><span class="line">        one_dict = {</span><br><span class="line">            <span class="string">'name'</span>: project.name,</span><br><span class="line">            <span class="string">'leader'</span>: project.leader,</span><br><span class="line">            <span class="string">'tester'</span>: project.tester,</span><br><span class="line">            <span class="string">'programer'</span>: project.programer,</span><br><span class="line">            <span class="string">'publish_app'</span>: project.publish_app,</span><br><span class="line">            <span class="string">'desc'</span>: project.desc</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(one_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectDetail</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        <span class="comment"># 1.校验前端传递的pk(项目ID)值,类型是否正确(正整数),在数据库中是否存在等「先省略」</span></span><br><span class="line">        <span class="comment"># 2.获取指定pk值的项目</span></span><br><span class="line">        project = Projects.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">        <span class="comment"># 3.将模型类转化为字典，然后返回</span></span><br><span class="line">        one_dict = {</span><br><span class="line">            <span class="string">'name'</span>: project.name,</span><br><span class="line">            <span class="string">'leader'</span>: project.leader,</span><br><span class="line">            <span class="string">'tester'</span>: project.tester,</span><br><span class="line">            <span class="string">'programer'</span>: project.programer,</span><br><span class="line">            <span class="string">'publish_app'</span>: project.publish_app,</span><br><span class="line">            <span class="string">'desc'</span>: project.desc</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(one_dict)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        <span class="comment"># 1.校验前端传递的pk(项目ID)值,类型是否正确(正整数),在数据库中是否存在等「先省略」</span></span><br><span class="line">        <span class="comment"># 2.获取指定pk值的项目</span></span><br><span class="line">        project = Projects.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">        <span class="comment"># 3.从前端获取json格式的数据，转化为Python中的类型</span></span><br><span class="line">        <span class="comment"># 为了严谨性，这里需要做各种复杂的校验</span></span><br><span class="line">        <span class="comment"># 比如：是否为json,传递的项目数据是否符合要求,有些必传参数是否携带</span></span><br><span class="line">        json_data = request.body.decode(<span class="string">'utf8'</span>)</span><br><span class="line">        python_data = json.loads(json_data, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">        <span class="comment"># 4.更新项目</span></span><br><span class="line">        project.name = python_data[<span class="string">'name'</span>]</span><br><span class="line">        project.leader = python_data[<span class="string">'leader'</span>]</span><br><span class="line">        project.tester = python_data[<span class="string">'tester'</span>]</span><br><span class="line">        project.programer = python_data[<span class="string">'programer'</span>]</span><br><span class="line">        project.publish_app = python_data[<span class="string">'publish_app'</span>]</span><br><span class="line">        project.desc = python_data[<span class="string">'desc'</span>]</span><br><span class="line">        project.save()</span><br><span class="line">        <span class="comment"># 5.将模型类转化为字典，然后返回</span></span><br><span class="line">        one_dict = {</span><br><span class="line">            <span class="string">'name'</span>: project.name,</span><br><span class="line">            <span class="string">'leader'</span>: project.leader,</span><br><span class="line">            <span class="string">'tester'</span>: project.tester,</span><br><span class="line">            <span class="string">'programer'</span>: project.programer,</span><br><span class="line">            <span class="string">'publish_app'</span>: project.publish_app,</span><br><span class="line">            <span class="string">'desc'</span>: project.desc</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(one_dict, status=<span class="number">201</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        <span class="comment"># 1.校验前端传递的pk(项目ID)值,类型是否正确(正整数),在数据库中是否存在等「先省略」</span></span><br><span class="line">        <span class="comment"># 2.获取指定pk值的项目</span></span><br><span class="line">        project = Projects.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">        project.delete()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse({}, safe=<span class="literal">True</span>, status=<span class="number">204</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十三)</title>
      <link href="article/640592ab.html"/>
      <url>article/640592ab.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十三"><a href="#测试开发进阶-二十三" class="headerlink" title="测试开发进阶(二十三)"></a>测试开发进阶(二十三)</h1><p><strong>欢迎关注我的公众号：「测试游记」</strong></p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="c-create"><a href="#c-create" class="headerlink" title="c(create)"></a>c(create)</h3><ul><li>使用模型内构造方法</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create a new object with the given kwargs, saving it to the database</span></span><br><span class="line"><span class="string">    and returning the created object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    obj = self.model(**kwargs)</span><br><span class="line">    self._for_write = <span class="literal">True</span></span><br><span class="line">    obj.save(force_insert=<span class="literal">True</span>, using=self.db)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>从代码中可以看出自带了<code>save</code>操作</p><h3 id="r-retrieve"><a href="#r-retrieve" class="headerlink" title="r(retrieve)"></a>r(retrieve)</h3><ul><li>获取一个数据表的所有数据</li></ul><blockquote><p>返回所有记录组成的模型和对象集合(queryset查询集)</p></blockquote><ul><li>获取指定记录</li></ul><blockquote><p>get</p><p>filter</p><p>exclude</p></blockquote><h4 id="获取一个数据的所有记录"><a href="#获取一个数据的所有记录" class="headerlink" title="获取一个数据的所有记录"></a>获取一个数据的所有记录</h4><blockquote><p>QuerySet查询集，就相当于一个列表(存放所有项目对象的列表)</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7sr7p92hrj31g40u0k3b.jpg" alt="all"></p><p>对QuerySet查询集进行遍历</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7sr9o0trkj31a30u011d.jpg" alt="遍历"></p><h4 id="获取单个数据"><a href="#获取单个数据" class="headerlink" title="获取单个数据"></a>获取单个数据</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 通过.可以获取到具体的内容</span></span><br><span class="line">Projects.objects.get(<span class="built_in">id</span>=<span class="number">1</span>).name</span><br><span class="line">Projects.objects.get(<span class="built_in">id</span>=<span class="number">1</span>).leader</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srcegc8rj31ht0u0124.jpg" alt="get"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srdpjy7pj31g40u0tga.jpg" alt="具体内容"></p><ol><li>get返回多条记录会报错</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srfw9oz3j313o0u0th1.jpg" alt="错误1"></p><ol start="2"><li>get查询的记录不存在会报出异常</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srgjnxe9j31g40u07bz.jpg" alt="错误2"></p><h4 id="获取某一些记录。filter-或者exclude"><a href="#获取某一些记录。filter-或者exclude" class="headerlink" title="获取某一些记录。filter()或者exclude()"></a>获取某一些记录。filter()或者exclude()</h4><p><code>filter</code>查询返回的是一个列表</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srkc3cxmj31g40u07g4.jpg" alt="filter"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(leader=<span class="string">'zx_94'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srktynq3j31g40u04aj.jpg" alt="filter2"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(leader__contains=<span class="string">'zx'</span>)</span><br></pre></td></tr></tbody></table></figure><p>使用<code>leader__contains</code>获取符合条件的查询集「模糊查询」</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srnxnw2pj314g0u0wpq.jpg" alt="leader__contains"></p><p>还有一些其他的操作，可以根据名称或SQL常识进行使用</p><p>以<code>i</code>开头(不是单词的一部分，例如<code>in</code>，<code>is</code>等)表示「忽略大小写」</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srqhrafcj30s20k2tck.jpg" alt="其他"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srr9y24ej30s20k2tcr.jpg" alt="其他2"></p><p><code>exclude</code>反向查询</p><p>下面可以获取到<code>id ！= 1</code>的内容</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.exclude(<span class="built_in">id</span>=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srm1sxn0j31590u0gw8.jpg" alt="image-20191010074604404"></p><h4 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h4><p>查询语句：<code>外键字段__从表的字段名__条件</code></p><p>在<code>tb_interfaces</code>表中添加一条内容</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7srxmfc6kj317807ugmy.jpg" alt="添加内容"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(interfaces__name=<span class="string">'登录接口'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7sryme6jxj31g40u07gf.jpg" alt="查询"></p><p>通过<code>interfaces</code>的<code>name</code>「登录接口」来找到关联表中的具体内容</p><p>查看SQL语句</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line">print(connection.queries[-<span class="number">1</span>])</span><br><span class="line">{<span class="string">'sql'</span>: <span class="string">"SELECT `tb_projects`.`id`, `tb_projects`.`name`, `tb_projects`.`leader`, `tb_projects`.`tester`, `tb_projects`.`programer`, `tb_projects`.`publish_app`, `tb_projects`.`desc` FROM `tb_projects` INNER JOIN `tb_interfaces` ON (`tb_projects`.`id` = `tb_interfaces`.`project_id`) WHERE `tb_interfaces`.`name` = '登录接口'  LIMIT 21"</span>, <span class="string">'time'</span>: <span class="string">'0.001'</span>}</span><br></pre></td></tr></tbody></table></figure><h4 id="比较查询"><a href="#比较查询" class="headerlink" title="比较查询"></a>比较查询</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(id__gt=<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ss73gjocj316b0u07h7.jpg" alt="比较查询"></p><blockquote><p><code>__gt</code>:大于</p><p><code>__gte</code>:大于等于</p><p><code>__lt</code>:小于</p><p><code>__lte</code>:小于等于</p></blockquote><h4 id="多条件-或-查询"><a href="#多条件-或-查询" class="headerlink" title="多条件 或 查询"></a>多条件 或 查询</h4><p>以下语句表示查询<code>leader='zx'</code>或<code>id=1</code>的内容</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(Q(leader=<span class="string">'zx'</span>) | Q(<span class="built_in">id</span>=<span class="number">1</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="多条件-与-查询"><a href="#多条件-与-查询" class="headerlink" title="多条件 与 查询"></a>多条件 与 查询</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(leader=<span class="string">'zx'</span>, <span class="built_in">id</span>=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="查询集的操作"><a href="#查询集的操作" class="headerlink" title="查询集的操作"></a>查询集的操作</h4><blockquote><p>查询集相当于一个列表，支持列表中的大多数操作（索引，正向切片，for)<br>查询集是对数据库操作的一种优化<br>查询集会缓存结果</p></blockquote><h3 id="u-update"><a href="#u-update" class="headerlink" title="u(update)"></a>u(update)</h3><p>先获取，后修改，再保存</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = Projects.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">p.leader = <span class="string">'zx'</span></span><br><span class="line">p.save()</span><br></pre></td></tr></tbody></table></figure><h3 id="d-delete"><a href="#d-delete" class="headerlink" title="d(delete)"></a>d(delete)</h3><p>获取后，删除</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = Projects.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">p.delete()</span><br></pre></td></tr></tbody></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>从小到大</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(id__gte=<span class="number">3</span>).order_by(<span class="string">'name'</span>)</span><br></pre></td></tr></tbody></table></figure><p>从大到小</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(id__gte=<span class="number">3</span>).order_by(<span class="string">'-name'</span>)</span><br></pre></td></tr></tbody></table></figure><p>当前一个字段相同，以后一个来排序</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Projects.objects.<span class="built_in">filter</span>(id__gte=<span class="number">3</span>).order_by(<span class="string">'name'</span>,<span class="string">'-publish_app'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="阅读官方文档"><a href="#阅读官方文档" class="headerlink" title="阅读官方文档"></a>阅读官方文档</h2><p><a href="https://docs.djangoproject.com/en/2.2/">https://docs.djangoproject.com/en/2.2/</a></p><p>「<a href="https://docs.djangoproject.com/en/2.2/intro/">Tutorials</a>」入门：<a href="https://docs.djangoproject.com/en/2.2/intro/">https://docs.djangoproject.com/en/2.2/intro/</a></p><p>「<a href="https://docs.djangoproject.com/en/2.2/topics/">Topic guides</a>」专题：<a href="https://docs.djangoproject.com/en/2.2/topics/">https://docs.djangoproject.com/en/2.2/topics/</a></p><p>「<a href="https://docs.djangoproject.com/en/2.2/ref/">Reference guides</a> 」接口：<a href="https://docs.djangoproject.com/en/2.2/ref/">https://docs.djangoproject.com/en/2.2/ref/</a></p><p>「<a href="https://docs.djangoproject.com/en/2.2/howto/">How-to guides</a> 」进阶内容：<a href="https://docs.djangoproject.com/en/2.2/howto/">https://docs.djangoproject.com/en/2.2/howto/</a></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7tgdymn19j31dk0lkjwu.jpg" alt="官方文档"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十二)</title>
      <link href="article/1af6b280.html"/>
      <url>article/1af6b280.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十二"><a href="#测试开发进阶-二十二" class="headerlink" title="测试开发进阶(二十二)"></a>测试开发进阶(二十二)</h1><p><strong>欢迎关注我的公众号「测试游记」</strong></p><p>在<code>projects/models.py</code>中编写</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建Person类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>每个应用下的数据库模型类，需要在当前应用下的models.py文件中定义</li><li>一个数据库模型类相当于一个数据表(Table)</li><li>一个数据库模型类需要基础Model或者其子类</li><li>定义的一个类属性，就相当于数据库表中的一个字段(<code>first_name</code>,<code>last_name</code>)</li><li>默认会创建一个自动递增的id主键</li><li>默认创建的数据库名为：应用名小写_数据库模型类小写</li></ol></blockquote><span id="more"></span><h2 id="修改数据库远程连接权限"><a href="#修改数据库远程连接权限" class="headerlink" title="修改数据库远程连接权限"></a>修改数据库远程连接权限</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span> . <span class="operator">*</span> <span class="keyword">TO</span> <span class="string">'你的用户名'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'你的密码'</span>;</span><br></pre></td></tr></tbody></table></figure><p>我这边使用</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span> . <span class="operator">*</span> <span class="keyword">TO</span> <span class="string">'my_django'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></tbody></table></figure><p>刷新数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ecjj16lbj31eu0rue0t.jpg" alt="连接数据库"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ecnrqkg0j30ww0rgjx3.jpg" alt="修改权限"></p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ecq8w762j30g20le14o.jpg" alt="打开manage"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> makemigrations projects</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> migrate projects</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ecpfywwcj31b30u0h8e.jpg" alt="数据库迁移"></p><p>迁移结果查看</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ecv9pexmj31b30u0k7y.jpg" alt="结果查看"></p><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><ul><li><code>max_length</code> 最大长度</li><li><code>unique</code> 设置当前参数唯一</li><li><code>verbose_name</code> 设置人性化的字段名</li><li><code>help_text</code> 用于API文档中的中文名</li><li><code>null</code> 允许为空</li><li><code>black</code> 设置前端可以不传递</li><li><code>default</code> 设置默认值</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Projects</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建Projects模型类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'项目名称'</span>, max_length=<span class="number">200</span>, unique=<span class="literal">True</span>, help_text=<span class="string">'项目名称'</span>)</span><br><span class="line">    leader = models.CharField(verbose_name=<span class="string">'负责人'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'负责人'</span>)</span><br><span class="line">    tester = models.CharField(verbose_name=<span class="string">'测试人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'测试人员'</span>)</span><br><span class="line">    programer = models.CharField(verbose_name=<span class="string">'开发人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'开发人员'</span>)</span><br><span class="line">    publish_app = models.CharField(verbose_name=<span class="string">'发布应用'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'发布应用'</span>)</span><br><span class="line">    desc = models.TextField(verbose_name=<span class="string">'简要描述'</span>, help_text=<span class="string">'简要描述'</span>, blank=<span class="literal">True</span>, default=<span class="string">''</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="查看新表"><a href="#查看新表" class="headerlink" title="查看新表"></a>查看新表</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7eczu57mwj31b30u0wwm.jpg" alt="新表"></p><h3 id="查看表设计"><a href="#查看表设计" class="headerlink" title="查看表设计"></a>查看表设计</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ed166b0qj31cu0eydia.jpg" alt="查看表设计"></p><h2 id="修改数据表名称"><a href="#修改数据表名称" class="headerlink" title="修改数据表名称"></a>修改数据表名称</h2><p>在<code>Projects</code>类中添加</p><ul><li><code>db_table</code>表名</li><li><code>verbose_name</code>:在admin站点中人性化展示</li><li><code>verbose_name_plural</code>:复数显示(对照英文在单词后面+s)</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">'tb_projects'</span></span><br><span class="line">    verbose_name = <span class="string">'项目'</span></span><br><span class="line">    verbose_name_plural = <span class="string">'项目'</span></span><br></pre></td></tr></tbody></table></figure><p>再次迁移</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> makemigrations projects</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> migrate projects</span></span><br></pre></td></tr></tbody></table></figure><h3 id="迁移前："><a href="#迁移前：" class="headerlink" title="迁移前："></a>迁移前：</h3><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ed3bwhfcj30h80m6acl.jpg" alt="迁移前" style="zoom:50%;"><h3 id="迁移后-点击刷新-："><a href="#迁移后-点击刷新-：" class="headerlink" title="迁移后(点击刷新)："></a>迁移后(<strong>点击刷新</strong>)：</h3><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ed41c6ddj30he0qcq5k.jpg" alt="迁移后" style="zoom:50%;"><h3 id="后台站点"><a href="#后台站点" class="headerlink" title="后台站点"></a>后台站点</h3><p>注册站点</p><p><code>projects/admin.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Projects, Person</span><br><span class="line"></span><br><span class="line">admin.site.register(Projects)</span><br><span class="line">admin.site.register(Person)</span><br></pre></td></tr></tbody></table></figure><p>全部迁移</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> makemigrations</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> migrate</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ee73f419j319z0u049m.jpg" alt="全部迁移"></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ee7f7h4tj30hc0pg0v7.jpg" alt="迁移后" style="zoom:50%;"><h4 id="访问admin"><a href="#访问admin" class="headerlink" title="访问admin"></a>访问admin</h4><p><code>http://127.0.0.1:8000/admin</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ee8k5dz4j31b30u0tmo.jpg" alt="访问admin"></p><h4 id="创建管理员账户"><a href="#创建管理员账户" class="headerlink" title="创建管理员账户"></a>创建管理员账户</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> createsuperuser</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ee9kkfc3j31sg0nc0z1.jpg" alt="image-20190927212624337"></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ee9zdl4aj30o20i2mxp.jpg" alt="登录" style="zoom:50%;"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7eeaqldy5j31160s8dk2.jpg" alt="后台内容" style="zoom:50%;"><p>让图中的<code>Persons</code>变为中文：修改<code>projects.models.Person</code>保存后刷新页面</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建Person类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'人'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'人们'</span></span><br></pre></td></tr></tbody></table></figure><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7eed1hfx9j31360tqtd8.jpg" alt="修改名称" style="zoom:50%;"><p>添加一个项目：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7eefc9xn9j31b30u0qjn.jpg" alt="添加项目"></p><p>查看数据表</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7eefw7rg0j31b30u04kj.jpg" alt="数据表"></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7eeih60n6j30ly0m0dgu.jpg" alt="显示" style="zoom:50%;"><p>为了让他显示的更人性化在<code>projects.models.Projects</code>中添加：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></figure><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7eeji8i93j30pq0rsn0p.jpg" alt="显示" style="zoom:50%;"><h4 id="修改展示的部分"><a href="#修改展示的部分" class="headerlink" title="修改展示的部分"></a>修改展示的部分</h4><ul><li><code>fields</code> 指定在修改「新增」中需要显示的字段</li><li><code>list_display</code> 指定要列出的字段</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Projects, Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectsAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    定制后台管理站点类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fields = (<span class="string">'name'</span>, <span class="string">'leader'</span>, <span class="string">'tester'</span>, <span class="string">'programer'</span>, <span class="string">'publish_app'</span>, <span class="string">'desc'</span>)</span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'leader'</span>, <span class="string">'tester'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Projects, ProjectsAdmin)</span><br><span class="line">admin.site.register(Person)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7eetaa7sxj327y0qmn6f.jpg" alt="修改后展示"></p><h2 id="表关联"><a href="#表关联" class="headerlink" title="表关联"></a>表关联</h2><h3 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ed9zijdgj31u20hc429.jpg" alt="image-20190927205211913"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> startapp interfaces</span></span><br></pre></td></tr></tbody></table></figure><h3 id="注册子应用"><a href="#注册子应用" class="headerlink" title="注册子应用"></a>注册子应用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'projects.apps.ProjectsConfig'</span>,</span><br><span class="line">    <span class="string">'interfaces.apps.InterfacesConfig'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>在<code>interfaces/models.py</code>中编写</p><p>**一个项目中有多个接口 那么需要在「多」的一侧创建外键 **</p><p><strong>项目表为父表「一」，接口表为「多」子表</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interfaces</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'项目名称'</span>, max_length=<span class="number">200</span>, unique=<span class="literal">True</span>, help_text=<span class="string">'项目名称'</span>)</span><br><span class="line">    tester = models.CharField(verbose_name=<span class="string">'测试人员'</span>, max_length=<span class="number">50</span>, help_text=<span class="string">'测试人员'</span>)</span><br><span class="line">    desc = models.TextField(verbose_name=<span class="string">'简要描述'</span>, help_text=<span class="string">'简要描述'</span>, blank=<span class="literal">True</span>, default=<span class="string">''</span>, null=<span class="literal">True</span>)</span><br><span class="line">    project = models.ForeignKey(<span class="string">'projects.Projects'</span>, on_delete=models.CASCADE, verbose_name=<span class="string">'所属项目'</span>, help_text=<span class="string">'所属项目'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>():</span></span><br><span class="line">        verbose_name = <span class="string">'a'</span></span><br></pre></td></tr></tbody></table></figure><p>对于：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project = models.ForeignKey(<span class="string">'projects.Projects'</span>, on_delete=models.CASCADE, verbose_name=<span class="string">'所属项目'</span>, help_text=<span class="string">'所属项目'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="第一个参数"><a href="#第一个参数" class="headerlink" title="第一个参数"></a>第一个参数</h3><ol><li><code>字符串</code>：关联的模型路径或者模型类「应用名.模型类」 -&gt; ‘projects.Projects’</li><li><code>对象</code>：import导入from projects.models import Projects -&gt; Projects</li></ol><h3 id="第二个参数"><a href="#第二个参数" class="headerlink" title="第二个参数"></a>第二个参数</h3><p>设置的是：当父表删除之后，该字段的处理方式</p><ul><li><code>models.CASCADE</code>:子表也会被删除</li><li><code>models.SET_NULL</code>:当前外键会被设置为None</li><li><code>models.PROTECT</code>:会报错</li><li><code>models.SET_DEFAULT</code>:设置默认值,同时需要指定默认值,null=True</li></ul><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>使用Pycharm自带的<code>Python Console</code>就可以进入Django的shell模式</p><p>使用<code>python manage.py shell</code>也可以进入</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7eewgt4obj326s0sgwmd.jpg" alt="shell"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> projects.models <span class="keyword">import</span> Projects</span><br><span class="line">Projects.objects.<span class="built_in">all</span>()</span><br><span class="line">Out[<span class="number">3</span>]: &lt;QuerySet [&lt;Projects: 测试游记&gt;, &lt;Projects: 测试游记<span class="number">1</span>&gt;]&gt;</span><br><span class="line">Projects.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">4</span>]: &lt;Projects: 测试游记&gt;</span><br><span class="line">Projects.objects.get(<span class="built_in">id</span>=<span class="number">1</span>).name</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'测试游记'</span></span><br><span class="line">Projects.objects.get(<span class="built_in">id</span>=<span class="number">1</span>).tester</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">'zx'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查看数据库操作记录"><a href="#查看数据库操作记录" class="headerlink" title="查看数据库操作记录"></a>查看数据库操作记录</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line">print(connection.queries)</span><br></pre></td></tr></tbody></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">one_obj = Projects(name=<span class="string">'「测试游记」-创建'</span>, leader=<span class="string">'zx_94'</span>, tester=<span class="string">'zx'</span>, programer=<span class="string">'zx'</span>, publish_app=<span class="string">'公众号'</span>, desc=<span class="string">'666'</span>)</span><br><span class="line"></span><br><span class="line">one_obj.save()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7ef9ejx8uj31pa0aumzx.jpg" alt="查看结果"></p><p>数据库操作记录</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(connection.queries[-<span class="number">1</span>])</span><br><span class="line">{<span class="string">'sql'</span>: <span class="string">"INSERT INTO `tb_projects` (`name`, `leader`, `tester`, `programer`, `publish_app`, `desc`) VALUES ('「测试游记」-创建', 'zx_94', 'zx', 'zx', '公众号', '666')"</span>, <span class="string">'time'</span>: <span class="string">'0.003'</span>}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十一)</title>
      <link href="article/b5c729e2.html"/>
      <url>article/b5c729e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十一"><a href="#测试开发进阶-二十一" class="headerlink" title="测试开发进阶(二十一)"></a>测试开发进阶(二十一)</h1><p><strong>欢迎关注我的公众号「测试游记」</strong></p><h2 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h2><h3 id="前后端不分离"><a href="#前后端不分离" class="headerlink" title="前后端不分离"></a>前后端不分离</h3><ul><li>后端需要控制数据的展示</li><li>前后端耦合比较高</li><li>多终端复用性差</li><li>任务区分不明显</li></ul><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><ul><li>当前主流</li><li>后端只对数据进行处理，只提供数据</li><li>前端效率，页面由前端负责</li><li>解耦和</li><li>前后端同时开始开发，缩小业务上线周期<span id="more"></span><h2 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h2></li></ul><h3 id="url传参"><a href="#url传参" class="headerlink" title="url传参"></a>url传参</h3><p>访问：<code>http://127.0.0.1:8000/index?a=1&amp;b=2</code></p><p>调试代码</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c1u8unnkj31a80c6tb2.jpg" alt="调试"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c1uiqkfij31bd0u0gv8.jpg" alt="调试"></p><ul><li><code>request.GET</code>返回一个类字典的内容</li><li>查询字符串参数，如果有多个相同的key，使用<code>request.GET.get('xxx')</code>获取的是最后一个值</li><li>使用<code>request.GET.getlist('xxx')</code>可以获取到多个相同key值的参数</li></ul><p>访问：<code>http://127.0.0.1:8000/index/?a=1&amp;b=2&amp;a=3</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c20k9653j31bd0u0aju.jpg" alt="request.GET"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c20s0c9pj31bd0u0gtt.jpg" alt="request.GET.get('xxx')"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c218ng56j31bd0u0n60.jpg" alt="request.GET.getlist('xxx')"></p><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h3><p>使用<code>Postman</code>发起请求</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c24ug0f4j319s0u0na5.jpg" alt="postman发请求"></p><p>调试代码</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c257yl4ij31aa0gqdjd.jpg" alt="调试"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c25hey1xj31bd0u07e0.jpg" alt="调试"></p><p>与<code>GET</code>类似</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.POST.get(<span class="string">'a'</span>) <span class="comment"># '3'</span></span><br><span class="line">request.POST.getlist(<span class="string">'a'</span>) <span class="comment"># ['1','3']</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c26ow4c0j31bd0u0wmp.jpg" alt="get"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c271x4bdj31bd0u0n5y.jpg" alt="getlist"></p><h3 id="json格式"><a href="#json格式" class="headerlink" title="json格式"></a>json格式</h3><p>使用<code>postman</code>发送json格式</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c2ahvi0zj319s0u0an0.jpg" alt="json格式"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c2b896s1j31bd0u0aia.jpg" alt="body"></p><p>转化为python内容，使用<code>json</code>模块的<code>loads</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c2dvogugj31ho0sq0yv.jpg" alt="转化"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">r_dict = json.loads(request.body.decode())</span><br></pre></td></tr></tbody></table></figure><h3 id="url路径参数"><a href="#url路径参数" class="headerlink" title="url路径参数"></a>url路径参数</h3><p>在<code>projects/urls.py</code>的<code>urlpatterns</code>中添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'&lt;int:pk&gt;/'</span>, views.IndexView.as_view()),</span><br></pre></td></tr></tbody></table></figure><p><code>int    </code>为路径参数类型转换器</p><p><code>:</code>左边被转换器，右边为参数别名</p><ul><li>int</li><li>slug</li><li>uuid</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'demo.html'</span>)</span><br></pre></td></tr></tbody></table></figure><p>访问：<code>http://127.0.0.1:8000/index/100/</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c31jtlpqj31nu0ryjxl.jpg" alt="路径参数"></p><h2 id="返回Json"><a href="#返回Json" class="headerlink" title="返回Json"></a>返回Json</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projects/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        data = {</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'zx'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="number">25</span>,</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(data)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c3hcevdtj319s0u07hk.jpg" alt="测试"></p><h2 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>把类和数据表进行映射</li><li>通过类和对象就能操作它所对应表格中的数据「增删改查」(CRUD)</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>配置数据库连接信息</li></ul><ol><li>创建数据库和用户</li><li>配置数据库</li><li>安装mysqlclient</li></ol><ul><li>在models.py中定义模型类</li><li>迁移</li><li>通过类和对象操作完成数据库增删改查操作</li></ul><p>使用<code>Navicat</code>连接<code>mysql</code>后创建一个数据库</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c3xdfme0j30tg0fejv6.jpg" alt="Navicat"></p><p>新建一个用户</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c45bu6ckj31b30u07nr.jpg" alt="新建用户"></p><p>修改权限</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c47klh4jj31b30u0kdp.jpg" alt="修改权限"></p><p><strong>需要使用专业版！</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c3tofojgj30zc0u0tjl.jpg" alt="连接数据库"></p><p>点击<code>Download missing driver files</code>安装数据库连接软件</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c459bxw8j30z10u0tn7.jpg" alt="连接测试"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c48rfur1j30io0rg0w4.jpg" alt="显示databases"></p><p>安装连接库</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7c439lob3j31080u07fw.jpg" alt="image-20190925220311323"></p><p>修改<code>LearnDjango/settings.py</code>配置</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>, <span class="comment"># 指定引擎</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'my_django'</span>, <span class="comment"># databases名</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'my_django'</span>, <span class="comment"># 数据库用户名</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123456'</span>, <span class="comment">#数据库密码</span></span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>, <span class="comment"># 主机IP</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span> <span class="comment">#连接端口</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二十)</title>
      <link href="article/ad343fa.html"/>
      <url>article/ad343fa.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二十"><a href="#测试开发进阶-二十" class="headerlink" title="测试开发进阶(二十)"></a>测试开发进阶(二十)</h1><h2 id="Django基础"><a href="#Django基础" class="headerlink" title="Django基础"></a>Django基础</h2><h3 id="1-为什么要使用框架来开发"><a href="#1-为什么要使用框架来开发" class="headerlink" title="1.为什么要使用框架来开发"></a>1.为什么要使用框架来开发</h3><ul><li><p>站在巨人的肩膀上</p></li><li><p>提升开发效率</p></li><li><p>只关注业务逻辑的实现，不关心底层建设</p><span id="more"></span><h3 id="2-Django-vs-Flask"><a href="#2-Django-vs-Flask" class="headerlink" title="2.Django vs Flask"></a>2.Django vs Flask</h3></li><li><p>Django</p></li></ul><blockquote><ul><li>大而全</li><li>入门简单</li><li>最流行</li><li>类似于精装修的房子</li></ul></blockquote><ul><li>Flaks</li></ul><blockquote><ul><li>轻量级</li><li>定制化程度高</li><li>流行</li><li>高手的玩偶</li><li>类似于毛坯房</li></ul></blockquote><h3 id="3-Django是什么"><a href="#3-Django是什么" class="headerlink" title="3.Django是什么"></a>3.Django是什么</h3><p><em>Django makes it easier to build better Web apps more quickly and with less code.</em></p><h3 id="4-特点"><a href="#4-特点" class="headerlink" title="4.特点"></a>4.特点</h3><ul><li>提供创建项目工程自动化工具</li><li>数据库ORM支持</li><li>模版</li><li>表单</li><li>Admin管理站点</li><li>文件管理</li><li>认证权限</li><li>session机制</li><li>缓存</li></ul><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><h3 id="命令行创建"><a href="#命令行创建" class="headerlink" title="命令行创建"></a>命令行创建</h3><ol><li>安装Django</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install Django</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>创建项目</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> django-admin startproject 项目名</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>运行项目</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py runserver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py runserver ip:端口</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用Pycharm创建项目"><a href="#使用Pycharm创建项目" class="headerlink" title="使用Pycharm创建项目"></a>使用Pycharm创建项目</h3><p>注意：使用Pycharm专业版</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7a8xphz3vj318w0u0n8f.jpg" alt="image-20190924071941486"></p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7a95o5rclj31b30u0nca.jpg" alt="启动1"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7a96fvfu8j326m0gidk9.jpg" alt="启动2"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7a968dxchj31b30u0wv2.jpg" alt="启动3"></p><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>修改<code>settings.py</code>中的</p><ul><li><code>LANGUAGE_CODE</code> 为 <code>zh-hans</code></li><li><code>TIME_ZONE</code> 为 <code>Asia/Shanghai</code></li></ul><p>页面展示的内容就会变成中文</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7a97aoyvrj31b30u0tpc.jpg" alt="中文展示"></p><h2 id="创建子应用"><a href="#创建子应用" class="headerlink" title="创建子应用"></a>创建子应用</h2><ul><li>业务功能模块复用</li><li>将工程项目拆分为不同的子功能模块，以子应用的形式存在</li><li>各功能模块间可以保持相对的独立</li><li>可以将该模块代码整体复制过去</li></ul><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.pt startapp 子应用</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7a9aupo76j317u0mce2f.jpg" alt="使用Pycharm创建"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7a9borp1kj326w0ok43j.jpg" alt="创建子应用"></p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>在全局配置文件<code>settings.py</code>中<code>INSTALLED_APPS</code>添加<code>'projects.apps.ProjectsConfig'</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="comment"># 注册子应用</span></span><br><span class="line">    <span class="comment"># 子应用名.apps.子应用名首字母大写Config</span></span><br><span class="line">    <span class="string">'projects.apps.ProjectsConfig'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h3 id="子应用创建一个视图"><a href="#子应用创建一个视图" class="headerlink" title="子应用创建一个视图"></a>子应用创建一个视图</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projects/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;「测试游记」&lt;/h1&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LearnDjango/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> projects.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'index/'</span>, index),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>刷新页面后可以发现首页消失</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7a9gl87jhj31b30u0185.jpg" alt="刷新"></p><p>根据提示访问：<code>http://127.0.0.1:8000/index/</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7a9h8ynkxj31b30u0gyt.jpg" alt="index页面"></p><p><code>LearnDjango/urls.py</code>：</p><blockquote><p>全局路由配置</p><ol><li>urlpatterns为固定名称的列表</li><li>列表中的一个元素，就代表一条路由</li><li>从上到下进行匹配，如果能匹配上，Django会导入和调用path函数第二个参数指定的视图(或子路由)</li><li>如果匹配不上会自动抛出404异常</li><li></li></ol></blockquote><h3 id="使用子路由"><a href="#使用子路由" class="headerlink" title="使用子路由"></a>使用子路由</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projects/urls.py</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Describe: urls</span></span><br><span class="line"><span class="string">@Author: zhongxin</span></span><br><span class="line"><span class="string">@Time: 2019-09-24 07:42</span></span><br><span class="line"><span class="string">@Email: 490336534@qq.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, index),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LearnDjango/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'index/'</span>, include(<span class="string">'projects.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><blockquote><p>每个应用(模块)都会维护一个子路由(当前应用的路由消息)</p><p>跟主路由一样，也是由上到下进行匹配</p><p>能匹配上，则执行path第二个参数指定的视图，匹配不上抛出404异常</p></blockquote><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="函数视图"><a href="#函数视图" class="headerlink" title="函数视图"></a>函数视图</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;「测试游记」&lt;/h1&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><p>上面就是一个<code>函数视图</code></p><p>视图函数第一个参数<code>request</code>是HttpRequest对象，包含前端用户的所有请求信息</p><p><strong>必须返回</strong>一个HttpResponse对象或者子对象</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;「测试游记」GET请求&lt;/h1&gt;'</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;「测试游记」POST请求&lt;/h1&gt;'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;「测试游记」其他请求&lt;/h1&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><p>使用<code>postman</code>进行测试</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7aa54mtvej319s0u016o.jpg" alt="GET请求"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7aa5bx7jpj319s0u0k5l.jpg" alt="POST请求"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7aa5k6tdnj319s0u07io.jpg" alt="其他请求"></p><h4 id="类视图"><a href="#类视图" class="headerlink" title="类视图"></a>类视图</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projects/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    index 主页类视图</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;「测试游记」类视图GET请求&lt;/h1&gt;'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;「测试游记」类视图POST请求&lt;/h1&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projects/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> projects <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.IndexView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7aaabz8s8j319s0u0k65.jpg" alt="类视图GET请求"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7aaaj9w6oj319s0u07ja.jpg" alt="类视图POST请求"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7aab2ze6nj319s0u0wt9.jpg" alt="类视图其他请求"></p><p>可以看到其他请求返回了<code>405</code></p><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><p>新建<code>templates/demo.html</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>「测试游记」模版<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>修改视图<code>return render(request,'demo.html')</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    index 主页类视图</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'demo.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;「测试游记」类视图POST请求&lt;/h1&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><p>查看页面</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7aae606buj31b30u0qg9.jpg" alt="页面"></p><h2 id="MVT"><a href="#MVT" class="headerlink" title="MVT"></a>MVT</h2><p>M：模型(Model) 与MVC中的M功能相同，负责和数据库交互，进行数据处理</p><p>V：视图(View) 与MVC中的C功能相同，接收请求，进行业务处理，返回响应</p><p>T：模版(Template)与MVC中的V功能相同，负责构造要返回的html页面</p><p><code>数据库</code>  &lt;——–&gt;<code>M模型</code> &lt;–请求/返回数据–&gt;<code>V视图</code> &lt;–请求/返回模版内容–&gt;<code>T模版</code>&lt;–展示–&gt;<code>客户端</code></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十九)</title>
      <link href="article/30e2cc9e.html"/>
      <url>article/30e2cc9e.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十九"><a href="#测试开发进阶-十九" class="headerlink" title="测试开发进阶(十九)"></a>测试开发进阶(十九)</h1><p>欢迎关注我的公众号：「测试游记」</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>场景：父页面打开，再打开子页面</p><p>借鉴官方示例：</p><p><a href="https://github.com/vuejs/vue-router/blob/dev/examples/nested-routes/app.js">https://github.com/vuejs/vue-router/blob/dev/examples/nested-routes/app.js</a></p><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78kkkd6wjj31b30u0b1g.jpg" alt="嵌套路由"></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">    mode: <span class="string">'history'</span>,</span><br><span class="line">    base: __dirname,</span><br><span class="line">    routes: [</span><br><span class="line">        {<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/parent'</span>},</span><br><span class="line">        {</span><br><span class="line">            path: <span class="string">'/parent'</span>,</span><br><span class="line">            component: Parent,</span><br><span class="line">            children: [</span><br><span class="line">                <span class="comment">// an empty path will be treated as the default, e.g.</span></span><br><span class="line">                <span class="comment">// components rendered at /parent: Root -&gt; Parent -&gt; Default</span></span><br><span class="line">                {<span class="attr">path</span>: <span class="string">''</span>, <span class="attr">component</span>: Default},</span><br><span class="line">                <span class="comment">// components rendered at /parent/foo: Root -&gt; Parent -&gt; Foo</span></span><br><span class="line">                {<span class="attr">path</span>: <span class="string">'foo'</span>, <span class="attr">component</span>: Foo},</span><br><span class="line">                <span class="comment">// components rendered at /parent/bar: Root -&gt; Parent -&gt; Bar</span></span><br><span class="line">                {<span class="attr">path</span>: <span class="string">'bar'</span>, <span class="attr">component</span>: Bar},</span><br><span class="line">                <span class="comment">// NOTE absolute path here!</span></span><br><span class="line">                <span class="comment">// this allows you to leverage the component nesting without being</span></span><br><span class="line">                <span class="comment">// limited to the nested URL.</span></span><br><span class="line">                <span class="comment">// components rendered at /baz: Root -&gt; Parent -&gt; Baz</span></span><br><span class="line">                {<span class="attr">path</span>: <span class="string">'/baz'</span>, <span class="attr">component</span>: Baz},</span><br><span class="line">                {</span><br><span class="line">                    path: <span class="string">'qux/:quxId'</span>,</span><br><span class="line">                    component: Qux,</span><br><span class="line">                    children: [</span><br><span class="line">                        {<span class="attr">path</span>: <span class="string">'quux'</span>, <span class="attr">name</span>: <span class="string">'quux'</span>, <span class="attr">component</span>: Quux},</span><br><span class="line">                        {<span class="attr">path</span>: <span class="string">'quuy'</span>, <span class="attr">name</span>: <span class="string">'quuy'</span>, <span class="attr">component</span>: Quuy}</span><br><span class="line">                    ]</span><br><span class="line">                },</span><br><span class="line">                {<span class="attr">path</span>: <span class="string">'quy/:quyId'</span>, <span class="attr">component</span>: Quy},</span><br><span class="line">                {<span class="attr">name</span>: <span class="string">'zap'</span>, <span class="attr">path</span>: <span class="string">'zap/:zapId?'</span>, <span class="attr">component</span>: Zap}</span><br><span class="line">            ]</span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>修改<code>/src/router/index.js</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    component: Login,</span><br><span class="line">    children: [</span><br><span class="line">        {<span class="attr">path</span>: <span class="string">''</span>, <span class="attr">component</span>: Login},<span class="comment">//默认路由</span></span><br><span class="line">        {<span class="attr">path</span>: <span class="string">'/projects_list2'</span>, <span class="attr">component</span>: ProjectsList},</span><br><span class="line">        {<span class="attr">path</span>: <span class="string">'projects_list2'</span>, <span class="attr">component</span>: ProjectsList}</span><br><span class="line">    ]</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>在<code> /src/components/Login.vue</code>的<code>template</code>中添加以下内容</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>=====================<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>输入：<code>http://localhost:8080/login</code>会显示两个输入内容</p><p>这是因为子路由中有一个<code>空</code>的默认路由：<code>{path: '', component: Login}</code>,所以父路由加载一次，子路由加载一次</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78kvtgbzvj31b30u0ar9.jpg" alt="登录页"></p><p>输入:<code>http://localhost:8080/projects_list2</code>会显示登录部分和项目部分</p><p>但是它使用的是<code>{path: '/projects_list2', component: ProjectsList}</code></p><p>输入:<code>http://localhost:8080/login/projects_list2</code>也会显示一样的内容</p><p>但它使用的是<code>{path: 'projects_list2', component: ProjectsList}</code></p><p>两者区别是有无<code>/</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78kxoya3pj31b30u019k.jpg" alt="登录+项目"></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><ul><li>非常流行的请求库</li><li>vue发起异步请求的标配</li></ul><p>安装方式：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cnpm install axios -S</span></span><br></pre></td></tr></tbody></table></figure><p>测试接口：<code>https://dog.ceo/api/breeds/image/random</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78l7engnxj311a0bu0vq.jpg" alt="狗狗图片"></p><p>修改<code>/src/components/HelloWorld.vue</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line"><span class="javascript">        props: { <span class="comment">//从父组件获取msg</span></span></span><br><span class="line"><span class="javascript">            msg: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            title: <span class="built_in">Number</span>,</span></span><br><span class="line">        },</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">'https://dog.ceo/api/breeds/image/random'</span>)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>{</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(response.data);</span></span><br><span class="line">                })</span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(err);</span></span><br><span class="line">                })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78ly6rfnzj31b30u0qor.jpg" alt="获取的内容"></p><p><code>/src/components/HelloWorld.vue</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{ title }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-image</span> <span class="attr">:src</span>=<span class="string">"url"</span> <span class="attr">fit</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line"><span class="javascript">        props: { <span class="comment">//从父组件获取msg</span></span></span><br><span class="line"><span class="javascript">            msg: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            title: <span class="built_in">Number</span>,</span></span><br><span class="line">        },</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">                url: <span class="string">''</span>,</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">'https://dog.ceo/api/breeds/image/random'</span>)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="params">response</span> =&gt;</span> {</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(response.data);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.url = response.data.message;</span></span><br><span class="line">                })</span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(err);</span></span><br><span class="line">                });</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h3</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-tag">li</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-tag">a</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#42b983</span>;</span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78m8b0n9bj31b30u0kjl.jpg" alt="结果展示"></p><h3 id="代码封装"><a href="#代码封装" class="headerlink" title="代码封装"></a>代码封装</h3><p>新建<code>/src/api/api.js</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = <span class="string">'https://dog.ceo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dogs = <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">${host}</span>/api/breeds/image/random`</span>)</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>修改<code>HelloWorld.vue</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {dogs} <span class="keyword">from</span> <span class="string">'../api/api.js'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> {</span><br><span class="line">            dogs()</span><br><span class="line">                .then(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">                    <span class="built_in">console</span>.log(response);</span><br><span class="line">                    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">                    <span class="built_in">this</span>.url = response.data.message;</span><br><span class="line">                })</span><br><span class="line">                .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">                    <span class="built_in">console</span>.log(err);</span><br><span class="line">                });</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h2 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h2><blockquote><p>默认情况下,在子组件开始标签和结束标签中间添加的内容会忽略</p></blockquote><p>在<code>/src/components/greeting.vue</code>的<code>template</code>中增加以下内容</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello-world</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是Hello-world子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果需要展示出来需要在<code>/src/components/HelloWorld.vue</code>中添加：</p><p><code>&lt;slot&gt;&lt;/slot&gt;</code>也就是插槽</p><p>如果在<code>slot</code>中写入内容，那外部不使用会使用默认的：</p><p><code>&lt;slot&gt;&lt;p&gt;喵喵喵&lt;/p&gt;&lt;/slot&gt;</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># greeting.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># HelloWorld.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>喵喵喵<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78n4xo7cqj306401wgle.jpg" alt="默认"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># greeting.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是Hello-world子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># HelloWorld.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>喵喵喵<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78n5km8u0j30e802cq2w.jpg" alt="修改后"></p><h3 id="命名插槽"><a href="#命名插槽" class="headerlink" title="命名插槽"></a>命名插槽</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># greeting.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">hello-world</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue2.6之前--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"part1"</span>&gt;</span>这是Hello-world子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue2.6之后--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-slot="part2" 可以缩写为 #part2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">"part2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">part2</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是part2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># HelloWorld.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"part1"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>汪汪汪<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"part2"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>咳咳咳<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78n8ycfw3j30c2034t8o.jpg" alt="显示"></p><h3 id="插槽作用域"><a href="#插槽作用域" class="headerlink" title="插槽作用域"></a>插槽作用域</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># greeting.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">hello-world</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue2.6之前--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"part4"</span> <span class="attr">slot-scope</span>=<span class="string">"sope"</span>&gt;</span></span><br><span class="line">        {{sope.user}}:这是Hello-world子组件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue2.6之后--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">part4</span>=<span class="string">"sope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{sope.user}}:这是part4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">part4</span>=<span class="string">"{user}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{user}}:这是part4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># HelloWorld.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"part4"</span> <span class="attr">:user</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g78nk9q38qj307i022q2t.jpg" alt="作用域"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十八)</title>
      <link href="article/2c33267a.html"/>
      <url>article/2c33267a.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十八"><a href="#测试开发进阶-十八" class="headerlink" title="测试开发进阶(十八)"></a>测试开发进阶(十八)</h1><p><strong>欢迎关注我的公众号「测试游记」</strong></p><blockquote><p>element-ui其实就是一个组件库</p></blockquote><p><code>ref</code>为一个元素或者子组件的应用</p><p>组件中定义的所有的ref都会放在当前组件的<code>$refs</code>属性中</p><span id="more"></span><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table</span><br><span class="line">        ref="multipleTable"</span><br><span class="line">        :data="tableData"</span><br><span class="line">        tooltip-effect="dark"</span><br><span class="line">        style="width: 100%"</span><br><span class="line">        class="project_list_new"</span><br><span class="line">        @selection-change="handleSelectionChange"&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">toggleSelection</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.$refs.multipleTable.clearSelection();</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><code>this.$refs.multipleTable</code>就可以操作上面的内容了</p><h2 id="一个登录页面"><a href="#一个登录页面" class="headerlink" title="一个登录页面"></a>一个登录页面</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-bind单向绑定，只能将Model中的数据传给绑定的属性 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">id</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">:username</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">id</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">:password</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你输入的用户名为{{username}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你输入的密码为{{password}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        name: <span class="string">"Login"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">                username: <span class="string">'admin'</span>,</span></span><br><span class="line"><span class="javascript">                password: <span class="string">'admin'</span></span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: medium;</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">label</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>v-bind单向绑定，只能将Model中的数据传给绑定的属性</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73xx67rynj31b30u0at1.jpg" alt="单向绑定"></p><blockquote><p>v-model双向绑定<br>v-model为双向绑定，既可以把Model中的数据传给绑定的属性，也可以把属性传回给Model</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">id</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">id</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">v-model</span>=<span class="string">"password"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73xyn9hbmj31b30u0dz7.jpg" alt="双向绑定"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"ruleForm"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:label-position</span>=<span class="string">"labelPosition"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">status-icon</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:rules</span>=<span class="string">"rules"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">ref</span>=<span class="string">"ruleForm"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">label-width</span>=<span class="string">"70px"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">class</span>=<span class="string">"demo-ruleForm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户名"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">v-model</span>=<span class="string">"ruleForm.username"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">v-model</span>=<span class="string">"ruleForm.password"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你输入的用户名为{{ruleForm.username}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你输入的密码为{{ruleForm.password}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        name: <span class="string">"Login_ui"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> {</span></span><br><span class="line">                ruleForm: {</span><br><span class="line"><span class="javascript">                    labelPosition: <span class="string">'right'</span>,</span></span><br><span class="line"><span class="javascript">                    username: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">                    password: <span class="string">''</span>,</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    .el-form {</span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73yedzp1jj31b30u04i9.jpg" alt="使用element_ui"></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h4 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h4><blockquote><p>这个时候，this变量还不能使用，在data下的数据，和methods下的方法，watcher中的事件都不能获得到；</p></blockquote><h4 id="created"><a href="#created" class="headerlink" title="created"></a>created</h4><blockquote><p>这个时候可以操作vue实例中的数据和各种方法，但是还不能对”dom”节点进行操作；</p></blockquote><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h4><blockquote><p>这个时候挂载完毕，这时dom节点被渲染到文档内，一些需要dom的操作在此时才能正常进行。<br>注意：mounted在整个实例的生命周期中只执行一次。</p></blockquote><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><blockquote><p>是把所有需要依赖其他值计算的值写成对象的key值。</p></blockquote><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><blockquote><p>把监听的值写成对象的key值</p></blockquote><ol><li><code>var vm = new Vue({})</code>表示开始创建一个Vue实例对象</li><li><code>Init Events &amp; Lifecycle</code>表示，刚初始化了一个Vue空的实例对象，这时候，该对象上，只有默认的一些生命周期函数和默认的事件，其他都没创建</li><li>在<code>beforeCreate</code>生命周期函数执行时，data和methods中的数据都还没初始化</li><li><code>Init injections &amp; reactivity</code>内部初始化</li><li>在<code>created</code>中，data和methods都已经初始化好了。所以最早要使用他们只能在<code>created</code>中</li><li>create开始到beforeMount 表示Vue开始编辑模版，把Vue代码中的指令进行执行，最终在内存中生存一个编译好的最终模版字符串，然后渲染为内存中的DOM，此时只是在内存中渲染好了模版，并没有挂载到真正的页面中</li><li><code>beforeMount</code> 执行这个函数的时候，模版只是在内存中编译完成，但是没有挂载到页面中，所以此时页面还是旧的</li><li><code>Create vm.$el and replace "el" with it</code>：把内存中的模版替换到浏览器页面</li><li><code>mounted</code>：执行完该函数，整个Vue实例已经初始化完毕，进入运行阶段</li><li><code>beforeUpdate</code>：data中数据更新了，但是页面还没更新</li><li><code>updated</code>：页面和data数据同步最新了</li><li><code>Virtual Dom re-render and patch</code>：根据data中的数据，在内存中渲染一份最新的DOM树，当它更新之后，会重新渲染到真实页面中去，就相当于完成了data(Model)-&gt; view(视图层)的更新</li><li><code>beforeDestroy</code>：Vue进入销毁阶段，但是data和methods还是可用的</li><li><code>destroyed</code>：组件以及被销毁了，里面的东西都不能用了</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73z74deibj30u023ztt5.jpg" alt="生命周期"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: {</span><br><span class="line"><span class="javascript">        msg: <span class="string">'ok'</span></span></span><br><span class="line">      },</span><br><span class="line">      methods: {</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'执行了show方法'</span>)</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> { <span class="comment">// 第一个生命周期函数，表示实例完全被创建出来之前，会执行它</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(this.msg)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.show()</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 注意： 在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化</span></span></span><br><span class="line">      },</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> { <span class="comment">// 第二个生命周期函数</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(this.msg)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.show()</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  在 created 中，data 和 methods 都已经被初始化好了！</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作</span></span></span><br><span class="line">      },</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> { <span class="comment">// 第3个生命周期函数，表示 模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(document.getElementById('h3').innerText)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串</span></span></span><br><span class="line">      },</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> { <span class="comment">// 第4个生命周期函数，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(document.getElementById('h3').innerText)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动</span></span></span><br><span class="line">      },</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 接下来的是运行中的两个事件</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> { <span class="comment">// 这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】</span></span></span><br><span class="line">        /* console.log('界面上元素的内容：' + document.getElementById('h3').innerText)</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'data 中的 msg 数据是：'</span> + <span class="built_in">this</span>.msg) */</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 得出结论： 当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步</span></span></span><br><span class="line">      },</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'界面上元素的内容：'</span> + <span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'data 中的 msg 数据是：'</span> + <span class="built_in">this</span>.msg)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的</span></span></span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="组件声明"><a href="#组件声明" class="headerlink" title="组件声明"></a>组件声明</h2><p>在<code>/src/main.js</code>入口js中进行声明<strong>全局组件</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入子组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./components/HelloWorld'</span></span><br><span class="line"><span class="comment">// 创建全局组件</span></span><br><span class="line">Vue.component(<span class="string">'hello-world'</span>, HelloWorld);</span><br><span class="line"><span class="comment">// 使用：在App.vue中直接使用&lt;hello-world/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>父组件，子组件之间互相调用</p><p><code>App.vue</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">"「测试游记」"</span> <span class="attr">:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./components/HelloWorld.vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义组件名称</span></span></span><br><span class="line"><span class="javascript">        name: <span class="string">'app'</span>,</span></span><br><span class="line"><span class="javascript">        components: { <span class="comment">//声明子组件</span></span></span><br><span class="line">            HelloWorld,</span><br><span class="line">        },</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">                title: <span class="string">'测试游记'</span></span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>HelloWorld.vue</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{ title }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line"><span class="javascript">        props: { <span class="comment">//从父组件获取msg</span></span></span><br><span class="line"><span class="javascript">            msg: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            title: <span class="built_in">Number</span>,</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73z1ltw7cj31b30u0qib.jpg" alt="调用"></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>创建单页面应用</li><li>官方路由组件，实现前端路由功能</li></ul><h3 id="在项目路径下安装"><a href="#在项目路径下安装" class="headerlink" title="在项目路径下安装"></a>在项目路径下安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cnpm install vue-router</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></tbody></table></figure><h3 id="借鉴官方操作"><a href="#借鉴官方操作" class="headerlink" title="借鉴官方操作"></a>借鉴官方操作</h3><p><a href="https://github.com/vuejs/vue-router/blob/dev/examples/basic/app.js">https://github.com/vuejs/vue-router/blob/dev/examples/basic/app.js</a></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g740bkqkgej31b30u0quk.jpg" alt="官方实例"></p><p>在<code>/src/router/index.js</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0.安装并导入vue-router</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Use plugin. 使用组件</span></span><br><span class="line"><span class="comment">// This installs &lt;router-view&gt; and &lt;router-link&gt;,</span></span><br><span class="line"><span class="comment">// and injects $router and $route to all router-enabled child components</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Define route components 定义组件或导入组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'../components/HelloWorld.vue'</span></span><br><span class="line"><span class="keyword">import</span> greeting <span class="keyword">from</span> <span class="string">'../components/greeting.vue'</span></span><br><span class="line"><span class="keyword">import</span> ProjectsList <span class="keyword">from</span> <span class="string">'../components/ProjectsList.vue'</span></span><br><span class="line"><span class="keyword">import</span> HomeWokr0917 <span class="keyword">from</span> <span class="string">'../components/HomeWork0917.vue'</span></span><br><span class="line"><span class="keyword">import</span> HomeWokr0917_1 <span class="keyword">from</span> <span class="string">'../components/HomeWork0917_1.vue'</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'../components/Login.vue'</span></span><br><span class="line"><span class="keyword">import</span> Login_ui <span class="keyword">from</span> <span class="string">'../components/Login_ui.vue'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Create the router 创建路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">    mode: <span class="string">'history'</span>,</span><br><span class="line">    routes: [</span><br><span class="line">        {<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: HelloWorld},</span><br><span class="line">        {<span class="attr">path</span>: <span class="string">'/greeting'</span>, <span class="attr">component</span>: greeting},</span><br><span class="line">        {<span class="attr">path</span>: <span class="string">'/projectslist'</span>, <span class="attr">component</span>: ProjectsList},</span><br><span class="line">        {<span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: Login},</span><br><span class="line">        {<span class="attr">path</span>: <span class="string">'/login_ui'</span>, <span class="attr">component</span>: Login_ui},</span><br><span class="line">    ]</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></tbody></table></figure><p>修改<code>/src/main.js</code>，添加下面内容</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vue router对象</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    router,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App), <span class="comment">//渲染App根组件</span></span><br><span class="line">}).$mount(<span class="string">'#app'</span>);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>修改<code>/src/App.vue</code>的<code>template</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Vue logo"</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">"「测试游记」"</span> <span class="attr">:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>访问<code>\</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g74061hn8aj31b30u0h0t.jpg" alt="主页"></p><p>访问<code>http://localhost:8080/login</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7406hb0bsj31b30u0dwb.jpg" alt="登录页"></p><p>在<code>App.vue</code>中添加：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login_ui"</span>&gt;</span>登录-ui<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/greeting"</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/projectslist"</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g740ahq22kj31b30u0nek.jpg" alt="导航栏"></p><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: HelloWorld, <span class="attr">name</span>: <span class="string">'index'</span>}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"{name:'index'}"</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>&lt;/li&gt;</span><br></pre></td></tr></tbody></table></figure><p>在组件中可以通过<code>this.$router</code>来获取查询字符串参数</p><p>访问<code>http://localhost:8080/greeting?name=zx&amp;age=18</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g740j8gzumj31b30u07qb.jpg" alt="查询"></p><p>修改<code>/src/components/greeting.vue</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        message: <span class="string">'Hello Python'</span>,</span><br><span class="line">        name: <span class="string">'zhongxin'</span>,</span><br><span class="line">        dream: <span class="string">'小目标'</span>,</span><br><span class="line">        isNotFlag: <span class="literal">false</span>,</span><br><span class="line">        username: <span class="built_in">this</span>.$route.query.name,</span><br><span class="line">        age: <span class="built_in">this</span>.$route.query.age,</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g740l6h1f3j31b30u01ai.jpg" alt="动态修改"></p><h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><p>修改<code>/src/router/index.js</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{<span class="attr">path</span>: <span class="string">'/greeting/:username/:age'</span>, <span class="attr">component</span>: greeting},</span><br></pre></td></tr></tbody></table></figure><p>修改<code>/src/components/greeting.vue</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        message: <span class="string">'Hello Python'</span>,</span><br><span class="line">        name: <span class="string">'zhongxin'</span>,</span><br><span class="line">        dream: <span class="string">'小目标'</span>,</span><br><span class="line">        isNotFlag: <span class="literal">false</span>,</span><br><span class="line">        username: <span class="built_in">this</span>.$route.params.username,</span><br><span class="line">        age: <span class="built_in">this</span>.$route.params.age,</span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g740own76ej31b30u0x1i.jpg" alt="image-20190918220105014"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十七)</title>
      <link href="article/e5619976.html"/>
      <url>article/e5619976.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十七"><a href="#测试开发进阶-十七" class="headerlink" title="测试开发进阶(十七)"></a>测试开发进阶(十七)</h1><p><strong>欢迎关注我的公众号：「测试游记」</strong></p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p>推荐Vue插件：<code>Vue.js devtools</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71tgx0zz8j30mq0bwta7.jpg" alt="image-20190917002005926"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71tfww1zlj31b30u0wwf.jpg" alt="Vue.js devtools"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><span id="more"></span><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"dream"</span>&gt;</span>学好Vue<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71td2c362j306g03e74j.jpg" alt="title"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"dream"</span>&gt;</span>学好Vue<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        message: <span class="string">'Hello Python'</span>,</span><br><span class="line">        name: <span class="string">'zhongxin'</span>,</span><br><span class="line">        dream: <span class="string">'小目标'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71tdnqyoaj306803ajri.jpg" alt="v-bind绑定属性"></p><p>可以使用插件进行修改绑定的内容</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71thf7972j30og0hc0ud.jpg" alt="使用插件修改"></p><h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isNotFlag"</span>&gt;</span>嘟嘟嘟<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        message: <span class="string">'Hello Python'</span>,</span><br><span class="line">        name: <span class="string">'zhongxin'</span>,</span><br><span class="line">        dream: <span class="string">'小目标'</span>,</span><br><span class="line">        isNotFlag: <span class="literal">false</span>,</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当<code>isNotFlag</code>是<code>false</code>的时候不显示，当<code>isNotFlag</code>是<code>true</code>的时候显示</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71tkwato7j30ms0lgmz5.jpg" alt="不现实" style="zoom:50%;"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71tlek0ejj30mu0quwgw.jpg" alt="显示" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isNotFlag"</span>&gt;</span>嘟嘟嘟2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>v-show</code>也可以实现类似<code>v-if</code>的效果，但是两者还是有区别的</p><ul><li><code>v-if</code>每次都会重新删除或创建元素</li><li><code>v-show</code>每次不会重新进行dom的删除和创建操作，只是切换了元素的<code>display</code>样式</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71tpp0qw7j30s205wwg3.jpg" alt="false时"></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71tqj7h3yj31920gi0wa.jpg" alt="显示时" style="zoom:50%;"><p><code>v-if</code></p><p><code>v-else-if</code></p><p><code>v-else</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>有一天，{{username}}想去上网<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"age&gt;=70"</span>&gt;</span>{{username}}爷爷，您还是回去锻炼身体吧<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">"age&gt;=18"</span>&gt;</span>{{username}}，欢迎光临<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>{{username}}，小朋友作业写完了吗？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        message: <span class="string">'Hello Python'</span>,</span><br><span class="line">        name: <span class="string">'zhongxin'</span>,</span><br><span class="line">        dream: <span class="string">'小目标'</span>,</span><br><span class="line">        isNotFlag: <span class="literal">false</span>,</span><br><span class="line">        username: <span class="string">'马仔'</span>,</span><br><span class="line">        age: <span class="number">19</span>,</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71tvi8v5hj30e604et8t.jpg" alt="页面展示"></p><p>修改<code>age</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71twucjbqj30qq0hkgnq.jpg" alt="修改age"></p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th v-for="project in project_headers"&gt;{{project}}&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        name: "ProjectsList",</span><br><span class="line">        data() {</span><br><span class="line">            return {</span><br><span class="line">                project_headers: ['项目名称', '项目负责人', '应用名称'],</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    table {</span><br><span class="line">        margin: 50px auto;</span><br><span class="line">        border-collapse: collapse;</span><br><span class="line">        width: 40%;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    td, th {</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71u5o81moj30zn0u0alo.jpg" alt="v-for"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in projects"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>{{item.name}}<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>{{item.leader}}<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>{{item.app_name}}<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        project_headers: [<span class="string">'项目名称'</span>, <span class="string">'项目负责人'</span>, <span class="string">'应用名称'</span>],</span><br><span class="line">        projects: [</span><br><span class="line">            {<span class="attr">name</span>: <span class="string">'前程贷'</span>, <span class="attr">leader</span>: <span class="string">'笨笨'</span>, <span class="attr">app_name</span>: <span class="string">'P2P'</span>},</span><br><span class="line">            {<span class="attr">name</span>: <span class="string">'111'</span>, <span class="attr">leader</span>: <span class="string">'222'</span>, <span class="attr">app_name</span>: <span class="string">'333'</span>},</span><br><span class="line">            {<span class="attr">name</span>: <span class="string">'444'</span>, <span class="attr">leader</span>: <span class="string">'555'</span>, <span class="attr">app_name</span>: <span class="string">'666'</span>},</span><br><span class="line">            {<span class="attr">name</span>: <span class="string">'666'</span>, <span class="attr">leader</span>: <span class="string">'777'</span>, <span class="attr">app_name</span>: <span class="string">'888'</span>},</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71u84fuaoj30zn0u0am8.jpg" alt="增加项目"></p><h2 id="使用Element-UI"><a href="#使用Element-UI" class="headerlink" title="使用Element UI"></a>使用Element UI</h2><p><a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn/#/zh-CN/component/installation</a></p><p>在项目路径下安装：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cnpm i element-ui -S</span></span><br></pre></td></tr></tbody></table></figure><p>导入：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入Vue.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 导入App.vue根组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="comment">// 导入element-ui</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="comment">//在创建Vue实例前，要将element-ui插件加入到Vue中</span></span><br><span class="line">Vue.use(ElementUI);<span class="comment">// 加载插件</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App), <span class="comment">//渲染App根组件</span></span><br><span class="line">}).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><p>选择适合的：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71uy3j5suj318v0u0wju.jpg" alt="选择"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">            ref="multipleTable"</span><br><span class="line">            :data="tableData"</span><br><span class="line">            tooltip-effect="dark"</span><br><span class="line">            style="width: 100%"</span><br><span class="line">            class="project_list_new"</span><br><span class="line">            @selection-change="handleSelectionChange"&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">                type="selection"</span><br><span class="line">                width="55"&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">                prop="name"</span><br><span class="line">                label="项目名称"</span><br><span class="line">                width="120"&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">                prop="leader"</span><br><span class="line">                label="项目负责人"</span><br><span class="line">                width="120"&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">                prop="app_name"</span><br><span class="line">                label="应用名称"</span><br><span class="line">                show-overflow-tooltip&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        name: "ProjectsList",</span><br><span class="line">        data() {</span><br><span class="line">            return {</span><br><span class="line">                project_headers: ['项目名称', '项目负责人', '应用名称'],</span><br><span class="line">                tableData: [</span><br><span class="line">                    {name: '前程贷', leader: '笨笨', app_name: 'P2P'},</span><br><span class="line">                    {name: '111', leader: '222', app_name: '333'},</span><br><span class="line">                    {name: '444', leader: '555', app_name: '666'},</span><br><span class="line">                    {name: '666', leader: '777', app_name: '888'},</span><br><span class="line">                ]</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    table {</span><br><span class="line">        margin: 50px auto;</span><br><span class="line">        border-collapse: collapse;</span><br><span class="line">        width: 40%;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    td, th {</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    .project_list_new {</span><br><span class="line">        margin: 50px 500px;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g71ux8ln0xj31b30u018u.jpg" alt="结果"></p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>v-on为vue中指令，用于绑定事件，事件触发之后可以执行js操作</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-on:click</span>=<span class="string">"username='路人'"</span>&gt;</span>有一天，{{username}}想去上网<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"age&gt;=70"</span>&gt;</span>{{username}}爷爷，您还是回去锻炼身体吧<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">"age&gt;=18"</span>&gt;</span>{{username}}，欢迎光临<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>{{username}}，小朋友作业写完了吗？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g725ba7sc6j30cq05e3ym.jpg" alt="点击前" style="zoom:50%;"><p>点击「有一天」后</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g725bkk8wwj30am04iaa6.jpg" alt="点击后" style="zoom:50%;"><p>v-on可以缩写为<code>@</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"changeUsername"</span>&gt;</span>有一天，{{username}}想去上网<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: {</span><br><span class="line">    changeUsername: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="comment">// this 就相当于self</span></span><br><span class="line">        <span class="built_in">this</span>.username = <span class="string">'一个没有感情的杀手'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g725f7mfonj30hk04gaag.jpg" alt="点击后" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十六)</title>
      <link href="article/7a6981fc.html"/>
      <url>article/7a6981fc.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十六"><a href="#测试开发进阶-十六" class="headerlink" title="测试开发进阶(十六)"></a>测试开发进阶(十六)</h1><p><strong>欢迎关注我呀～「测试游记」「zx94_11」</strong></p><h2 id="后续部分"><a href="#后续部分" class="headerlink" title="后续部分"></a>后续部分</h2><h3 id="到底什么是测试开发"><a href="#到底什么是测试开发" class="headerlink" title="到底什么是测试开发"></a>到底什么是测试开发</h3><ul><li>一定不仅是测试</li></ul><blockquote><ol><li>非常敏锐的开发视角</li><li>极其强大的开发能力</li></ol></blockquote><ul><li>一定不是开发</li></ul><blockquote><ol><li>无需严谨的校验</li><li>无需完美的用户体验</li></ol></blockquote><span id="more"></span><h3 id="测试开发平台是产品吗"><a href="#测试开发平台是产品吗" class="headerlink" title="测试开发平台是产品吗"></a>测试开发平台是产品吗</h3><p>对于一个<strong>不是产品</strong>的东西，我们测开（或者领导）对它的要求是什么？</p><ul><li>效率</li></ul><blockquote><p>两周内开发出一个平台</p></blockquote><ul><li>至少能实现基本自动化测试</li><li>无需花里胡哨的功能</li><li>无需严谨的校验</li><li>能用轮子的尽量用轮子</li><li>能少写的一段代码就少写一段</li></ul><h3 id="测试开发的价值，理念"><a href="#测试开发的价值，理念" class="headerlink" title="测试开发的价值，理念"></a>测试开发的价值，理念</h3><ul><li>看得懂大神写的代码，也能从中获取启发</li><li>能改大神的代码，去除糟粕，取其精华</li></ul><h3 id="测试开发课程到底学什么？"><a href="#测试开发课程到底学什么？" class="headerlink" title="测试开发课程到底学什么？"></a>测试开发课程到底学什么？</h3><ul><li>编程思维重于一切</li><li>轮子</li><li>快速开发的理念「敏捷开发」</li></ul><h2 id="Vue框架"><a href="#Vue框架" class="headerlink" title="Vue框架"></a>Vue框架</h2><ul><li>前端三大主流框架之一</li></ul><blockquote><p>Angular.js</p><p>React.js</p><p>Vue.js</p></blockquote><ul><li>简单小巧</li></ul><blockquote><p>使用gzip压缩后，只有20kb左右</p><p>入门容易</p></blockquote><ul><li>自动进行响应式更新</li></ul><blockquote><p>只需关注前端业务逻辑，无需操作DOM</p></blockquote><ul><li>高级特性</li></ul><blockquote><p>解耦视图和数据</p><p>可复用组建</p><p>前端路由</p><p>状态管理</p><p>虚拟DOM</p></blockquote><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><ul><li>类似于MVC(Java)和Django(MVT)</li></ul><blockquote><p>M</p><ul><li>模型</li><li>从后端获取的数据</li></ul><p>V</p><ul><li>视图</li><li>界面展示</li></ul><p>VM</p><ul><li>视图模型</li><li>核心控制</li></ul></blockquote><h2 id="Vue-demo"><a href="#Vue-demo" class="headerlink" title="Vue-demo"></a>Vue-demo</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        {{msg}}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:{</span><br><span class="line"><span class="javascript">                msg:<span class="string">'Hello Python'</span></span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vv3ycdfgj30lq0act9l.jpg" alt="展示" style="zoom:50%;"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vv509tr2j30mq0vwq51.jpg" alt="相应式更新" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue实例创建,会控制id为app元素中的所有内容</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue的实例 MVVM中的VM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">// 控制的区域</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// data代表数据 -&gt; MVVM中的M</span></span></span><br><span class="line">        data:{</span><br><span class="line"><span class="javascript">            msg:<span class="string">'Hello Python'</span></span></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MVVM模式中的V--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    {{msg}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vvjyo4m4j31320f40sm.jpg" alt="Component Tree"></p><ul><li>模块化</li></ul><blockquote><p>以不同的组件，来划分不同的功能模块</p></blockquote><ul><li>复用</li><li>高效</li><li>解耦</li></ul><h2 id="前端工程化，组件化"><a href="#前端工程化，组件化" class="headerlink" title="前端工程化，组件化"></a>前端工程化，组件化</h2><p>安装Node.js:<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p>查看版本</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm -v <span class="comment"># 相当于python中的pip</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vvqb0qkcj316y0u0tgl.jpg" alt="查看版本"></p><p>使用淘宝npm镜像:<a href="http://npm.taobao.org/">http://npm.taobao.org/</a></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br></pre></td></tr></tbody></table></figure><h2 id="安装vue-cli脚手架"><a href="#安装vue-cli脚手架" class="headerlink" title="安装vue-cli脚手架"></a>安装vue-cli脚手架</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意Linux或Mac 可能需要使用sudo -i进入管理员模式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cnpm install -g @vue/cli</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -g:全局</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vvurm7hhj316y0u0tro.jpg" alt="安装vue-cli脚手架"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vw2qjefuj31bi0u01b1.jpg" alt="查看安装结果"></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue create 项目名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择default</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vw62m9vgj316y0u0123.jpg" alt="image-20190911212004424"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vw9qku3ij316y0u07gy.jpg" alt="创建"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run serve <span class="comment">#开启项目</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vwimcpenj316y0u0do7.jpg" alt="开启"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vwiwx9i4j31b30u0tpu.jpg" alt="开启"></p><p>node_modules：系统库</p><p>public/：单界面</p><p>src ：需要压缩的部分</p><p>/src/assets:资源（字体，图片等）</p><p>/src/components:组件</p><p>main.js：相当于一个main函数，最先加载</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入Vue.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 导入App.vue根组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App), <span class="comment">//渲染App根组件</span></span><br><span class="line">}).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><p>App.vue:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--template用于展示给用户，相当于MVVM中的V--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Vue logo"</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在父组件中给子组件传值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">"Welcome to Your Vue.js App"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./components/HelloWorld.vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义组件名称</span></span></span><br><span class="line"><span class="javascript">        name: <span class="string">'app'</span>,</span></span><br><span class="line"><span class="javascript">        components: { <span class="comment">//声明子组件</span></span></span><br><span class="line">            HelloWorld</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>/src/components/HelloWorld.vue被当作子组件传入</p><p>修改<code>App.vue</code>，<code>&lt;HelloWorld msg="「测试游记」"/&gt;</code>把msg传入<code>HelloWorld.vue</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--template用于展示给用户，相当于MVVM中的V--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Vue logo"</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在父组件中给子组件传值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">"「测试游记」"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>修改<code>HelloWorld.vue</code>中的内容</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>查看页面</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vx4ta6qzj31060u07dk.jpg" alt="页面展示"></p><p><code>HelloWorld</code>组件里面的msg内容改变的原因：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line"><span class="javascript">        props: { <span class="comment">//从父组件获取msg</span></span></span><br><span class="line"><span class="javascript">            msg: <span class="built_in">String</span></span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="创建一个组件"><a href="#创建一个组件" class="headerlink" title="创建一个组件"></a>创建一个组件</h2><p>在<code>/src/components</code>新建一个<code>greeting.vue</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        name: "greeting"</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>填充</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">        插值表达式：</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        name: <span class="string">"greeting"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// {} -&gt; 对象</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">                message: <span class="string">'Hello Python'</span></span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>App.vue</code>里面声明</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./components/HelloWorld.vue'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> greeting <span class="keyword">from</span> <span class="string">'./components/greeting.vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义组件名称</span></span></span><br><span class="line"><span class="javascript">        name: <span class="string">'app'</span>,</span></span><br><span class="line"><span class="javascript">        components: { <span class="comment">//声明子组件</span></span></span><br><span class="line">            HelloWorld,</span><br><span class="line">            greeting</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import greeting from './components/greeting.vue'</span><br><span class="line">components: { //声明子组件</span><br><span class="line">            HelloWorld,</span><br><span class="line">            greeting</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vxhrwqgfj31060u0ajr.jpg" alt="插值"></p><p>修改颜色</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.msg</span> <span class="selector-tag">p</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6vxjd5wz5j31060u0wo6.jpg" alt="修改颜色"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十五)</title>
      <link href="article/e366c98e.html"/>
      <url>article/e366c98e.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十五"><a href="#测试开发进阶-十五" class="headerlink" title="测试开发进阶(十五)"></a>测试开发进阶(十五)</h1><p><strong>欢迎关注我呀～「测试游记」「zx94_11」</strong></p><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><blockquote><p>ajax技术的目的是让javascript发送http请求，与后台通信，获取数据和信息。</p></blockquote><ul><li>同步</li><li>异步</li></ul><ul><li>局部刷新</li><li>无刷新</li></ul><blockquote><p>ajax可以实现局部刷新，也叫做无刷新，无刷新指的是整个页面不刷新，只是局部刷新，ajax可以自己发送http请求，不用通过浏览器的地址栏，所以页面整体不会刷新，ajax获取到后台数据，更新页面显示数据的部分，就做到了页面局部刷新。</p></blockquote><p>常用参数：</p><ol><li>url 请求地址</li><li>type 请求方式，默认是’GET’，常用的还有’POST’</li><li>dataType 设置返回的数据格式，常用的是’json’格式，也可以设置为’html’</li><li>data 设置发送给服务器的数据</li><li>success 设置请求成功后的回调函数</li><li>error 设置请求失败后的回调函数</li><li>async 设置是否异步，默认值是’true’，表示异步</li></ol><h2 id="集合实例"><a href="#集合实例" class="headerlink" title="集合实例"></a>集合实例</h2><h3 id="使用ajax发送账号密码信息"><a href="#使用ajax发送账号密码信息" class="headerlink" title="使用ajax发送账号密码信息"></a>使用ajax发送账号密码信息</h3><p>首先使用Flask编写一份简单的后台代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  测试数据</span></span><br><span class="line">user_info = {</span><br><span class="line">    <span class="string">"user"</span>: <span class="string">'python01'</span>,</span><br><span class="line">    <span class="string">'pwd'</span>: <span class="string">'lemonban'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/login'</span>, methods=[<span class="string">'post'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    data = request.form</span><br><span class="line">    <span class="comment"># 判断账号，密码是否正确</span></span><br><span class="line">    <span class="keyword">if</span> user_info.get(<span class="string">'user'</span>) == data.get(<span class="string">'user'</span>) <span class="keyword">and</span> user_info.get(<span class="string">'pwd'</span>) == data.get(<span class="string">'pwd'</span>):</span><br><span class="line">        <span class="keyword">return</span> jsonify({<span class="string">'code'</span>: <span class="string">"1"</span>, <span class="string">"data"</span>: <span class="literal">None</span>, <span class="string">"msg"</span>: <span class="string">"成功"</span>})</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify({<span class="string">'code'</span>: <span class="string">"0"</span>, <span class="string">"data"</span>: <span class="literal">None</span>, <span class="string">"msg"</span>: <span class="string">"密码有误"</span>})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><p><code>request.form</code>获取到前端传递过来的内容，判断一下账号密码是否正确</p><ul><li>正确：以<code>json</code>格式返回<code>{'code': "1", "data": None, "msg": "成功"}</code></li><li>错误：以<code>json</code>格式返回<code>{'code': "0", "data": None, "msg": "密码有误"}</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../static/js/jquery-1.12.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../static/js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 案例一，表单发送ajax请求登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"dl"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>前端html由两个输入框，一个按钮组成。现在点击<code>登录</code>按钮触发<code>ajax</code>请求</p><p>现在<code>main.js</code>中写上</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">   </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>表示：<strong>页面加载完毕后执行的js代码</strong></p><p>然后在写登录按钮的<code>点击事件</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#dl'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>从html上拿到账号和密码：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = $(<span class="string">'#username'</span>).val();</span><br><span class="line"><span class="keyword">var</span> pwd = $(<span class="string">'#password'</span>).val();</span><br></pre></td></tr></tbody></table></figure><p>发送ajax请求</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax({</span><br><span class="line">    type: <span class="string">'post'</span>, <span class="comment">//请求类型</span></span><br><span class="line">    url: <span class="string">'/login'</span>, <span class="comment">//请求地址</span></span><br><span class="line">    data: { <span class="comment">//请求参数</span></span><br><span class="line">        <span class="string">"user"</span>: user,</span><br><span class="line">        <span class="string">"pwd"</span>: pwd</span><br><span class="line">    },</span><br><span class="line">    dataType: <span class="string">'json'</span>,<span class="comment">//预期后台返回类型</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>可以编写<code>.done</code>和<code>.fail</code>来处理ajax发送成功和失败后的操作</p><p>现在做成，成功且状态码正确弹框提示「登录成功」，成功但状态码错误弹框提示「登录失败」，ajax发送失败提示「请求失败」</p><p>其中<code>data</code>是请求后返回的内容</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{ <span class="comment">//data:请求返回的参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">if</span> (data.code === <span class="string">"1"</span>) {</span><br><span class="line">        alert(<span class="string">'登录成功'</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        alert(<span class="string">'登录失败'</span>)</span><br><span class="line">    }</span><br><span class="line">}).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="string">'请求失败'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>整体代码为：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#dl'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> user = $(<span class="string">'#username'</span>).val();</span><br><span class="line">    <span class="keyword">var</span> pwd = $(<span class="string">'#password'</span>).val();</span><br><span class="line">    $.ajax({</span><br><span class="line">        type: <span class="string">'post'</span>, <span class="comment">//请求类型</span></span><br><span class="line">        url: <span class="string">'/login'</span>, <span class="comment">//请求地址</span></span><br><span class="line">        data: { <span class="comment">//请求参数</span></span><br><span class="line">            <span class="string">"user"</span>: user,</span><br><span class="line">            <span class="string">"pwd"</span>: pwd</span><br><span class="line">        },</span><br><span class="line">        dataType: <span class="string">'json'</span>,<span class="comment">//预期后台返回类型</span></span><br><span class="line">    }).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{ <span class="comment">//data:请求返回的参数</span></span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="keyword">if</span> (data.code === <span class="string">"1"</span>) {</span><br><span class="line">            alert(<span class="string">'登录成功'</span>)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            alert(<span class="string">'登录失败'</span>)</span><br><span class="line">        }</span><br><span class="line">    }).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        alert(<span class="string">'请求失败'</span>)</span><br><span class="line">    })</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6q61zq05aj31go0cegp0.jpg" alt="输入正确账号密码"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6q6297zzhj31gs0cgwhv.jpg" alt="输入错误账号密码"></p><p>关闭flask服务后</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6q630tctoj31hc0ck423.jpg" alt="关闭后台后"></p><h3 id="使用ajax获取并修改下拉框"><a href="#使用ajax获取并修改下拉框" class="headerlink" title="使用ajax获取并修改下拉框"></a>使用ajax获取并修改下拉框</h3><p>事先准备好两段数据</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">project_data = {<span class="string">"code"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="string">"data"</span>: [{<span class="string">"title"</span>: <span class="string">"前程贷"</span>, <span class="string">"id"</span>: <span class="string">"1001"</span>},</span><br><span class="line">                         {<span class="string">"title"</span>: <span class="string">"智慧金融"</span>, <span class="string">"id"</span>: <span class="string">"1002"</span>},</span><br><span class="line">                         {<span class="string">"title"</span>: <span class="string">"生鲜到家"</span>, <span class="string">"id"</span>: <span class="string">"1003"</span>},</span><br><span class="line">                         {<span class="string">"title"</span>: <span class="string">"柠檬班app"</span>, <span class="string">"id"</span>: <span class="string">"1004"</span>}],</span><br><span class="line">                <span class="string">"msg"</span>: <span class="string">"四个项目"</span>,</span><br><span class="line">                }</span><br><span class="line"><span class="comment"># 接口数据</span></span><br><span class="line">interface_data = {</span><br><span class="line">    <span class="string">"1001"</span>: {<span class="string">"code"</span>: <span class="string">"1"</span>,</span><br><span class="line">             <span class="string">"data"</span>: [{<span class="string">"name"</span>: <span class="string">"前程贷登录1001"</span>},</span><br><span class="line">                      {<span class="string">"name"</span>: <span class="string">"前程贷注册1001"</span>}],</span><br><span class="line">             <span class="string">"msg"</span>: <span class="string">"2个接口"</span>, },</span><br><span class="line"></span><br><span class="line">    <span class="string">"1002"</span>: {<span class="string">"code"</span>: <span class="string">"1"</span>,</span><br><span class="line">             <span class="string">"data"</span>: [{<span class="string">"name"</span>: <span class="string">"智慧-登录1002"</span>},</span><br><span class="line">                      {<span class="string">"name"</span>: <span class="string">"智慧-注册1002"</span>},</span><br><span class="line">                      {<span class="string">"name"</span>: <span class="string">"智慧-贷款1004"</span>}, ],</span><br><span class="line">             <span class="string">"msg"</span>: <span class="string">"3个接口"</span>, },</span><br><span class="line"></span><br><span class="line">    <span class="string">"1003"</span>: {<span class="string">"code"</span>: <span class="string">"1"</span>,</span><br><span class="line">             <span class="string">"data"</span>: [{<span class="string">"name"</span>: <span class="string">"生鲜-登录1003"</span>},</span><br><span class="line">                      {<span class="string">"name"</span>: <span class="string">"生鲜-注册1003"</span>},</span><br><span class="line">                      {<span class="string">"name"</span>: <span class="string">"生鲜下单1003"</span>}, ],</span><br><span class="line">             <span class="string">"msg"</span>: <span class="string">"3个接口"</span>, },</span><br><span class="line"></span><br><span class="line">    <span class="string">"1004"</span>: {<span class="string">"code"</span>: <span class="string">"1"</span>,</span><br><span class="line">             <span class="string">"data"</span>: [{<span class="string">"name"</span>: <span class="string">"app登录1004"</span>},</span><br><span class="line">                      {<span class="string">"name"</span>: <span class="string">"app注册1004"</span>},</span><br><span class="line">                      {<span class="string">"name"</span>: <span class="string">"app报名1004"</span>},</span><br><span class="line">                      {<span class="string">"name"</span>: <span class="string">"app缴费1004"</span>},</span><br><span class="line">                      ],</span><br><span class="line">             <span class="string">"msg"</span>: <span class="string">"4个接口"</span>, },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6q654bu8qj30oa094aco.jpg" alt="效果"></p><p>现在需要使用<code>get</code>来获取项目内容,所以<code>flask</code>部分代码为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取项目列表</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/pro_list'</span>, methods=[<span class="string">'get'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pro_list</span>():</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(project_data)</span><br></pre></td></tr></tbody></table></figure><p>所以我使用<code>ajax</code>发送<code>get</code>请求访问<code>/pro_list</code>再把他写到下拉框里面就可以了</p><p>下拉框的修改采用字符串拼接的方式：<code>var option = '&lt;option value="' + res[i].id + '"&gt;' + res[i].title + '&lt;/option&gt;';</code>用<code>for</code>循环将它从数据中读取出来一个个填入</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当页面加载完毕之后，发送ajax请求获取项目和接口</span></span><br><span class="line">$.ajax({</span><br><span class="line">    url: <span class="string">'/pro_list'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">}).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (data.code === <span class="string">'1'</span>) {</span><br><span class="line">        <span class="comment">// 成功后 将项目数据加载到页面</span></span><br><span class="line">        <span class="keyword">var</span> res = data.data;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> res) {</span><br><span class="line">            <span class="keyword">var</span> option = <span class="string">'&lt;option value="'</span> + res[i].id + <span class="string">'"&gt;'</span> + res[i].title + <span class="string">'&lt;/option&gt;'</span>;</span><br><span class="line">            $(<span class="string">'#pro'</span>).append(option)</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        alert(data.msg)</span><br><span class="line">    }</span><br><span class="line">}).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="string">'请求失败'</span>)</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>接口部分下拉框是跟随项目的修改而改变的，所以需要使用<code>change</code>并获取到项目的<code>value</code>内容</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取接口列表</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/interface'</span>, methods=[<span class="string">'post'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interface</span>():</span></span><br><span class="line">    inter_id = request.form.get(<span class="string">'pro_id'</span>)</span><br><span class="line">    <span class="keyword">if</span> inter_id:</span><br><span class="line">        res_data = interface_data.get(inter_id)</span><br><span class="line">        <span class="keyword">if</span> res_data:</span><br><span class="line">            <span class="keyword">return</span> jsonify(res_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify({<span class="string">"code"</span>: <span class="string">"0"</span>, <span class="string">"data"</span>: <span class="literal">None</span>, <span class="string">"msg"</span>: <span class="string">"没有该项目"</span>})</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify({<span class="string">"code"</span>: <span class="string">"0"</span>, <span class="string">"data"</span>: <span class="literal">None</span>, <span class="string">"msg"</span>: <span class="string">"请求参数不能为空"</span>})</span><br></pre></td></tr></tbody></table></figure><p>后台代码中可以从<code>request.form.get('pro_id')</code>看出，ajax需要传递一个<code>pro_id</code>的属性</p><p><code>'pro_id': $(this).val()</code>就可以直接拿到下拉框的<code>value</code>值了</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当页面上的项目选项选择了之后，发送请求获取该项目的接口</span></span><br><span class="line">$(<span class="string">'#pro'</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    $.ajax({</span><br><span class="line">        type: <span class="string">'post'</span>,</span><br><span class="line">        url: <span class="string">'/interface'</span>,</span><br><span class="line">        data: {</span><br><span class="line">            <span class="string">'pro_id'</span>: $(<span class="built_in">this</span>).val(),</span><br><span class="line">        },</span><br><span class="line">        dataType: <span class="string">'json'</span></span><br><span class="line">    }).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (data.code === <span class="string">'1'</span>) {</span><br><span class="line">            <span class="comment">// 情况接口选择框中的数据</span></span><br><span class="line">            $(<span class="string">'#interface'</span>).empty();</span><br><span class="line">            <span class="comment">// 成功后 将项目数据加载到页面</span></span><br><span class="line">            <span class="keyword">var</span> res = data.data;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> res) {</span><br><span class="line">                <span class="keyword">var</span> option = <span class="string">'&lt;option value=""&gt;'</span> + res[i].name + <span class="string">'&lt;/option&gt;'</span>;</span><br><span class="line">                $(<span class="string">'#interface'</span>).append(option)</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>所以一份ajax请求为：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax({</span><br><span class="line">    type: <span class="string">'xxx'</span>, <span class="comment">// 类型 get post ...</span></span><br><span class="line">    url: <span class="string">'xxx'</span>, <span class="comment">//地址 同域名下</span></span><br><span class="line">    data: {<span class="string">'xxx'</span>: <span class="string">'xxx'</span>}, <span class="comment">// post等发送数据时要使用</span></span><br><span class="line">    dataType: <span class="string">'xxx'</span>,<span class="comment">//预期后台返回类型</span></span><br><span class="line">    </span><br><span class="line">}).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{ <span class="comment">//data-&gt;接口返回的内容</span></span><br><span class="line">    <span class="comment">//成功后done</span></span><br><span class="line">}).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 失败后fail</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十四)</title>
      <link href="article/e5cd9ef3.html"/>
      <url>article/e5cd9ef3.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十四"><a href="#测试开发进阶-十四" class="headerlink" title="测试开发进阶(十四)"></a>测试开发进阶(十四)</h1><p><strong>欢迎关注我呀～「测试游记」「zx94_11」</strong></p><blockquote><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p></blockquote><p><img src="http://www.w3school.com.cn/i/ct_htmltree.gif" alt="DOM HTML"></p><p>节点树中的节点彼此拥有层级关系。</p><ul><li>父（parent）</li><li>子（child）</li><li>同胞（sibling）</li></ul><p><strong>父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）</strong></p><span id="more"></span><h3 id="获取页面标签"><a href="#获取页面标签" class="headerlink" title="获取页面标签"></a>获取页面标签</h3><ul><li><h5 id="通过-id-找到-HTML-元素（常用）"><a href="#通过-id-找到-HTML-元素（常用）" class="headerlink" title="通过 id 找到 HTML 元素（常用）"></a>通过 id 找到 HTML 元素（常用）</h5><p> <code>document.getElementById()</code></p></li><li><h5 id="通过标签名找到-HTML-元素"><a href="#通过标签名找到-HTML-元素" class="headerlink" title="通过标签名找到 HTML 元素"></a>通过标签名找到 HTML 元素</h5><p> 获取出来的是列表<code>getElementsByTagName()</code></p></li><li><h5 id="通过类名找到-HTML-元素（通过类名查找-HTML-元素在-IE-5-6-7-8-中无效。）"><a href="#通过类名找到-HTML-元素（通过类名查找-HTML-元素在-IE-5-6-7-8-中无效。）" class="headerlink" title="通过类名找到 HTML 元素（通过类名查找 HTML 元素在 IE 5,6,7,8 中无效。）"></a>通过类名找到 HTML 元素（通过类名查找 HTML 元素在 IE 5,6,7,8 中无效。）</h5><p> 取出来的是列表<code>getElementsByClassName()</code></p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">id</span>=<span class="string">"b1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">'b1'</span>);</span></span><br><span class="line"><span class="javascript">    box1.style[<span class="string">'color'</span>] = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>通过<code>document.getElementById('b1')</code>找到<code>id</code>是<code>b1</code>的对象，然后把它的颜色设为红色</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6nqugmtouj30hu0920tk.jpg" alt="红色"></p><blockquote><p>如果把javascript写在元素的上面，就会<strong>出错</strong>，因为页面上从上往下加载执行的，javascript去页面上获取元素div1的时候，元素div1还没有加载</p></blockquote><p>解决办法：</p><ul><li>javascript放到页面最下边</li><li>放入window.onload触发的函数里面</li></ul><p>window.onload函数在页面加载完后才执行</p><h3 id="操作标签内容"><a href="#操作标签内容" class="headerlink" title="操作标签内容"></a>操作标签内容</h3><ul><li><p>innerHTML 属性</p><p> 获取元素内容的最简单方法是使用 <strong>innerHTML</strong> 属性。innerHTML 属性对于获取或替换 HTML 元素的内容很有用。</p></li><li><p>读取节点文本</p> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> odv1 = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="keyword">var</span> content1 = odv1.innerHTML;</span><br><span class="line">alert(content1)</span><br></pre></td></tr></tbody></table></figure></li><li><p>写入(修改)节点文本</p> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> odv1 = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">odv1.innerHTML = 哈哈哈;</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="修改标签属性"><a href="#修改标签属性" class="headerlink" title="修改标签属性"></a>修改标签属性</h3><ul><li><p>操作属性的方法</p><ol><li><p><code>.</code> 操作</p></li><li><p><code>[ ]</code>操作</p></li></ol></li><li><h5 id="读取属性"><a href="#读取属性" class="headerlink" title="读取属性"></a>读取属性</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"input_user"</span> name=<span class="string">"user"</span> value=<span class="string">"python"</span>&gt;  </span><br><span class="line"><span class="comment">//   读取属性</span></span><br><span class="line"><span class="keyword">var</span> odv1 = <span class="built_in">document</span>.getElementById(<span class="string">'input_user'</span>);</span><br><span class="line"><span class="keyword">var</span> idValue = odv1.id;</span><br><span class="line"><span class="keyword">var</span> nameValue = odv1[<span class="string">'name'</span>];</span><br><span class="line">alert(idValue);</span><br><span class="line">alert(nameValue);</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">""</span> id=<span class="string">"a1"</span> &gt;「测试游记」&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改属性</span></span><br><span class="line">a1 = <span class="built_in">document</span>.getElementById(<span class="string">'a1'</span>);</span><br><span class="line"><span class="comment">// a1.href = 'http://www.666.com';</span></span><br><span class="line">a1[<span class="string">'href'</span>] = <span class="string">'http://www.666.com'</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><h5 id="注意点：操作class属性的时候，要将属性名字改为className"><a href="#注意点：操作class属性的时候，要将属性名字改为className" class="headerlink" title="注意点：操作class属性的时候，要将属性名字改为className"></a>注意点：操作class属性的时候，要将属性名字改为className</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1.className = <span class="string">'hied'</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><h5 id="修改css样式"><a href="#修改css样式" class="headerlink" title="修改css样式"></a>修改css样式</h5><ol><li><p><code>节点.style.样式名</code></p></li><li><p><code>节点.style['样式名']</code></p></li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dv1"</span> <span class="attr">id</span>=<span class="string">"dv01"</span> &gt;</span>这个是div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//修改css样式</span></span><br><span class="line"><span class="keyword">var</span> odv1 = <span class="built_in">document</span>.getElementById(<span class="string">'dv01'</span>);</span><br><span class="line"></span><br><span class="line">odv1.style.width = <span class="string">'300px'</span>;</span><br><span class="line">odv1.style[<span class="string">'height'</span>] = <span class="string">'200px'</span>;</span><br><span class="line">odv1.style.background = <span class="string">'cyan'</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="oclock-事件"><a href="#oclock-事件" class="headerlink" title="oclock 事件"></a>oclock 事件</h3><ul><li>onclick事件：点击了该 HTML 元素</li><li>事件属性添加 JavaScript 代码：</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给div定义一个onclick事件，触发该事件的时候，调用该事件指定的函数</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dv1"</span> id=<span class="string">"dv01"</span> onclick=<span class="string">"tank()"</span>&gt;这个是div1&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，负责弹框</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tank</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="string">'hello'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h2><blockquote><p>jQuery是目前使用最广泛的javascript函数库。</p></blockquote><blockquote><p>jQuery的版本分为1.x系列和2.x、3.x系列</p><p>1.x系列兼容低版本的浏览器</p><p>2.x、3.x系列放弃支持低版本浏览器</p><p>目前使用最多的是1.x系列的。</p></blockquote><blockquote><p>jquery的口号和愿望 Write Less, Do More（写得少，做得多）</p></blockquote><ul><li><h5 id="官方网站：http-jquery-com"><a href="#官方网站：http-jquery-com" class="headerlink" title="官方网站：http://jquery.com/"></a>官方网站：<a href="http://jquery.com/">http://jquery.com/</a></h5></li><li><h5 id="在线手册：https-www-runoob-com-manual-jquery"><a href="#在线手册：https-www-runoob-com-manual-jquery" class="headerlink" title="在线手册：https://www.runoob.com/manual/jquery/"></a>在线手册：<a href="https://www.runoob.com/manual/jquery/">https://www.runoob.com/manual/jquery/</a></h5></li><li><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4></li></ul><h5 id="版本下载：https-code-jquery-com"><a href="#版本下载：https-code-jquery-com" class="headerlink" title="版本下载：https://code.jquery.com/"></a>版本下载：<a href="https://code.jquery.com/">https://code.jquery.com/</a></h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="jquery基本的选择器"><a href="#jquery基本的选择器" class="headerlink" title="jquery基本的选择器"></a>jquery基本的选择器</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id选择器</span></span><br><span class="line">$(<span class="string">'#btn1'</span>) </span><br><span class="line"><span class="comment">// 类选择器</span></span><br><span class="line">$(<span class="string">'.box1'</span>) </span><br><span class="line"><span class="comment">// 标签选择器</span></span><br><span class="line">$(<span class="string">'li'</span>) </span><br><span class="line"><span class="comment">// 层级选择器</span></span><br><span class="line">$(<span class="string">'#ul li span'</span>) </span><br><span class="line"> <span class="comment">// 属性选择器</span></span><br><span class="line">$(<span class="string">'input[name=user]'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="选择同胞和父辈元素"><a href="#选择同胞和父辈元素" class="headerlink" title="选择同胞和父辈元素"></a>选择同胞和父辈元素</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择div元素前面紧挨的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).prev(); </span><br><span class="line"><span class="comment">//选择div元素之前所有的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).prevAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择div元素后面紧挨的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).next(); </span><br><span class="line"><span class="comment">//选择div元素后面所有的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).nextAll(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//选择div的父元素</span></span><br><span class="line">$(<span class="string">'div'</span>).parent();</span><br><span class="line"><span class="comment">//选择div的所有子元素 </span></span><br><span class="line">$(<span class="string">'div'</span>).children(); </span><br><span class="line"><span class="comment">//选择div的同级元素</span></span><br><span class="line">$(<span class="string">'div'</span>).siblings(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//选择div内的class等于cs的元素</span></span><br><span class="line">$(<span class="string">'div'</span>).find(<span class="string">'#cs li'</span>); </span><br></pre></td></tr></tbody></table></figure><h3 id="选择过滤"><a href="#选择过滤" class="headerlink" title="选择过滤"></a>选择过滤</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择包含p元素的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).has(<span class="string">'p'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//选择class不等于cs的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).not(<span class="string">'.cs'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//选择class等于cs的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).filter(<span class="string">'.cs'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//选择第6个div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).eq(<span class="number">5</span>); </span><br></pre></td></tr></tbody></table></figure><h3 id="获取元素的索引值"><a href="#获取元素的索引值" class="headerlink" title="获取元素的索引值"></a>获取元素的索引值</h3><p>有时候需要获得匹配元素相对于其同胞元素的索引位置，此时可以用index()方法获取</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(<span class="string">'.list li'</span>).eq(<span class="number">1</span>);</span><br><span class="line">alert($li.index()); <span class="comment">// 弹出1</span></span><br><span class="line"></span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">2</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">4</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">5</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">6</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="获取元素样式"><a href="#获取元素样式" class="headerlink" title="获取元素样式"></a>获取元素样式</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取div的样式</span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"width"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"color"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="修改元素样式"><a href="#修改元素样式" class="headerlink" title="修改元素样式"></a>修改元素样式</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置div的样式</span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"width"</span>,<span class="string">"30px"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"height"</span>,<span class="string">"30px"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css({<span class="attr">fontSize</span>:<span class="string">"30px"</span>,<span class="attr">color</span>:<span class="string">"red"</span>});</span><br></pre></td></tr></tbody></table></figure><h3 id="添加或者移除class属性"><a href="#添加或者移除class属性" class="headerlink" title="添加或者移除class属性"></a>添加或者移除class属性</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加class属性</span></span><br><span class="line">$(<span class="string">"#div1"</span>).addClass(<span class="string">"cs2"</span>) </span><br><span class="line"><span class="comment">// 移除class属性</span></span><br><span class="line">$(<span class="string">"#div1"</span>).removeClass(<span class="string">"cs2"</span>)  </span><br><span class="line"><span class="comment">// 重复切换样式</span></span><br><span class="line">$(<span class="string">"#div1"</span>).toggleClass(<span class="string">"cs2"</span>) </span><br></pre></td></tr></tbody></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6ntxisii0j30v60u0qf7.jpg" alt="案例"></p><p>代码：</p><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#009FCC</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font</span>: bold <span class="number">28px</span>/<span class="number">100px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left_menu</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#dddddd</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left_menu</span> <span class="selector-tag">ul</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left_menu</span> <span class="selector-class">.li1</span> {</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">font</span>: normal <span class="number">20px</span>/<span class="number">60px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#009FCC</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hied</span> {</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>{</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">270px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#dddddd</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    $(<span class="string">'.li1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        $(<span class="built_in">this</span>).next().show().siblings(<span class="string">'div'</span>).hide();</span><br><span class="line">    });</span><br><span class="line">    $(<span class="string">'a'</span>).attr(<span class="string">'href'</span>, <span class="string">'https://w.url.cn/s/A1cCbyT'</span>);</span><br><span class="line"></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>「测试游记」- 案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>自动化测试平台<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>用例管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hied"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>查看用例<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>添加用例<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>修改用例<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>套件管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hied"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>查看套件<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>添加套件<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>修改套件<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>环境管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hied"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>查看环境<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>添加环境<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>修改环境<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>项目管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hied"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>查看项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>添加项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>修改项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/qrcode.jpg"</span> <span class="attr">alt</span>=<span class="string">"「测试游记」"</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十三)</title>
      <link href="article/1f8e71fc.html"/>
      <url>article/1f8e71fc.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十三"><a href="#测试开发进阶-十三" class="headerlink" title="测试开发进阶(十三)"></a>测试开发进阶(十三)</h1><p><strong>欢迎关注我公众号：「测试游记」</strong></p><h2 id="浮动和定位"><a href="#浮动和定位" class="headerlink" title="浮动和定位"></a>浮动和定位</h2><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><blockquote><p>CSS 有三种基本的定位机制：普通流、浮动和绝对定位。</p></blockquote><p>通过使用 <a href="http://www.w3school.com.cn/cssref/pr_class_position.asp">position 属性</a>，选择不同类型的定位。</p><ul><li>相对定位:<code>position: relative;</code></li></ul><p>在使用相对定位时，无论是否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。</p><ul><li>绝对定位:<code>position: absolute;</code></li></ul><p>绝对定位使元素的位置与文档流无关，因此不占据空间。这一点与相对定位不同，相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。</p><p>因为绝对定位的框与文档流无关，所以它们可以覆盖页面上的其它元素。可以通过设置 <a href="http://www.w3school.com.cn/cssref/pr_pos_z-index.asp">z-index 属性</a>来控制这些框的堆放次序。</p><ul><li>固定位置:<code>position:fixed;</code></li></ul><p>直接以<strong>浏览器窗口</strong>作为参考进行定位，它是浮动在页面中，元素位置<strong>不会随浏览器窗口的滚动条滚动而变化</strong></p><span id="more"></span><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><blockquote><p>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>{</span><br><span class="line">  <span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><ul><li><p>left -&gt; 元素向左浮动</p></li><li><p>right -&gt;元素向右浮动</p></li><li><p>none -&gt;默认值。元素不浮动，并会显示在其在文本中出现的位置。</p></li><li><p>Inherit -&gt; 规定应该从父元素继承 float 属性的值。</p></li></ul><h2 id="完成一个简单的菜单栏"><a href="#完成一个简单的菜单栏" class="headerlink" title="完成一个简单的菜单栏"></a>完成一个简单的菜单栏</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6mb68s8cgj316g0a8gmt.jpg" alt="菜单栏"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>「测试游记」- 菜单栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        .menu {</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#5c5dff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> {</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font</span>: normal <span class="number">20px</span>/<span class="number">80px</span> <span class="string">'Microsoft Sans Serif'</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>{</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: coral;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: darkblue;</span></span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>HTML 中的脚本必须位于 <script> 与 </script> 标签之间。脚本可被放置在 HTML 页面的  和  部分中。</p><p>1、行间事件（主要用于事件）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('Hello Python')"</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6mc6hpv0aj31ii0boq61.jpg" alt="弹出hello"></p><p>2、页面script标签嵌入</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>        </span><br><span class="line"><span class="javascript">    alert(<span class="string">'ok！'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、外部引入</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ol><li>注释</li></ol><ul><li>单行注释：以 // 开头。</li><li>多行注释：以 /* 开始，以 */ 结尾。</li></ul><ol start="2"><li>变量</li></ol><ul><li>命名</li></ul><blockquote><p>变量可以使用短名称（比如 x 和 y），也可以使用描述性更好的名称（比如 age, sum, totalvolume）。</p><p>变量必须以字母开头</p><p>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</p><p>变量名称对大小写敏感（y 和 Y 是不同的变量）</p><p>驼峰式命名</p></blockquote><ul><li>声明</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先声明后赋值</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在声明的时候赋值</span></span><br><span class="line"><span class="keyword">var</span> y=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时给多个变量赋值</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>,b = <span class="number">200</span>,c = <span class="number">300</span>;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>数据类型</li></ol><ul><li>number  数字类型</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y=<span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>string 字符串类型</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> st=<span class="string">'python'</span></span><br></pre></td></tr></tbody></table></figure><ul><li>boolean 布尔类型</li></ul><p>true和false(小写)</p><ul><li>undefined 类型</li></ul><p>变量声明未初始化，它的值就是undefined</p><ul><li>null类型</li></ul><p>表示空对象，类似于python中的None</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tr = <span class="literal">null</span></span><br></pre></td></tr></tbody></table></figure><ul><li>arry  数组</li></ul><p>方法：</p><p>length属性：获取数组长度</p><p>pop() 方法从数组中删除最后一个元素</p><p>push() 方法（在数组结尾处）向数组添加一个新的元素</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数组</span></span><br><span class="line"><span class="keyword">var</span> skill= <span class="built_in">Array</span>(<span class="string">"html"</span>,<span class="string">"css"</span>,<span class="string">"js"</span>);</span><br><span class="line"></span><br><span class="line">skill[<span class="number">0</span>]</span><br><span class="line">skill.length</span><br><span class="line">skill.pop()</span><br><span class="line">skill.push(<span class="string">'jquery'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6mcm0pijoj30h60c0t9h.jpg" alt="image-20190903151321110"></p><ol start="4"><li>运算符</li></ol><ul><li><p> 算术运算符： <code>+</code>(加)、 <code>-</code>(减)、 <code>*</code>(乘)、<code>/</code>(除)、 <code>%</code>(求余)</p></li><li><p> 赋值运算符：<code>=</code>、 <code>+=</code>、 <code>-=</code>、 <code>*=</code>、 <code>/=</code>、 <code>%=</code> 、<code>++</code></p></li><li><p> 条件运算符：<code>==</code>、<code>===</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>!=</code>、</p></li><li><p>逻辑运算符：<code>&amp;&amp;</code>(而且 )、<code>||</code>(或者 )、<code>!</code>(否 )</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6mctpltlnj305w08udfx.jpg" alt="条件运算"></p><ol start="5"><li>条件语句</li></ol><ul><li>if</li><li>else</li><li>else if</li><li>switch</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">199</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">200</span>){</span><br><span class="line">        alert(<span class="string">'大于200'</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;<span class="number">100</span>){</span><br><span class="line">        alert(<span class="string">'大于100'</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        alert(a);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6mcvin0t1j30ow078aaa.jpg" alt="弹框"></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) {</span><br><span class="line">     <span class="keyword">case</span> n1:</span><br><span class="line">        代码块</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> n1:</span><br><span class="line">        代码块</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">        默认代码块</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ul><li>计算一次 switch 表达式</li><li>把表达式的值与每个 case 的值进行对比</li><li>如果存在匹配，则执行关联代码</li><li>遇到 break 关键词，它会跳出 switch 代码块。</li><li>case 匹配不存在时，运行default 的代码：</li></ul></blockquote><ol start="6"><li>循环</li></ol><ul><li>while循环</li><li>for 循环</li><li>for in 循环</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="keyword">while</span>（条件语句){</span><br><span class="line">    循环体</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// for 循环</span></span><br><span class="line"><span class="keyword">for</span> (语句<span class="number">1</span>,语句<span class="number">2</span>，语句<span class="number">3</span> ){</span><br><span class="line">    循环体代码</span><br><span class="line">}</span><br><span class="line"><span class="comment">// for in 循环</span></span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> arrayr){</span><br><span class="line">    循环体代码</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = <span class="number">101</span>, bb = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span> (aa &gt; bb) {</span><br><span class="line">    <span class="built_in">console</span>.log(aa);</span><br><span class="line">    aa -= <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6md6guzazj30cg086gm1.jpg" alt="while"></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++){</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>![for](../../../Library/Application Support/typora-user-images/image-20190903153318464.png)</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = <span class="built_in">Array</span>(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>);</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> aList){</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="built_in">console</span>.log(aList[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6md894zcgj30i80ho0tm.jpg" alt="for in"></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objC = {<span class="attr">name</span>: <span class="string">'abc'</span>, <span class="attr">age</span>: <span class="number">19</span>};</span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> objC) {</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="built_in">console</span>.log(objC[x]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6md9fnbxpj30gq0c0dgp.jpg" alt="遍历对象"></p><ol start="7"><li>函数</li></ol><ul><li>函数定义：定义函数的关键词 function，函数内的代码块，包裹在花括号中：</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的定义 使用function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>{</span><br><span class="line">alter(<span class="number">999</span>)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line">func()</span><br></pre></td></tr></tbody></table></figure><p>提示：JavaScript 对大小写敏感。关键词 function 必须是小写的</p><ul><li> 函数参数：</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNumber</span>(<span class="params">var1,var2</span>) </span>{</span><br><span class="line">alert(var1 + var2;);    </span><br><span class="line">}</span><br><span class="line">addNumber(<span class="number">11</span>,<span class="number">22</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li>函数返回值：使用 return 来返回值。在使用 return 语句时，函数会停止执行，并返回指定的值。</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNumber</span>(<span class="params">var1, var2</span>) </span>{</span><br><span class="line"><span class="keyword">return</span> var1 + var2;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> res = addNumber(<span class="number">11</span>,<span class="number">222</span>);</span><br><span class="line">alert(res)</span><br></pre></td></tr></tbody></table></figure><ol start="8"><li>对象属性</li></ol><blockquote><p>对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objA={<span class="attr">name</span> : <span class="string">"python"</span>,<span class="attr">age</span>  : <span class="number">18</span>,<span class="attr">id</span> :<span class="number">123</span>};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十二)</title>
      <link href="article/617d51d7.html"/>
      <url>article/617d51d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十二"><a href="#测试开发进阶-十二" class="headerlink" title="测试开发进阶(十二)"></a>测试开发进阶(十二)</h1><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><blockquote><p>负责页面显示的效果</p></blockquote><h2 id="CSS引入的方式"><a href="#CSS引入的方式" class="headerlink" title="CSS引入的方式"></a>CSS引入的方式</h2><ul><li>内联式：直接在标签上定义<code>style</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 100px;background-color: red"</span>&gt;</span>这个是div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6hymq2r3pj30zw0agab2.jpg" alt="style1"></p><!-- more --><ul><li>嵌入式：在<code>head</code>中定义<code>style</code>标签</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        .box1 {</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>这个是div2标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6hynrn3p3j310q0bcdgv.jpg" alt="style2"></p><ul><li>外联式：<code>link</code>一个<code>css</code>文件</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/0830.css"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>css/0830.css</code>文件：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注释*/</span></span><br><span class="line"><span class="selector-class">.box2</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6hysuzoudj30z60b0t9q.jpg" alt="style3"></p><h2 id="CSS的基本语法"><a href="#CSS的基本语法" class="headerlink" title="CSS的基本语法"></a>CSS的基本语法</h2><p>CSS规则：选择器+一条或者多条声明</p><ul><li>选择器通常是需要改变样式的HTML元素</li><li>每条声明由一个属性和一个值组成</li><li>属性：希望设置的样式属性，每个属性有一个值，属性和值被冒号分开</li></ul><p><code>h1</code> <code>{color:red;font-size:14px;}</code></p><p><code>h1</code>:选择器</p><p><code>color:red;</code>：声明</p><p><code>color</code>：属性</p><p><code>red</code>：值</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li>标签选择器</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6hyzgs74lj31fg0qw40g.jpg" alt="标签选择器"></p><ul><li>class选择器:<code>.</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> {</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">195</span>, <span class="number">160</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font</span>: bold <span class="number">22px</span>/<span class="number">30px</span> <span class="string">'Monaco'</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6i06jmzq0j31rq032goi.jpg" alt="类选择器"></p><ul><li>id选择器:<code>#</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#b2</span> {</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font</span>: normal <span class="number">36px</span>/<span class="number">60px</span> <span class="string">'Monaco'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6i07sm7yxj30b6044wf4.jpg" alt="id选择器"></p><ul><li>属性选择器</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[name]</span>{</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6i05yczgqj302q01owea.jpg" alt="属性选择器"></p><ul><li>层级选择器</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box2</span> <span class="selector-tag">div</span> <span class="selector-tag">span</span>{</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6i05h7vp2j3070028746.jpg" alt="层级选择"></p><ul><li>组选择器</li></ul><p>选择多组元素</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box2</span>, <span class="selector-class">.box1</span> {</span><br><span class="line">    <span class="attribute">font</span>: normal <span class="number">36px</span>/<span class="number">60px</span> <span class="string">'Monaco'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>伪选择器</li></ul><blockquote><p>active</p><p>focus</p><p><strong>hover</strong>:重要</p><p>link</p><p>Visited</p></blockquote><p>鼠标放上去生效</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span>{</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6i0mp4vxlj309y044wfb.jpg" alt="鼠标放上去之前"></p><p>![鼠标放上去之后](../../../Library/Application Support/typora-user-images/image-20190830211642177.png)</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>背景色：<code>background-color: blue;</code></p><p>背景图片：<code>background-image: url("image/IMG_3609.JPG");</code></p><p>不平铺：<code>background-repeat: no-repeat;</code></p><h3 id="背景定位"><a href="#背景定位" class="headerlink" title="背景定位"></a>背景定位</h3><p>水平居中：<code>background-position: center;</code></p><p>顶部：<code>background-position: top;</code></p><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><ul><li><p>用单词表示颜色：<code>blue</code></p></li><li><p>使用RGB的方式：<code>rgb(111, 222, 333)</code></p></li><li><p>透明度的RGB方法<code>rgba(111, 222, 333, 50)</code></p></li></ul><p><a href="http://tool.oschina.net/commons?type=3">http://tool.oschina.net/commons?type=3</a></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6hzfnv40wj318w0lq40p.jpg" alt="image-20190830203508938"></p><ul><li>16进制颜色表示法<code>#FF0000</code></li></ul><p>在Pycharm中直接选择</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6hzk7cvmaj30u00ukk3k.jpg" alt="颜色选择器"></p><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><p>设置顺序：是否加粗 字号/行高 字体；</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font: bold 22px/30px 'Monaco';</span><br></pre></td></tr></tbody></table></figure><h3 id="文字锁进"><a href="#文字锁进" class="headerlink" title="文字锁进"></a>文字锁进</h3><p>文字居中：<code>text-align: center;</code></p><h2 id="CSS模型框"><a href="#CSS模型框" class="headerlink" title="CSS模型框"></a>CSS模型框</h2><blockquote><p>规定了元素框处理元素内容，内边框，边框，外边距</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6i0reozarj30bc09qwen.jpg" alt="CSS模型框"></p><p>内边距：<code>padding</code></p><p>外边距：<code>margin</code></p><p>传入顺序：<strong>上右下左</strong>「顺时针」</p><p>边框线：<code>border</code></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> {</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">            <span class="attribute">background</span>: aqua;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">border</span>: solid <span class="number">2px</span> blue;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">80px</span>;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6i0zweo1aj30dq0a2gm1.jpg" alt="盒子"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6i10c7fy9j31400mgjsm.jpg" alt="盒子显示"></p><h2 id="使用以上知识完成登录页面"><a href="#使用以上知识完成登录页面" class="headerlink" title="使用以上知识完成登录页面"></a>使用以上知识完成登录页面</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> {</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#396b94</span> <span class="built_in">url</span>(<span class="string">"image/IMG_3609.JPG"</span>) center no-repeat;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        .login_box {</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">15%</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.25</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        .login_title {</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font</span>: bold <span class="number">22px</span>/<span class="number">40px</span> <span class="string">'Microsoft Sans Serif'</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        .input_text {</span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        .btn {</span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font</span>: bold <span class="number">22px</span>/<span class="number">40px</span> <span class="string">'Microsoft Sans Serif'</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#396b94</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        .input {</span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font</span>: bold <span class="number">18px</span>/<span class="number">40px</span> <span class="string">'Microsoft Sans Serif'</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">0.1px</span> <span class="number">#57dbff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-indent</span>: <span class="number">20px</span>;</span></span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_title"</span>&gt;</span>管理员登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input_text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"input"</span> <span class="attr">placeholder</span>=<span class="string">"请输入账号"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input_text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"input"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input_text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"点击登录"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6i20kj5b9j31d90u0x6p.jpg" alt="登录页面"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十一)</title>
      <link href="article/ce4ccab5.html"/>
      <url>article/ce4ccab5.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十一"><a href="#测试开发进阶-十一" class="headerlink" title="测试开发进阶(十一)"></a>测试开发进阶(十一)</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><blockquote><p>HTML 超文本标记语言，网页制作的编程语言</p></blockquote><span id="more"></span><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="comment">&lt;!-- 头部信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试游记<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">body-测试游记</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>&lt;!DOCTYPE html&gt;</code>： HTML5的声明</p><p><code>&lt;meta&gt;</code>：声明，例如编码</p><p><code>&lt;title&gt;</code>：网页名称</p><p><code>&lt;body&gt;</code>：主体内容</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fo2f1oksj317g07cgmp.jpg" alt="title-body"></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><p>注释：<code>&lt;!-- 我是注释 --&gt;</code></p></li><li><p>段落标签：<code>&lt;p&gt;&lt;/p&gt;</code></p></li><li><p>标题：</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fo50nzukj317a0o20ut.jpg" alt="标题"></p><ul><li><p>换行：<code>&lt;br&gt;</code></p></li><li><p>水平线：<code>&lt;hr&gt;</code></p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fo8sgxmqj30yo0gsgnk.jpg" alt="换行-水平线"></p><ul><li>块标签：<code>&lt;div&gt;&lt;/div&gt;</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6foaew0n1j30jc0wi417.jpg" alt="块"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 200px; background-color: red"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>增加大小，背景颜色</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fodpdvohj30ig0ciwen.jpg" alt="大小，颜色"></p><ul><li>行内元素:<code>&lt;span&gt;&lt;/span&gt;</code> 不会换行</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>66666<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>66666<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>66666<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>66666<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>66666<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fogay6lhj30h2032746.jpg" alt="行内元素"></p><ul><li>字体倾斜<code>&lt;i&gt;&lt;/i&gt;</code></li><li>比较重要的字体倾斜<code>&lt;em&gt;&lt;/em&gt;</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6foidgx3dj30cu02wweh.jpg" alt="字体倾斜"></p><ul><li>字体加粗<code>&lt;b&gt;&lt;/b&gt;</code></li><li>比较重要的字体加粗<code>&lt;strong&gt;&lt;/strong&gt;</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>「测试游记」<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6foj8t7g0j30cy04edfu.jpg" alt="image-20190828204655083"></p><ul><li>图片：<code>&lt;img src="" alt=""&gt;</code></li></ul><p>图片无法加载：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"pic.JPG1"</span> <span class="attr">alt</span>=<span class="string">"背景图片"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fon5c0k9j30nc07kq3l.jpg" alt="图片无法加载"></p><p>正常加载</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"pic.JPG"</span> <span class="attr">alt</span>=<span class="string">"背景图片"</span> <span class="attr">height</span>=<span class="string">"600px"</span> <span class="attr">width</span>=<span class="string">"300px"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fooc6o7oj30mc140x6p.jpg" alt="正常加载"></p><ul><li>超链接：<code>&lt;a href=""&gt;&lt;/a&gt;</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://map.baidu.com"</span>&gt;</span>百度地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6foq1enjfj30k207q74w.jpg" alt="超链接"></p><ul><li>链接到外部样式：<code>&lt;link rel="stylesheet" href=""&gt;</code></li><li>无序列表</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>快速语法：<code>ul&gt;li*5</code>创建5条内容的列表</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>d<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>e<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fotpb2b2j305007cwed.jpg" alt="列表"></p><ul><li>有序列表</li></ul><p>快速语法：<code>ol&gt;li*5</code>创建5条内容的列表</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>d<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>e<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fovrbwlnj303u06y0sn.jpg" alt="image-20190828205856959"></p><ul><li>表格<code>&lt;table&gt;&lt;/table&gt;</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>列1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>列2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>列3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>列4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>31<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fp15qzq4j30ng07g0t6.jpg" alt="表格"></p><h2 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h2><p>简单的编写一个flask测试页面</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><p>编写一个表单</p><ul><li><code>action</code>：地址</li><li><code>method</code>：方式</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:5000/"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>提交：<code>http://127.0.0.1:5000/?user=zx&amp;pwd=123456</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fphanmrgj30rw07q754.jpg" alt="表单"></p><p>点击提交</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fphnxh2oj30mu08qmxk.jpg" alt="image-20190828211958938"></p><ul><li><p>文本输入框：<code>&lt;input type="text" name="user"&gt;</code></p></li><li><p>密码输入框：<code>&lt;input type="password" name="pwd"&gt;</code></p></li><li><p>提交按钮：<code>&lt;input type="submit"&gt;</code></p></li><li><p>单选框：</p></li></ul><p>提交：<code>http://127.0.0.1:5000/?user=&amp;pwd=&amp;like=python</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编程语言：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"python"</span>&gt;</span> Python</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"java"</span>&gt;</span> Java</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fpp47pqoj30mm0aaab0.jpg" alt="单选框"></p><ul><li>多选框：</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"skill"</span> <span class="attr">value</span>=<span class="string">"Django"</span>&gt;</span> Django</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"skill"</span> <span class="attr">value</span>=<span class="string">"Flask"</span>&gt;</span> Flask</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"skill"</span> <span class="attr">value</span>=<span class="string">"scrapy"</span>&gt;</span> scrapy</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"skill"</span> <span class="attr">value</span>=<span class="string">"pytest"</span>&gt;</span> pytest</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fptbj3roj30j008aaaj.jpg" alt="多选框"></p><p>提交：<code>http://127.0.0.1:5000/?user=&amp;pwd=&amp;skill=Django&amp;skill=Flask&amp;skill=scrapy&amp;skill=pytest</code></p><ul><li>文件上传</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件上传<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"hello"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fpxarb9rj30is080js3.jpg" alt="选择文件前"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fpx060d1j30ig09oaat.jpg" alt="选择文件后"></p><ul><li>普通按钮</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fpy4kcg6j30hk0aemxz.jpg" alt="image-20190828213549841"></p><ul><li>重置按钮</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">name</span>=<span class="string">"resetbtn"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fpzosf9ej30ge09waaw.jpg" alt="重置按钮"></p><p>输入内容后，点击重置会把填入的内容清空</p><ul><li>图片按钮</li></ul><p>点击图片后会提交</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"pic.JPG"</span>  <span class="attr">height</span>=<span class="string">"300px"</span> <span class="attr">width</span>=<span class="string">"150px"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fq2i66y8j30xf0u0k85.jpg" alt="image-20190828214000856"></p><ul><li>隐藏表单域：</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">'csrf'</span> <span class="attr">value</span>=<span class="string">"隐藏表单域"</span> &gt;</span></span><br></pre></td></tr></tbody></table></figure><p>提交的内容：<code>http://127.0.0.1:5000/?user=&amp;pwd=&amp;hello=&amp;csrf=隐藏表单域</code></p><ul><li>label标签</li></ul><p>for属性关联input的id</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"user"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>点击<code>用户名</code>之后激活输入框</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fq86tjcwj30ea03cweg.jpg" alt="单击用户名"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fq7yn6hdj30e0030a9z.jpg" alt="单击密码"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"python"</span> <span class="attr">id</span>=<span class="string">"python"</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"python"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>点击python文字会自动选中python单选框，点击Java不会选中</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fqa0znnwj30gq01qt8q.jpg" alt="点击python文字"></p><ul><li>大文本输入框</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user_info"</span>&gt;</span>个人介绍<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"user_info"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fqbg4sntj30h60b074b.jpg" alt="image-20190828214837431"></p><ul><li>下拉选择框</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"city"</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>浙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fqi3pax4j307q03qdgq.jpg" alt="下拉框"></p><p>选中「浙江」后提交:<code>http://127.0.0.1:5000/?user=&amp;pwd=&amp;hello=&amp;csrf=隐藏表单域&amp;city=0</code></p><p><code>city=0</code></p><h2 id="iframe-内联框架"><a href="#iframe-内联框架" class="headerlink" title="iframe 内联框架"></a>iframe 内联框架</h2><p>iframe元素会创建包含另外一个文档的内联框架(行内框架)</p><p>例子：将其他页面的内容链接到当前页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"500px"</span> <span class="attr">width</span>=<span class="string">"600px"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://www.sina.com/"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"500px"</span> <span class="attr">width</span>=<span class="string">"600px"</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6fqo362i5j31qp0u0hby.jpg" alt="iframe"></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(十)</title>
      <link href="article/a5499375.html"/>
      <url>article/a5499375.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-十"><a href="#测试开发进阶-十" class="headerlink" title="测试开发进阶(十)"></a>测试开发进阶(十)</h1><h2 id="进程之间通信"><a href="#进程之间通信" class="headerlink" title="进程之间通信"></a>进程之间通信</h2><p>进程之间通信：<code>使用队列</code></p><p>queue模块中的队列，只能用于一个进程中，各个线程之间进行通信</p><p>进程模块中的Queue:可以用于多个进程之间进行通信</p><p>⚠️注意点：使用的时候要使用参数传递到各个进程任务中</p><span id="more"></span><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line">q = Queue()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    q.put(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        print(<span class="string">f'work1获取数据<span class="subst">{q.get()}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        print(<span class="string">f'work2获取数据<span class="subst">{q.get()}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Process(target=work1, args=(q,))</span><br><span class="line">    p2 = Process(target=work2, args=(q,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br></pre></td></tr></tbody></table></figure><blockquote><p>work1获取数据0<br>work1获取数据1<br>work1获取数据2<br>work1获取数据3<br>work1获取数据4</p></blockquote><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><ul><li>协程，又称微线程</li><li>协程是python中另外一种实现多任务的方式，只不过比线程更小，占用更小执行单元（理解为需要的资源）</li><li>它自带CPU上下文，这样只要在合适的时间，我们就可以把一个协程切换到另一个协程，只要这个过程保存或恢复CPU上下文那么程序还是可以运行的</li></ul><p><code>通俗的理解</code></p><blockquote><p>在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己决定</p></blockquote><p><code>协程和线程差异</code></p><blockquote><p>在实现多任务时，线程切换从系统层面远不止保存和恢复CPU上下文这么简单，操作系统为了程序的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。所以线程的切换比较耗性能。但是协程的切换之间单纯的操作CPU的上下文，所以一秒钟切换个上百万次性能都扛得住。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">g1 = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g2 = gen()</span><br><span class="line">print(g1)</span><br><span class="line">print(g2)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>&lt;generator object <genexpr> at 0x114203138&gt;<br>&lt;generator object gen at 0x1142031b0&gt;</genexpr></p></blockquote><h3 id="协程的实现"><a href="#协程的实现" class="headerlink" title="协程的实现"></a>协程的实现</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        print(<span class="string">f'work1:<span class="subst">{i}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        print(<span class="string">f'work2:<span class="subst">{i}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work3</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        print(<span class="string">f'work3:<span class="subst">{i}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = work1()</span><br><span class="line">g2 = work2()</span><br><span class="line">g3 = work3()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">next</span>(g1)</span><br><span class="line">        <span class="built_in">next</span>(g2)</span><br><span class="line">        <span class="built_in">next</span>(g3)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>work1:0<br>work2:0<br>work3:0<br>work1:1<br>work2:1<br>work3:1<br>work1:2<br>work2:2<br>work3:2<br>work1:3<br>work2:3<br>work3:3<br>work1:4</p></blockquote><h3 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install greenlet</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        g2.switch()</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        g1.switch()</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = greenlet(test1)</span><br><span class="line">g2 = greenlet(test2)</span><br><span class="line">g1.switch()</span><br></pre></td></tr></tbody></table></figure><blockquote><p>0<br>0<br>1<br>1<br>2<br>2<br>3<br>3<br>4<br>4</p></blockquote><h3 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h3><blockquote><p>gevent其原理就是当一个greenlet遇到IO（input output输入输出，比如网络，文件操作等）操作时，比如访问网络，就自动切换到其他greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent自动切换协程，保证总有greenlet在运行，而不是等待IO</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install gevent</span></span><br></pre></td></tr></tbody></table></figure><p>等待需要使用<code>gevent.sleep(0.1)</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">f'work1:<span class="subst">{i}</span>'</span>)</span><br><span class="line">        gevent.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">f'work2:<span class="subst">{i}</span>'</span>)</span><br><span class="line">        gevent.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(work1)</span><br><span class="line">g2 = gevent.spawn(work2)</span><br><span class="line"></span><br><span class="line">g1.join()  <span class="comment"># 设置主线程等待子协程执行完之后 往下执行</span></span><br><span class="line">g2.join()</span><br></pre></td></tr></tbody></table></figure><blockquote><p>work1:0<br>work2:0<br>work1:1<br>work2:1<br>work1:2<br>work2:2<br>work1:3<br>work2:3<br>work1:4<br>work2:4</p></blockquote><p><code>修改work2的等待时间为0.4秒</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">f'work1:<span class="subst">{i}</span>'</span>)</span><br><span class="line">        gevent.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">f'work2:<span class="subst">{i}</span>'</span>)</span><br><span class="line">        gevent.sleep(<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(work1)</span><br><span class="line">g2 = gevent.spawn(work2)</span><br><span class="line"></span><br><span class="line">g1.join()  <span class="comment"># 设置主线程等待子协程执行完之后 往下执行</span></span><br><span class="line">g2.join()</span><br></pre></td></tr></tbody></table></figure><blockquote><p>work1:0<br>work2:0<br>work1:1<br>work1:2<br>work1:3<br>work2:1<br>work1:4<br>work2:2<br>work2:3<br>work2:4</p></blockquote><p>如果需要使用<code>time.sleep</code>但是要完成切换需要使用猴子补丁</p><p>注意：猴子补丁在多线程任务时会出现异常！！！！！</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">f'work1:<span class="subst">{i}</span>'</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">f'work2:<span class="subst">{i}</span>'</span>)</span><br><span class="line">        time.sleep(<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(work1)</span><br><span class="line">g2 = gevent.spawn(work2)</span><br><span class="line"></span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br></pre></td></tr></tbody></table></figure><h3 id="发送IO"><a href="#发送IO" class="headerlink" title="发送IO"></a>发送IO</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usetime</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">f'耗时<span class="subst">{end_time - start_time}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        requests.get(url)</span><br><span class="line">        gevent.sleep(<span class="number">0.01</span>)</span><br><span class="line">        print(<span class="string">f'work1发送第<span class="subst">{i}</span>次请求'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        requests.get(url)</span><br><span class="line">        gevent.sleep(<span class="number">0.01</span>)</span><br><span class="line">        print(<span class="string">f'work2发送第<span class="subst">{i}</span>次请求'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@usetime</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># def spawn(cls, *args, **kwargs):</span></span><br><span class="line">    g1 = gevent.spawn(work1, url=<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">    g2 = gevent.spawn(work2, <span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">    g1.join()</span><br><span class="line">    g2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()  <span class="comment"># 耗时32.37710213661194</span></span><br></pre></td></tr></tbody></table></figure><h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><ul><li><code>close</code>：关闭进程池，该进程池不再接收新的任务</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">f'进程ID:<span class="subst">{os.getpid()}</span>,work1:<span class="subst">{i}</span>'</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建一个进程池，进程池中有五个进程</span></span><br><span class="line">    po = Pool(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        po.apply_async(work1)</span><br><span class="line">    po.close()  <span class="comment"># 进程池不再接收任务</span></span><br><span class="line">    po.join()</span><br></pre></td></tr></tbody></table></figure><blockquote><p>进程ID:64232,work1:0<br>进程ID:64233,work1:0<br>进程ID:64234,work1:0<br>进程ID:64232,work1:1<br>进程ID:64233,work1:1<br>进程ID:64234,work1:1<br>进程ID:64232,work1:2<br>进程ID:64234,work1:2进程ID:64233,work1:2</p><p>进程ID:64232,work1:3<br>进程ID:64234,work1:3<br>进程ID:64233,work1:3<br>进程ID:64232,work1:4<br>进程ID:64234,work1:4进程ID:64233,work1:4</p></blockquote><h4 id="进程池之间的队列："><a href="#进程池之间的队列：" class="headerlink" title="进程池之间的队列："></a>进程池之间的队列：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line">q1 = Manager().Queue()</span><br></pre></td></tr></tbody></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><ul><li>内置模块</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br></pre></td></tr></tbody></table></figure><ul><li>第三方模块</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threadpool</span><br></pre></td></tr></tbody></table></figure><h3 id="进程线程协程比较"><a href="#进程线程协程比较" class="headerlink" title="进程线程协程比较"></a>进程线程协程比较</h3><ul><li>进程是资源分配的单位</li><li>线程是操作系统调度的单位</li><li>进程切换需要的资源最大，效率很低</li><li>线程切换需要的资源一般，效率一般（在不考虑GIL的情况下）</li><li>协程切换任务资源很小，效率高</li><li>多进程，多线程根据cpu核数不同可能是并行的，但是协程是在一个线程中的，所以是并发</li><li>python中的线程由于GIL锁的存在，不能实现并行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(九)</title>
      <link href="article/d8e0e401.html"/>
      <url>article/d8e0e401.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-九"><a href="#测试开发进阶-九" class="headerlink" title="测试开发进阶(九)"></a>测试开发进阶(九)</h1><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>Queue模块中提供了同步的，线程安全的队列类，包括：</p><ul><li>FIFO Queue 先入先出</li><li>LIFO Queue 后入先出</li><li>Priority Queue：优先级队列</li></ul><p>这些都实现了 锁原语，能够在多线程中直接使用</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue, LifoQueue, PriorityQueue</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><ul><li>Queue:先入先出</li><li>LifoQueue:后入先出</li><li>PriorityQueue:优先级队列</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q1 = Queue(maxsize=<span class="number">5</span>)  <span class="comment"># If maxsize is &lt;= 0, the queue size is infinite.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 往队列中添加元素</span></span><br><span class="line">q1.put(<span class="number">1</span>)</span><br><span class="line">q1.put(<span class="number">2</span>)</span><br><span class="line">q1.put(<span class="number">3</span>)</span><br><span class="line">q1.put(<span class="number">4</span>)</span><br><span class="line">q1.put(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">'-----5-----'</span>)</span><br><span class="line"><span class="comment"># 数据填满后会等待，可以指定timeout参数</span></span><br><span class="line"><span class="comment"># def put(self, item, block=True, timeout=None)</span></span><br><span class="line">q1.put(<span class="number">6</span>, timeout=<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/09/0823.py", line 21, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    q1.put(6, timeout=3)</span></span><br><span class="line"><span class="string">  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/queue.py", line 147, in put</span></span><br><span class="line"><span class="string">    raise Full</span></span><br><span class="line"><span class="string">queue.Full</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p>查看put_nowait代码，其实就是put方法的block设置为False</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">q1.put(<span class="number">22</span>, block=<span class="literal">False</span>)  <span class="comment"># block设为False，就和put_nowait效果一致</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_nowait</span>(<span class="params">self, item</span>):</span></span><br><span class="line">    <span class="string">'''Put an item into the queue without blocking.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Only enqueue the item if a free slot is immediately available.</span></span><br><span class="line"><span class="string">    Otherwise raise the Full exception.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> self.put(item, block=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q1 = Queue(maxsize=<span class="number">5</span>)  <span class="comment"># If maxsize is &lt;= 0, the queue size is infinite.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 往队列中添加元素</span></span><br><span class="line">q1.put(<span class="number">1</span>)</span><br><span class="line">q1.put(<span class="number">2</span>)</span><br><span class="line">q1.put(<span class="number">3</span>)</span><br><span class="line">q1.put(<span class="number">4</span>)</span><br><span class="line">q1.put(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">'-----5-----'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从队列中获取元素</span></span><br><span class="line">print(q1.get())</span><br><span class="line">print(q1.get())</span><br><span class="line">print(q1.get())</span><br><span class="line">print(q1.get())</span><br><span class="line">print(q1.get())</span><br><span class="line">print(<span class="string">'-----5-----'</span>)</span><br><span class="line">print(q1.get(block=<span class="literal">False</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/09/0823_1.py", line 26, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(q1.get(block=False))</span></span><br><span class="line"><span class="string">  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/queue.py", line 167, in get</span></span><br><span class="line"><span class="string">    raise Empty</span></span><br><span class="line"><span class="string">_queue.Empty</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">q = Queue(<span class="number">2</span>)</span><br><span class="line">q.put(num)  <span class="comment"># 把数据存储在队列中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        num = q.get()</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        q.put(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        num = q.get()</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        q.put(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t1 = Thread(target=work1)</span><br><span class="line">    t2 = Thread(target=work2)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(q.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h3 id="几种get和put"><a href="#几种get和put" class="headerlink" title="几种get和put"></a>几种get和put</h3><ul><li>Queue</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Put a new item in the queue</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_put</span>(<span class="params">self, item</span>):</span></span><br><span class="line">    self.queue.append(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get an item from the queue</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.queue.popleft()</span><br></pre></td></tr></tbody></table></figure><ul><li>PriorityQueue</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_put</span>(<span class="params">self, item</span>):</span></span><br><span class="line">    heappush(self.queue, item)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> heappop(self.queue)</span><br></pre></td></tr></tbody></table></figure><ul><li>LifoQueue</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_put</span>(<span class="params">self, item</span>):</span></span><br><span class="line">    self.queue.append(item)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.queue.pop()</span><br></pre></td></tr></tbody></table></figure><h3 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue  <span class="comment"># 优先级队列</span></span><br><span class="line"></span><br><span class="line">pq = PriorityQueue()</span><br><span class="line">pq.put((<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">pq.put((<span class="number">2</span>, <span class="number">22</span>))</span><br><span class="line">pq.put((<span class="number">0</span>, <span class="number">33</span>))</span><br><span class="line">pq.put((<span class="number">99</span>, <span class="number">333</span>))</span><br><span class="line"><span class="comment"># 前面的值越小 越先出来</span></span><br><span class="line">print(pq.get())  <span class="comment"># (0, 33)</span></span><br><span class="line">print(pq.get())  <span class="comment"># (1, 11)</span></span><br><span class="line">print(pq.get())  <span class="comment"># (2, 22)</span></span><br><span class="line">print(pq.get())  <span class="comment"># (99, 333)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote><p> 进程：操作系统分配资源的基本单元</p></blockquote><p>进程的状态：</p><ul><li>就绪：准备完全，等待cpu</li><li>阻塞：等待某些条件满足，例如一个程序sleep了，此时就处于等待状态</li><li>运行：cpu正在执行其功能</li></ul><h3 id="进程，线程对比"><a href="#进程，线程对比" class="headerlink" title="进程，线程对比"></a>进程，线程对比</h3><p>功能</p><ul><li>进程，能够完成多任务，比如 在一台电脑上能同时运行多个软件</li><li>线程，能够完成多任务，比如一个QQ中的多个聊天窗口</li></ul><p>定义</p><ul><li>进程是系统进行资源分配和调度的一个独立单位</li><li>线程是进程的一个实体，是CPU调度和分配的基本单位，它是比进程更小的能独立的基本单位，线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他线程共享所拥有的全部资源</li></ul><p>区别</p><ul><li>一个程序至少有一个进程，一个进程至少有一个线程</li><li>线程的划分尺度小于进程（资源比进程少），使得多线程程序并发性高</li><li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率</li><li>线程不能够独立执行，必须依存在进程中</li><li>可以将进程理解为工厂中的一条流水线，而线程就是流水线上的工人</li></ul><p>优缺点</p><ul><li>线程执行开销小，但不利于资源的管理和保护；进程正相反</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'执行浇花任务中...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 使用多进程来执行多任务</span></span><br><span class="line">    p1 = Process(target=work1)</span><br><span class="line">    p1.start()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.msg = msg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'text.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                f.write(<span class="string">f'<span class="subst">{self.msg}</span>\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        MyProcess(<span class="string">'python'</span>).start()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(八)</title>
      <link href="article/c4310ee5.html"/>
      <url>article/c4310ee5.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-八"><a href="#测试开发进阶-八" class="headerlink" title="测试开发进阶(八)"></a>测试开发进阶(八)</h1><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><blockquote><p>多任务：操作系统可以同时运行多个任务。</p></blockquote><ul><li><p>并发：任务数&gt;cpu核数，每个cpu快速切换任务</p></li><li><p>并行：任务数&lt;cpu核数，每个cpu执行一个任务</p></li></ul><p>多线程模块：<code>threading</code></p><span id="more"></span><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading </span><br></pre></td></tr></tbody></table></figure><p>异步处理：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        begin = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">f'耗时：<span class="subst">{end - begin}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'执行浇花任务中...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'执行打墙任务中...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@use_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    work1()</span><br><span class="line">    work2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@use_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main1</span>():</span></span><br><span class="line">    t1 = Thread(target=work2)</span><br><span class="line">    t1.start()</span><br><span class="line">    print(<span class="string">'打墙的任务交给线程异步去处理'</span>)</span><br><span class="line">    work1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()  <span class="comment"># 耗时：11.038895845413208</span></span><br><span class="line">    main1()  <span class="comment"># 耗时：6.021285057067871</span></span><br></pre></td></tr></tbody></table></figure><h2 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h2><p>Thread类：</p><ul><li>run()：用以表示线程活动的方法</li><li>start()：启动线程活动</li><li>join([time])：设置主线程会等待time秒后再往下执行，time默认为子线程结束，多个子线程之间设置的值会增加</li><li>isAlive()：返回线程是否活动的</li><li>getName()：返回线程名</li><li>setName()：设置线程名</li></ul><h2 id="定义自己的Thread类"><a href="#定义自己的Thread类" class="headerlink" title="定义自己的Thread类"></a>定义自己的Thread类</h2><p>重写run方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">"""Method representing the thread's activity.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You may override this method in a subclass. The standard run() method</span></span><br><span class="line"><span class="string">    invokes the callable object passed to the object's constructor as the</span></span><br><span class="line"><span class="string">    target argument, if any, with sequential and keyword arguments taken</span></span><br><span class="line"><span class="string">    from the args and kwargs arguments, respectively.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> self._target:</span><br><span class="line">            self._target(*self._args, **self._kwargs)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># Avoid a refcycle if the thread is running a function with</span></span><br><span class="line">        <span class="comment"># an argument that has a member that points to the thread.</span></span><br><span class="line">        <span class="keyword">del</span> self._target, self._args, self._kwargs</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Describe: 0821_2</span></span><br><span class="line"><span class="string">@Author: zhongxin</span></span><br><span class="line"><span class="string">@Time: 2019-08-21 20:40</span></span><br><span class="line"><span class="string">@Email: 490336534@qq.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        begin = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">f'耗时：<span class="subst">{end - begin}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        headers = {</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36"</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            requests.get(url=<span class="string">'https://www.baidu.com'</span>, headers=headers)</span><br><span class="line">            print(<span class="string">f'第<span class="subst">{i + <span class="number">1</span>}</span>次发送请求'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@use_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main0</span>():</span></span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@use_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = MyThread()  <span class="comment"># 创建线程对象</span></span><br><span class="line">        t.start()  <span class="comment"># 开启该线程</span></span><br><span class="line">        t_list.append(t)</span><br><span class="line">    <span class="comment"># 遍历所有线程对象,设置主线程等待子线程执行完</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> t_list:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main0()  <span class="comment"># 耗时：1.2900490760803223</span></span><br><span class="line">    main()  <span class="comment"># 耗时：2.2023119926452637</span></span><br></pre></td></tr></tbody></table></figure><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>在run方法中：</p><p><code>self._target(*self._args, **self._kwargs)</code></p><p>从Thread的init方法中可以看到</p><p><code>self._args = args</code><br><code>self._kwargs = kwargs</code></p><p>所以传递方式为修改args和kwargs的内容</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, group=<span class="literal">None</span>, target=<span class="literal">None</span>, name=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             args=(<span class="params"></span>), kwargs=<span class="literal">None</span>, *, daemon=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">"""This constructor should always be called with keyword arguments. Arguments are:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    *group* should be None; reserved for future extension when a ThreadGroup</span></span><br><span class="line"><span class="string">    class is implemented.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    *target* is the callable object to be invoked by the run()</span></span><br><span class="line"><span class="string">    method. Defaults to None, meaning nothing is called.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    *name* is the thread name. By default, a unique name is constructed of</span></span><br><span class="line"><span class="string">    the form "Thread-N" where N is a small decimal number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    *args* is the argument tuple for the target invocation. Defaults to ().</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    *kwargs* is a dictionary of keyword arguments for the target</span></span><br><span class="line"><span class="string">    invocation. Defaults to {}.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If a subclass overrides the constructor, it must make sure to invoke</span></span><br><span class="line"><span class="string">    the base class constructor (Thread.__init__()) before doing anything</span></span><br><span class="line"><span class="string">    else to the thread.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> group <span class="keyword">is</span> <span class="literal">None</span>, <span class="string">"group argument must be None for now"</span></span><br><span class="line">    <span class="keyword">if</span> kwargs <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        kwargs = {}</span><br><span class="line">    self._target = target</span><br><span class="line">    self._name = <span class="built_in">str</span>(name <span class="keyword">or</span> _newname())</span><br><span class="line">    self._args = args</span><br><span class="line">    self._kwargs = kwargs</span><br><span class="line">    <span class="keyword">if</span> daemon <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self._daemonic = daemon</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self._daemonic = current_thread().daemon</span><br><span class="line">    self._ident = <span class="literal">None</span></span><br><span class="line">    self._tstate_lock = <span class="literal">None</span></span><br><span class="line">    self._started = Event()</span><br><span class="line">    self._is_stopped = <span class="literal">False</span></span><br><span class="line">    self._initialized = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># sys.stderr is not stored in the class like</span></span><br><span class="line">    <span class="comment"># sys.exc_info since it can be changed between instances</span></span><br><span class="line">    self._stderr = _sys.stderr</span><br><span class="line">    <span class="comment"># For debugging and _after_fork()</span></span><br><span class="line">    _dangling.add(self)</span><br></pre></td></tr></tbody></table></figure><p>普通方式传参</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">f'<span class="subst">{name}</span>执行浇花任务中...'</span>)</span><br><span class="line">         </span><br><span class="line"><span class="meta">@use_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t1 = Thread(target=work1, args=(<span class="string">'zx'</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t1.join()</span><br></pre></td></tr></tbody></table></figure><p>自定义类方式传参</p><p>重写init方法：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url</span>):</span></span><br><span class="line">    <span class="built_in">super</span>().__init__()</span><br><span class="line">    self.url = url</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.url = url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        headers = {</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36"</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            requests.get(url=self.url, headers=headers)</span><br><span class="line">            print(<span class="string">f'第<span class="subst">{i + <span class="number">1</span>}</span>次发送请求'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@use_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = MyThread(url=<span class="string">'https://www.baidu.com'</span>)  <span class="comment"># 创建线程对象</span></span><br><span class="line">        t.start()  <span class="comment"># 开启该线程</span></span><br><span class="line">        t_list.append(t)</span><br><span class="line">    <span class="comment"># 遍历所有线程对象,设置主线程等待子线程执行完</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> t_list:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()  <span class="comment"># 耗时：2.2023119926452637</span></span><br></pre></td></tr></tbody></table></figure><h2 id="全局变量修改"><a href="#全局变量修改" class="headerlink" title="全局变量修改"></a>全局变量修改</h2><p>多线程可以共用全局变量：使用的是同一块内存</p><p>会出现<code>资源竞争</code></p><p>python中的线程是没办法进行并行执行，只能并发</p><p>线程之间什么时候会进行切换</p><ul><li>IO耗时操作：网络，文件，输入等耗时的IO操作，会自动切换</li><li>线程的执行时间到达一定的阈值，会自动切换</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Describe: 0821_3</span></span><br><span class="line"><span class="string">@Author: zhongxin</span></span><br><span class="line"><span class="string">@Time: 2019-08-21 21:20</span></span><br><span class="line"><span class="string">@Email: 490336534@qq.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t1 = Thread(target=work1)</span><br><span class="line">    t2 = Thread(target=work2)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main() <span class="comment"># 1380941</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>解决方案：</p></blockquote><ul><li>通过加锁来处理</li><li>通过队列来处理</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一把锁</span></span><br><span class="line">meta = Lock()</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        meta.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        meta.release()  <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        meta.acquire()</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        meta.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t1 = Thread(target=work1)</span><br><span class="line">    t2 = Thread(target=work2)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><ol><li>python语言和GIL没有关系，仅仅由于历史原因在于Cpython虚拟机（解释器），难以移出GIL</li><li>GIL：全局解释器锁，每个线程在执行的过程中都需要获取GIL，保证同一时刻只有一个线程可以执行代码</li><li>线程释放GIL的情况，在IO操作等会引起阻塞的system call之前，可以暂时释放GIL，但在执行完毕后，必须重新获取GIL，python3+使用计时器（执行时间达到阈值后，当前线程释放GIL），python2+，tickets计数达到100</li><li>python使用多进程可以利用多核CPU资源</li></ol><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"></span><br><span class="line">metaA = Lock()</span><br><span class="line">metaB = Lock()</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        metaA.acquire()  </span><br><span class="line">        metaB.acquire()</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        metaB.release()</span><br><span class="line">        metaA.release()  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        metaB.acquire()</span><br><span class="line">        metaA.acquire()</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        metaA.release()</span><br><span class="line">        metaB.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t1 = Thread(target=work1)</span><br><span class="line">    t2 = Thread(target=work2)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(七)</title>
      <link href="article/d63b1e9.html"/>
      <url>article/d63b1e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-七"><a href="#测试开发进阶-七" class="headerlink" title="测试开发进阶(七)"></a>测试开发进阶(七)</h1><h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><h3 id="新式类-旧式类"><a href="#新式类-旧式类" class="headerlink" title="新式类 旧式类"></a>新式类 旧式类</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在python3中两个类定义没有任何区别，都是继承于object</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在python2 中Myclass称为旧式类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span>:</span></span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在python2 中Myclass1称为新式类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass1</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">   <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在python2中</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = Myclass()</span><br><span class="line">c1 = Myclass1()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(c)  <span class="comment"># &lt;type 'instance'&gt;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(c1)  <span class="comment"># &lt;class '__main__.Myclass1'&gt;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(Myclass)  <span class="comment"># &lt;type 'classobj'&gt;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(Myclass1)  <span class="comment"># &lt;class 'type'&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在python3中</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = Myclass()</span><br><span class="line">c1 = Myclass1()</span><br><span class="line">print(<span class="built_in">type</span>(c))  <span class="comment"># &lt;class '__main__.Myclass'&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(c1))  <span class="comment"># &lt;class '__main__.Myclass1'&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(Myclass))  <span class="comment"># &lt;class 'type'&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(Myclass1))  <span class="comment"># &lt;class 'type'&gt;</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="使用type动态创建类"><a href="#使用type动态创建类" class="headerlink" title="使用type动态创建类"></a>使用type动态创建类</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(object_or_name, bases, <span class="built_in">dict</span>)</span><br><span class="line">type(object) -&gt; the object's type</span><br><span class="line">type(name, bases, dict) -&gt; a new type</span><br></pre></td></tr></tbody></table></figure><p><code>type(name, bases, dict) </code></p><ul><li>name:类名</li><li>base:所继承的父类元祖</li><li>dict:字典(包含了属性和方法)</li></ul><p>查看type的init方法</p><p>what也就是类名，必须要传入</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">cls, what, bases=<span class="literal">None</span>, <span class="built_in">dict</span>=<span class="literal">None</span></span>):</span> <span class="comment"># known special case of type.__init__</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    type(object_or_name, bases, dict)</span></span><br><span class="line"><span class="string">    type(object) -&gt; the object's type</span></span><br><span class="line"><span class="string">    type(name, bases, dict) -&gt; a new type</span></span><br><span class="line"><span class="string">    # (copied from class doc)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>不传入bases和dict创建一个类</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Myclass = <span class="built_in">type</span>(<span class="string">'Myclass'</span>)</span><br><span class="line">print(Myclass)  <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">str1 = Myclass(<span class="string">'124'</span>)</span><br><span class="line">print(str1)  <span class="comment"># 124</span></span><br><span class="line">print(<span class="built_in">type</span>(str1))  <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(Myclass))  <span class="comment"># &lt;class 'type'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>传入bases和dict创建一个类</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">    print(<span class="string">f'name:<span class="subst">{self.name}</span>,age:<span class="subst">{self.age}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dict1 = {<span class="string">'name'</span>: <span class="string">'zx'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'func'</span>: func}</span><br><span class="line">Myclass1 = <span class="built_in">type</span>(<span class="string">'Myclass1'</span>, (<span class="built_in">object</span>,), dict1)</span><br><span class="line">print(Myclass1)  <span class="comment"># &lt;class '__main__.Myclass1'&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(Myclass1))  <span class="comment"># &lt;class 'type'&gt;</span></span><br><span class="line">m1 = Myclass1()</span><br><span class="line">print(m1.name)  <span class="comment"># zx</span></span><br><span class="line">print(m1.age)  <span class="comment"># 18</span></span><br><span class="line">m1.func() <span class="comment"># name:zx,age:18</span></span><br></pre></td></tr></tbody></table></figure><h2 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h2><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> <span class="comment"># a指向10，计数1</span></span><br><span class="line">b = a <span class="comment"># b引用a，a引用10，实际上b也引用10，计数2</span></span><br></pre></td></tr></tbody></table></figure><p>引用计数减少</p><ul><li>对象的别名被显式销毁</li><li>对象的一个别名被赋值给其他对象（a=10变为a=100，10的计数-1）</li><li>对象从容器中移除，或容器销毁（对象从列表中移除，列表被销毁）</li><li>一个引用离开了它的作用域（调用函数时，传入的参数，在函数结束的时候销毁）</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrefcount(<span class="number">9999</span>)) <span class="comment"># 3</span></span><br><span class="line">a = <span class="number">9999</span></span><br><span class="line">print(sys.getrefcount(<span class="number">9999</span>)) <span class="comment"># 4</span></span><br><span class="line">b = a</span><br><span class="line">print(sys.getrefcount(<span class="number">9999</span>)) <span class="comment"># 5</span></span><br></pre></td></tr></tbody></table></figure><h3 id="内置函数is和id"><a href="#内置函数is和id" class="headerlink" title="内置函数is和id"></a>内置函数is和id</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line">print(<span class="built_in">id</span>(a), <span class="built_in">id</span>(b))  <span class="comment"># 4305020224 4305020224</span></span><br><span class="line"></span><br><span class="line">li1 = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">li2 = li1</span><br><span class="line">li3 = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">print(li1 <span class="keyword">is</span> li2)  <span class="comment"># True</span></span><br><span class="line">print(li1 <span class="keyword">is</span> li3)  <span class="comment"># False</span></span><br><span class="line">print(<span class="built_in">id</span>(li1), <span class="built_in">id</span>(li2), <span class="built_in">id</span>(li3))  <span class="comment"># 4326199176 4326199176 4326199240</span></span><br></pre></td></tr></tbody></table></figure><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><ul><li>浅拷贝</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">li1 = li.copy()</span><br><span class="line">li2 = li</span><br><span class="line"><span class="comment"># 4326199176 4326199240 4326199176</span></span><br><span class="line">print(<span class="built_in">id</span>(li), <span class="built_in">id</span>(li1), <span class="built_in">id</span>(li2))</span><br><span class="line">li.append(<span class="number">33</span>)</span><br><span class="line">print(li, li1, li2)  <span class="comment"># [1, 2, 3, 33] [1, 2, 3] [1, 2, 3, 33]</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">li = [<span class="number">11</span>, <span class="number">22</span>, a]</span><br><span class="line">li1 = li.copy()</span><br><span class="line">print(li, li1)  <span class="comment"># [11, 22, [1, 2]] [11, 22, [1, 2]]</span></span><br><span class="line"><span class="comment"># 4348084936 4632599496</span></span><br><span class="line">print(<span class="built_in">id</span>(li), <span class="built_in">id</span>(li1))  </span><br><span class="line">a.append(<span class="number">3</span>)</span><br><span class="line">print(li, li1)  <span class="comment"># [11, 22, [1, 2, 3]] [11, 22, [1, 2, 3]]</span></span><br><span class="line">print(<span class="built_in">id</span>(li), <span class="built_in">id</span>(li1))  <span class="comment"># 4354376392 4632599560</span></span><br></pre></td></tr></tbody></table></figure><ul><li>深拷贝</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">li2 = copy.deepcopy(li)</span><br><span class="line"><span class="comment"># 4339696328 4632595208 4326199240</span></span><br><span class="line">print(<span class="built_in">id</span>(li), <span class="built_in">id</span>(li1), <span class="built_in">id</span>(li2))</span><br><span class="line"><span class="comment"># [11, 22, [1, 2, 3]] [11, 22, [1, 2, 3]] [11, 22, [1, 2, 3]]</span></span><br><span class="line">print(li, li1, li2)</span><br><span class="line">a.remove(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 4339696328 4632595208 4326199240</span></span><br><span class="line">print(<span class="built_in">id</span>(li), <span class="built_in">id</span>(li1), <span class="built_in">id</span>(li2))</span><br><span class="line"><span class="comment"># [11, 22, [1, 2]] [11, 22, [1, 2]] [11, 22, [1, 2, 3]]</span></span><br><span class="line">print(li, li1, li2)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(六)</title>
      <link href="article/926ba963.html"/>
      <url>article/926ba963.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-六"><a href="#测试开发进阶-六" class="headerlink" title="测试开发进阶(六)"></a>测试开发进阶(六)</h1><blockquote><p>面向对象编程的三大特征：封装,集成,多态</p><p>封装：将数据和方法放在一个类中</p><p>继承：python中的一个类可以继承于一个或多个类，被继承的叫父类（基类，base class），继承的类叫子类</p><p>多态：一类事物拥有多种形态，一个抽象类有多个子类，（多态的概念依赖于继承），不同的子类对象调用相同的方法，产生不同的执行结果，多态可以增加代码的灵活性</p></blockquote><span id="more"></span><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Describe: 0816</span></span><br><span class="line"><span class="string">@Author: zhongxin</span></span><br><span class="line"><span class="string">@Time: 2019-08-16 20:31</span></span><br><span class="line"><span class="string">@Email: 490336534@qq.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">"""动物类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'动物类的func'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="string">"""猫类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'喵 喵 喵'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="string">"""狗类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'汪 汪 汪'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'这是Hero类'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">ani_obj</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param ani_obj: 动物类的对象</span></span><br><span class="line"><span class="string">    :type: Animal object</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ani_obj.func()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = Animal()</span><br><span class="line">    b = Dog()</span><br><span class="line">    c = Cat()</span><br><span class="line">    h = Hero()</span><br><span class="line">    print(<span class="built_in">isinstance</span>(a, Animal))  <span class="comment"># True</span></span><br><span class="line">    print(<span class="built_in">isinstance</span>(b, Animal))  <span class="comment"># True</span></span><br><span class="line">    print(<span class="built_in">isinstance</span>(c, Animal))  <span class="comment"># True</span></span><br><span class="line">    print(<span class="built_in">isinstance</span>(h, Animal))  <span class="comment"># False</span></span><br><span class="line">    func(a)  <span class="comment"># 动物类的func</span></span><br><span class="line">    func(b)  <span class="comment"># 汪 汪 汪</span></span><br><span class="line">    func(c)  <span class="comment"># 喵 喵 喵</span></span><br><span class="line">    func(h)  <span class="comment"># 这是Hero类</span></span><br></pre></td></tr></tbody></table></figure><p>鸭子类型的体现：</p><ul><li>静态语言：上面传入的对象必须是Base类型或者它的子类，否则无法调用run()方法</li><li>动态语言：传入的不一定是Base类型，也可以是其他类型，只要内部实现了run()方法</li></ul><p>多态的意义：开放封闭原则</p><ul><li>对于一个变量，只需要知道它是Base类型，无需确切地知道它的子类型，就可以调用run()方法（调用方只管调用，不管细节）</li><li>当需要新增功能，只需要新增一个Base的子类实现run()，就可以在原来的基础上进行扩展，这就是著名的<code>开放封闭</code>原则</li><li>对扩展开放：允许新增Base子类</li><li>对修改封闭：不需要修改依赖Base类的run()等函数</li></ul><h2 id="数据和自省"><a href="#数据和自省" class="headerlink" title="数据和自省"></a>数据和自省</h2><p>类里面的属性：类属性</p><ul><li>私有属性:以单下划线或者双下划线开头的属性</li><li>公有属性:普通的属性</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    attr1 = <span class="number">100</span>  <span class="comment"># 公有属性</span></span><br><span class="line">    _attr1 = <span class="number">2000</span>  <span class="comment"># 私有属性</span></span><br><span class="line">    __attr2 = <span class="number">3000</span>  <span class="comment"># 私有属性</span></span><br><span class="line">      </span><br><span class="line">print(MyClass.__dict__)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">{'__module__': '__main__', </span></span><br><span class="line"><span class="string">'attr1': 100, </span></span><br><span class="line"><span class="string">'_attr1': 2000, </span></span><br><span class="line"><span class="string">'_MyClass__attr2': 3000, </span></span><br><span class="line"><span class="string">'__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, </span></span><br><span class="line"><span class="string">'__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, </span></span><br><span class="line"><span class="string">'__doc__': None}</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(MyClass.attr1) <span class="comment"># 100</span></span><br><span class="line">print(MyClass._attr1) <span class="comment"># 2000</span></span><br><span class="line">print(MyClass._MyClass__attr2) <span class="comment"># 3000</span></span><br></pre></td></tr></tbody></table></figure><p>使用私有属性优化单例模式 更安全</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    MyClass文档注释</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    attr1 = <span class="number">100</span></span><br><span class="line">    _attr1 = <span class="number">2000</span></span><br><span class="line">    __attr2 = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        func方法</span></span><br><span class="line"><span class="string">        :param name:</span></span><br><span class="line"><span class="string">        :type str</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(MyClass.__doc__)</span><br><span class="line">m = MyClass()</span><br><span class="line">print(m.func.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    MyClass文档注释</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        func方法</span></span><br><span class="line"><span class="string">        :param name:</span></span><br><span class="line"><span class="string">        :type str</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><h3 id="slots限制类拥有的属性"><a href="#slots限制类拥有的属性" class="headerlink" title="slots限制类拥有的属性"></a>slots限制类拥有的属性</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = []</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Hero()</span><br><span class="line">print(h.__slots__)  <span class="comment"># []</span></span><br><span class="line">print(h.__dict__) </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/06/0816_3.py", line 18, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(h.__dict__)  # {'name': 'zx', 'age': 18}</span></span><br><span class="line"><span class="string">AttributeError: 'Hero' object has no attribute '__dict__'</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = [<span class="string">'name'</span>]</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Hero()</span><br><span class="line">h.name = <span class="string">'zx'</span></span><br><span class="line">print(h.name) <span class="comment"># zx</span></span><br><span class="line">print(h.__slots__)  <span class="comment"># ['name']</span></span><br></pre></td></tr></tbody></table></figure><p>作用：不再生成<code>__dict__</code>节约内存</p><h3 id="自定义属性访问"><a href="#自定义属性访问" class="headerlink" title="自定义属性访问"></a>自定义属性访问</h3><p>内置函数：</p><ul><li>getattr() 获取对象属性</li><li>setattr() 给对象设置属性</li><li>delattr() 删除对象属性</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Hero(<span class="string">'zx'</span>)</span><br><span class="line">print(h.name) <span class="comment"># zx</span></span><br><span class="line"><span class="built_in">setattr</span>(h, <span class="string">'age'</span>, <span class="number">18</span>)</span><br><span class="line">print(h.age)  <span class="comment"># 18</span></span><br><span class="line">print(<span class="built_in">getattr</span>(h, <span class="string">'name'</span>))  <span class="comment"># zx</span></span><br><span class="line"><span class="built_in">delattr</span>(h,<span class="string">'name'</span>) <span class="comment"># &lt;=&gt; del h.name</span></span><br><span class="line">print(h.name)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/06/0816_4.py", line 23, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(h.name)</span></span><br><span class="line"><span class="string">AttributeError: 'Hero' object has no attribute 'name'</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>__setattr__</code>方法</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        print(<span class="string">'-----init-----'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        给对象设置属性的时候会调用该方法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(self)  <span class="comment"># &lt;__main__.Hero object at 0x1031c7550&gt;</span></span><br><span class="line">        print(key)  <span class="comment"># name</span></span><br><span class="line">        print(value)  <span class="comment"># zx</span></span><br><span class="line">        print(<span class="string">'-----setattr-----'</span>)</span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self, key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Hero(<span class="string">'zx'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">-----init-----</span></span><br><span class="line"><span class="string">&lt;__main__.Hero object at 0x1031c7550&gt;</span></span><br><span class="line"><span class="string">name</span></span><br><span class="line"><span class="string">zx</span></span><br><span class="line"><span class="string">-----setattr-----</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(h.name) <span class="comment"># zx</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>__delattr__</code>方法</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        print(<span class="string">'-----init-----'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">f'这个是item:<span class="subst">{item}</span>'</span>) <span class="comment"># 这个是item:name</span></span><br><span class="line">        <span class="built_in">object</span>.__delattr__(self, item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Hero(<span class="string">'zx'</span>)</span><br><span class="line">print(h.__dict__)  <span class="comment"># {'name': 'zx'}</span></span><br><span class="line"><span class="built_in">delattr</span>(h, <span class="string">'name'</span>)</span><br><span class="line">print(h.__dict__)  <span class="comment"># {}</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>__getattribute__</code>方法:查找属性，直接调用该方法进行查找</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        print(<span class="string">'-----init-----'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">f'这个是item:<span class="subst">{item}</span>'</span>) <span class="comment"># 这个是item:name</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__getattribute__(self, item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Hero(<span class="string">'zx'</span>)</span><br><span class="line">print(h.name) <span class="comment"># zx</span></span><br><span class="line">print(h.name1)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/06/0816_7.py", line 26, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(h.name1)  # zx</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/06/0816_7.py", line 18, in __getattribute__</span></span><br><span class="line"><span class="string">    return object.__getattribute__(self, item)</span></span><br><span class="line"><span class="string">AttributeError: 'Hero' object has no attribute 'name1'</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>__getattr__</code>:如果属性不存在，getattribute报AttributeError错误，该方法会主动捕获异常</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        print(<span class="string">'-----init-----'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="string">"""查找属性，直接调用该方法进行查找"""</span></span><br><span class="line">        print(<span class="string">f'这个是item:<span class="subst">{item}</span>'</span>)  <span class="comment"># 这个是item:name</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__getattribute__(self, item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="string">"""如果属性不存在，getattribute报AttributeError错误，该方法会主动捕获异常"""</span></span><br><span class="line">        print(<span class="string">f'这是__getattr__的item:<span class="subst">{item}</span>'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Hero(<span class="string">'zx'</span>)</span><br><span class="line">print(h.name1)  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">-----init-----</span></span><br><span class="line"><span class="string">这个是item:name1</span></span><br><span class="line"><span class="string">这是__getattr__的item:name1</span></span><br><span class="line"><span class="string">999</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(四)</title>
      <link href="article/dcfb66c.html"/>
      <url>article/dcfb66c.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-四"><a href="#测试开发进阶-四" class="headerlink" title="测试开发进阶(四)"></a>测试开发进阶(四)</h1><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="string">'----func----'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        print(<span class="string">'----wrapper----'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">print(func())</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">----func----</span></span><br><span class="line"><span class="string">&lt;function func.&lt;locals&gt;.wrapper at 0x103bb77b8&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">func()()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">----func----</span></span><br><span class="line"><span class="string">----wrapper----</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="满足闭包的条件"><a href="#满足闭包的条件" class="headerlink" title="满足闭包的条件"></a>满足闭包的条件</h3><ul><li>函数中嵌套一个函数</li><li>外层函数的返回值是内层函数的函数名</li><li>内层嵌套函数对外部作用域有一个非全局变量的引用</li></ul><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><ul><li>实现数据锁定</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据锁定</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    num = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        print(<span class="string">f'这里使用了num的值<span class="subst">{num}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">wrapper = func2()</span><br><span class="line">num = <span class="number">10000</span></span><br><span class="line">wrapper() <span class="comment"># 这里使用了num的值1000</span></span><br></pre></td></tr></tbody></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><blockquote><p>开放封闭原则：软件实体应该是可扩展，而不可修改的。也就是说，<strong>对扩展是开放的</strong>，而<strong>对修改是封闭的</strong>。</p></blockquote><p>装饰器的作用：在不更改原功能函数内部代码，并且不改变调用方法的情况下为原函数添加新的功能。</p><p><code>@</code>：语法糖</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        print(num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">decorator(<span class="number">1000</span>)()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator1</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        print(func)<span class="comment"># 1⃣️</span></span><br><span class="line">        func()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="string">'这是func'</span>)<span class="comment">#2⃣️</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wra = decorator1(func)</span><br><span class="line">wra()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&lt;function func at 0x1142421e0&gt;1⃣️</span></span><br><span class="line"><span class="string">这是func2⃣️</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator1 </span><span class="comment"># 等价于func1 = decorator1(func1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    print(<span class="string">'这是func'</span>)</span><br><span class="line"></span><br><span class="line">func1()</span><br></pre></td></tr></tbody></table></figure><h3 id="一个作用域的错误"><a href="#一个作用域的错误" class="headerlink" title="一个作用域的错误"></a>一个作用域的错误</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(a)</span><br><span class="line">    a = <span class="number">999</span></span><br><span class="line">func()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/04/0812_2.py", line 14, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    func()</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/04/0812_2.py", line 12, in func</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">UnboundLocalError: local variable 'a' referenced before assignment</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><h3 id="装饰器常见应用场景"><a href="#装饰器常见应用场景" class="headerlink" title="装饰器常见应用场景"></a>装饰器常见应用场景</h3><ul><li>权限校验</li><li>计算时间⌛️</li><li>环境准备和恢复工作</li><li>web自动化用例失败截图</li></ul><blockquote><h4 id="Chrome插件推荐-ChroPath"><a href="#Chrome插件推荐-ChroPath" class="headerlink" title="Chrome插件推荐-ChroPath"></a>Chrome插件推荐-ChroPath</h4></blockquote><p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1g5yg16kusij31b30u01kx.jpg" alt="元素定位"></p><h4 id="web自动化用例失败截图"><a href="#web自动化用例失败截图" class="headerlink" title="web自动化用例失败截图"></a>web自动化用例失败截图</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            func()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            browser.save_screenshot(<span class="string">'eroor.png'</span>)</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_search</span>():</span></span><br><span class="line">    browser.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">'selenium'</span>)</span><br><span class="line">    browser.find_element_by_id(<span class="string">'su11'</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_search()</span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1g5ygdjjnkhj31b30u0nf5.jpg" alt="截图"></p><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">    print(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">'2'</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    print(<span class="string">f'sum=<span class="subst">{a + b}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_num(<span class="number">11</span>, <span class="number">22</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">sum=33</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><h2 id="类实现装饰器"><a href="#类实现装饰器" class="headerlink" title="类实现装饰器"></a>类实现装饰器</h2><blockquote><p><code>__call__</code>:魔术方法，在对象使用括号调用的时候会触发</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDecorator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func <span class="comment">#⚠️⚠️⚠️</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">'这是__call__方法'</span>)</span><br><span class="line">        self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'这是MyDecorator的func方法'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyDecorator  </span><span class="comment"># add_num = MyDecorator(add_num)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    print(<span class="string">f'sun=<span class="subst">{a + b}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_num(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="装饰器装饰类"><a href="#装饰器装饰类" class="headerlink" title="装饰器装饰类"></a>装饰器装饰类</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dceorator</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">'111'</span>)</span><br><span class="line">        obj = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'222'</span>)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@dceorator  </span><span class="comment"># Hero = dceorator(Hero)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'这是Hero的func'</span>)</span><br><span class="line"></span><br><span class="line">h = Hero()</span><br><span class="line">print(h)</span><br><span class="line">h.func()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">111</span></span><br><span class="line"><span class="string">222</span></span><br><span class="line"><span class="string">&lt;__main__.Hero object at 0x1033a4390&gt;</span></span><br><span class="line"><span class="string">这是Hero的func</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(五)</title>
      <link href="article/b64e111.html"/>
      <url>article/b64e111.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-五"><a href="#测试开发进阶-五" class="headerlink" title="测试开发进阶(五)"></a>测试开发进阶(五)</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="魔术方法（魔法方法，特殊方法）"><a href="#魔术方法（魔法方法，特殊方法）" class="headerlink" title="魔术方法（魔法方法，特殊方法）"></a>魔术方法（魔法方法，特殊方法）</h3><h4 id="new-方法和单例模式"><a href="#new-方法和单例模式" class="headerlink" title="__new__方法和单例模式"></a><code>__new__</code>方法和单例模式</h4><blockquote><p><code>__init__</code>：在创建对象的时候，自动调用对 创建的对象 进行初始化设置的</p><p>魔术方法：以双下划线开头，双下划线结尾的方法</p></blockquote><span id="more"></span><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod </span><span class="comment"># known case of __new__</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *more</span>):</span> <span class="comment"># known special case of object.__new__</span></span><br><span class="line">    <span class="string">""" Create and return a new object.  See help(type) for accurate signature. """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>从源码可以看出，<code>__new__</code>方法的作用是创建然后返回一个对象</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        print(<span class="string">'这个是init方法'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 创建对象时第一步做的就是__new__方法</span></span><br><span class="line">        print(<span class="string">'这个是new方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h1 = Hero(<span class="string">'zx'</span>)</span><br><span class="line">print(h1)</span><br><span class="line">print(h1.name)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这个是new方法</span></span><br><span class="line"><span class="string">这个是init方法</span></span><br><span class="line"><span class="string">&lt;__main__.Hero object at 0x1033b1f60&gt;</span></span><br><span class="line"><span class="string">zx</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><blockquote><p>类每次实例化的时候都会创建一个新的对象，如果要求类只能被实例化一次该怎么做？</p></blockquote><p>普通模式：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'这个是init方法'</span>)</span><br><span class="line"></span><br><span class="line">h1 = Hero()</span><br><span class="line">h2 = Hero()</span><br><span class="line">print(<span class="built_in">id</span>(h1), <span class="built_in">id</span>(h2))  <span class="comment"># 4328290400 4340056528</span></span><br></pre></td></tr></tbody></table></figure><p>单例模式：</p><p>第一次创建对象存起来，之后创建对象的时候直接返回第一次创建的对象</p><p>实现思路：</p><ul><li>定义一个类属性，来记录该类是否创建过对象</li><li>在<code>__new__</code>方法中</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls.count == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 调用父类的__new__方法创建一个对象</span></span><br><span class="line">            cls.instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">            cls.count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = MyClass()</span><br><span class="line">h1 = MyClass()</span><br><span class="line">h2 = MyClass()</span><br><span class="line">h3 = MyClass()</span><br><span class="line">print(<span class="built_in">id</span>(h), <span class="built_in">id</span>(h1), <span class="built_in">id</span>(h2), <span class="built_in">id</span>(h3)) <span class="comment"># 4349229152 4349229152 4349229152 4349229152</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精简</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.instance:</span><br><span class="line">            <span class="comment"># 调用父类的__new__方法创建一个对象</span></span><br><span class="line">            cls.instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br></pre></td></tr></tbody></table></figure><h4 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h4><blockquote><p>上下文管理器：上下文管理器是一个python对象，为操作提供额外的上下文信息。这种额外的信息，使用with语句初始化上下文，以及完成with块中的所有代码时，采用可调用的形式</p><p>with关键字：启动对象的上下文管理器</p></blockquote><ul><li><code>object.__enter__(self)</code></li></ul><p>输入与次对象相关的运行时上下文。如果存在的话，with语句将绑定该方法的返回值到该语句的as子语句中指定的目标</p><ul><li><code>object.__exit__(self, exc_type, exc_val, exc_tb)</code></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'0814.py'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    print(content)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOpen</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'enter'</span>) <span class="comment"># 1⃣️</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        print(<span class="string">'exit'</span>) <span class="comment"># 3⃣️</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyOpen() <span class="keyword">as</span> f:</span><br><span class="line">    print(f) <span class="comment"># 2⃣️</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">enter 1⃣️</span></span><br><span class="line"><span class="string">None  2⃣️</span></span><br><span class="line"><span class="string">exit  3⃣️</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOpen</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'enter'</span>) <span class="comment"># 1⃣️</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">999</span> <span class="comment"># 2⃣️</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        print(<span class="string">'exit'</span>) <span class="comment"># 3⃣️</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyOpen() <span class="keyword">as</span> f:</span><br><span class="line">    print(f) <span class="comment"># 2⃣️</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">enter 1⃣️</span></span><br><span class="line"><span class="string">999   2⃣️</span></span><br><span class="line"><span class="string">exit  3⃣️</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p>自己实现的文件操作上下文管理器</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOpen</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, file_name, method, encoding</span>):</span></span><br><span class="line">        self.file_name = file_name</span><br><span class="line">        self.method = method</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.f = <span class="built_in">open</span>(self.file_name, self.method, encoding=self.encoding)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        self.f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyOpen(<span class="string">'0814.py'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exc_type <span class="comment"># 异常类型</span></span><br><span class="line">exc_val <span class="comment"># 异常值</span></span><br><span class="line">exc_tb <span class="comment"># 异常回溯追踪</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOpen</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, file_name, method, encoding</span>):</span></span><br><span class="line">        self.file_name = file_name</span><br><span class="line">        self.method = method</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.f = <span class="built_in">open</span>(self.file_name, self.method, encoding=self.encoding)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        self.f.close()</span><br><span class="line">        print(exc_type) <span class="comment"># &lt;class 'NameError'&gt;</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        print(exc_val) <span class="comment"># name 'a' is not defined</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        print(exc_tb)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/05/0814_2.py", line 34, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">NameError: name 'a' is not defined</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyOpen(<span class="string">'0814.py'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(a)</span><br></pre></td></tr></tbody></table></figure><p>执行顺序：实例化(<code>__init__</code>)—-&gt; 执行<code>__enter__</code>—-&gt;执行with中的代码—–&gt;执行<code> __exit__</code></p><h4 id="str-repr-方法"><a href="#str-repr-方法" class="headerlink" title="__str__,__repr__方法"></a><code>__str__</code>,<code>__repr__</code>方法</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = <span class="string">'abc'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(a)</span></span><br><span class="line">abc</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">'abc'</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当我们使用print()这个内置函数之后，给他传入一个对象，实际上是触发了它的<code>__str__</code>方法，将方法返回的内容输出到控制台</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">h = Hero(<span class="string">'zx'</span>)</span><br><span class="line">print(h) <span class="comment"># &lt;__main__.Hero object at 0x103295908&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">'STR'</span>) <span class="comment"># 1⃣️</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'666'</span> <span class="comment"># 2⃣️</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Hero(<span class="string">'zx'</span>)</span><br><span class="line">print(h)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">STR  1⃣️</span></span><br><span class="line"><span class="string">666  2⃣️</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>在交互环境中，输入对象，返回的是<code>__repr__</code>方法中所返回的内容</p></blockquote><ul><li>内置函数str转化一个对象时候，触发<code>__str__</code>方法</li><li>内置函数format处理对象时，触发<code>__str__</code>方法</li><li>内置函数repr函数，触发<code>__repr__</code>方法</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Hero(<span class="string">'zx'</span>)</span><br><span class="line">print(h) <span class="comment"># zx</span></span><br><span class="line">print(<span class="built_in">str</span>(h)) <span class="comment"># zx</span></span><br><span class="line">print(<span class="built_in">repr</span>(h)) <span class="comment"># &lt;__main__.Hero object at 0x1031c7860&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>__repr__</code>是<code>__str__</code>的备胎，当没有<code>__str__</code>的时候调用<code>__repr__</code>，反过来不会</p><h4 id="算数运算相关的魔术方法"><a href="#算数运算相关的魔术方法" class="headerlink" title="算数运算相关的魔术方法"></a>算数运算相关的魔术方法</h4><ul><li><p><code> __add__</code>：相加</p></li><li><p><code>__sub__</code>：减法</p></li><li><p><code>__mul__</code>：乘法</p></li><li><p><code>__stuediv__</code>：除法</p></li><li><p><code>__floordiv__</code>：整除</p></li><li><p><code>__mod__</code>：取余</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStr</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">{self}</span><span class="subst">{other}</span>'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">{self}</span>-<span class="subst">{other}</span>'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1 = MyStr(<span class="string">'aaa'</span>)</span><br><span class="line">v2 = MyStr(<span class="string">'bbb'</span>)</span><br><span class="line">print(v1 + v2)  <span class="comment"># aaabbb</span></span><br><span class="line">print(v1 - v2)  <span class="comment"># aaa-bbb</span></span><br></pre></td></tr></tbody></table></figure><p>多个连续相加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStr</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> MyStr(<span class="string">f'<span class="subst">{self}</span><span class="subst">{other}</span>'</span>)<span class="comment">#⚠️</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1 = MyStr(<span class="string">'aaa'</span>)</span><br><span class="line">v2 = MyStr(<span class="string">'bbb'</span>)</span><br><span class="line">v3 = MyStr(<span class="string">'ccc'</span>)</span><br><span class="line">print(v1 + v2 + v3) <span class="comment"># aaabbbccc</span></span><br></pre></td></tr></tbody></table></figure><p>一个没啥用的减法实现</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStr</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> MyStr(<span class="string">f'<span class="subst">{self}</span><span class="subst">{other}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> MyStr(self.value.replace(other.value, <span class="string">''</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1 = MyStr(<span class="string">'aaa'</span>)</span><br><span class="line">v2 = MyStr(<span class="string">'bbb'</span>)</span><br><span class="line">v12 = v1 + v2</span><br><span class="line">print(v12)</span><br><span class="line">print(v12 - v1)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(三)</title>
      <link href="article/f78c5963.html"/>
      <url>article/f78c5963.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-三"><a href="#测试开发进阶-三" class="headerlink" title="测试开发进阶(三)"></a>测试开发进阶(三)</h1><h3 id="生成器的三个方法"><a href="#生成器的三个方法" class="headerlink" title="生成器的三个方法"></a>生成器的三个方法</h3><ul><li><p>send()和生成器内部进行数据交互</p></li><li><p>close()关闭生成器</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>))</span><br><span class="line">print(<span class="built_in">next</span>(gen)) <span class="comment"># 0</span></span><br><span class="line">print(<span class="built_in">next</span>(gen)) <span class="comment"># 2</span></span><br><span class="line">gen.close()</span><br><span class="line">print(<span class="built_in">next</span>(gen))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/03/0809.py", line 5, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(next(gen))</span></span><br><span class="line"><span class="string">StopIteration</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><ul><li>throw()触发异常</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>))</span><br><span class="line">gen.throw(NameError, <span class="string">'name is xxx'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/03/0809.py", line 2, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    gen.throw(NameError, 'name is xxx')</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/03/0809.py", line 1, in &lt;genexpr&gt;</span></span><br><span class="line"><span class="string">    gen = (i for i in range(0, 20, 2))</span></span><br><span class="line"><span class="string">NameError: name is xxx</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><blockquote><p>在函数中调用函数自身，我们把这种函数叫做递归函数</p></blockquote><blockquote><p>递归边界：递归的终止条件</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(n)</span><br><span class="line">    func(n - <span class="number">1</span>)</span><br><span class="line">func(<span class="number">10</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/03/0809_1.py", line 5, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    func(10)</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/03/0809_1.py", line 3, in func</span></span><br><span class="line"><span class="string">    func(n - 1)</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/03/0809_1.py", line 3, in func</span></span><br><span class="line"><span class="string">    func(n - 1)</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/03/0809_1.py", line 3, in func</span></span><br><span class="line"><span class="string">    func(n - 1)</span></span><br><span class="line"><span class="string">  [Previous line repeated 993 more times]</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/03/0809_1.py", line 2, in func</span></span><br><span class="line"><span class="string">    print(n)</span></span><br><span class="line"><span class="string">RecursionError: maximum recursion depth exceeded while calling a Python object</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        func(n - <span class="number">1</span>)</span><br><span class="line">func1(<span class="number">10</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p><strong>实现一个累加函数</strong></p><ul><li>6累加的结果 6+5+4+3+2+1</li><li>10累加的结果 10+9+8+7+6+5+4+3+2+1</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">2 1+2</span><br><span class="line">3 1+2+3</span><br><span class="line">4 1+2+3+4</span><br><span class="line">5 1+2+3+4+5</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_add</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n + fun_add(n - <span class="number">1</span>)</span><br><span class="line">print(fun_add(<span class="number">6</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="查看最大递归次数"><a href="#查看最大递归次数" class="headerlink" title="查看最大递归次数"></a>查看最大递归次数</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrecursionlimit()) <span class="comment"># 默认1000 实际996</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">3000</span>) <span class="comment"># 实际2996</span></span><br></pre></td></tr></tbody></table></figure><h4 id="使用装饰器缓存调用"><a href="#使用装饰器缓存调用" class="headerlink" title="使用装饰器缓存调用"></a>使用装饰器缓存调用</h4><p>调用同样的参数后，使用缓存，不会重新开辟空间</p><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/functools.html">https://docs.python.org/zh-cn/3/library/functools.html</a></p><p><code>@functools.lru_cache(maxsize=128, typed=False)</code></p><p>一个为函数提供缓存功能的装饰器，缓存 <em>maxsize</em> 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以节约高开销或I/O函数的调用时间。</p><p>由于使用了字典存储缓存，所以该函数的固定参数和关键字参数必须是可哈希的。</p></blockquote><p>一个题目：</p><blockquote><p>爬100个台阶，爬台阶每一步可以上一阶，两阶，或三阶，请问一共有多少种爬法</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache(<span class="params">maxsize=<span class="number">128</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func999</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> func999(n - <span class="number">1</span>) + func999(n - <span class="number">2</span>) + func999(n - <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(func999(<span class="number">100</span>)) <span class="comment"># 180396380815100901214157639</span></span><br></pre></td></tr></tbody></table></figure><h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><blockquote><p>一个函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用</p></blockquote><ul><li><p>变量都只在函数作用域内获取</p></li><li><p>不会产生<code>副作用(side effects)</code>,不会改变被传入的数据或其他数据(全局变量)</p><blockquote><p>函数的副作用：</p></blockquote></li><li><p><strong>相同的输入保证相同的输出</strong></p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a * b + <span class="number">100</span></span><br><span class="line">print(func(<span class="number">11</span>, <span class="number">222</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><ul><li>map</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]  <span class="comment"># 每个元素*1000/2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">1000</span> / <span class="number">2</span></span><br><span class="line">res = <span class="built_in">map</span>(fun, li)</span><br><span class="line">print(res)  <span class="comment"># &lt;map object at 0x1033050f0&gt;</span></span><br><span class="line">print(<span class="built_in">list</span>(res)) <span class="comment"># [500.0, 1000.0, 1500.0, 2000.0, 2500.0, 3000.0, 3500.0]</span></span><br></pre></td></tr></tbody></table></figure><ul><li>filter 过滤器</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n &gt;= <span class="number">5</span></span><br><span class="line">res1 = <span class="built_in">filter</span>(func1,li)</span><br><span class="line">print(res1) <span class="comment"># &lt;filter object at 0x103b9f390&gt;</span></span><br><span class="line">print(<span class="built_in">list</span>(res1)) <span class="comment"># [5, 6, 7]</span></span><br></pre></td></tr></tbody></table></figure><ul><li>zip 聚合打包</li></ul><p>长度不一样，以最短为准</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'gender'</span>]</span><br><span class="line">data = [<span class="string">'zx'</span>, <span class="number">26</span>, <span class="string">'男'</span>]</span><br><span class="line">print(<span class="built_in">list</span>(<span class="built_in">zip</span>(title,data))) <span class="comment"># [('name', 'zx'), ('age', 26), ('gender', '男')]</span></span><br><span class="line">print(<span class="built_in">dict</span>(<span class="built_in">zip</span>(title,data))) <span class="comment"># {'name': 'zx', 'age': 26, 'gender': '男'}</span></span><br><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">list</span>(<span class="built_in">zip</span>(title, data, num))) <span class="comment"># [('name', 'zx', 1), ('age', 26, 2), ('gender', '男', 3)]</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>关键字：<strong>lambda</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数：表达式(返回值)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = (<span class="keyword">lambda</span> n: n * <span class="number">2</span>)(<span class="number">4</span>)</span><br><span class="line">print(res) <span class="comment"># 8</span></span><br></pre></td></tr></tbody></table></figure><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 偏函数之前的写法</span></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">print(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x&gt;<span class="number">5</span>,li))) <span class="comment"># [6, 7, 8, 9, 10]</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">myfilter = partial(<span class="built_in">filter</span>, <span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>)</span><br><span class="line">print(<span class="built_in">list</span>(myfilter(li))) <span class="comment"># [6, 7, 8, 9, 10]</span></span><br></pre></td></tr></tbody></table></figure><p>一个简单的例子：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    print(a, b, c)</span><br><span class="line"></span><br><span class="line">func1(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>)</span><br><span class="line">func1(<span class="number">11</span>, <span class="string">'bb'</span>, <span class="string">'cc'</span>)</span><br><span class="line">func1(<span class="number">11</span>, <span class="string">'dd'</span>, <span class="string">'ee'</span>)</span><br><span class="line"></span><br><span class="line">myfilter1 = partial(func1, <span class="number">11</span>)</span><br><span class="line">myfilter1(<span class="number">22</span>, <span class="number">33</span>)</span><br><span class="line">myfilter1(<span class="string">'bb'</span>, <span class="string">'cc'</span>)</span><br><span class="line">myfilter1(<span class="string">'dd'</span>, <span class="string">'ee'</span>)</span><br><span class="line"></span><br><span class="line">myfilter2 = partial(func1, b=<span class="number">22</span>)</span><br><span class="line">myfilter2(a=<span class="number">11</span>, c=<span class="string">'cc'</span>) <span class="comment"># 11 22 cc</span></span><br><span class="line"></span><br><span class="line">myfilter2 = partial(func1, a=<span class="number">11</span>, b=<span class="number">22</span>)</span><br><span class="line">myfilter2(c=<span class="string">'cc'</span>) <span class="comment"># 11 22 cc</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(二)</title>
      <link href="article/897f7948.html"/>
      <url>article/897f7948.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-二"><a href="#测试开发进阶-二" class="headerlink" title="测试开发进阶(二)"></a>测试开发进阶(二)</h1><h2 id="结构化工程"><a href="#结构化工程" class="headerlink" title="结构化工程"></a>结构化工程</h2><p><a href="https://pythonguidecn.readthedocs.io/zh/latest/writing/structure.html">https://pythonguidecn.readthedocs.io/zh/latest/writing/structure.html</a></p><ul><li>readme： 对项目的整体介绍，同时也是一份使用手册</li><li>LICENS：阐述该项目的许可说明和授权</li><li>setup.py：通过setup把核心代码打包</li><li>api_test：存放项目的核心代码</li><li>requirements.txt：项目依赖的第三方库</li><li>docs：包的参考文档</li><li>tests：代码的测试</li><li>makefile：同于项目的管理，根据项目需求添加其他的文件和目录<span id="more"></span><h2 id="数据类型扩展"><a href="#数据类型扩展" class="headerlink" title="数据类型扩展"></a>数据类型扩展</h2></li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>数值</p><ul><li><p>整数</p></li><li><p>浮点数</p></li><li><p>布尔类型</p></li><li><p>decimal</p></li><li><p>复数</p></li></ul><p>序列类型</p><ul><li>字符串</li><li>元祖</li><li>列表</li></ul><blockquote><p>元祖在定义的时候就确认了存放的空间，内存固定，占用空间较小</p><p>列表的空间可以动态变化，内存占用的空间比元祖大的多</p><p><strong>在数据固定的情况下使用元祖</strong></p></blockquote><p>散列</p><ul><li>字典</li><li>集合</li></ul><h3 id="命名元祖"><a href="#命名元祖" class="headerlink" title="命名元祖"></a>命名元祖</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br></pre></td></tr></tbody></table></figure><p>普通元祖：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tu = (<span class="string">'zx'</span>, <span class="string">'1994'</span>, <span class="string">'男'</span>)</span><br><span class="line">print(tu[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><p>命名元祖：</p><p>使用<code>namedtuple</code>相当于创建了一个类，<code>s1</code>相当于实例话了一个包含<code>name</code>,<code>age</code>,<code>gender</code>三个属性的类。</p><p><code>__main__</code>：当前模块下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">student = namedtuple(<span class="string">'Student'</span>, [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'gender'</span>])</span><br><span class="line">print(<span class="built_in">type</span>(student)) <span class="comment"># &lt;class 'type'&gt; 一个类</span></span><br><span class="line"></span><br><span class="line">s1 = student(<span class="string">'zx'</span>, <span class="string">'1994'</span>, <span class="string">'男'</span>)</span><br><span class="line">print(<span class="built_in">type</span>(s1)) <span class="comment"># &lt;class '__main__.Student'&gt;</span></span><br><span class="line">print(s1.name) <span class="comment"># zx</span></span><br><span class="line">print(s1[<span class="number">0</span>]) <span class="comment"># zx</span></span><br></pre></td></tr></tbody></table></figure><h3 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h3><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p>普通列表创建</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">urls = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">101</span>,<span class="number">10</span>):</span><br><span class="line">    urls.append(<span class="string">f'http://....?page=<span class="subst">{i}</span>'</span>)</span><br><span class="line">print(urls)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['http://....?page=0', 'http://....?page=10', 'http://....?page=20', 'http://....?page=30', 'http://....?page=40', 'http://....?page=50', 'http://....?page=60', 'http://....?page=70', 'http://....?page=80', 'http://....?page=90', 'http://....?page=100']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p>列表推导式</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urls = [<span class="string">f'http://....?page=<span class="subst">{i}</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">101</span>,<span class="number">10</span>)]</span><br><span class="line">print(urls)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['http://....?page=0', 'http://....?page=10', 'http://....?page=20', 'http://....?page=30', 'http://....?page=40', 'http://....?page=50', 'http://....?page=60', 'http://....?page=70', 'http://....?page=80', 'http://....?page=90', 'http://....?page=100']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p>三目运算</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>:</span><br><span class="line">    print(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">4</span></span><br><span class="line">res = <span class="number">5</span> <span class="keyword">if</span> a &gt; <span class="number">5</span> <span class="keyword">else</span> <span class="number">0</span> <span class="comment"># (判断语句成立)if(判断语句)else(判断语句不成立)</span></span><br><span class="line">print(res) <span class="comment"># 0</span></span><br><span class="line">res = <span class="number">5</span> <span class="keyword">if</span> a &gt; <span class="number">5</span> <span class="keyword">else</span> (<span class="string">'='</span> <span class="keyword">if</span> a &gt; <span class="number">5</span> <span class="keyword">else</span> <span class="string">"!"</span>)</span><br><span class="line">print(res) <span class="comment"># !</span></span><br></pre></td></tr></tbody></table></figure><p>结合列表推导式</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>] <span class="comment"># [0, 2, 4, 6, 8]</span></span><br><span class="line">[i <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> -<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) ] <span class="comment"># [0, -1, 2, -1, 4, -1, 6, -1, 8, -1]</span></span><br></pre></td></tr></tbody></table></figure><p>####字典推导式</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dic = {i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]} </span><br><span class="line"><span class="comment"># 集合{1, 2, 3}</span></span><br><span class="line"></span><br><span class="line">dic = {i: <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]} </span><br><span class="line"><span class="comment"># 字典{1: 1, 2: 1, 3: 1}</span></span><br><span class="line"></span><br><span class="line">dic = {k: v <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">for</span> v <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]}</span><br><span class="line"><span class="comment"># {1: 1, 2: 1, 3: 1} 错误 ❌❌❌</span></span><br><span class="line">dic = {k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])}</span><br><span class="line"><span class="comment"># {1: 3, 2: 2, 3: 1} 正确 ✅✅✅</span></span><br><span class="line"><span class="comment"># 其实就是：</span></span><br><span class="line"><span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tu = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x11433d138&gt;</span></span><br><span class="line"><span class="built_in">next</span>(tu) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">next</span>(tu) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">next</span>(tu) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">next</span>(tu) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">next</span>(tu) <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">next</span>(tu) </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/02/0807_2.py", line 33, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(next(tu))</span></span><br><span class="line"><span class="string">StopIteration</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><h3 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h3><p>生成器的作用：当我们要存储大量数据的时候，使用生成器可以节约内存</p><p>创建生成器的方式：</p><ol><li>生成器表达式</li><li>yield</li></ol><blockquote><p>只能用于函数中，当一个函数中出现yield这个关键字，那么这个函数就是一个生成器函数。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yield 后面不写东西</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">res = gen() <span class="comment"># &lt;generator object gen at 0x114203138&gt;</span></span><br><span class="line"><span class="built_in">next</span>(res) <span class="comment"># None</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yield 后面写i</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">res = gen()</span><br><span class="line"><span class="built_in">next</span>(res) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">next</span>(res) <span class="comment"># 2</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen3</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        print(<span class="string">f'<span class="subst">{i}</span>--*******'</span>)</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        print(<span class="string">f'<span class="subst">{i}</span>--#######'</span>)</span><br><span class="line">res = gen3()</span><br><span class="line">print(res)</span><br><span class="line">print(<span class="built_in">next</span>(res))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第一次next打印内容</span></span><br><span class="line"><span class="string">0--*******</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="built_in">next</span>(res))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第一次next打印内容</span></span><br><span class="line"><span class="string">0--*******</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">第二次next打印内容</span></span><br><span class="line"><span class="string">0--#######</span></span><br><span class="line"><span class="string">1--*******</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><h4 id="可迭代对象和迭代器"><a href="#可迭代对象和迭代器" class="headerlink" title="可迭代对象和迭代器"></a>可迭代对象和迭代器</h4><ul><li>可迭代对象</li></ul><blockquote><p>对象内部实现了迭代协议的称之为可迭代对象</p><p>​    迭代协议：该对象实现了<code>__iter__</code>方法</p><ul><li><p>可迭代对象都可以使用<code>for</code>循环进行遍历</p></li><li><p>能够使用<code>for</code>循环进行遍历的都是可迭代对象</p></li></ul></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br></pre></td></tr></tbody></table></figure><ul><li>迭代器</li></ul><blockquote><p>要求：</p><ol><li>对象实现了迭代协议</li><li>内部还要实现<code>__next_</code>方法</li></ol><blockquote><p>next()方法</p></blockquote><p>通过iter()可以将可迭代对象转化为迭代器</p></blockquote><p>生成器是一种特殊的迭代器</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">item = <span class="built_in">iter</span>(li)</span><br><span class="line">print(item) <span class="comment"># &lt;list_iterator object at 0x1032c8390&gt;</span></span><br><span class="line">print(<span class="built_in">next</span>(item)) <span class="comment"># 11</span></span><br></pre></td></tr></tbody></table></figure><p>迭代器和生成器的区别：</p><ol><li>生成器相比迭代器多了三种方法：<code>send()</code>,<code>close()</code>,<code>throw()</code></li></ol><ul><li>send()：与生成器内部进行数据交互</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>():</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">        j = <span class="keyword">yield</span> i</span><br><span class="line">        print(j)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = gen()</span><br><span class="line">print(g) <span class="comment"># &lt;generator object gen at 0x114203138&gt;</span></span><br><span class="line">print(<span class="built_in">next</span>(g)) <span class="comment"># 0</span></span><br><span class="line">print(<span class="built_in">next</span>(g)) <span class="comment"># None 1</span></span><br><span class="line">print(g.send(<span class="number">8</span>)) <span class="comment"># 8 2</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen1</span>():</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">        j = <span class="keyword">yield</span> i</span><br><span class="line">        <span class="keyword">if</span> j <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            i = j</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">g = gen1()</span><br><span class="line">print(<span class="built_in">next</span>(g)) <span class="comment"># 0</span></span><br><span class="line">print(g.send(<span class="number">8</span>)) <span class="comment"># 9</span></span><br><span class="line">print(g.send(<span class="number">5</span>)) <span class="comment"># 6</span></span><br><span class="line">print(g.send(<span class="number">10</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/zhongxin/Desktop/py/zx/02/0807_5.py", line 26, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(g.send(10))</span></span><br><span class="line"><span class="string">StopIteration</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发进阶(一)</title>
      <link href="article/264ee22a.html"/>
      <url>article/264ee22a.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试开发进阶-一"><a href="#测试开发进阶-一" class="headerlink" title="测试开发进阶(一)"></a>测试开发进阶(一)</h1><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install virtualenv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install virtualenvwrapper-win <span class="comment"># windows下的管理工具</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install virtualenvwrapper</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install pipenv</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="查看已安装的虚拟环境"><a href="#查看已安装的虚拟环境" class="headerlink" title="查看已安装的虚拟环境"></a>查看已安装的虚拟环境</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> workon</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="Windows修改安装的位置"><a href="#Windows修改安装的位置" class="headerlink" title="Windows修改安装的位置"></a>Windows修改安装的位置</h3><p>新增环境变量</p><ul><li>变量名：<code>WORKON_HOME</code></li><li>变量值：虚拟环境存放路径</li></ul><h3 id="Linux修改安装的位置"><a href="#Linux修改安装的位置" class="headerlink" title="Linux修改安装的位置"></a>Linux修改安装的位置</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pip后建立软连接</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/python3/bin/virtualenv /usr/bin/virtualenv</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux配置虚拟环境路径</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mac配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增</span></span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python</span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line"></span><br><span class="line">source /usr/local/python3/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令，让配置生效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux</span></span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> mac</span></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p><code>-p</code>指定解释器</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkvirtualenv -p python3 test_py3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> workon test_py3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deactivate</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rmvirtualenv test_py3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="导出虚拟环境中所有的模块和包"><a href="#导出虚拟环境中所有的模块和包" class="headerlink" title="导出虚拟环境中所有的模块和包"></a>导出虚拟环境中所有的模块和包</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip frezz &gt;requirements.txt</span></span><br></pre></td></tr></tbody></table></figure><h3 id="安装requirements-txt中的包"><a href="#安装requirements-txt中的包" class="headerlink" title="安装requirements.txt中的包"></a>安装requirements.txt中的包</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></tbody></table></figure><h3 id="virtualenv存在的问题"><a href="#virtualenv存在的问题" class="headerlink" title="virtualenv存在的问题"></a>virtualenv存在的问题</h3><p>virtualenv卸载一个包之后，相关依赖不会被同步卸载</p><h2 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h2><p><strong>与项目绑定</strong></p><h3 id="创建虚拟环境-1"><a href="#创建虚拟环境-1" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv install</span></span><br></pre></td></tr></tbody></table></figure><h3 id="进入虚拟环境-1"><a href="#进入虚拟环境-1" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv shell</span></span><br></pre></td></tr></tbody></table></figure><h3 id="退出虚拟环境-1"><a href="#退出虚拟环境-1" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></tbody></table></figure><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><p>在哪个路径下操作，就安装到哪个环境</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv install requests</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查看依赖"><a href="#查看依赖" class="headerlink" title="查看依赖"></a>查看依赖</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv graph</span></span><br></pre></td></tr></tbody></table></figure><h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><p>当前环境的依赖不会被卸载</p><p>移植<code>Pipfile</code>和<code>Pipfile.lock</code>后重新生成不会携带</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv uninstall requests</span></span><br></pre></td></tr></tbody></table></figure><h3 id="开发环境安装"><a href="#开发环境安装" class="headerlink" title="开发环境安装"></a>开发环境安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv install --dev requests</span></span><br></pre></td></tr></tbody></table></figure><h3 id="导出包"><a href="#导出包" class="headerlink" title="导出包"></a>导出包</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv lock -r &gt;requirements.txt</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除虚拟环境-1"><a href="#删除虚拟环境-1" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h3><p><code>Pipfile</code>和<code>Pipfile.lock</code>不会被删除</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv --rm</span></span><br></pre></td></tr></tbody></table></figure><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><blockquote><p>python之禅</p></blockquote><blockquote><p>import this</p><p>The Zen of Python, by Tim Peters</p><p>Beautiful is better than ugly.</p><p>Explicit is better than implicit.</p><p>Simple is better than complex.</p><p>Complex is better than complicated.</p><p>Flat is better than nested.</p><p>Sparse is better than dense.</p><p>Readability counts.</p><p>Special cases aren’t special enough to break the rules.</p><p>Although practicality beats purity.</p><p>Errors should never pass silently.</p><p>Unless explicitly silenced.</p><p>In the face of ambiguity, refuse the temptation to guess.</p><p>There should be one– and preferably only one –obvious way to do it.</p><p>Although that way may not be obvious at first unless you’re Dutch.</p><p>Now is better than never.</p><p>Although never is often better than <em>right</em> now.</p><p>If the implementation is hard to explain, it’s a bad idea.</p><p>If the implementation is easy to explain, it may be a good idea.</p><p>Namespaces are one honking great idea – let’s do more of those!</p></blockquote><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul><li>每一级缩进使用4个空格</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左对齐</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">                         var_three, var_four)</span><br><span class="line"><span class="comment"># 换行缩进</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">   var_one, var_two,</span><br><span class="line">   var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用更多的缩进来与其他行区分</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">   var_one, var_two, var_three,</span><br><span class="line">   var_four)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="行的最大长度"><a href="#行的最大长度" class="headerlink" title="行的最大长度"></a>行的最大长度</h3><ul><li>最大79</li><li>注释最大72</li></ul><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul><li>函数之间2个空行</li><li>类的方法之间1个空行</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>块注释 </p><blockquote><p>与代码在同一行</p></blockquote></li><li><p>行内注释</p></li><li><p>文档注释</p><blockquote><p>第一行：对函数/类整体功能说明</p><p>参数说明</p><p>:param var_one: 参数1 是干嘛的</p><p>:type var_one:int</p><p>返回值说明</p><p>:return:</p></blockquote></li></ul><p>PEP257:<a href="https://github.com/qiuxiang/pep/blob/master/peps/257.md">https://github.com/qiuxiang/pep/blob/master/peps/257.md</a></p><h3 id="模块包导入"><a href="#模块包导入" class="headerlink" title="模块包导入"></a>模块包导入</h3><ul><li>先导入python内置模块和包</li><li>导入第三方的模块和包</li><li>导入自定义的模块和包</li></ul><blockquote><p><code>__all__=[]</code> 使用<code>*</code>导入时候只会导入all的[]中的的内容</p></blockquote><h2 id="结构化工程"><a href="#结构化工程" class="headerlink" title="结构化工程"></a>结构化工程</h2><p><a href="https://pythonguidecn.readthedocs.io/zh/latest/writing/structure.html">https://pythonguidecn.readthedocs.io/zh/latest/writing/structure.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python测试开发进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins(八)</title>
      <link href="article/f02e8a93.html"/>
      <url>article/f02e8a93.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-八"><a href="#Jenkins-八" class="headerlink" title="Jenkins(八)"></a>Jenkins(八)</h1><h2 id="参数化流水线"><a href="#参数化流水线" class="headerlink" title="参数化流水线"></a>参数化流水线</h2><p>Jenkins pipeline中定义参数使用<code>parameters</code>指令，只允许放在pipeline块下</p><p>在<a href="http://127.0.0.1:8080/directive-generator/%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90">http://127.0.0.1:8080/directive-generator/可以自动生成</a></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4za8sswsrj31b30u04lx.jpg" alt="生成"></p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameters {</span><br><span class="line">  booleanParam <span class="attr">defaultValue:</span> <span class="literal">false</span>, <span class="attr">description:</span> <span class="string">'布尔值参数'</span>, <span class="attr">name:</span> <span class="string">'FLAG'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>defaultValue:默认值</li><li>description:描述信息</li><li>name:参数名<span id="more"></span>使用方法：<code>${params.FLAG}</code></li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line">    parameters {</span><br><span class="line">        booleanParam(<span class="attr">defaultValue:</span> <span class="literal">true</span>,<span class="attr">description:</span> <span class="string">''</span>,<span class="attr">name:</span><span class="string">'userFlag'</span>)</span><br><span class="line">    }</span><br><span class="line">    stages {</span><br><span class="line">        stage(<span class="string">'foo'</span>){</span><br><span class="line">            steps {</span><br><span class="line">                echo <span class="string">"flag: ${params.userFlag}"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="支持的参数类型"><a href="#支持的参数类型" class="headerlink" title="支持的参数类型"></a>支持的参数类型</h3><ul><li>string</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameters {</span><br><span class="line">  string <span class="attr">defaultValue:</span> <span class="string">'none'</span>, <span class="attr">description:</span> <span class="string">'666'</span>, <span class="attr">name:</span> <span class="string">'D_ENV'</span>, <span class="attr">trim:</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4zahwame7j31ab0u0acc.jpg" alt="字符参数"></p><ul><li>text</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameters {</span><br><span class="line">  text <span class="attr">defaultValue:</span> <span class="string">'a\nb\nc\n'</span>, <span class="attr">description:</span> <span class="string">''</span>, <span class="attr">name:</span> <span class="string">'D_TEXT'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>booleanParam</li><li>choice</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameters {</span><br><span class="line">  choice <span class="attr">choices:</span> <span class="string">'a\nb\nc\n'</span>, <span class="attr">description:</span> <span class="string">''</span>, <span class="attr">name:</span> <span class="string">'D_CHOICE'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>file(有BUG不要用)</li><li>password</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameters {</span><br><span class="line">  password <span class="attr">name:</span> <span class="string">'a\nb\nc\n'</span>, <span class="attr">description:</span> <span class="string">''</span>, <span class="attr">name:</span> <span class="string">'D_CHOICE'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>综上：</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parameters {</span><br><span class="line">      string <span class="attr">defaultValue:</span> <span class="string">'none'</span>, <span class="attr">description:</span> <span class="string">'字符串'</span>, <span class="attr">name:</span> <span class="string">'D_ENV'</span>, <span class="attr">trim:</span> <span class="literal">true</span></span><br><span class="line">      text <span class="attr">defaultValue:</span> <span class="string">'a\nb\nc\n'</span>, <span class="attr">description:</span> <span class="string">'文本'</span>, <span class="attr">name:</span> <span class="string">'D_TEXT'</span></span><br><span class="line">      choice <span class="attr">choices:</span> <span class="string">'a\nb\nc\n'</span>, <span class="attr">description:</span> <span class="string">'选一个'</span>, <span class="attr">name:</span> <span class="string">'D_CHOICE'</span></span><br><span class="line">      booleanParam <span class="attr">defaultValue:</span> <span class="literal">false</span>, <span class="attr">description:</span> <span class="string">'布尔值参数'</span>, <span class="attr">name:</span> <span class="string">'FLAG'</span></span><br><span class="line">      password <span class="attr">name:</span> <span class="string">'PASSWORD'</span>,<span class="attr">defaultValue:</span><span class="string">'SECRET'</span>,<span class="attr">description:</span> <span class="string">'password'</span></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4zasqy6dsj31b30u0x17.jpg" alt="页面展示"></p><h3 id="Extended-Choice-Parameter"><a href="#Extended-Choice-Parameter" class="headerlink" title="Extended Choice Parameter"></a>Extended Choice Parameter</h3><p>一个实现复杂的参数化选择的插件</p><p><a href="https://wiki.jenkins.io/display/JENKINS/Extended+Choice+Parameter+plugin">https://wiki.jenkins.io/display/JENKINS/Extended+Choice+Parameter+plugin</a></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4zau9z755j31b30u0ql5.jpg" alt="插件安装"></p><p>使用官网的一个例子：</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.boon.Boon;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> jsonEditorOptions = Boon.fromJson(/{</span><br><span class="line">        <span class="symbol">disable_edit_json:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">disable_properties:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">no_additional_properties:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">disable_collapse:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">disable_array_add:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">disable_array_delete:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">disable_array_reorder:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">theme:</span> <span class="string">"bootstrap2"</span>,</span><br><span class="line">        <span class="symbol">iconlib:</span><span class="string">"fontawesome4"</span>,</span><br><span class="line">        <span class="symbol">schema:</span> {</span><br><span class="line">          <span class="string">"title"</span>: <span class="string">"Color Picker"</span>,</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">          <span class="string">"properties"</span>: {</span><br><span class="line">            <span class="string">"color"</span>: {</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="string">"format"</span>: <span class="string">"color"</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="symbol">startval:</span> {</span><br><span class="line">            <span class="attr">color :</span><span class="string">"red"</span></span><br><span class="line">        }</span><br><span class="line">}/);</span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4zb3bap9tj31bt0u0gt6.jpg" alt="颜色选择"></p><p>完整流水线</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">pipeline{</span><br><span class="line">   agent any</span><br><span class="line">   parameters {</span><br><span class="line">  extendedChoice <span class="attr">bindings:</span> <span class="string">''</span>, <span class="attr">description:</span> <span class="string">''</span>, <span class="attr">groovyClasspath:</span> <span class="string">''</span>, <span class="attr">groovyScript:</span> <span class="string">'''</span></span><br><span class="line"><span class="string">  import org.boon.Boon;</span></span><br><span class="line"><span class="string">   def jsonEditorOptions = Boon.fromJson(/{</span></span><br><span class="line"><span class="string">        disable_edit_json: true,</span></span><br><span class="line"><span class="string">        disable_properties: true,</span></span><br><span class="line"><span class="string">        no_additional_properties: true,</span></span><br><span class="line"><span class="string">        disable_collapse: true,</span></span><br><span class="line"><span class="string">        disable_array_add: true,</span></span><br><span class="line"><span class="string">        disable_array_delete: true,</span></span><br><span class="line"><span class="string">        disable_array_reorder: true,</span></span><br><span class="line"><span class="string">        theme: "bootstrap2",</span></span><br><span class="line"><span class="string">        iconlib:"fontawesome4",</span></span><br><span class="line"><span class="string">        schema: {</span></span><br><span class="line"><span class="string">          "title": "Color Picker",</span></span><br><span class="line"><span class="string">          "type": "object",</span></span><br><span class="line"><span class="string">          "properties": {</span></span><br><span class="line"><span class="string">            "color": {</span></span><br><span class="line"><span class="string">              "type": "string",</span></span><br><span class="line"><span class="string">              "format": "color"</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">          }</span></span><br><span class="line"><span class="string">        },</span></span><br><span class="line"><span class="string">        startval: {</span></span><br><span class="line"><span class="string">            color :"red"</span></span><br><span class="line"><span class="string">        }}/);</span></span><br><span class="line"><span class="string">   '''</span>, <span class="attr">multiSelectDelimiter:</span> <span class="string">','</span>, <span class="attr">name:</span> <span class="string">'Policy'</span>, <span class="attr">quoteValue:</span> <span class="literal">false</span>, <span class="attr">saveJSONParameterToFile:</span> <span class="literal">false</span>, <span class="attr">type:</span> <span class="string">'PT_JSON'</span>, <span class="attr">visibleItemCount:</span> <span class="number">5</span></span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   stages{</span><br><span class="line">      stage(<span class="string">'Example'</span>){</span><br><span class="line">         steps{</span><br><span class="line">            withPythonEnv(<span class="string">'/usr/bin/python'</span>){</span><br><span class="line">               sh <span class="string">'python -m pip install pytest '</span></span><br><span class="line">               sh <span class="string">'python -m pip install allure-pytest'</span></span><br><span class="line">               sh <span class="string">'python -m pytest -v test_allure.py --alluredir=allure-results'</span></span><br><span class="line">            }</span><br><span class="line">            exit <span class="number">0</span></span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">   post{</span><br><span class="line">      always{</span><br><span class="line">         allure <span class="attr">includeProperties:</span> <span class="literal">false</span>, <span class="attr">jdk:</span> <span class="string">''</span>, <span class="attr">results:</span> [[<span class="attr">path:</span> <span class="string">'allure-results'</span>]]</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以发现这段Groovy代码太长了，所以将它进行提取</p><h4 id="创建共享库"><a href="#创建共享库" class="headerlink" title="创建共享库"></a>创建共享库</h4><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4zb9hytpyj31b30u04in.jpg" alt="共享库"></p><p>新建一个<code>sayHello.groovy</code>文件</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> call() {</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"""</span></span><br><span class="line"><span class="string">  import org.boon.Boon;</span></span><br><span class="line"><span class="string">def jsonEditorOptions = Boon.fromJson(/{</span></span><br><span class="line"><span class="string">        disable_edit_json: true,</span></span><br><span class="line"><span class="string">        disable_properties: true,</span></span><br><span class="line"><span class="string">        no_additional_properties: true,</span></span><br><span class="line"><span class="string">        disable_collapse: true,</span></span><br><span class="line"><span class="string">        disable_array_add: true,</span></span><br><span class="line"><span class="string">        disable_array_delete: true,</span></span><br><span class="line"><span class="string">        disable_array_reorder: true,</span></span><br><span class="line"><span class="string">        theme: "bootstrap2",</span></span><br><span class="line"><span class="string">        iconlib:"fontawesome4",</span></span><br><span class="line"><span class="string">        schema: {</span></span><br><span class="line"><span class="string">          "title": "Color Picker",</span></span><br><span class="line"><span class="string">          "type": "object",</span></span><br><span class="line"><span class="string">          "properties": {</span></span><br><span class="line"><span class="string">            "color": {</span></span><br><span class="line"><span class="string">              "type": "string",</span></span><br><span class="line"><span class="string">              "format": "color"</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">          }</span></span><br><span class="line"><span class="string">        },</span></span><br><span class="line"><span class="string">        startval: {</span></span><br><span class="line"><span class="string">            color :"red"</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">}/);</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用共享库"><a href="#使用共享库" class="headerlink" title="使用共享库"></a>使用共享库</h4><p>修改Jenkinsfile为：</p><p>导包<code>@Library('extended-library') _</code></p><p>引用：<code>sayHello()</code></p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Library</span>(<span class="string">'extended-library'</span>) _</span><br><span class="line">pipeline {</span><br><span class="line">   agent any</span><br><span class="line">   parameters {</span><br><span class="line">      extendedChoice <span class="attr">bindings:</span> <span class="string">''</span>, <span class="attr">description:</span> <span class="string">''</span>, <span class="attr">groovyClasspath:</span> <span class="string">''</span>, <span class="attr">groovyScript:</span> sayHello(), <span class="attr">multiSelectDelimiter:</span> <span class="string">','</span>, <span class="attr">name:</span> <span class="string">'Policy'</span>, <span class="attr">quoteValue:</span> <span class="literal">false</span>, <span class="attr">saveJSONParameterToFile:</span> <span class="literal">false</span>, <span class="attr">type:</span> <span class="string">'PT_JSON'</span>, <span class="attr">visibleItemCount:</span> <span class="number">5</span></span><br><span class="line">   }</span><br><span class="line">   stages {</span><br><span class="line">      stage(<span class="string">'build'</span>) {</span><br><span class="line">         steps{</span><br><span class="line">            echo <span class="string">"Hello"</span></span><br><span class="line">            }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4zbr8pv66j30hu0vpjua.jpg" alt="文件结构"></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4zbruhi3pj31b30u07q9.jpg" alt="修改"></p><p>点一下<code> In-Process Script Approval</code>再点一下<code>Approve</code></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4zbsf6ykxj31b30u0kfw.jpg" alt="应用"></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4zbt6396sj31k50u04bw.jpg" alt="查看"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>到此Jenkins as code的常用部分都简单过了一遍</p><p>下面推荐一些插件</p><ul><li>凭证管理：HashiCorp Vault</li><li>制品管理-版本号管理：Version Number</li><li>可视化构建：Build Monitor View</li><li>自动化部署：Ansible</li><li>通知：Email Extension，集成钉钉机器人，HTTP Request</li><li>Jenkins备份：Periodic Backup</li></ul>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins(七)</title>
      <link href="article/397c359f.html"/>
      <url>article/397c359f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-七"><a href="#Jenkins-七" class="headerlink" title="Jenkins(七)"></a>Jenkins(七)</h1><p>触发流水线执行可以分为：</p><ul><li>时间触发</li><li>事件触发</li></ul><h2 id="时间触发"><a href="#时间触发" class="headerlink" title="时间触发"></a>时间触发</h2><p>定义一个时间，时间到了就触发pipeline。</p><p>在Jenkins pipeline中使用<code>trigger</code>指令来定义时间触发</p><span id="more"></span><h3 id="定时执行：cron"><a href="#定时执行：cron" class="headerlink" title="定时执行：cron"></a>定时执行：cron</h3><blockquote><p>Jenkins trigger cron语法采用UNIX cron语法。一条cron包含五个字段，使用空格分隔。</p></blockquote><p>格式：MINUTE HOUR DOM MONTH DOW</p><ul><li>MINUTE：分钟 0～59</li><li>HOUR：小时 0～23</li><li>DOM：一个月中的某天 1～31</li><li>MONTH：月份 1～12</li><li>DOW：星期几 0～7，0和7代表星期天</li></ul><p>使用特殊字符，指定多个值</p><ul><li><code>*</code>：匹配所有值</li><li><code>M-N</code>：匹配M-N之间的值</li><li><code>M-N|X</code> or <code>*|x</code>：指定M到N以X为步长的值</li><li><code>A，B，C……Z</code>：多个值</li></ul><blockquote><p>为了解决在同一时刻执行定时任务可能出现的负载不均衡问题。在Jenkins trigger cron语法中使用<code>H</code>字符来解决这个问题。<code>H</code>代表hash</p><p><code>H 0 * * *</code> 代表在0点0分至0点59分任意一个时间点执行。</p></blockquote><p>几个例子：</p><ul><li><code>H/5 * * * *</code>:每隔5分钟构建一次</li><li><code>H H/2 * * *</code>:每两小时构建一次</li><li><code>0 12 * * *</code>:每天12点定时构建一次</li><li><code>H(0-29)/10 * * * *</code>:前半小时的每隔10分钟</li><li><code>45 9-16/2 * * 1-5</code>:周一到周五的9点45到16点45的每隔两个小时构建一次</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line">    triggers {</span><br><span class="line">        cron (<span class="string">'0 0 * * *'</span>)</span><br><span class="line">    }</span><br><span class="line">    stages {</span><br><span class="line">        stage (<span class="string">'Nightly build'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                echo <span class="string">'明天凌晨执行'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="轮询代码仓库：pollSCM"><a href="#轮询代码仓库：pollSCM" class="headerlink" title="轮询代码仓库：pollSCM"></a>轮询代码仓库：pollSCM</h3><p>定期到代码仓库询问代码是否有变化，如果代码仓库有变化，就执行</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line">    triggers {</span><br><span class="line">        pollSCM (<span class="string">'H/1 * * * *'</span>)</span><br><span class="line">    }</span><br><span class="line">    stages {</span><br><span class="line">        stage (<span class="string">'build'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                echo <span class="string">'轮询执行'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h2><ul><li>手动在界面上触发</li><li>其他job触发</li><li>HTTP API Webhook触发</li></ul><h3 id="由上游任务出发：upstream"><a href="#由上游任务出发：upstream" class="headerlink" title="由上游任务出发：upstream"></a>由上游任务出发：upstream</h3><p>当B任务的执行依赖A任务的执行结果，A就是B的上游任务。</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">triggers {</span><br><span class="line">   upstream(<span class="attr">upstreamProjects:</span> <span class="string">'job1,job2'</span>,<span class="attr">threshold:</span>hudson.model.Result.SUCCESS)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>job1和job2是任务名</li><li>threshold判断上游任务是什么状态的时候触发</li><li>hudson.model.Result包含了<code>ABORTED</code>，<code>FAILURE</code>，<code>SUCCESS</code>，<code>UNSTSBLE</code>，<code>NOT_BUILT</code></li></ul><p>其中它们分别表示：</p><ul><li>ABORTED：任务被手动中止</li><li>FAILURE：构建失败</li><li>SUCCESS：构建成功</li><li>UNSTSBLE：存在一些错误，但不至于构建失败</li><li>NOT_BUILT：在多阶段构建时，前面阶段的问题导致后面阶段无法执行</li></ul><h3 id="Gitlab通知触发"><a href="#Gitlab通知触发" class="headerlink" title="Gitlab通知触发"></a>Gitlab通知触发</h3><ol><li>安装Gitlab插件</li><li>安装git插件(应该已经安装了)</li></ol><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4yk5ci9coj31b30u0tv1.jpg" alt="image-20190713215959418"></p><ol start="3"><li>在Gitlab上创建一个项目</li></ol><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4ykcoj41jj31b30u07qd.jpg" alt="创建项目"></p><ol start="4"><li>将代码上库</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> http://123.56.13.233:9000/zhongxin/hello-world-pipeline.git</span></span><br><span class="line">正克隆到 'hello-world-pipeline'...</span><br><span class="line">warning: 您似乎克隆了一个空仓库。</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hello-world-pipeline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch 1.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add 1.py</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"add 1.py"</span></span></span><br><span class="line"></span><br><span class="line">[master（根提交） e815882] add 1.py</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 1.py</span><br><span class="line"> </span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br><span class="line">remote: You are not allowed to push code to this project.</span><br><span class="line">fatal: unable to access 'http://123.56.13.233:9000/zhongxin/hello-world-pipeline.git/': The requested URL returned error: 403</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br><span class="line">分支 'master' 设置为跟踪来自 'origin' 的远程分支 'master'。</span><br><span class="line">Everything up-to-date</span><br></pre></td></tr></tbody></table></figure><p>PS:如果遇到403问题请将<code>.git/config</code>中的url修改为：<code>https://用户名:密码@123.56.13.233:9000/zhongxin/hello-world-pipeline.git/</code></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4ykix7qfwj315c0u0qi5.jpg" alt="代码上库"></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4ykm7m2ifj31b30u0atp.jpg" alt="查看"></p><p>再同之前GitHub一样，添加一个凭证</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4ykn87embj31b30u0dxl.jpg" alt="添加凭证"></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4ykq0k8kjj31b30u01cf.jpg" alt="触发器"></p><p>为了保障安全，需要生成一个<code>Secret toekn</code></p><p><code>c342352fc4cf45e01c0f783a7fdf38b7</code>就是一个<code>Secret toekn</code></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4ykrgu6etj31b30u0dzd.jpg" alt="生成Secret toekn"></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4ykt1kwxkj31b30u0ax5.jpg" alt="配置Gitlab"></p><p>额，到这里遇到一个比较尴尬的问题。我的gitlab服务器在公网，Jenkins服务器在局域网内</p><p>如果，如果成功了的话就可以在下方<code>Project services</code>处看到新增的<code>Webhooks</code></p><h4 id="Jenkinsfile中编写Gitlab-trigger"><a href="#Jenkinsfile中编写Gitlab-trigger" class="headerlink" title="Jenkinsfile中编写Gitlab trigger"></a>Jenkinsfile中编写Gitlab trigger</h4><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line">    triggers {</span><br><span class="line">        gitlab(<span class="attr">triggerOnPush:</span> <span class="literal">true</span>, </span><br><span class="line">               <span class="symbol">triggerOnMergeRequest:</span> <span class="literal">true</span>,</span><br><span class="line">               <span class="symbol">branchFilterType:</span> <span class="string">'All'</span>,</span><br><span class="line">               <span class="symbol">secretToken:</span> <span class="string">'c342352fc4cf45e01c0f783a7fdf38b7'</span>)</span><br><span class="line">    }</span><br><span class="line">    stages {</span><br><span class="line">        stage(<span class="string">'build'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                echo <span class="string">"Hello wolrd"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>triggerOnPush：当Gitlab触发push事件，是否执行构建</li><li>triggerOnMergeRequest：当Gitlab触发mergeRequest事件时，是否执行构建</li><li>branchFilterType：只有符合条件的分支才会触发，<strong>必选</strong></li></ul><h3 id="将构建信息推送到GitLab"><a href="#将构建信息推送到GitLab" class="headerlink" title="将构建信息推送到GitLab"></a>将构建信息推送到GitLab</h3><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4yl5l5fsrj31b30u0qqq.jpg" alt="创建API token"></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4yl5wnwi7j31b30u0wwm.jpg" alt="添加凭证"></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4yl6fqi69j31b30u01ch.jpg" alt="设置"></p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line">    triggers {</span><br><span class="line">        gitlab(<span class="attr">triggerOnPush:</span> <span class="literal">true</span>,</span><br><span class="line">               <span class="symbol">triggerOnMergeRequest:</span> <span class="literal">true</span>,</span><br><span class="line">               <span class="symbol">branchFilterType:</span> <span class="string">'All'</span>,</span><br><span class="line">               <span class="symbol">secretToken:</span> <span class="string">'c342352fc4cf45e01c0f783a7fdf38b7'</span>)</span><br><span class="line">    }</span><br><span class="line">    stages {</span><br><span class="line">        stage(<span class="string">'build'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                echo <span class="string">"Hello wolrd"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    post {</span><br><span class="line">        failure {</span><br><span class="line">            updateGitlabCommitStatus <span class="attr">name:</span><span class="string">'build'</span>,<span class="attr">state:</span><span class="string">'failed'</span></span><br><span class="line">        }</span><br><span class="line">        success {</span><br><span class="line">            updateGitlabCommitStatus <span class="attr">name:</span><span class="string">'build'</span>,<span class="attr">state:</span><span class="string">'success'</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    options {</span><br><span class="line">        gitLabConnecton(<span class="string">'gitlab'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="其他系统触发Webhook"><a href="#其他系统触发Webhook" class="headerlink" title="其他系统触发Webhook"></a>其他系统触发Webhook</h3><p>使用<code>Generic Webhook Trigger</code>插件，具体内容不展开</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins(六)</title>
      <link href="article/a6742d15.html"/>
      <url>article/a6742d15.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-六"><a href="#Jenkins-六" class="headerlink" title="Jenkins(六)"></a>Jenkins(六)</h1><h2 id="Python隔离环境搭建"><a href="#Python隔离环境搭建" class="headerlink" title="Python隔离环境搭建"></a>Python隔离环境搭建</h2><ol><li>安装Pyenv Pipeline插件</li><li>在Jenkins机器上安装python，pip，virtualenv</li></ol><p>⚠️由于使用虚拟环境搭建，所以没有第三方的库，如果需要使用请使用pip来进行安装</p><span id="more"></span><blockquote><p>导出现在环境的第三方库</p><p>pip freeze &gt; 「xxxx.txt」</p><p>批量安装第三方库：</p><p>pip install -r 「xxxx.txt」</p></blockquote><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4y9bsdmxbj31l20u0nc6.jpg" alt="第三方库"></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4y64ggh6gj31b30u0ne7.jpg" alt="插件安装"></p><p>在流水线中使用Pyenv Pipeline插件提供的<code>withPythonEnv</code>方法</p><p>小括号内为可执行python路径。流水线会在当前工作空间下创建一个virtualenv环境</p><p>大括号内的内容就执行在新建的virtualenv环境下</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4y76gf0ojj315c0u011k.jpg" alt="python3路径"></p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">withPythonEnv(<span class="string">'/usr/lib/python3'</span>){</span><br><span class="line">   sh <span class="string">'python --version'</span> <span class="comment">//查看python版本</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Allure报告"><a href="#Allure报告" class="headerlink" title="Allure报告"></a>Allure报告</h2><ol><li>安装Allure Jenkins插件</li><li>配置Allure自动安装</li><li>编写pytest脚本</li><li>执行</li><li>查看结果</li></ol><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4y6lzj4hmj31b30u0wv9.jpg" alt="安装插件"></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4y6uodklzj31b30u0h3c.jpg" alt="image-20190713142000087"></p><p>使用片段生成器辅助步骤的生成</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4y6wjr85cj31b30u04ji.jpg" alt="自动生成"></p><p>下面是流水线部分</p><p>由于只编写了简单的测试脚本，所以只需要安装<code>pytest</code>和<code>allure-pytest</code>两个第三方库就可以了</p><p>最后使用post-always来进行allure报告的展示</p><p>报告的链接图标会展示在该任务中</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pipeline{</span><br><span class="line">   agent any</span><br><span class="line">   stages{</span><br><span class="line">      stage(<span class="string">'Example'</span>){</span><br><span class="line">         steps{</span><br><span class="line">            withPythonEnv(<span class="string">'/usr/bin/python'</span>){</span><br><span class="line">               sh <span class="string">'python -m pip install pytest '</span></span><br><span class="line">               sh <span class="string">'python -m pip install allure-pytest'</span></span><br><span class="line">               sh <span class="string">'python -m pytest -v test_allure.py --alluredir=allure-results'</span></span><br><span class="line">            }</span><br><span class="line">            exit <span class="number">0</span></span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">   post{</span><br><span class="line">      always{</span><br><span class="line">         allure <span class="attr">includeProperties:</span> <span class="literal">false</span>, <span class="attr">jdk:</span> <span class="string">''</span>, <span class="attr">results:</span> [[<span class="attr">path:</span> <span class="string">'allure-results'</span>]]</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>pytest脚本：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_success</span>():</span></span><br><span class="line">    <span class="string">"""this test succeeds"""</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_failure</span>():</span></span><br><span class="line">    <span class="string">"""this test fails"""</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_skip</span>():</span></span><br><span class="line">    <span class="string">"""this test is skipped"""</span></span><br><span class="line">    pytest.skip(<span class="string">'for a reason!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_broken</span>():</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'oops'</span>)</span><br></pre></td></tr></tbody></table></figure><p>虚拟环境中正在安装第三方库</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4y90n6cjyj31b30u04qp.jpg" alt="环境部分"></p><p>使用pytest进行测试，并输出报告至allure-results</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4y924tqp9j31b30u07ql.jpg" alt="测试部分"></p><p>报告的链接图标⬇️⬇️⬇️</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4y92v9h80j31b30u04q1.jpg" alt="测试结果"></p><p>具体的报告⬇️</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4y9303nx4j31b30u0k99.jpg" alt="Allure报告"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>综上，</p><p>在执行的设备上搭建了python，pip，virtualenv环境</p><p>在Jenkins上配置了自动安装Allure</p><p>完成了<strong>环境隔离</strong>，<strong>测试执行</strong>，<strong>报告展示</strong></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins(五)</title>
      <link href="article/3f7b6567.html"/>
      <url>article/3f7b6567.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-五"><a href="#Jenkins-五" class="headerlink" title="Jenkins(五)"></a>Jenkins(五)</h1><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>环境变量可以分为：</p><ul><li>Jenkins内置变量</li><li>自定义变量</li></ul><h3 id="Jenkins内置变量"><a href="#Jenkins内置变量" class="headerlink" title="Jenkins内置变量"></a>Jenkins内置变量</h3><blockquote><p>Jenkins通过一个名为<code>env</code>的全局变量，将Jenkins内置环境变量暴露出来</p></blockquote><ul><li><code>${env.BUILD_NUMBER}$</code></li><li><code>$env.BUILD_NUMBER$</code></li><li><code>$BUILD_NUMBER$</code>，不推荐使用</li></ul><p>查看全局变量：http://「Jenkins服务器地址」:「端口」/pipeline-syntax/globals</p><p>例如：<a href="http://127.0.0.1:8080/pipeline-syntax/globals">http://127.0.0.1:8080/pipeline-syntax/globals</a></p><span id="more"></span><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4y4lco77vj31b30u0hbn.jpg" alt="全局变量"></p><p>几个常用的变量</p><ul><li><strong>BUILD_NUMBER</strong>：构建号</li><li><strong>BUILD_URL</strong>：构建页面URL</li></ul><blockquote><p>使用sh ‘printenv’可以打印env变量的属性值</p></blockquote><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pipeline{</span><br><span class="line">   agent any</span><br><span class="line">   stages{</span><br><span class="line">      stage(<span class="string">'Example'</span>){</span><br><span class="line">         steps{</span><br><span class="line">            script{</span><br><span class="line">               sh <span class="string">'printenv'</span></span><br><span class="line">            }</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4y4pvuborj31b30u0qtz.jpg" alt="printenv"></p><h3 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h3><p>定义两个环境变量<code>CC = 'clang'</code>,<code>DEBUG_FLAGS = '-g'</code></p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pipeline{</span><br><span class="line">   agent any</span><br><span class="line">   environment {</span><br><span class="line">      CC = <span class="string">'clang'</span></span><br><span class="line">   }</span><br><span class="line">   stages{</span><br><span class="line">      stage(<span class="string">'Example'</span>){</span><br><span class="line">         environment {</span><br><span class="line">            DEBUG_FLAGS = <span class="string">'-g'</span></span><br><span class="line">         }</span><br><span class="line">         steps{</span><br><span class="line">            script{</span><br><span class="line">               sh <span class="string">"${CC} ${DEBUG_FLAGS}"</span></span><br><span class="line">               sh <span class="string">"printenv"</span></span><br><span class="line">            }</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4y4tusvwbj31b30u0e27.jpg" alt="自定义环境变量"></p><p>⚠️<code>environment</code>在pipeline中定义，<strong>作用域</strong>为整个pipeline，在stage中定义，<strong>作用域</strong>只在该阶段</p><p>为了避免命名冲突，建议在自定义变量前增加特别的前缀，例如<code>「公司名」_BUILD_NUMBER</code></p><h3 id="自定义全局变量"><a href="#自定义全局变量" class="headerlink" title="自定义全局变量"></a>自定义全局变量</h3><p>进入Mange Jenkins -&gt; Configute System（系统设置）-&gt; Global properties（全局属性）</p><p>☑️勾选Enbironment variables（环境变量）复选框</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4y4yax8m1j31b30u07vu.jpg" alt="系统设置"></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4y4xvwajaj31b30u0x05.jpg" alt="设置自定义全局变量"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>通过一个简单的echo来查看自定义环境变量是否生效</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pipeline{</span><br><span class="line">   agent any</span><br><span class="line">   stages{</span><br><span class="line">      stage(<span class="string">'Example'</span>){</span><br><span class="line">         steps{</span><br><span class="line">            script{</span><br><span class="line">               echo <span class="string">"${env.g_name}"</span></span><br><span class="line">            }</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从图中可以看到，输出的内容为刚定义的内容</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4y50rh0scj31b30u0e4q.jpg" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins(四)</title>
      <link href="article/39d0321a.html"/>
      <url>article/39d0321a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-四"><a href="#Jenkins-四" class="headerlink" title="Jenkins(四)"></a>Jenkins(四)</h1><h2 id="文件目录相关操作"><a href="#文件目录相关操作" class="headerlink" title="文件目录相关操作"></a>文件目录相关操作</h2><ul><li><p>deleteDir：删除当前目录</p></li><li><p>dir：切换到目录</p><ul><li>默认流水线工作在工作空间目录下，dir步骤可以让我们切换到其他目录</li></ul> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir(<span class="string">'/tmp'</span>){</span><br><span class="line">   deleteDir()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>fileExists：判断文件是否存在，结果返回布尔值</p></li><li><p>isUnix：判断是非为UNIX系统，如果是则返回true</p></li><li><p>pwd：返回当前所在目录</p></li><li><p>有一个布尔类型的可选参数tmp，如果为true，则返回与当前工作空间关联的临时目录</p></li><li><p>writeFile：将内容写入指定文件中</p><ul><li>file：文件路径，可以是<strong>绝对路径</strong>，也可以是<strong>相对路径</strong></li><li>text：要写入的文件内容</li><li>encoding：目标文件的编码。如果为空，则使用操作系统默认的编码</li></ul></li><li><p>readFile：读取文件</p><ul><li>file：路径，同上</li><li>encoding：编码，同上<span id="more"></span><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script{</span><br><span class="line">   writeFile(<span class="attr">file:</span><span class="string">"base64File"</span>, <span class="attr">text:</span><span class="string">"amVua2lucyBib29r"</span>, <span class="attr">encoding:</span><span class="string">"Base64"</span>)</span><br><span class="line">   <span class="keyword">def</span> content = readFile(<span class="attr">file:</span><span class="string">"base64File"</span>, <span class="attr">encoding:</span> <span class="string">"UTF-8"</span>)</span><br><span class="line">   echo <span class="string">"${content}"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4xe2h9q20j31b30u0198.jpg" alt="修改Jenkinsfile"></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4xe358bcnj31b30u0x39.jpg" alt="执行结果"></p><p><code>amVua2lucyBib29r</code>是<code>jenkins book</code>的Base64编码</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4xeexaqjvj316y0u0guv.jpg" alt="转码"></p><h2 id="制品相关步骤"><a href="#制品相关步骤" class="headerlink" title="制品相关步骤"></a>制品相关步骤</h2><ul><li><p>stash：保存临时文件</p><blockquote><p>将文件保存起来，以便同一次构建的其他步骤或阶段使用。</p><p>如果整个流水线在同一台机器上执行，那stash是多余的，一般用于跨Jenkins node使用。</p><p>stash步骤会将文件存储在tar文件中，对于大文件的stash操作会消耗Jenkins master的计算资源。</p></blockquote><ul><li><p>name：字符串类型，保存文件的集合的唯一标识</p></li><li><p>allowEmpty：布尔类型，允许stash内容为空</p></li><li><p>excludes：字符串类型，排除文件，如果排除多个使用「逗号」分隔</p></li><li><p>includes：字符串类型，stash文件，留空表示全部</p></li><li><p>useDefaultExcludes：布尔类型，true：使用Ant风格路径默认排除文件</p><p> Ant风格</p><table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td><code>?</code></td><td>匹配任何单字符</td></tr><tr><td><code>*</code></td><td>匹配0或者任意数量的字符</td></tr><tr><td><code>**</code></td><td>匹配0或者更多的目录</td></tr><tr><td></td><td></td></tr><tr><td>URL路径</td><td>说明</td></tr><tr><td>————————</td><td>————————————————————</td></tr><tr><td>/project/<code>*</code>.a</td><td>匹配<strong>项目根路径</strong>下所有在project路径下的.a文件</td></tr><tr><td>/project/p<code>?</code>ttern</td><td>匹配<strong>项目根路径</strong>下 /project/pattern 和 /app/pXttern等,但是不包括/app/pttern</td></tr><tr><td>/<code>**</code>/example</td><td>匹配项目根路径下 /project/example, /project/foow/example, 和 /example等</td></tr><tr><td>/app／<code>**</code>／dir/file.<code>*</code></td><td>匹配(Matches) /app/dir/file.jsp, /app/foo/dir/file.html,/app/foo/bar/dir/file.pdf, 和 /app/dir/file.java等</td></tr><tr><td>/<code>**</code>/<code>*</code>.jsp</td><td>匹配(Matches)任何的.jsp 文件</td></tr><tr><td></td><td></td></tr><tr><td>最长匹配原则：</td><td></td></tr><tr><td>/project/dir/file.jsp，现在存在两个路径匹配模式<code>/**/*.jsp</code>和<code>/project/dir/*.jsp</code>，那么会根据模式<code>/project/dir/*.jsp</code>来匹配</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></li></ul></li><li><p>unstash：取出之前stash的文件</p> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent none</span><br><span class="line">    stages {</span><br><span class="line">        stage(<span class="string">'stash'</span>) {</span><br><span class="line">            agent {label <span class="string">"master"</span>}</span><br><span class="line">            steps {</span><br><span class="line">                writeFile <span class="attr">file:</span> <span class="string">"a.txt"</span>,<span class="attr">text:</span> <span class="string">"$BUILD_NUMBER"</span></span><br><span class="line">                stash(<span class="attr">name:</span> <span class="string">"abc"</span>, <span class="attr">includes:</span> <span class="string">"a.txt"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'unstash'</span>) {</span><br><span class="line">            agent {label <span class="string">"node2"</span>}</span><br><span class="line">            steps {</span><br><span class="line">                script {</span><br><span class="line">                    unstash(<span class="string">"abc"</span>)</span><br><span class="line">                    <span class="keyword">def</span> content = readFile(<span class="string">"a.txt"</span>)</span><br><span class="line">                    echo <span class="string">"${content}"</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="命令相关"><a href="#命令相关" class="headerlink" title="命令相关"></a>命令相关</h2><ul><li><p>sh：执行shell命令</p><ul><li><p>script：要执行的shell脚本</p></li><li><p>encoding：脚本执行后输出日志的编码，默认为系统编码</p></li><li><p>returnStatus：布尔类型，默认返回状态码，如果是非零则流水线执行失败。设置为true后，无论什么状态码，流水线执行都不受影响</p></li><li><p>returnStdout：布尔类型，如果为true，任务的标准输出将作为步骤的返回值，而不是打印到构建日志中（如果有错误，则依旧会打印到日志中）</p><p> ⚠️returnStatus和returnStdout同时使用，只有returnStatus生效</p></li></ul></li><li><p>bat，powershell步骤</p><ul><li>bat步骤执行Windows的批处理命令<ul><li>支持参数类型sh</li></ul></li><li>powershell执行的是PowerShell脚本<ul><li>支持参数类似sh<h2 id="其他步骤"><a href="#其他步骤" class="headerlink" title="其他步骤"></a>其他步骤</h2></li></ul></li></ul></li><li><p>error：主动报错，中止pipeline</p><ul><li><code>error（“there is a error”）</code></li></ul></li><li><p>tool：使用预定义的工具</p><ul><li><p>name：工具名称</p></li><li><p>type（可选）：工具类型，指该工具安装类的全路径类名</p></li><li><blockquote><p>在Global Tool Configuration（全局工具配置）中配置了工具</p></blockquote><p> <img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4xf6mbx9aj31b30u0ng8.jpg" alt="全局工具配置"></p><p> <img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4xf7jgw0sj31b30u04ko.jpg" alt="image-20190712222337303"></p></li></ul></li><li><p>timeout：代码块超时时间</p><ul><li>time：整型</li><li>unit（可选）：时间单位，默认分钟。支持NANOSECONDS，MICROSECONDS，MILLISECONDS，SECONDS，MINUTES（默认），HOURS，DAYS</li><li>activity（可选）：布尔类型，true时 只有当日志没活动才算真正的超时</li></ul></li><li><p>waitUntil：等待条件满足</p> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">timeout(<span class="number">50</span>) {</span><br><span class="line">   waitUntil{</span><br><span class="line">      script{</span><br><span class="line">         <span class="keyword">def</span> r = sh <span class="attr">script:</span> <span class="string">'curl http://exmple'</span>,<span class="keyword">return</span> <span class="attr">Status:</span> <span class="literal">true</span></span><br><span class="line">         <span class="keyword">return</span> (r == <span class="number">0</span>)</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>retry：重复执行块</p> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">steps {</span><br><span class="line">   retry(<span class="number">20</span>){</span><br><span class="line">      script{</span><br><span class="line">         sh <span class="attr">script:</span> <span class="string">'curl http://exmple'</span>,<span class="keyword">return</span> <span class="attr">Status:</span> <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> ⚠️如果某次retry抛出异常，只中止当次，不会中止整个retry的执行</p><p> 在执行retry的过程中，用户是无法中止流水线的</p></li><li><p>sleep：休眠一段时间</p><ul><li>time：整型，休眠时间</li><li>unit（可选）：时间单位，默认秒，与<code>timeout</code>类似</li><li>示例：<code>sleep(120) // 休眠120秒</code>，<code>sleep(time:'2',unit:"MINUTES") // 休眠2分钟</code></li></ul></li></ul><h2 id="编写Jenkinsfile"><a href="#编写Jenkinsfile" class="headerlink" title="编写Jenkinsfile"></a>编写Jenkinsfile</h2><p>推荐VS Code扩展：Jenkins Pipeline Linter Connector</p><ol><li>安装</li><li>配置扩展</li><li>配置Jenkins服务器</li><li>运行</li></ol><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4xfj21nutj31b30u01kx.jpg" alt="Jenkins Pipeline Linter Connector"></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4xfprw0i6j31b30u01d9.jpg" alt="配置插件"></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4xfrmvf8sj31b30u01c6.jpg" alt="配置CSRF"></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4xftycsoqj31b30u0h3t.jpg" alt="运行校验"></p><p>故意写错了进行校验：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4xfumk069j31b30u04gv.jpg" alt="错误进行校验"></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Errors encountered validating Jenkinsfile:</span><br><span class="line">WorkflowScript: 14: unexpected token: } @ line 14, column 1.</span><br><span class="line">   }</span><br><span class="line">   ^</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins(三)</title>
      <link href="article/c393dd15.html"/>
      <url>article/c393dd15.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-三"><a href="#Jenkins-三" class="headerlink" title="Jenkins(三)"></a>Jenkins(三)</h1><h2 id="pipeline语法"><a href="#pipeline语法" class="headerlink" title="pipeline语法"></a>pipeline语法</h2><p>pipeline语法可以分为</p><ul><li><p>「声明式流水线」</p></li><li><p>「脚本化流水线」</p></li></ul><p>但是由于脚本化流水线需要学习Groovy，所以我放弃了。</p><p>虽然放弃了通篇学习一整门语言，但是为了在声明式流水线中使用简单的逻辑操作还是需要学习一点Groovy的基础内容。</p><span id="more"></span><h3 id="基础Groovy"><a href="#基础Groovy" class="headerlink" title="基础Groovy"></a>基础Groovy</h3><ul><li>定义变量</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> x = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">def</span> y = <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Groovy语句最后的分号不是必须的</li><li>方法调用可以参略括号</li><li>支持命名参数</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> func(String a, String b){</span><br><span class="line">   <span class="keyword">return</span> a + <span class="string">" "</span> + b</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">func b = <span class="string">"Lee"</span>, a = <span class="string">"Bruce"</span></span><br></pre></td></tr></tbody></table></figure><ul><li>支持默认参数值</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> sayHello(String name = <span class="string">"humans"</span>){</span><br><span class="line">   print <span class="string">"hello ${name}"</span></span><br><span class="line">}</span><br><span class="line">sayHello()</span><br></pre></td></tr></tbody></table></figure><ul><li>支持单引号，双引号<ul><li>双引号<strong>支持插值</strong></li><li>单引号<strong>不支持插值</strong></li></ul></li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> name = <span class="string">'world'</span></span><br><span class="line">print <span class="string">"hello ${name}"</span> <span class="comment">//输出：hello world</span></span><br><span class="line">print <span class="string">'hello ${name}'</span> <span class="comment">//输出：hello ${name}</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>支持三引号</p><ul><li>三双引号<strong>支持插值</strong></li><li>三单引号<strong>不支持插值</strong></li></ul></li><li><p>支持闭包</p></li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> func = {print <span class="string">"hello world"</span>} <span class="comment">//定义闭包</span></span><br><span class="line">func() <span class="comment">//调用闭包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个接收闭包参数的pipeline函数</span></span><br><span class="line"><span class="keyword">def</span> pipeline(a){</span><br><span class="line">   a()</span><br><span class="line">}</span><br><span class="line">pipeline(func) <span class="comment">// 调用pipeline</span></span><br><span class="line"><span class="comment">// 把func直接写入⬇️</span></span><br><span class="line">pipeline({print <span class="string">"hello world"</span>})</span><br><span class="line"><span class="comment">// 括号可以省略⬇️</span></span><br><span class="line">pipeline{print <span class="string">"hello world"</span>} </span><br></pre></td></tr></tbody></table></figure><ul><li>闭包的另类用法</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> stage(String name, a){</span><br><span class="line">   println name <span class="comment">//输出字符串name</span></span><br><span class="line">   a() <span class="comment">//调用闭包函数a</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 正常使用stage函数⬇️</span></span><br><span class="line">stage(<span class="string">"stage name"</span>,{print <span class="string">"hello world"</span>})</span><br><span class="line"><span class="comment">// Groovy提供的另一种使用stage函数的方法⬇️</span></span><br><span class="line">stage(<span class="string">"stage name"</span>){</span><br><span class="line">   print <span class="string">"hello world"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="pipeline的组成"><a href="#pipeline的组成" class="headerlink" title="pipeline的组成"></a>pipeline的组成</h3><blockquote><p>Jenkins pipeline其实就是基于Groovy语言实现的一种DSL(领域特定语言)，用于描述整条流水线上如何进行的。</p><p>流水线的内容包括：执行编译，打包，测试，输出测试报告等。</p></blockquote><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">   agent any</span><br><span class="line">   stages {</span><br><span class="line">      stage(<span class="string">'build'</span>){</span><br><span class="line">         steps{</span><br><span class="line">            echo <span class="string">"hello world"</span></span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>pipeline:整条流水线</li><li>stages:流水线可以有多个stages，每个stages至少包含一个stage</li><li>stage:阶段，每个阶段都必须有名称，例如<code>build</code></li><li>steps:具体步骤，ech就是一个步骤。<strong>在一个stage中有且只有一个steps</strong></li><li>agent:执行位置，在某个（物理机，虚拟机，Docker）环境中执行</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>类似于<code>echo</code>,<code>sh</code>等步骤，Jenkins有很多插件可以通过一定的修改来当作步骤使用</p><p><strong>适配Jenkins pipeline的插件列表：</strong></p><p><a href="https://github.com/jenkinsci/pipeline-plugin/blob/master/COMPATIBILITY.md">https://github.com/jenkinsci/pipeline-plugin/blob/master/COMPATIBILITY.md</a></p><p>通过「流水线语法」可以可视化的进行插件步骤的编辑与生成，降低学习成本。</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4wbpgql3oj31b30u04nn.jpg" alt="流水线语法自动生成1"><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4wbq34a98j31b30u0x1n.jpg" alt="流水线语法自动生成2"></p><h4 id="post部分"><a href="#post部分" class="headerlink" title="post部分"></a>post部分</h4><p>在pipeline执行之后会执行post部分</p><p>根据pipeline的完成状态，post可以分成不同的条件块</p><ul><li>always：完成后就执行</li><li>changed：完成状态与上一次不一致执行</li><li>fixed：失败或不稳定执行</li><li>regression：上一次成功，这一次失败/不稳定/中止（aborted）时执行</li><li>aborted：中止（aborted）时执行</li><li>failure：失败时执行</li><li>success：成功时执行</li><li>unstable：不稳定时执行</li><li>cleanup：清理条件块。无论完成状态是什么</li></ul><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pipeline{</span><br><span class="line">   agent any</span><br><span class="line">   stages{</span><br><span class="line">      stage(<span class="string">'build'</span>){</span><br><span class="line">         steps{</span><br><span class="line">            echo <span class="string">"build stage"</span></span><br><span class="line">         }</span><br><span class="line">         post{</span><br><span class="line">            always{</span><br><span class="line">               echo <span class="string">"stage post alwasy"</span></span><br><span class="line">            }</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">   post{</span><br><span class="line">      changed{</span><br><span class="line">         echo <span class="string">"pipeline post changed"</span></span><br><span class="line">      }</span><br><span class="line">      always{</span><br><span class="line">         echo <span class="string">"pipeline post alwasy"</span></span><br><span class="line">      }</span><br><span class="line">      success{</span><br><span class="line">         echo <span class="string">"pipeline post success"</span></span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="支持的命令"><a href="#支持的命令" class="headerlink" title="支持的命令"></a>支持的命令</h4><ul><li><p>Environment：用于设置环境变量，可定义在stage或pipeline部分</p></li><li><p>tools：自动下载安装指定的工具，并将其加入PATH变量中，可定义在stage或pipeline部分</p></li><li><p>input：暂停pipeline，提示输入内容，定义在stage部分</p></li><li><p>options：配置Jenkins pipeline本身的选项，可以定义在stage或pipeline中。</p><ul><li>buildDiscarder：保存历史构建数</li></ul> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options{</span><br><span class="line">   buildDiscarder(logRotator(<span class="attr">numToKeepStr:</span><span class="number">10</span>))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>disableConcurrentBuilds：禁止同时执行</li></ul> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options{</span><br><span class="line">   disableConcurrentBuilds()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>overrideIndexTriggers</li><li>skipDefaultCheckout</li><li>skipStagesAfterUnstable</li><li>checkoutToSubdirectory：指定代码检出路径</li></ul> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options{</span><br><span class="line">   checkoutToSubdirectory(<span class="string">'subdir'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>newContainerPerStage：当agent为docker或dockerfile时，指定在同一个Jenkins节点上，每个stage分别运行在一个新的Docker容器中，而不是所有stage都运行在一个容器中。</li></ul> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options{</span><br><span class="line">   newContainerPerStage()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>timeout：运行的超时时间</li></ul> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options{</span><br><span class="line">   timeout(<span class="attr">time:</span><span class="number">10</span>,<span class="attr">unit:</span><span class="string">'HOURS'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>retry：在失败时，重新尝试整个管道的指定次数</li></ul> <figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options{</span><br><span class="line">   retry(<span class="number">4</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>timestamps：显示运行时候的时间</li></ul></li><li><p>parallel：并行执行多个step</p></li><li><p>parameters：参数化构建部分</p></li><li><p>triggers：触发器（定时/钩子）</p></li><li><p>when：当满足条件时才执行</p></li></ul><p>没有例子的直接百度咯，仿照着写多测测就行了。</p><h3 id="在声明式流水线中使用脚本"><a href="#在声明式流水线中使用脚本" class="headerlink" title="在声明式流水线中使用脚本"></a>在声明式流水线中使用脚本</h3><p>在一些不得不用代码的地方使用<code>script</code>就可以写Groovy代码了</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pipeline{</span><br><span class="line">   agent any</span><br><span class="line">   stages{</span><br><span class="line">      stage(<span class="string">'Example'</span>){</span><br><span class="line">         steps{</span><br><span class="line">            script{</span><br><span class="line">               <span class="keyword">def</span> browsers = [<span class="string">'chrome'</span>,<span class="string">'firefox'</span>]</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; browsers.size(); ++i){</span><br><span class="line">                  echo <span class="string">"Testing the ${browsers[i]} browsers"</span></span><br><span class="line">               }</span><br><span class="line">            }</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改Jenkinsfile并推送至GitHub。</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4wccqvfcpj31b30u0han.jpg" alt="运行"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins(二)</title>
      <link href="article/bd60fd3e.html"/>
      <url>article/bd60fd3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-二"><a href="#Jenkins-二" class="headerlink" title="Jenkins(二)"></a>Jenkins(二)</h1><h2 id="从版本库拉取pipeline"><a href="#从版本库拉取pipeline" class="headerlink" title="从版本库拉取pipeline"></a>从版本库拉取pipeline</h2><p>直接在界面上进行流水线代码的编写无法做到pipeline的<strong>版本化</strong>。</p><p>比较合理的做法是让Jenkins从版本管理仓库拉取pipeline并执行。</p><h3 id="安装Git插件"><a href="#安装Git插件" class="headerlink" title="安装Git插件"></a>安装Git插件</h3><p>如果按照上一篇的安装选择进行安装，默认安装了Git插件</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4v2kh6chyj31b30u0hcm.jpg" alt="安装Git插件"></p><p>没有安装在<code>可选插件</code>中查找并安装</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4v2ldo28wj31b30u0e4m.jpg" alt="安装插件"></p><span id="more"></span><h3 id="创建一个Jenkinsfile文件并上传至Git服务器"><a href="#创建一个Jenkinsfile文件并上传至Git服务器" class="headerlink" title="创建一个Jenkinsfile文件并上传至Git服务器"></a>创建一个Jenkinsfile文件并上传至Git服务器</h3><p>在GitHub上新建一个项目，然后将上一篇的Hello world内容拷贝至<code>Jenkinsfile</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建一个文件夹并进入该文件夹</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch Jenkinsfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim Jenkinsfile <span class="comment"># 拷贝之前的代码</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'add a Hello world pipeline'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin https://github.com/zx490336534/Jenkinstest.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4v2v0a7ioj316y0u0dvr.jpg" alt="上库"><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4v2x7j7kfj31b30u0kb9.jpg" alt="结果查看"></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4v2xwit6yj31b30u0kas.jpg" alt="代码查看"></p><h3 id="从SCM下载pipeline"><a href="#从SCM下载pipeline" class="headerlink" title="从SCM下载pipeline"></a>从SCM下载pipeline</h3><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4v30kjnqtj31b30u07mo.jpg" alt="选择SCM"></p><p>注意⚠️：<code>Script Path(脚本路径)</code>就是pipeline的文件名，默认上<code>Jenkinsfile</code>和我们版本库中的Jenkinsfile对应</p><p>使用https进行代码的克隆，所以需要添加凭证，也就是Github的账号密码</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4v2zxb35nj31b30u07mx.jpg" alt="新建凭证"></p><h3 id="进行构建"><a href="#进行构建" class="headerlink" title="进行构建"></a>进行构建</h3><p>点击<code>立即构建</code>可以看到流水线方块多了<strong>Declarative: Checkout SCM</strong>部分</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4v326zs01j31b30u0txl.jpg" alt="image-20190710215209504"></p><p>从控制台输出可以看出，这部分就是为从GitHub上拉取代码的步骤</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4v3332otnj31b30u04qp.jpg" alt="image-20190710215303035"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins(一)</title>
      <link href="article/1251665c.html"/>
      <url>article/1251665c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-一"><a href="#Jenkins-一" class="headerlink" title="Jenkins(一)"></a>Jenkins(一)</h1><blockquote><p>从某种抽象层次上讲，部署流水线(Deployment pipeline)是指从软件版本控制库到用户手中这一过程的自动化表现形式。—《持续交付-发布可靠软件的系统方法》</p></blockquote><h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><p>Jenkins1.x只能通过界面手动操作来「描述」部署流水线。</p><p>Jenkins2.x支持pipeline as code，可以通过代码来「描述」部署流水线。</p><p>使用「代码」而非「UI」的意义：</p><ul><li>更好的版本化：将pipeline进行版本控制。</li><li>更好的协作：每次修改对他人可见，并可以进行代码审查。</li><li>更好的重用性：手动操作无法简单的复制粘贴。<span id="more"></span><h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h2></li></ul><p>Jenkins下载地址：<a href="https://jenkins.io/zh/download/">https://jenkins.io/zh/download/</a></p><p>Jenkins Docker：<a href="https://hub.docker.com/r/jenkins/jenkins">https://hub.docker.com/r/jenkins/jenkins</a></p><p>由于用于测试，所以使用Docker搭建一个Jenkins服务器</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4u0ell42ej316y0u0tln.jpg" alt="使用Docker搭建Jenkins"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull jenkins/jenkins:lts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -v jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts</span></span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4u0v5l4rtj31b30u07i8.jpg" alt="访问Jenkins"></p><p>等待一段时间后…</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4u167eu49j31b30u0dyh.jpg" alt="入门1"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> [name] tail /var/jenkins_home/secrets/initialAdminPassword</span></span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4u18sgzgbj31bi0u0k79.jpg" alt="image-20190710000348232"></p><p>输入密码进入下一步，安装推荐的插件即可</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4u1adjdcjj31b30u0h78.jpg" alt="安装推荐的插件"></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4u1andm4oj31b30u0aul.jpg" alt="插件安装"></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4u1enq27vj31b30u01a9.jpg" alt="创建管理员账号"></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4u1gk23y9j31b30u0dy6.jpg" alt="URL设置"></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4u1gxj5xej31b30u0h22.jpg" alt="安装完成"></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4u1pvo8fyj317k0u0h2t.jpg" alt="完成"></p><h4 id="遇到问题：Jenkins登录后页面为空"><a href="#遇到问题：Jenkins登录后页面为空" class="headerlink" title="遇到问题：Jenkins登录后页面为空"></a>遇到问题：Jenkins登录后页面为空</h4><p>解决办法：</p><ol><li><p>打开一个新的窗口，输入网址<a href="http://localhost:8080/jenkins/pluginManager/advanced">http://localhost:8080/jenkins/pluginManager/advanced</a></p></li><li><p>输入网址打开后滑动到页面下方，最底下有个【升级站点】，把其中的链接改成这个http的链接   <a href="http://updates.jenkins.io/update-center.json%E3%80%82">http://updates.jenkins.io/update-center.json。</a></p></li><li><p>输入：<a href="http://localhost:8080/exit">http://localhost:8080/r</a>estart 重启Jenkins</p></li></ol><h2 id="创建第一个pipeline"><a href="#创建第一个pipeline" class="headerlink" title="创建第一个pipeline"></a>创建第一个pipeline</h2><h3 id="在Jenkins中新建一个pipeline项目"><a href="#在Jenkins中新建一个pipeline项目" class="headerlink" title="在Jenkins中新建一个pipeline项目"></a>在Jenkins中新建一个pipeline项目</h3><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4u1sfcbh5j317k0u04jn.jpg" alt="任务创建"></p><h3 id="在Pipeline节点下输入以下内容"><a href="#在Pipeline节点下输入以下内容" class="headerlink" title="在Pipeline节点下输入以下内容"></a>在Pipeline节点下输入以下内容</h3><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pipeline{</span><br><span class="line">    agent any</span><br><span class="line">    stages{</span><br><span class="line">        stage(<span class="string">'Build'</span>){</span><br><span class="line">            steps{</span><br><span class="line">                echo <span class="string">'Hello World'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g4u1rpxya6j317k0u018v.jpg" alt="流水线"></p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4u1su143bj317k0u0h48.jpg" alt="构建"></p><h3 id="结果查看"><a href="#结果查看" class="headerlink" title="结果查看"></a>结果查看</h3><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g4u1vxhwtwj317k0u0kbj.jpg" alt="结果查看"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome实用插件推荐</title>
      <link href="article/8a8ca739.html"/>
      <url>article/8a8ca739.html</url>
      
        <content type="html"><![CDATA[<h1 id="Chrome实用插件推荐"><a href="#Chrome实用插件推荐" class="headerlink" title="Chrome实用插件推荐"></a>Chrome实用插件推荐</h1><p>Chrome浏览器上有很多非常实用的插件，可以显著的提升工作的效率。</p><p>不过由于Google的插件需要前往它自己的商店进行下载。</p><p>所以如果没有梯子的话，只能先安装「谷歌访问助手」了（自行百度）。</p><span id="more"></span><h2 id="Xpath-Helper"><a href="#Xpath-Helper" class="headerlink" title="Xpath Helper"></a>Xpath Helper</h2><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g481x1mrsuj327w09a42a.jpg" alt="Xpath定位"></p><p>Xpath定位有很多的优势</p><ol><li>没有id可以进行定位</li><li>需要定位多个符合要求的元素</li></ol><p>使用脚本断点调试定位是否正确是一个方法，当时在我的实际工作中，元素定位代码的封装较深，所以修改查询元素的内容较麻烦，所以直接使用Xpath Helper可以方便的进行开发前的测试。不管是爬虫爬去页面内容还是自动化测试都很实用。</p><p>下面是使用它的方法：</p><h3 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h3><p>使用浏览器自带的定位工具进行元素的定位</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g482366a4qj31b30u0b29.jpg" alt="元素定位"></p><h3 id="初步获取Xpath"><a href="#初步获取Xpath" class="headerlink" title="初步获取Xpath"></a>初步获取Xpath</h3><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4824mj1bbj30wa0lqnhp.jpg" alt="获取Xpath"></p><p>获取到的Xpath为：</p><p><code>//*[@id="dashboard"]/div/div[3]/div[2]/div/div/div/div[2]/div/div[1]/a</code></p><p>这个路径为绝对路径，假如我们需要获取的是一个元素的列表，那就可以进行删减</p><p>将它删减为：<code>//*[@id="dashboard"]/div/div[3]/div//a</code>可以发现页面中标黄的都是定位到的部分内容，「RESULTS(156)」中也可以看到相关结果</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g482a9ttgtj31b30u01kx.jpg" alt="定位元素列表"></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g482bedv5sj30vs06gdge.jpg" alt="RESULTS"></p><h2 id="JSON-handle"><a href="#JSON-handle" class="headerlink" title="JSON-handle"></a>JSON-handle</h2><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g482d5jk80j312q0u0k2l.jpg" alt="JSON-handle"></p><p>一个Json的转换工具</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g482ee0pdbj312q0u0wqg.jpg" alt="转换后"></p><p>有了它，可以直观的看到接口中的元素类型，内容，个数等情况。</p><p>一眼看出诡异的传参</p><h2 id="划词翻译"><a href="#划词翻译" class="headerlink" title="划词翻译"></a>划词翻译</h2><p>由于四级没过，还要强行敲代码的我，看起英文文档就非常痛苦了，所以我选择使用翻译软件。</p><p><a href="https://github.com/Selection-Translator/crx-selection-translate">划词翻译</a></p><p>GitHub地址:<a href="https://github.com/Selection-Translator/crx-selection-translate">https://github.com/Selection-Translator/crx-selection-translate</a></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g482l75kfcj31b30u07rx.jpg" alt="翻译"></p><p>虽然有时候直译过来还是有点混乱，但是大致意思可以理解。</p><h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2><p>可以安装脚本的百宝箱</p><p>例如：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g482o8euqkj31b30u0h5r.jpg" alt="Tampermonkey"></p><p>这样在看CSDN的时候就不用去点那个「展开全部」了。也可以自己编写，或者去搜索他人写好的。当然，脚本可能存在安全问题，风险自理。</p><p><a href="https://greasyfork.org/zh-CN/scripts">https://greasyfork.org/zh-CN/scripts</a></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g482q7m2wqj31b30u01kx.jpg" alt="查找脚本"></p><h2 id="Enhanced-GitHub"><a href="#Enhanced-GitHub" class="headerlink" title="Enhanced GitHub"></a>Enhanced GitHub</h2><p>在GitHub上下载代码需要下载整个项目的Zip包，这对于只需要其中某个文件的情况就非常不使用，所以使用这个工具就可以单独下载一个文件了</p><p><a href="https://github.com/softvar/enhanced-github">https://github.com/softvar/enhanced-github</a></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g482uaedqzj31b30u01kx.jpg" alt="已安装脚本"></p><h2 id="octotree"><a href="#octotree" class="headerlink" title="octotree"></a>octotree</h2><p>上图左侧的GitHub文件树状展示使用的插件</p><p><a href="https://www.octotree.io/">https://www.octotree.io/</a></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g482v684e3j31b30u0e2q.jpg" alt="octotree"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年对自动化测试的认知</title>
      <link href="article/b88e3cf.html"/>
      <url>article/b88e3cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h1><p>自动化测试是，把人对软件的测试行为转化为由机器执行测试行为的一种实践。</p><p>自动化测试的本质是先写一段代码，然后去测试另一段代码，所以实现自动化测试用例本身属于开发工作，需要投入大量的时间和精力，并且已经开发完成的用例还必须随着被测对象的改变而不断更新，你还需要为此付出维护测试用例的成本。</p><h2 id="自动化测试的优势"><a href="#自动化测试的优势" class="headerlink" title="自动化测试的优势"></a>自动化测试的优势</h2><ol><li>自动化测试可以替代大量的手工机械重复性操作，测试工程师可以把更多的时间花在更全面的用例设计和新功能的测试上；</li><li>自动化测试可以大幅提升<strong>回归测试</strong>的效率，非常适合敏捷开发过程；</li><li>自动化测试可以更好地利用无人值守时间，去更频繁地执行测试，特别适合现在非工作时间执行测试，工作时间分析失败用例的工作模式；</li><li>自动化测试可以高效实现某些手工测试无法完成或者代价巨大的测试类型，比如关键业务 7×24 小时持续运行的系统稳定性测试和高并发场景的压力测试等；</li><li>自动化测试还可以保证每次测试执行的操作以及验证的<strong>一致性</strong>和<strong>可重复性</strong>，避免人为的遗漏或疏忽。<span id="more"></span><h2 id="适合做自动化测试的项目"><a href="#适合做自动化测试的项目" class="headerlink" title="适合做自动化测试的项目"></a>适合做自动化测试的项目</h2></li></ol><ul><li>需求稳定，不会频繁变更。</li><li>研发和维护周期长，需要频繁执行回归测试。</li><li>需要在多种平台上重复运行相同测试的场景。</li><li>某些测试项目通过手工测试无法实现，或者手工成本太高。</li><li>被测软件的开发较为规范，能够保证系统的可测试性。</li><li>测试人员已经具备一定的编程能力。</li></ul><h2 id="自动化测试的范畴"><a href="#自动化测试的范畴" class="headerlink" title="自动化测试的范畴"></a>自动化测试的范畴</h2><p>自动化测试包括但不限于</p><ul><li>测试环境的搭建和管理</li><li>测试环境的检查，监控和报警</li><li>测试代码的编译和测试构建</li><li>测试代码的静态检查和报警</li><li>测试用例的分发和执行</li><li>测试结果的保存与管理</li><li>测试报告的生成</li><li>测试优先级的建议</li></ul><h2 id="自动化测试的目标"><a href="#自动化测试的目标" class="headerlink" title="自动化测试的目标"></a>自动化测试的目标</h2><blockquote><p>错误的预期</p><p>1.不清楚自动化测试的目标，以及为达到目标所计划的投入</p><p>2.对自动化测试抱有不切实际的幻想型期望，认为自动化测试能够干很多活同时省很多钱</p></blockquote><p>自动化测试的第一目标从来都不是节省测试的人力成本。</p><p>成功的自动化测试，作为软件测试的一种工具，从业务<em>「最终效果」</em>来看，应该是能够<strong>「节省成本」</strong>和<strong>「提高产品质量」</strong>的。</p><p>大部分的测试，所要做的是不是保证系统没有bug，而是保证在单位时间内测出大部分<strong>「不影响客户使用」</strong>，并<strong>「不被普通客户发现的bug」</strong>。</p><p>自动化测试不直接找bug，而是通过解放有经验的测试工程师的生产力，让其从重复的回归测试中解放出来，从事新的测试方法和测试手段的研究。</p><p>通过自动化测试解放出测试人员的时间和精力来间接地找到更多、更深层次的新bug，将产品质量再提高一个档次。</p><blockquote><p>错误的观念</p><p>1.自动化应该是一种Service（Automation As A Service)，所有的测试人员和开发人员都应该可以自己很方便的去跑自动化</p><p>2.自动化测试的运行结果应该是可以自动分析的，占用很少的时间</p><p>3.自动化测试的成功率应该是要很高的（比如95%以上）</p><p>4.自动化应该是写一次，运行很多次，为什么花那么多时间还要去改自动化代码</p></blockquote><h2 id="自动化的成本与收益"><a href="#自动化的成本与收益" class="headerlink" title="自动化的成本与收益"></a>自动化的成本与收益</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自动化的收益 = 迭代次数 * 全手动执行成本 - 首次自动化成本 - 维护次数 * 维护成本</span><br></pre></td></tr></tbody></table></figure><h2 id="为什么要做自动化测试"><a href="#为什么要做自动化测试" class="headerlink" title="为什么要做自动化测试"></a>为什么要做自动化测试</h2><p>需要先分析一下「手工测试」和「自动化测试」各自的特点：</p><ul><li>手工测试，测试点<strong>广</strong>深度<strong>浅</strong>，需要<strong>准备时间少</strong>，效果卓越，后续工业化弱</li></ul><p>运用场景项目初期测试冒烟，系统测试，验收测试</p><ul><li><p>自动化测试，测试点<strong>窄</strong>深度<strong>深</strong>，需要<strong>准备时间长</strong>，效果相对一般，工业化高</p><p> 兼容性测试，接口测试，单元测试，线上监控测试，性能测试，稳定性测试，回归测试</p></li></ul><h2 id="当前的自动化实践"><a href="#当前的自动化实践" class="headerlink" title="当前的自动化实践"></a>当前的自动化实践</h2><p>从自动化测试的范畴来看一下我们当前的自动化测试状态</p><ul><li><p>测试环境的搭建和管理</p><p>问题：执行环境（JDK，python，git，allure）需要手工搭建。</p><ul><li>替换代码中win独有的相关库，使其可以在全平台上运行，方便使用Docker技术</li></ul></li><li><p>测试环境的检查，监控和报警</p><p> 问题：IPC设备信息 存放在代码data中，但是没有统一的管理与状态监控。</p><ul><li>搭建「设备运维管理平台」统一管理设备状态，信息</li></ul></li><li><p>测试代码的编译和测试构建</p><p> python代码不需要编译，使用CI/CD的方案（Jenkins）来进行测试的构建</p></li><li><p>测试代码的静态检查和报警</p><p> 搭建Gitlab代码管理平台，使用Gitlab-runner的CI进行代码静态检查</p></li><li><p>测试用例的分发和执行</p><p> 使用Jenkins参数化构建选择执行设备，集成JSON Editor进行执行用例选择。</p></li><li><p>测试结果的保存与管理</p><p> 使用Jenkins流水线中的文件打包进行结果保存，直接在Jenkins上查看对应执行的报告</p></li><li><p>测试报告的生成</p><p> 使用Allure进行报告的展示</p></li><li><p>测试优先级的建议</p><p> 问题：暂无</p><ul><li>根据某策略自动选择某设备需要执行的用例</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取大华产品信息</title>
      <link href="article/3d056911.html"/>
      <url>article/3d056911.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬取大华产品信息"><a href="#爬取大华产品信息" class="headerlink" title="爬取大华产品信息"></a>爬取大华产品信息</h1><p><strong>欢迎关注我的公众号「测试游记」</strong></p><p>由于想要了解一下友商的产品信息，所以简单的写一下爬取他们信息的爬虫</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scrapy startproject Dahua</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> Dahua</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> scrapy genspider dahua dahuatech.com</span></span><br></pre></td></tr></tbody></table></figure><ol><li>使用<code>scrapy</code>脚手架创建一个项目</li><li>进入项目路径</li><li>创建一个名叫<code>dahua</code>的爬虫，它的爬取范围是<code>dahuatech.com</code>域名下<span id="more"></span><h2 id="分析爬取内容"><a href="#分析爬取内容" class="headerlink" title="分析爬取内容"></a>分析爬取内容</h2></li></ol><p>产品类别url地址为：<a href="http://www.dahuatech.com/product.html">http://www.dahuatech.com/product.html</a></p><p>所以修改开始的url<code>start_urls</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DahuaSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">'dahua'</span>  <span class="comment"># 爬虫名称</span></span><br><span class="line">    allowed_domains = [<span class="string">'dahuatech.com'</span>]  <span class="comment"># 允许爬取域名</span></span><br><span class="line">    start_urls = [<span class="string">'https://www.dahuatech.com/product.html'</span>]  <span class="comment"># 请求的第一个url</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>需要爬取的为设备的具体信息</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8asll2e0uj31b30u0tx1.jpg" alt="设备详情"></p><ul><li>产品详情地址</li><li>产品名称</li><li>产品描述</li><li>产品概述</li><li>技术参数</li><li>尺寸图</li><li>订货型号</li></ul><p>所以先在<code>Dahua/items.py</code>写上</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DahuaItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    url = scrapy.Field()  <span class="comment"># 产品详情地址</span></span><br><span class="line">    product_name = scrapy.Field()  <span class="comment"># 产品名称</span></span><br><span class="line">    product_description = scrapy.Field()  <span class="comment"># 产品描述</span></span><br><span class="line">    product_overview = scrapy.Field()  <span class="comment"># 产品概述</span></span><br><span class="line">    technical_parameter = scrapy.Field()  <span class="comment"># 技术参数</span></span><br><span class="line">    dimension_drawing = scrapy.Field()  <span class="comment"># 尺寸图</span></span><br><span class="line">    order_type = scrapy.Field()  <span class="comment"># 订货型号</span></span><br></pre></td></tr></tbody></table></figure><h2 id="获取设备类型列表"><a href="#获取设备类型列表" class="headerlink" title="获取设备类型列表"></a>获取设备类型列表</h2><p>从第一个页面可以看出，设备分成了很多大类，大类中又有很多的小类</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8asptdreij31b30u0x1p.jpg" alt="设备类型列表"></p><p>所以我们先拿到全部小类的url地址</p><p>使用<code>XPath Helper</code>工具进行<code>Xpath</code>定位</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ass3413zj31b30u0np7.jpg" alt="产品类别"></p><p>由于我懒得解析太多Xpath，所以我取用了离要获取的url最大层级的<code>div</code>标签</p><p>对应的URL的Xpath为：<code>//div[@class='product-channel-list f-cb']//a/@href</code></p><p>对呀的文字的Xpath为：<code>//div[@class='product-channel-list f-cb']//a/text()</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8asttoct8j327w06m76h.jpg" alt="文字"></p><p>所以爬虫中第一个解析函数<code>parse</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    print(<span class="string">'正在爬取全部产品类别'</span>)</span><br><span class="line">    url_list = response.xpath(<span class="string">"//div[@class='product-channel-list f-cb']//a/@href"</span>).extract()</span><br><span class="line">    productlist_list = response.xpath(<span class="string">"//div[@class='product-channel-list f-cb']//a/text()"</span>).extract()</span><br><span class="line">    productlist_list = productlist_list</span><br><span class="line">    <span class="keyword">for</span> url, productlist <span class="keyword">in</span> <span class="built_in">zip</span>(url_list, productlist_list):</span><br><span class="line">        <span class="keyword">if</span> url.startswith(<span class="string">'http'</span>):</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_productlist, meta={<span class="string">'productlist'</span>: productlist})</span><br></pre></td></tr></tbody></table></figure><h2 id="获取设备列表"><a href="#获取设备列表" class="headerlink" title="获取设备列表"></a>获取设备列表</h2><p>任意点击一个小类进入如下页面</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8asw7nfbpj31b30u04qp.jpg" alt="设备列表"></p><p>包含了<code>设备名称</code>,<code>描述信息</code>。</p><p><code>查看详情</code>按钮是进入设备详情页的</p><p>所以这儿需要获取到3个Xpath</p><p>全部的<code>查看详情</code>:<code>//li//span[1]//a/@href</code></p><p>全部的<code>设备名称</code>:<code>//div[@class='product-list-b']//ul[@class='f-cb']//h3/text()</code></p><p>全部的<code>描述信息</code>:<code>//div[@class='product-list-b']//ul[@class='f-cb']//a/p[1]/text()</code></p><p>所以代码为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_productlist</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    print(<span class="string">'正在爬取产品列表'</span>)</span><br><span class="line">    url_list = response.xpath(<span class="string">'//li//span[1]//a/@href'</span>).extract()</span><br><span class="line">    product_name_list = response.xpath(<span class="string">"//div[@class='product-list-b']//ul[@class='f-cb']//h3/text()"</span>).extract()</span><br><span class="line">    product_description_list = response.xpath(</span><br><span class="line">        <span class="string">"//div[@class='product-list-b']//ul[@class='f-cb']//a/p[1]/text()"</span>).extract()</span><br><span class="line">    <span class="keyword">for</span> url, product_name, product_description <span class="keyword">in</span> <span class="built_in">zip</span>(url_list, product_name_list, product_description_list):</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_productdetail,</span><br><span class="line">                             meta={</span><br><span class="line">                                 <span class="string">'productlist'</span>: response.meta[<span class="string">'productlist'</span>],</span><br><span class="line">                                 <span class="string">'product_name'</span>: product_name,</span><br><span class="line">                                 <span class="string">'product_description'</span>: product_description</span><br><span class="line">                             })</span><br><span class="line">    page_list = response.xpath(<span class="string">"//div[@class='news-page w1400']//a/@href"</span>).extract()</span><br><span class="line">    page_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> page_list <span class="keyword">if</span> i.startswith(<span class="string">'http'</span>)]</span><br><span class="line">    <span class="keyword">if</span> page_list:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> page_list:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_productlist,</span><br><span class="line">                                 meta={<span class="string">'productlist'</span>: response.meta[<span class="string">'productlist'</span>]})</span><br></pre></td></tr></tbody></table></figure><p>往处理详情页的地方传入了<code>product_name</code>和<code>product_description</code></p><p>也就是设备名称，设备描述</p><p>由于部分页面有多页，所以也做了页面的跳转</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">page_list = response.xpath(<span class="string">"//div[@class='news-page w1400']//a/@href"</span>).extract()</span><br><span class="line">page_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> page_list <span class="keyword">if</span> i.startswith(<span class="string">'http'</span>)]</span><br><span class="line"><span class="keyword">if</span> page_list:</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> page_list:</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_productlist,</span><br><span class="line">                             meta={<span class="string">'productlist'</span>: response.meta[<span class="string">'productlist'</span>]})</span><br></pre></td></tr></tbody></table></figure><p>本来这里要处理重复页面的，但是由于<code>Scrapy</code>自带了缓存机制，它会跳过爬取相同的<code>url</code>，所以就这样了～</p><h2 id="获取详情页"><a href="#获取详情页" class="headerlink" title="获取详情页"></a>获取详情页</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8at2hrumlj31b30u01hf.jpg" alt="详细信息"></p><p>进入详情页后发现数据是动态出现的，使用抓包的方式很容易可以发现它应该ajax请求的方式刷新数据</p><p>当前页面：<code>https://www.dahuatech.com/product/info/93.html</code></p><p><code>ajax</code>请求页面：<code>https://www.dahuatech.com/ajax/product/93/1</code></p><p>其中相同的部分为<code>93</code></p><p>由于我懒得再爬一层，所以直接用<code>requests</code>发起了<code>get</code>请求</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_productdetail</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    print(<span class="string">'正在爬取产品详情'</span>)</span><br><span class="line">    base_url = <span class="string">'https://www.dahuatech.com/ajax/product/%s/%s'</span></span><br><span class="line">    item = DahuaItem()</span><br><span class="line">    product_num = re.findall(<span class="string">r'http.*?info/(\d+).html.*?'</span>, response.url)</span><br><span class="line">    product_num = product_num <span class="keyword">and</span> <span class="built_in">int</span>(product_num[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 产品详情地址</span></span><br><span class="line">    item[<span class="string">'url'</span>] = response.url</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产品名称</span></span><br><span class="line">    item[<span class="string">'product_name'</span>] = response.meta[<span class="string">'product_name'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产品描述</span></span><br><span class="line">    item[<span class="string">'product_description'</span>] = response.meta[<span class="string">'product_description'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产品概述</span></span><br><span class="line">    item[<span class="string">'product_overview'</span>] = re.findall(<span class="string">r'&lt;div class="one_content"&gt;(.*?)&lt;/div&gt;'</span>,</span><br><span class="line">                                          requests.get(base_url % (product_num, <span class="number">1</span>)).text,</span><br><span class="line">                                          re.S | re.M)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 技术参数</span></span><br><span class="line">    item[<span class="string">'technical_parameter'</span>] = requests.get(base_url % (product_num, <span class="number">2</span>)).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 尺寸图</span></span><br><span class="line">    item[<span class="string">'dimension_drawing'</span>] = re.findall(<span class="string">r'src=".*?"'</span>,</span><br><span class="line">                                           requests.get(base_url % (product_num, <span class="number">3</span>)).text,</span><br><span class="line">                                           re.S | re.M)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 订货型号</span></span><br><span class="line">    item[<span class="string">'order_type'</span>] = re.findall(<span class="string">r'&gt;(.*?)&lt;/p'</span>,</span><br><span class="line">                                    requests.get(base_url % (product_num, <span class="number">4</span>)).text,</span><br><span class="line">                                    re.S | re.M)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> item</span><br></pre></td></tr></tbody></table></figure><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>使用最简单的数据持久化方式：<code>写入json</code></p><p>修改<code>Dahua/pipelines.py</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DahuaPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.file = <span class="built_in">open</span>(<span class="string">'dahua.json'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        content = json.dumps(<span class="built_in">dict</span>(item), ensure_ascii=<span class="literal">False</span>) + <span class="string">'\n'</span></span><br><span class="line">        self.file.write(content)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.file.close()</span><br></pre></td></tr></tbody></table></figure><p>一次爬取分为三步：</p><ol><li>打开<code>dahua.json</code>文件</li><li>写入内容</li><li>关闭<code>dahua.json</code>文件</li></ol><h2 id="修改Dahua-settings-py"><a href="#修改Dahua-settings-py" class="headerlink" title="修改Dahua/settings.py"></a>修改<code>Dahua/settings.py</code></h2><ol><li>关闭君子协议</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>开启数据持久化部分</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = {</span><br><span class="line">   <span class="string">'Dahua.pipelines.DahuaPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p>在外部使用</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scrapy crawl dahua</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8atdga1jaj31b30u07wh.jpg" alt="查看结果"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取抖音的回复信息</title>
      <link href="article/61ec1818.html"/>
      <url>article/61ec1818.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬取抖音的回复信息"><a href="#爬取抖音的回复信息" class="headerlink" title="爬取抖音的回复信息"></a>爬取抖音的回复信息</h1><p>由于我姐开了一个抖音，然后说信息太多回复不过来。写一个小爬虫查看一下有多少购买的需求。</p><h2 id="手机抓包"><a href="#手机抓包" class="headerlink" title="手机抓包"></a>手机抓包</h2><p>打开Charles，手机侧配置好代理，访问抖音。</p><p>需要抓取的两个包分别为：<code>用户首页</code> <code>其中一条视频的回复信息</code></p><p>由于两者很相似，就讲一下回复信息的抓包</p><span id="more"></span><p><img src="%E5%9B%9E%E5%A4%8D%E4%BF%A1%E6%81%AF.png" alt="回复信息"></p><p>可以看到从返回值中可以看到包含了我们需要的<code>回复信息</code></p><p>对这个请求进行分析：</p><p>请求方式是GET</p><p>URL是<code>https://aweme.snssdk.com/aweme/v2/comment/list/</code></p><p>携带的内容是：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">params_message = {<span class="string">'version_code'</span>: <span class="string">'3.4.0'</span>,</span><br><span class="line">                  <span class="string">'pass-region'</span>: <span class="string">'1'</span>,</span><br><span class="line">                  <span class="string">'pass-route'</span>: <span class="string">'1'</span>,</span><br><span class="line">                  <span class="string">'js_sdk_version'</span>: <span class="string">'1.3.0.1'</span>,</span><br><span class="line">                  <span class="string">'app_name'</span>: <span class="string">'aweme'</span>,</span><br><span class="line">                  <span class="string">'vid'</span>: <span class="string">'9B26A672-3A7D-4B47-BD27-1DA5D8661F67'</span>,</span><br><span class="line">                  <span class="string">'app_version'</span>: <span class="string">'3.4.0'</span>,</span><br><span class="line">                  <span class="string">'device_id'</span>: <span class="string">'46343428354'</span>,</span><br><span class="line">                  <span class="string">'channel'</span>: <span class="string">'App Store'</span>,</span><br><span class="line">                  <span class="string">'aid'</span>: <span class="string">'1128'</span>,</span><br><span class="line">                  <span class="string">'screen_width'</span>: <span class="string">'1125'</span>,</span><br><span class="line">                  <span class="string">'openudid'</span>: <span class="string">'264245ce96bca574ff80597fe2bb3dc982739dc5'</span>,</span><br><span class="line">                  <span class="string">'os_api'</span>: <span class="string">'18'</span>,</span><br><span class="line">                  <span class="string">'ac'</span>: <span class="string">'WIFI'</span>,</span><br><span class="line">                  <span class="string">'os_version'</span>: <span class="string">'12.1.1'</span>,</span><br><span class="line">                  <span class="string">'device_platform'</span>: <span class="string">'iphone'</span>,</span><br><span class="line">                  <span class="string">'build_number'</span>: <span class="string">'34008'</span>,</span><br><span class="line">                  <span class="string">'iid'</span>: <span class="string">'53571850558'</span>,</span><br><span class="line">                  <span class="string">'device_type'</span>: <span class="string">'iPhone10,3'</span>,</span><br><span class="line">                  <span class="string">'idfa'</span>: <span class="string">'E368A825-2F49-4D9F-9A2E-4ED10BD9E686'</span>,</span><br><span class="line">                  <span class="string">'cursor'</span>: <span class="string">'0'</span>,</span><br><span class="line">                  <span class="string">'aweme_id'</span>: <span class="string">'6632470552571284739'</span>,  <span class="comment"># 变化</span></span><br><span class="line">                  <span class="string">'count'</span>: <span class="string">'20'</span>,</span><br><span class="line">                  <span class="string">'insert_ids'</span>: <span class="string">''</span>,</span><br><span class="line">                  <span class="string">'mas'</span>: <span class="string">'01d53da165ba9f6281098e784d15e109913b6009c2fcadd39a64ee'</span>,</span><br><span class="line">                  <span class="string">'as'</span>: <span class="string">'a17584e0c6086c2b7b9455'</span>,</span><br><span class="line">                  <span class="string">'ts'</span>: <span class="string">'1544244102'</span>}</span><br></pre></td></tr></tbody></table></figure><p>经过多个不同的视频的抓包可以看到<code>aweme_id</code>是会发生变化的，所以可以猜测它为视频的标识符。</p><h2 id="编写函数"><a href="#编写函数" class="headerlink" title="编写函数"></a>编写函数</h2><p>使用requests就可以快速的进行get请求</p><p><img src="get_client_reply.png" alt="get_client_reply"></p><h2 id="过滤消息"><a href="#过滤消息" class="headerlink" title="过滤消息"></a>过滤消息</h2><p>首先拿到client_items的内容并判断是否为一个列表</p><p>然后使用正则去检索消息中包含<code>买|多少|钱|微信|卖</code>这些关键字的回复</p><p>再使用<code>print</code>将关注的内容打印出来即可</p><p><img src="%E8%BF%87%E6%BB%A4.png" alt="过滤"></p><h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><p><img src="%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png" alt="输出结果"></p><h2 id="代码全文"><a href="#代码全文" class="headerlink" title="代码全文"></a>代码全文</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author:zhongxin</span></span><br><span class="line"><span class="comment"># datetime:2018/12/8 12:46 PM</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_message</span>(<span class="params">item, strinfo</span>):</span></span><br><span class="line">    info = strinfo.split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">            item = item.get(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        item = <span class="string">'获取信息出错'</span></span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">params_index = {<span class="string">"version_code"</span>: <span class="string">"3.4.0"</span>,</span><br><span class="line">                <span class="string">"pass-region"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="string">"pass-route"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="string">"js_sdk_version"</span>: <span class="string">"1.3.0.1"</span>,</span><br><span class="line">                <span class="string">"app_name"</span>: <span class="string">"aweme"</span>,</span><br><span class="line">                <span class="string">"vid"</span>: <span class="string">"9B26A672-3A7D-4B47-BD27-1DA5D8661F67"</span>,</span><br><span class="line">                <span class="string">"app_version"</span>: <span class="string">"3.4.0"</span>,</span><br><span class="line">                <span class="string">"device_id"</span>: <span class="string">"46343428354"</span>,</span><br><span class="line">                <span class="string">"channel"</span>: <span class="string">"App%20Store"</span>,</span><br><span class="line">                <span class="string">"aid"</span>: <span class="string">"1128"</span>,</span><br><span class="line">                <span class="string">"screen_width"</span>: <span class="string">"1125"</span>,</span><br><span class="line">                <span class="string">"openudid"</span>: <span class="string">"264245ce96bca574ff80597fe2bb3dc982739dc5"</span>,</span><br><span class="line">                <span class="string">"os_api"</span>: <span class="string">"18"</span>,</span><br><span class="line">                <span class="string">"ac"</span>: <span class="string">"WIFI"</span>,</span><br><span class="line">                <span class="string">"os_version"</span>: <span class="string">"12.1.1"</span>,</span><br><span class="line">                <span class="string">"device_platform"</span>: <span class="string">"iphone"</span>,</span><br><span class="line">                <span class="string">"build_number"</span>: <span class="string">"34008"</span>,</span><br><span class="line">                <span class="string">"iid"</span>: <span class="string">"53571850558"</span>,</span><br><span class="line">                <span class="string">"device_type"</span>: <span class="string">"iPhone10,3"</span>,</span><br><span class="line">                <span class="string">"idfa"</span>: <span class="string">"E368A825-2F49-4D9F-9A2E-4ED10BD9E686"</span>,</span><br><span class="line">                <span class="comment"># "min_cursor": "0",</span></span><br><span class="line">                <span class="string">"user_id"</span>: <span class="string">"74274748130"</span>,</span><br><span class="line">                <span class="string">"count"</span>: <span class="string">"40"</span>,</span><br><span class="line">                <span class="string">"max_cursor"</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))),</span><br><span class="line">                <span class="string">"mas"</span>: <span class="string">"011c521e5b9b55669e4adcf236edebf3ba5c88d52834b9760c56a1"</span>,</span><br><span class="line">                <span class="string">"as"</span>: <span class="string">"a1450500a6763ce93b6419"</span>,</span><br><span class="line">                <span class="string">"ts"</span>: <span class="string">"1544247654"</span>}</span><br><span class="line">params_message = {<span class="string">'version_code'</span>: <span class="string">'3.4.0'</span>,</span><br><span class="line">                  <span class="string">'pass-region'</span>: <span class="string">'1'</span>,</span><br><span class="line">                  <span class="string">'pass-route'</span>: <span class="string">'1'</span>,</span><br><span class="line">                  <span class="string">'js_sdk_version'</span>: <span class="string">'1.3.0.1'</span>,</span><br><span class="line">                  <span class="string">'app_name'</span>: <span class="string">'aweme'</span>,</span><br><span class="line">                  <span class="string">'vid'</span>: <span class="string">'9B26A672-3A7D-4B47-BD27-1DA5D8661F67'</span>,</span><br><span class="line">                  <span class="string">'app_version'</span>: <span class="string">'3.4.0'</span>,</span><br><span class="line">                  <span class="string">'device_id'</span>: <span class="string">'46343428354'</span>,</span><br><span class="line">                  <span class="string">'channel'</span>: <span class="string">'App Store'</span>,</span><br><span class="line">                  <span class="string">'aid'</span>: <span class="string">'1128'</span>,</span><br><span class="line">                  <span class="string">'screen_width'</span>: <span class="string">'1125'</span>,</span><br><span class="line">                  <span class="string">'openudid'</span>: <span class="string">'264245ce96bca574ff80597fe2bb3dc982739dc5'</span>,</span><br><span class="line">                  <span class="string">'os_api'</span>: <span class="string">'18'</span>,</span><br><span class="line">                  <span class="string">'ac'</span>: <span class="string">'WIFI'</span>,</span><br><span class="line">                  <span class="string">'os_version'</span>: <span class="string">'12.1.1'</span>,</span><br><span class="line">                  <span class="string">'device_platform'</span>: <span class="string">'iphone'</span>,</span><br><span class="line">                  <span class="string">'build_number'</span>: <span class="string">'34008'</span>,</span><br><span class="line">                  <span class="string">'iid'</span>: <span class="string">'53571850558'</span>,</span><br><span class="line">                  <span class="string">'device_type'</span>: <span class="string">'iPhone10,3'</span>,</span><br><span class="line">                  <span class="string">'idfa'</span>: <span class="string">'E368A825-2F49-4D9F-9A2E-4ED10BD9E686'</span>,</span><br><span class="line">                  <span class="string">'cursor'</span>: <span class="string">'0'</span>,</span><br><span class="line">                  <span class="string">'aweme_id'</span>: <span class="string">'6632470552571284739'</span>,  <span class="comment"># 变化</span></span><br><span class="line">                  <span class="string">'count'</span>: <span class="string">'20'</span>,</span><br><span class="line">                  <span class="string">'insert_ids'</span>: <span class="string">''</span>,</span><br><span class="line">                  <span class="string">'mas'</span>: <span class="string">'01d53da165ba9f6281098e784d15e109913b6009c2fcadd39a64ee'</span>,</span><br><span class="line">                  <span class="string">'as'</span>: <span class="string">'a17584e0c6086c2b7b9455'</span>,</span><br><span class="line">                  <span class="string">'ts'</span>: <span class="string">'1544244102'</span>}</span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'cache-control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">    <span class="string">'Postman-Token'</span>: <span class="string">'90cdf937-9447-47d5-865f-67b1a9cf8888'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'PostmanRuntime/7.4.0'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'aweme.snssdk.com'</span>,</span><br><span class="line">    <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">}</span><br><span class="line">url_index = <span class="string">"https://aweme.snssdk.com/aweme/v1/aweme/post/"</span>  <span class="comment"># 获取全部信息</span></span><br><span class="line">url_message = <span class="string">'https://aweme.snssdk.com/aweme/v2/comment/list/'</span>  <span class="comment"># 获取回复信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_json</span>(<span class="params">filename, json_data</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将内容写入json</span></span><br><span class="line"><span class="string">    :param filename: 要存储的文件名称</span></span><br><span class="line"><span class="string">    :param json_data: 数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = json.dumps(<span class="built_in">dict</span>(json_data), ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        f.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_client_reply</span>(<span class="params">aweme_id=<span class="string">'6632470552571284739'</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取视频下方的回复消息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    params_message[<span class="string">'aweme_id'</span>] = aweme_id</span><br><span class="line">    response = requests.get(url=url_message, headers=headers, params=params_message)</span><br><span class="line">    json_data = response.json()</span><br><span class="line">    client_items = json_data.get(<span class="string">'comments'</span>)</span><br><span class="line">    <span class="keyword">return</span> client_items</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_video_info</span>(<span class="params">user_id=<span class="string">'74274748130'</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取全部视频信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    params_index[<span class="string">'user_id'</span>] = user_id</span><br><span class="line">    response = requests.get(url=url_index, headers=headers, params=params_index)</span><br><span class="line">    json_data = response.json()</span><br><span class="line">    aweme_list = json_data.get(<span class="string">'aweme_list'</span>)</span><br><span class="line">    <span class="keyword">return</span> aweme_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    aweme_list = get_all_video_info()</span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(aweme_list):</span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">20</span>)</span><br><span class="line">        print(<span class="string">f'第<span class="subst">{i+<span class="number">1</span>}</span>个视频'</span>)</span><br><span class="line">        print(<span class="string">f"标题：<span class="subst">{get_message(item,<span class="string">'desc'</span>)}</span>"</span>)</span><br><span class="line">        aweme_id = get_message(item, <span class="string">'aweme_id'</span>)</span><br><span class="line">        <span class="keyword">if</span> aweme_id:</span><br><span class="line">            client_items = get_client_reply(aweme_id)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(client_items, <span class="built_in">list</span>):</span><br><span class="line">                <span class="keyword">for</span> j, client_item <span class="keyword">in</span> <span class="built_in">enumerate</span>(client_items):</span><br><span class="line">                    <span class="keyword">if</span> re.search(<span class="string">r'买|多少|钱|微信|卖'</span>, get_message(client_item, <span class="string">'text'</span>)):</span><br><span class="line">                        print(<span class="string">f"第<span class="subst">{j+<span class="number">1</span>}</span>条回复，"</span></span><br><span class="line">                              <span class="string">f"<span class="subst">{get_message(client_item,<span class="string">'user.nickname'</span>)}</span>说:"</span></span><br><span class="line">                              <span class="string">f"<span class="subst">{get_message(client_item,<span class="string">'text'</span>)}</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy结合selenium进行动态加载页面内容爬取</title>
      <link href="article/5cbdb45.html"/>
      <url>article/5cbdb45.html</url>
      
        <content type="html"><![CDATA[<h1 id="scrapy结合selenium进行动态加载页面内容爬取"><a href="#scrapy结合selenium进行动态加载页面内容爬取" class="headerlink" title="scrapy结合selenium进行动态加载页面内容爬取"></a>scrapy结合selenium进行动态加载页面内容爬取</h1><h2 id="动态页面与静态页面"><a href="#动态页面与静态页面" class="headerlink" title="动态页面与静态页面"></a>动态页面与静态页面</h2><p>比较常见的页面形式可以分为两种：</p><ul><li>静态页面</li><li>动态页面<span id="more"></span><a href="https://www.cnblogs.com/bluesungz/p/5955170.html">静态页面和动态页面的区别</a></li></ul><p>使用<code>requests</code>进行数据获取的时候一般使用的是<code>respond.text</code>来获取网页源码，然后通过正则表达式提取出需要的内容。</p><p>例如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">print(response.text.encode(<span class="string">'raw_unicode_escape'</span>).decode())</span><br></pre></td></tr></tbody></table></figure><p><img src="%E7%99%BE%E5%BA%A6%E6%BA%90%E4%BB%A3%E7%A0%81.png" alt="百度源代码"></p><p>但是动态页面使用上述操作后发现，获取到的内容与实际相差很大。</p><p>例如我们打开如下页面：</p><p><code>https://www.aqistudy.cn/historydata/monthdata.php?city=北京</code></p><p>右键选择<code>查看网页源代码</code></p><p><img src="%E6%9F%A5%E7%9C%8B%E7%BD%91%E9%A1%B5%E6%BA%90%E4%BB%A3%E7%A0%81.png" alt="查看网页源代码"></p><p>在网页源代码中查找页面中存在的一个数据：2014-02的PM10为155。</p><p><img src="%E5%8C%97%E4%BA%AC%E7%A9%BA%E6%B0%94%E8%B4%A8%E9%87%8F%E6%8C%87%E6%95%B0.png" alt="北京空气质量指数"></p><p>这时打开F12查看<code>Elements</code> 可以看到<code>155</code>在元素中有显示</p><p><img src="%E6%A3%80%E6%9F%A5.png" alt="检查"></p><p>综上基本可以明白静态页面和动态页面的区别了。</p><p>有两种方式可以获取动态页面的内容：</p><ul><li>破解JS，实现动态渲染</li><li>使用浏览器模拟操作，等待模拟浏览器完成页面渲染</li></ul><p>由于第一个比较困难所以选择方法二</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>获取各个城市近年来每天的空气质量</p><ul><li>日期</li><li>城市</li><li>空气质量指数</li><li>空气质量等级</li><li>pm2.5</li><li>pm10</li><li>so2</li><li>co</li><li>no2</li><li>o3</li></ul><h2 id="使用scrapy"><a href="#使用scrapy" class="headerlink" title="使用scrapy"></a>使用scrapy</h2><p>scrapy操作的基本流程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.创建项目：scrapy startproject 项目名称</span><br><span class="line">2.新建爬虫：scrapy genspider 爬虫文件名 爬虫基础域名</span><br><span class="line">3.编写item</span><br><span class="line">4.spider最后return item</span><br><span class="line">5.在setting中修改pipeline配置</span><br><span class="line">6.在对应pipeline中进行数据持久化操作</span><br></pre></td></tr></tbody></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>打开命令行，输入<code>scrapy startproject air_history</code> ,创建一个名为<code>air_history</code>的scrapy项目</p><p>进入该文件夹，输入<code>scrapy genspider area_spider "aqistudy.cn"</code>,可以发现在spiders文件夹下多了一个名为<code>area_spider</code>的py文件</p><p>文件目录结构大概如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── air_history</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   ├── __init__.cpython-36.pyc</span><br><span class="line">│   │   └── settings.cpython-36.pyc</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   └── spiders</span><br><span class="line">│       ├── area_spider.py</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── __pycache__</span><br><span class="line">│           └── __init__.cpython-36.pyc</span><br><span class="line">└── scrapy.cfg</span><br></pre></td></tr></tbody></table></figure><h3 id="编写item"><a href="#编写item" class="headerlink" title="编写item"></a>编写item</h3><p>根据需求编写item如下,spider最后<code>return item</code>，把值传递给它</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirHistoryItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    data = scrapy.Field() <span class="comment">#日期</span></span><br><span class="line">    city = scrapy.Field() <span class="comment">#城市</span></span><br><span class="line">    aqi = scrapy.Field() <span class="comment">#空气质量指数</span></span><br><span class="line">    level = scrapy.Field() <span class="comment">#空气质量等级</span></span><br><span class="line">    pm2_5 = scrapy.Field() <span class="comment">#pm2.5</span></span><br><span class="line">    pm10 = scrapy.Field() <span class="comment">#pm10</span></span><br><span class="line">    so2 = scrapy.Field() <span class="comment">#so2</span></span><br><span class="line">    co = scrapy.Field() <span class="comment">#co</span></span><br><span class="line">    no2 = scrapy.Field() <span class="comment">#no2</span></span><br><span class="line">    o3 = scrapy.Field()  <span class="comment">#o3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h3><p>首先可以得知首页是<code>https://www.aqistudy.cn/historydata/</code></p><p>所以将它赋值给一个名为<code>base_url</code>的变量，方便后续使用</p><p>自动创建的爬出中携带了爬虫的名字，这个name在启动爬虫的时候需要用到，现在暂时用不到</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'area_spider'</span></span><br><span class="line">allowed_domains = [<span class="string">'aqistudy.cn'</span>]  <span class="comment"># 爬取的域名，不会超出这个顶级域名</span></span><br><span class="line">base_url = <span class="string">"https://www.aqistudy.cn/historydata/"</span></span><br><span class="line">start_urls = [base_url]</span><br></pre></td></tr></tbody></table></figure><p>####城市信息</p><p>进入首页之后可以看到一大批的城市信息，所以我们第一步就是获取有哪些城市</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">print(<span class="string">'爬取城市信息....'</span>)</span><br><span class="line">url_list = response.xpath(<span class="string">"//div[@class='all']/div[@class='bottom']/ul/div[2]/li/a/@href"</span>).extract()  <span class="comment"># 全部链接</span></span><br><span class="line">city_list = response.xpath(<span class="string">"//div[@class='all']/div[@class='bottom']/ul/div[2]/li/a/text()"</span>).extract()  <span class="comment"># 城市名称</span></span><br><span class="line"><span class="keyword">for</span> url, city <span class="keyword">in</span> <span class="built_in">zip</span>(url_list, city_list):</span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_month, meta={<span class="string">'city'</span>: city})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>使用插件<code>XPath Helper</code>可以对xpath进行一个测试，看看定位的内容是否正确</p><p><img src="xpath.png" alt="xpath"></p><p>随意点击一个地区可以发现url变为<code>https://www.aqistudy.cn/historydata/monthdata.php?city=北京</code></p><p>所以<code>url_list</code>获取到的是需要进行拼接的内容<code>monthdata.php?city=城市名称</code></p><p><code>city_list</code>的最后部分是<code>text()</code>所以它拿到的是具体的文本信息</p><p>将获取到的url_list和city_list逐个传递给<code>scrapy.Request</code>其中url是需要继续爬取的页面地址，city是item中需要的内容，所以将item暂时存放在meta中传递给下个回调函数<code>self.parse_month</code></p><h3 id="月份信息"><a href="#月份信息" class="headerlink" title="月份信息"></a>月份信息</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_month</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    print(<span class="string">'爬取{}月份...'</span>.<span class="built_in">format</span>(response.meta[<span class="string">'city'</span>]))</span><br><span class="line">    url_list = response.xpath(<span class="string">'//tbody/tr/td/a/@href'</span>).extract()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        url = self.base_url + url</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_day, meta={<span class="string">'city'</span>: response.meta[<span class="string">'city'</span>]})</span><br></pre></td></tr></tbody></table></figure><p>此步操作获取了每个城市的全部月份信息，并拿到了每个月份的url地址。把上面传递下来的city继续向下传递</p><h4 id="最终数据"><a href="#最终数据" class="headerlink" title="最终数据"></a>最终数据</h4><p>获取到最终的URL之后，把item实例化，然后完善item字典并返回item</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_day</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    print(<span class="string">'爬取最终数据...'</span>)</span><br><span class="line">    item = AirHistoryItem()</span><br><span class="line">    node_list = response.xpath(<span class="string">'//tr'</span>)</span><br><span class="line">    node_list.pop(<span class="number">0</span>)  <span class="comment"># 去除第一行标题栏</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">        item[<span class="string">'data'</span>] = node.xpath(<span class="string">'./td[1]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'city'</span>] = response.meta[<span class="string">'city'</span>]</span><br><span class="line">        item[<span class="string">'aqi'</span>] = node.xpath(<span class="string">'./td[2]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'level'</span>] = node.xpath(<span class="string">'./td[3]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'pm2_5'</span>] = node.xpath(<span class="string">'./td[4]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'pm10'</span>] = node.xpath(<span class="string">'./td[5]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'so2'</span>] = node.xpath(<span class="string">'./td[6]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'co'</span>] = node.xpath(<span class="string">'./td[7]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'no2'</span>] = node.xpath(<span class="string">'./td[8]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'o3'</span>] = node.xpath(<span class="string">'./td[9]/text()'</span>).extract_first()</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></tbody></table></figure><h3 id="使用中间件实现selenium操作"><a href="#使用中间件实现selenium操作" class="headerlink" title="使用中间件实现selenium操作"></a>使用中间件实现selenium操作</h3><p>打开中间件文件<code>middlewares.py</code></p><p>由于我是在服务器上进行爬取，所以我选择使用谷歌的无界面浏览器<code>chrome-headless</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)  <span class="comment"># 使用无头谷歌浏览器模式</span></span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line"><span class="comment"># 指定谷歌浏览器路径</span></span><br><span class="line">webdriver.Chrome(chrome_options=chrome_options,executable_path=<span class="string">'/root/zx/spider/driver/chromedriver'</span>)</span><br></pre></td></tr></tbody></table></figure><p>然后进行页面渲染后的源码获取</p><p><code>request.url</code>是传递到中间件的url，由于首页是静态页面，所以首页不进行selenium操作</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.url != <span class="string">'https://www.aqistudy.cn/historydata/'</span>:</span><br><span class="line">    self.driver.get(request.url)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    html = self.driver.page_source</span><br><span class="line">    self.driver.quit()</span><br><span class="line">    <span class="keyword">return</span> scrapy.http.HtmlResponse(url=request.url, body=html.encode(<span class="string">'utf-8'</span>), encoding=<span class="string">'utf-8'</span>,request=request)</span><br></pre></td></tr></tbody></table></figure><p>后续的操作也很简单，最后将获取到的内容正确编码后返回给爬虫的下一步</p><h3 id="middlewares全部代码"><a href="#middlewares全部代码" class="headerlink" title="middlewares全部代码"></a>middlewares全部代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaSpiderMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--headless'</span>)  <span class="comment"># 使用无头谷歌浏览器模式</span></span><br><span class="line">        chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">        <span class="comment"># 指定谷歌浏览器路径</span></span><br><span class="line">        <span class="comment"># chrome_options.binary_location = '/root/zx/spider/driver/chromedriver'</span></span><br><span class="line">        self.driver = webdriver.Chrome(chrome_options=chrome_options,executable_path=<span class="string">'/root/zx/spider/driver/chromedriver'</span>)</span><br><span class="line">        <span class="keyword">if</span> request.url != <span class="string">'https://www.aqistudy.cn/historydata/'</span>:</span><br><span class="line">            self.driver.get(request.url)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            html = self.driver.page_source</span><br><span class="line">            self.driver.quit()</span><br><span class="line">            <span class="keyword">return</span> scrapy.http.HtmlResponse(url=request.url, body=html.encode(<span class="string">'utf-8'</span>), encoding=<span class="string">'utf-8'</span>,</span><br><span class="line">                                            request=request)</span><br></pre></td></tr></tbody></table></figure><h3 id="使用下载器保存item内容"><a href="#使用下载器保存item内容" class="headerlink" title="使用下载器保存item内容"></a>使用下载器保存item内容</h3><p>修改<code>pipelines.py</code>进行文件的存储</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirHistoryPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.file = <span class="built_in">open</span>(<span class="string">'area.json'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        context = json.dumps(<span class="built_in">dict</span>(item),ensure_ascii=<span class="literal">False</span>) + <span class="string">'\n'</span></span><br><span class="line">        self.file.write(context)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        self.file.close()</span><br></pre></td></tr></tbody></table></figure><h3 id="修改settings文件使中间件，下载器生效"><a href="#修改settings文件使中间件，下载器生效" class="headerlink" title="修改settings文件使中间件，下载器生效"></a>修改settings文件使中间件，下载器生效</h3><p>打开<code>settings.py</code>文件</p><p>修改以下内容：<code>DOWNLOADER_MIDDLEWARES</code>使刚才写的middlewares中间件中的类,<code>ITEM_PIPELINES</code>是pipelines中的类</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BOT_NAME = <span class="string">'air_history'</span></span><br><span class="line">SPIDER_MODULES = [<span class="string">'air_history.spiders'</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">'air_history.spiders'</span></span><br><span class="line"></span><br><span class="line">USER_AGENT = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span></span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = {</span><br><span class="line">   <span class="string">'air_history.middlewares.AreaSpiderMiddleware'</span>: <span class="number">543</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ITEM_PIPELINES = {</span><br><span class="line">   <span class="string">'air_history.pipelines.AirHistoryPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><code>使用scrapy crawl area_spider就可以运行爬虫</code></p><p><img src="%E7%BB%93%E6%9E%9C.png" alt="结果"></p><h4 id="spider全部代码"><a href="#spider全部代码" class="headerlink" title="spider全部代码"></a>spider全部代码</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> air_history.items <span class="keyword">import</span> AirHistoryItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaSpiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">'area_spider'</span></span><br><span class="line">    allowed_domains = [<span class="string">'aqistudy.cn'</span>]  <span class="comment"># 爬取的域名，不会超出这个顶级域名</span></span><br><span class="line">    base_url = <span class="string">"https://www.aqistudy.cn/historydata/"</span></span><br><span class="line">    start_urls = [base_url]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        print(<span class="string">'爬取城市信息....'</span>)</span><br><span class="line">        url_list = response.xpath(<span class="string">"//div[@class='all']/div[@class='bottom']/ul/div[2]/li/a/@href"</span>).extract()  <span class="comment"># 全部链接</span></span><br><span class="line">        city_list = response.xpath(<span class="string">"//div[@class='all']/div[@class='bottom']/ul/div[2]/li/a/text()"</span>).extract()  <span class="comment"># 城市名称</span></span><br><span class="line">        <span class="keyword">for</span> url, city <span class="keyword">in</span> <span class="built_in">zip</span>(url_list, city_list):</span><br><span class="line">            url = self.base_url + url</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_month, meta={<span class="string">'city'</span>: city})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_month</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        print(<span class="string">'爬取{}月份...'</span>.<span class="built_in">format</span>(response.meta[<span class="string">'city'</span>]))</span><br><span class="line">        url_list = response.xpath(<span class="string">'//tbody/tr/td/a/@href'</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            url = self.base_url + url</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_day, meta={<span class="string">'city'</span>: response.meta[<span class="string">'city'</span>]})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_day</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        print(<span class="string">'爬取最终数据...'</span>)</span><br><span class="line">        item = AirHistoryItem()</span><br><span class="line">        node_list = response.xpath(<span class="string">'//tr'</span>)</span><br><span class="line">        node_list.pop(<span class="number">0</span>)  <span class="comment"># 去除第一行标题栏</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">            item[<span class="string">'data'</span>] = node.xpath(<span class="string">'./td[1]/text()'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'city'</span>] = response.meta[<span class="string">'city'</span>]</span><br><span class="line">            item[<span class="string">'aqi'</span>] = node.xpath(<span class="string">'./td[2]/text()'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'level'</span>] = node.xpath(<span class="string">'./td[3]/text()'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'pm2_5'</span>] = node.xpath(<span class="string">'./td[4]/text()'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'pm10'</span>] = node.xpath(<span class="string">'./td[5]/text()'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'so2'</span>] = node.xpath(<span class="string">'./td[6]/text()'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'co'</span>] = node.xpath(<span class="string">'./td[7]/text()'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'no2'</span>] = node.xpath(<span class="string">'./td[8]/text()'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'o3'</span>] = node.xpath(<span class="string">'./td[9]/text()'</span>).extract_first()</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Response Headers的转换</title>
      <link href="article/b44aa9e7.html"/>
      <url>article/b44aa9e7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Response-Headers的转换"><a href="#Response-Headers的转换" class="headerlink" title="Response Headers的转换"></a>Response Headers的转换</h1><p>​    不知不觉一个月没有碰python了，今天看了点以前的东西发现都有点懵逼了。还行需要找点东西增强下记忆。</p><p>​    今天写一个非常简单的实用型脚本。Response Headers转换。</p><p>​    由于python脚本中的headers使用必须使用字典（dict）形式，所以这个小脚本实现了</p><ul><li>chrome上的头部信息转字典</li><li>charles上的头部信息转字典<span id="more"></span><h2 id="使用python转换"><a href="#使用python转换" class="headerlink" title="使用python转换"></a>使用python转换</h2></li></ul><p>从图中可以看出内容大致为</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chrome：</span><br><span class="line">xxx:xxx</span><br><span class="line">xxx:xxx</span><br><span class="line">xxx:xxx</span><br><span class="line">charles：</span><br><span class="line">xxx xxx</span><br><span class="line">xxx xxx</span><br><span class="line">xxx xxx</span><br></pre></td></tr></tbody></table></figure><p>chrome中用  <code>:</code>   分开键值对</p><p>charles中用  <code>\t</code>  分开键值对</p><p>需要转换成为</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">'xxx'</span>:<span class="string">'xxx'</span>,</span><br><span class="line">    <span class="string">'xxx'</span>:<span class="string">'xxx'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>行数少的时候自己手动转也还可以，但是行数一多就比较糟心了</p><p>先挑选一句进行转换<code>xxx:xxx</code> 转换为<code>"xxx":"xxx",</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'xxx:xxx'</span> <span class="comment">#字符串</span></span><br><span class="line"><span class="comment">#chrome</span></span><br><span class="line">s_list = s.strip().split(<span class="string">':'</span>) <span class="comment">#['xxx','xxx']</span></span><br><span class="line"><span class="comment">#charles</span></span><br><span class="line">s_list = s.strip().split(<span class="string">'\t'</span>)<span class="comment">#['xxx','xxx']</span></span><br><span class="line">s_ok = <span class="string">"'"</span> + <span class="string">"':'"</span>.join(s_list) + <span class="string">"',"</span></span><br></pre></td></tr></tbody></table></figure><p>所以写成一个可以用的脚本就是：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_headers</span>(<span class="params">text</span>):</span></span><br><span class="line">    text = text.strip()<span class="comment">#去除首尾空格</span></span><br><span class="line">    text_list = text.splitlines()<span class="comment">#按行切成list</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text_list)):<span class="comment">#去除每行可能出现的空格</span></span><br><span class="line">        text_list[i] = text_list[i].strip()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> <span class="string">'HTTP/1.1'</span> <span class="keyword">in</span> text_list[<span class="number">0</span>]:<span class="comment">#charls中的url信息_没啥用</span></span><br><span class="line">        text_list.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> text_list[<span class="number">0</span>].startswith(<span class="string">'Host'</span>):<span class="comment">#因人而异的_基本没啥用</span></span><br><span class="line">        text_list.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> text_list[-<span class="number">1</span>].startswith(<span class="string">'Cookie'</span>):<span class="comment">#一次性用品_没啥用</span></span><br><span class="line">        text_list.pop(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">':'</span> <span class="keyword">in</span> text_list[<span class="number">0</span>]:</span><br><span class="line">        headers = <span class="string">"{\n "</span> + </span><br><span class="line">        <span class="string">",\n "</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> s:<span class="string">"'"</span>+<span class="string">"':'"</span>.join(s.strip().split(<span class="string">':'</span>))+<span class="string">"'"</span>,text_list)) </span><br><span class="line">        + <span class="string">"'\n}"</span></span><br><span class="line">        <span class="keyword">return</span> headers</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        headers = <span class="string">"{\n "</span> + </span><br><span class="line">        <span class="string">",\n "</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> s: <span class="string">"'"</span> + <span class="string">"':'"</span>.join(s.strip().split(<span class="string">'\t'</span>)) + <span class="string">"'"</span>, text_list)) </span><br><span class="line">        + <span class="string">"'\n}"</span></span><br><span class="line">        <span class="keyword">return</span> headers</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取淘宝</title>
      <link href="article/44218b5c.html"/>
      <url>article/44218b5c.html</url>
      
        <content type="html"><![CDATA[<p>##爬取淘宝</p><p>使用爬虫框架scrapy爬取淘宝</p><p>###一.创建项目</p><p>1.安装scrapy<code>pip install scrapy</code></p><p>2.选择一个目录开启一个scrapy项目<code>scrapy startproject taobao</code></p><p>3.新建一个名为mytaobao的爬虫<code>scrapy genspider mytaobao taobao.com</code></p><span id="more"></span><h3 id="二-制定需要的内容"><a href="#二-制定需要的内容" class="headerlink" title="二.制定需要的内容"></a>二.制定需要的内容</h3><p>从web端找到几项内容</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">价格：price</span><br><span class="line">收货人数：sales</span><br><span class="line">商品名：title</span><br><span class="line">商铺名：nick</span><br><span class="line">发货地址：loc</span><br><span class="line">详情连接：detail_url</span><br></pre></td></tr></tbody></table></figure><p>将内容写入items.py</p><p>根据提示开始写</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define the fields for your item here like:</span></span><br><span class="line"><span class="comment"># name = scrapy.Field()</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaobaoItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    price = scrapy.Field()</span><br><span class="line">    sales = scrapy.Field()</span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    nick = scrapy.Field()</span><br><span class="line">    loc = scrapy.Field()</span><br><span class="line">    detail_url = scrapy.Field()</span><br></pre></td></tr></tbody></table></figure><h3 id="三-分析url"><a href="#三-分析url" class="headerlink" title="三.分析url"></a>三.分析url</h3><p>淘宝搜索`女装 裙且按销量排序后的url为：</p><p><code>https://s.taobao.com/search?q=%E5%A5%B3%E8%A3%85+%E8%A3%99&amp;imgfile=&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20180406&amp;ie=utf8&amp;sort=sale-desc</code></p><p>大胆的删除一些看上去没啥用的内容</p><p><code>https://s.taobao.com/search?q=女装+裙&amp;sort=sale-desc&amp;s=44</code></p><p>所以：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q:关键字</span><br><span class="line">sort:排序方式</span><br><span class="line">    sale-desc:销量降序</span><br><span class="line">s:展示个数</span><br></pre></td></tr></tbody></table></figure><p>在settings中增加常量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KEY_WORDS = '女装 裙' #关键字</span><br><span class="line">PAGE_NUM = 100      #页数</span><br><span class="line">ONE_PAGE_COUNT = 44 #每页个数</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">base_url = <span class="string">'https://s.taobao.com/search?q=%s&amp;sort=sale-desc&amp;s=%s'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 为了方便管理，统一将常量放在setting.py文件中</span></span><br><span class="line">    key_words = self.settings[<span class="string">'KEY_WORDS'</span>]</span><br><span class="line">    <span class="comment"># 分析页面可以得到关键字传入内容会进行转码且空格会替换为+</span></span><br><span class="line">    key_words = parse.quote(key_words, <span class="string">' '</span>).replace(<span class="string">' '</span>, <span class="string">'+'</span>)</span><br><span class="line">    page_num = self.settings[<span class="string">'PAGE_NUM'</span>]</span><br><span class="line">    one_page_count = self.settings[<span class="string">'ONE_PAGE_COUNT'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(page_num):</span><br><span class="line">        url = self.base_url % (key_words, i * one_page_count)</span><br><span class="line">        <span class="comment"># 将url传入生成器跳转到parse函数</span></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url, callback=self.parse)  </span><br></pre></td></tr></tbody></table></figure><h3 id="四-使用正则表达式解析"><a href="#四-使用正则表达式解析" class="headerlink" title="四.使用正则表达式解析"></a>四.使用正则表达式解析</h3><p>页面查看发现存在一段json<code>g_page_config</code>其中包含了所要的内容</p><p>对其进行正则解析</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    <span class="comment"># 使用scrapy内置的正则获取需要的内容</span></span><br><span class="line">    p = <span class="string">'g_page_config = ({.*?});'</span></span><br><span class="line">    g_page_config = response.selector.re(p)[<span class="number">0</span>]</span><br><span class="line">    g_page_config = json.loads(g_page_config)</span><br><span class="line">    auctions = g_page_config[<span class="string">'mods'</span>][<span class="string">'itemlist'</span>][<span class="string">'data'</span>][<span class="string">'auctions'</span>]</span><br><span class="line">    <span class="keyword">for</span> auction <span class="keyword">in</span> auctions:</span><br><span class="line">        item = TaobaoItem()  <span class="comment"># 实例化item</span></span><br><span class="line">        item[<span class="string">'price'</span>] = auction[<span class="string">'view_price'</span>]</span><br><span class="line">        item[<span class="string">'sales'</span>] = auction[<span class="string">'view_sales'</span>]</span><br><span class="line">        item[<span class="string">'title'</span>] = auction[<span class="string">'raw_title'</span>]</span><br><span class="line">        item[<span class="string">'nick'</span>] = auction[<span class="string">'nick'</span>]</span><br><span class="line">        item[<span class="string">'loc'</span>] = auction[<span class="string">'item_loc'</span>]</span><br><span class="line">        item[<span class="string">'detail_url'</span>] = auction[<span class="string">'detail_url'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item  <span class="comment"># 将item传给生成器</span></span><br></pre></td></tr></tbody></table></figure><h3 id="五-数据存储到文件中"><a href="#五-数据存储到文件中" class="headerlink" title="五.数据存储到文件中"></a>五.数据存储到文件中</h3><p>在pipelines中写入存储文件的语句</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaobaoPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        <span class="comment">#打开文件，编码为utf-8</span></span><br><span class="line">        self.file = <span class="built_in">open</span>(<span class="string">'taobao.json'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment">#将item转换为字典且不修改编码，写入文件</span></span><br><span class="line">        content = json.dumps(<span class="built_in">dict</span>(item),ensure_ascii=<span class="literal">False</span>) + <span class="string">'\n'</span></span><br><span class="line">        self.file.write(content)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        <span class="comment">#关闭文件</span></span><br><span class="line">        self.file.close()</span><br></pre></td></tr></tbody></table></figure><h3 id="六-运行爬虫"><a href="#六-运行爬虫" class="headerlink" title="六.运行爬虫"></a>六.运行爬虫</h3><p>使用：<code>scrapy crawl mytaobao</code>开始运行爬虫</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫练习-斗鱼颜值频道</title>
      <link href="article/782d6fd3.html"/>
      <url>article/782d6fd3.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫练习-斗鱼颜值频道"><a href="#爬虫练习-斗鱼颜值频道" class="headerlink" title="爬虫练习-斗鱼颜值频道"></a>爬虫练习-斗鱼颜值频道</h1><p><strong>1.抓包分析</strong></p><p>这次使用手机抓包分析，抓包工具<code>Charles</code></p><p>听说做app测试或者接口测试都需要使用到抓包工具（没做过，不晓得）</p><p>网上抓包工具的配置教程很多例如<code>https://www.jianshu.com/p/5539599c7a25</code></p><p>配置好之后在手机上打开斗鱼APP找到颜值频道，清空Charles里面的内容</p><p>下拉刷新当前页面，然后下翻几页</p><p>删除Charles上与douyu域名无关的信息</p><p>大概留下如图内容：</p><p>逐条查看一下找到有主播名称的内容</p><p><a href="https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/0/20/ios?client_sys=ios">https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/0/20/ios?client_sys=ios</a></p><p><a href="https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/20/20/ios?client_sys=ios">https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/20/20/ios?client_sys=ios</a></p><p><a href="https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/40/20/ios?client_sys=ios">https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/40/20/ios?client_sys=ios</a></p><p><a href="https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/60/20/ios?client_sys=ios">https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/60/20/ios?client_sys=ios</a></p><p>其中唯一区别是/xx/20/ios?client_sys=ios 合理推断这是页数</p><p>从json里面发现几个比较关键的内容 </p><p>房间id:<code>room_id</code></p><p>房间名字:<code>room_name</code></p><p>主播名字:<code>nickname</code></p><p>主播封面:<code>vertical_src</code></p><p>主播城市:<code>anchor_city</code></p><span id="more"></span><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="string">"roomRule"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"list"</span>: [{</span><br><span class="line"><span class="string">"room_id"</span>: <span class="number">2450462</span>,</span><br><span class="line"><span class="string">"room_name"</span>: <span class="string">"【第二萌】一日不见，如隔三秋"</span>,</span><br><span class="line"><span class="string">"nickname"</span>: <span class="string">"南京第二萌"</span>,</span><br><span class="line"><span class="string">"cate_id"</span>: <span class="number">311</span>,</span><br><span class="line"><span class="string">"room_src"</span>: <span class="string">"https://rpic.douyucdn.cn/live-cover/appCovers/2017/12/11/2450462_20171211203916_small.jpg"</span>,</span><br><span class="line"><span class="string">"is_vertical"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"vertical_src"</span>: <span class="string">"https://rpic.douyucdn.cn/live-cover/appCovers/2017/12/11/2450462_20171211203916_big.jpg"</span>,</span><br><span class="line"><span class="string">"online_num"</span>: <span class="number">63</span>,</span><br><span class="line"><span class="string">"hn"</span>: <span class="number">35690</span>,</span><br><span class="line"><span class="string">"show_status"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"bid_id"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"bidToken"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"rpos"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"rankType"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"recomType"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"show_id"</span>: <span class="string">"81327515"</span>,</span><br><span class="line"><span class="string">"iho"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"guild_id"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"topid"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"chanid"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"jump_url"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"client_sys"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"is_noble_rec"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"noble_rec_user_id"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"noble_rec_nickname"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"anchor_city"</span>: <span class="string">"南京市"</span>,</span><br><span class="line"><span class="string">"rmf1"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"rmf2"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"rmf3"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"ofc"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"lhl"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"chgd"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"has_al"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"anchor_label"</span>: [{</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"摸你奖杯"</span>,</span><br><span class="line"><span class="string">"id"</span>: <span class="number">92681</span></span><br><span class="line">}, {</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"大哥纹身"</span>,</span><br><span class="line"><span class="string">"id"</span>: <span class="number">79659</span></span><br><span class="line">}, {</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"大哥烫我"</span>,</span><br><span class="line"><span class="string">"id"</span>: <span class="number">4912</span></span><br><span class="line">}, {</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"王二怂"</span>,</span><br><span class="line"><span class="string">"id"</span>: <span class="number">96525</span></span><br><span class="line">}],</span><br><span class="line"><span class="string">"icon_url"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"nly"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>2.代码编写</strong></p><p>先创建两个url拼接,中间可以放页数的字符</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.url_1 = <span class="string">'https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/'</span></span><br><span class="line">self.url_2 = <span class="string">'/20/ios?client_sys=ios'</span></span><br></pre></td></tr></tbody></table></figure><p>由于是用的手机端,为了防止出现什么问题，头部信息使用手机的agent</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.HEADERS={<span class="string">'User-Agent'</span>:<span class="string">'ios/3.700 (ios 11.2.6; ; iPhone X (A1865/A1902))'</span>}</span><br></pre></td></tr></tbody></table></figure><p>先写一个获取刚才分析了需要获得的信息的函数</p><p><code>import json</code>来对json内容进行转换</p><p>函数接受页数的传入</p><p>1.进行url的拼接</p><p>2.进行json的转换，转化成为python的字典格式</p><p>3.对转换后的字典取值</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_message</span>(<span class="params">self,page</span>):</span></span><br><span class="line">        page = (page-<span class="number">1</span>)*<span class="number">20</span></span><br><span class="line">        url = self.url_1+<span class="built_in">str</span>(page)+self.url_2</span><br><span class="line">        res = requests.get(url = url,headers = self.HEADERS)</span><br><span class="line">        message_json = json.loads(res.text)</span><br><span class="line">        message_data = message_json[<span class="string">'data'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> message_data:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        message_lists = message_data[<span class="string">'list'</span>]</span><br><span class="line">        print(<span class="string">'正在爬取第%s页'</span> % <span class="built_in">int</span>(page/<span class="number">20</span>+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> message <span class="keyword">in</span> message_lists:</span><br><span class="line">            item = {}</span><br><span class="line">            item[<span class="string">'房间id'</span>] = message[<span class="string">'room_id'</span>]</span><br><span class="line">            item[<span class="string">'房间名字'</span>] = message[<span class="string">'room_name'</span>]</span><br><span class="line">            item[<span class="string">'主播名字'</span>] = message[<span class="string">'nickname'</span>]</span><br><span class="line">            item[<span class="string">'主播封面'</span>] = message[<span class="string">'vertical_src'</span>]</span><br><span class="line">            item[<span class="string">'主播城市'</span>] = message[<span class="string">'anchor_city'</span>]</span><br><span class="line">            self.item_lists.append(item)</span><br><span class="line">            self.download_pic(item)</span><br></pre></td></tr></tbody></table></figure><p>将取出来的值传入下载图片的函数中</p><p>1.使用图片的url进行访问并转换成二进制<code>.content</code></p><p>2.为了不让图片零零散散，新建一个<code>/img</code>文件存放图片</p><p>3.使用<code>wb</code>写入二进制</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_pic</span>(<span class="params">self,item</span>):</span></span><br><span class="line">        content = requests.get(url = item[<span class="string">'主播封面'</span>],headers = self.HEADERS).content</span><br><span class="line">        File_Path = os.getcwd() + <span class="string">'/img'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(File_Path):</span><br><span class="line">            os.makedirs(File_Path)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'img/房间ID：%s---来自%s的%s.jpg'</span> %(item[<span class="string">'房间id'</span>],item[<span class="string">'主播城市'</span>],item[<span class="string">'主播名字'</span>]),<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br></pre></td></tr></tbody></table></figure><p>按照惯例使用进程池来加快下载速度</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = Pool()</span><br><span class="line">    message = DouYuYanZhi()</span><br><span class="line">    print()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        pool.apply_async(message.get_message,args=(i,))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></tbody></table></figure><p>全代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#Author: zhongxin</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DouYuYanZhi</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.item_lists = []</span><br><span class="line">        self.url_1 = <span class="string">'https://apiv2.douyucdn.cn/gv2api/rkc/roomlist/2_201/'</span></span><br><span class="line">        self.url_2 = <span class="string">'/20/ios?client_sys=ios'</span></span><br><span class="line">        self.HEADERS={<span class="string">'User-Agent'</span>:<span class="string">'ios/3.700 (ios 11.2.6; ; iPhone X (A1865/A1902))'</span>}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_message</span>(<span class="params">self,page</span>):</span></span><br><span class="line">        page = (page-<span class="number">1</span>)*<span class="number">20</span></span><br><span class="line">        url = self.url_1+<span class="built_in">str</span>(page)+self.url_2</span><br><span class="line">        res = requests.get(url = url,headers = self.HEADERS)</span><br><span class="line">        message_json = json.loads(res.text)</span><br><span class="line">        message_data = message_json[<span class="string">'data'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> message_data:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        message_lists = message_data[<span class="string">'list'</span>]</span><br><span class="line">        print(<span class="string">'正在爬取第%s页'</span> % <span class="built_in">int</span>(page/<span class="number">20</span>+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> message <span class="keyword">in</span> message_lists:</span><br><span class="line">            item = {}</span><br><span class="line">            item[<span class="string">'房间id'</span>] = message[<span class="string">'room_id'</span>]</span><br><span class="line">            item[<span class="string">'房间名字'</span>] = message[<span class="string">'room_name'</span>]</span><br><span class="line">            item[<span class="string">'主播名字'</span>] = message[<span class="string">'nickname'</span>]</span><br><span class="line">            item[<span class="string">'主播封面'</span>] = message[<span class="string">'vertical_src'</span>]</span><br><span class="line">            item[<span class="string">'主播城市'</span>] = message[<span class="string">'anchor_city'</span>]</span><br><span class="line">            self.item_lists.append(item)</span><br><span class="line">            self.download_pic(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_pic</span>(<span class="params">self,item</span>):</span></span><br><span class="line">        content = requests.get(url = item[<span class="string">'主播封面'</span>],headers = self.HEADERS).content</span><br><span class="line">        File_Path = os.getcwd() + <span class="string">'/img'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(File_Path):</span><br><span class="line">            os.makedirs(File_Path)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'img/房间ID：%s---来自%s的%s.jpg'</span> %(item[<span class="string">'房间id'</span>],item[<span class="string">'主播城市'</span>],item[<span class="string">'主播名字'</span>]),<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = Pool()</span><br><span class="line">    message = DouYuYanZhi()</span><br><span class="line">    print()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        pool.apply_async(message.get_message,args=(i,))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫练习-百度新闻</title>
      <link href="article/f4b22a37.html"/>
      <url>article/f4b22a37.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫练习-百度新闻"><a href="#爬虫练习-百度新闻" class="headerlink" title="爬虫练习-百度新闻"></a>爬虫练习-百度新闻</h1><p>今天爬一下百度新闻的新闻标题</p><p><strong>1.首先分析页面</strong></p><p>进入百度新闻<code>百度新闻首页：http://news.baidu.com/</code></p><p>在搜索栏输入需要搜索的内容<code>例如：浙江大学城市学院</code></p><p>再选择搜索的内容为<code>新闻标题</code>点击搜索后页面跳转到以下url：</p><p><code>http://news.baidu.com/ns?word=浙江大学城市学&amp;tn=newstitle&amp;from=news&amp;cl=2&amp;rn=20&amp;ct=0</code></p><p>点击下第二页发现url中增加了<code>pn=20</code>：</p><p><code>http://news.baidu.com/ns?word=浙江大学城市学&amp;pn=20&amp;tn=newstitle&amp;from=news&amp;cl=2&amp;rn=20&amp;ct=0</code></p><p>点击第三页发现<code>pn=40</code>:</p><p><code>http://news.baidu.com/ns?word=浙江大学城市学&amp;pn=20&amp;tn=newstitle&amp;from=news&amp;cl=2&amp;rn=20&amp;ct=0</code></p><p>合理的推断出页数<code>+1</code>，<code>pn+20</code></p><span id="more"></span><p><strong>2.然后开始分析页面内容</strong></p><p>找出比较重要的几个信息<code>新闻标题</code>，<code>新闻来源</code>，<code>新闻时间</code></p><p>以第一条新闻为例，使用浏览器自带的<code>开发者工具(F12)</code>找到其源码中的位置</p><p>发现内容写在一个<code>class="result title"</code>的div里面</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"result title"</span> id=<span class="string">"1"</span>&gt;•&amp;nbsp;</span><br><span class="line">&lt;h3 <span class="class"><span class="keyword">class</span></span>=<span class="string">"c-title"</span>&gt;</span><br><span class="line">        &lt;a href=<span class="string">"http://www.eol.cn/zhejiang/zhejiang_news/201802/t20180206_1584845.shtml"</span> data-click=<span class="string">"{</span></span><br><span class="line"><span class="string">      'f0':'77A717EA',</span></span><br><span class="line"><span class="string">      'f1':'9F73F1E4',</span></span><br><span class="line"><span class="string">      'f2':'4CA6DE6E',</span></span><br><span class="line"><span class="string">      'f3':'54E5343F',</span></span><br><span class="line"><span class="string">      't':'1521382768'</span></span><br><span class="line"><span class="string">      }"</span> target=<span class="string">"_blank"</span>&gt;</span><br><span class="line">&lt;em&gt;浙江大学城市学院&lt;<span class="regexp">/em&gt;2018年“三位一体”综合评价招生章程&lt;/</span>a&gt;</span><br><span class="line">        &lt;<span class="regexp">/h3&gt;&lt;div class="c-title-author"&gt;中国教育在线&amp;nbsp;&amp;nbsp;2018年02月06日 23:26&lt;/</span>div&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>3.开始代码实现</strong></p><p>通过request模块模拟http访问，lxml进行xpath解析</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br></pre></td></tr></tbody></table></figure><p>首先写一个获取页面信息的函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_news</span>(<span class="params">url</span>):</span></span><br><span class="line">    item = {}</span><br><span class="line">    <span class="comment">#获取页面源码</span></span><br><span class="line">    res = requests.get(url).text </span><br><span class="line">    html = etree.HTML(res) </span><br><span class="line">    <span class="comment">#将class="result title"的内容存储成一个列表对象</span></span><br><span class="line">    nodes = html.xpath(<span class="string">'//*[@class="result title"]'</span>) </span><br><span class="line">    <span class="comment">#遍历对象并取出对象下面的文字内容text()</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">        item[<span class="string">'titles'</span>] = <span class="string">''</span>.join(node.xpath(<span class="string">'./h3/a/text()|./h3/a/em/text()'</span>))</span><br><span class="line">        item[<span class="string">'author'</span>] = node.xpath(<span class="string">'./*[@class="c-title-author"]/text()'</span>)[<span class="number">0</span>].split(<span class="string">'\xa0\xa0'</span>)[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'time'</span>] = node.xpath(<span class="string">'./*[@class="c-title-author"]/text()'</span>)[<span class="number">0</span>].split(<span class="string">'\xa0\xa0'</span>)[<span class="number">1</span>]</span><br><span class="line">        write_data(item)<span class="comment">#将内容写入文件</span></span><br></pre></td></tr></tbody></table></figure><p>将内容写入文件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data</span>(<span class="params">item</span>):</span></span><br><span class="line">    data = json.dumps(item,ensure_ascii=<span class="literal">False</span>) + <span class="string">'\n'</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'new.json'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br></pre></td></tr></tbody></table></figure><p>主函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">'请输入关键字：'</span>)</span><br><span class="line">    pages = <span class="built_in">input</span>(<span class="string">'查看的页数：'</span>)</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">int</span>(pages)+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'正在爬取百度新闻中关于「%s」的第「%d」页内容。。。'</span>%(word,page))</span><br><span class="line">        page = (page-<span class="number">1</span>)*<span class="number">20</span></span><br><span class="line">        url=<span class="string">'http://news.baidu.com/ns?word=%s&amp;pn=%d&amp;cl=2&amp;ct=1&amp;tn=newstitle&amp;rn=20&amp;ie=utf-8&amp;bt=0&amp;et=0'</span> % (word,page)</span><br><span class="line">        get_news(url)</span><br></pre></td></tr></tbody></table></figure><p>以上就完成了一个输入关键字并将内容写入json文件的爬虫</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫练习-百度新闻</title>
      <link href="article/f4b22a37.html"/>
      <url>article/f4b22a37.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫练习-豆瓣读书"><a href="#爬虫练习-豆瓣读书" class="headerlink" title="爬虫练习-豆瓣读书"></a>爬虫练习-豆瓣读书</h1><p>昨晚使用不熟悉的xpath语法解析百度新闻页面碰到了好多坑，今天继续通过简单的豆瓣图书进行练习</p><p><strong>1.分析页面</strong></p><p>进入豆瓣首页<code>https://www.douban.com/</code>在第一行导航栏找到<code>读书：https://book.douban.com/</code></p><p>进入页面之后发现有很多内容，由于豆瓣没有反爬措施，所以多抓取些数据</p><p>大致浏览后发现应该能通过标签查找到全部图书，找到<code>所有热门标签</code>点击<code>所有热门标签https://book.douban.com/tag/?view=cloud</code></p><p>浏览页面后大致可以确定这个入口是合适的一个入口</p><p><strong>2.分析入口页面</strong></p><p>打开浏览器自带的开发者模式找到其中一个标签：<code>小说</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tag/小说"</span>&gt;</span>小说<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>点击<code>小说：https://book.douban.com/tag/小说</code>发现它的url就是域名<code>https://book.douban.com/</code>和<code>/tag/小说</code>的组合</p><span id="more"></span><p><strong>3.分析tag页面</strong></p><p>进入<code>小说</code>页面之后发现一本书大概分为8个关键部分：<code>封面</code>,<code>书名</code>,<code>作者</code>,<code>出版社</code>,<code>日期</code>,<code>售价</code>,<code>评分</code>,<code>简介</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span> src=<span class="string">"https://img3.doubanio.com/mpic/s27264181.jpg"</span> width=<span class="string">"90"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;ahref=<span class="string">"https://book.douban.com/subject/25862578/"</span> title=<span class="string">"解忧杂货店"</span>onclick=<span class="string">"..."</span>&gt;解忧杂货店&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"pub"</span>&gt;[日] 东野圭吾 / 李盈春 / 南海出版公司 / <span class="number">2014</span>-<span class="number">5</span> / <span class="number">39.50</span>元&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"rating_nums"</span>&gt;<span class="number">8.6</span>&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;现代人内心流失的东西，这家杂货店能帮你找回——</span><br><span class="line">僻静的街道旁有一家杂货店，只要写下烦恼投进卷帘门的投信口，第二天就会在店后的牛奶箱里得到回答。</span><br><span class="line">因男友身患绝... &lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>4.开始</strong></p><p>首先导入需要的库</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br></pre></td></tr></tbody></table></figure><p>这次使用类的方式实现</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DouBanBook</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>初始化：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.url_book = <span class="string">'https://book.douban.com/tag/?view=cloud'</span></span><br><span class="line">            self.page = <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p>获取tag列表</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tags</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">'''</span></span><br><span class="line"><span class="string">            获取tag列表</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            tags = [] <span class="comment">#创建一个空列表存储tag名</span></span><br><span class="line">            result = requests.get(self.url_book).text</span><br><span class="line">            <span class="comment">#开始xpath解析</span></span><br><span class="line">            html = etree.HTML(result)</span><br><span class="line">            tags_list = html.xpath(<span class="string">'//[@id="content"]/div/div[1]/div[2]/div/table/tbody/tr/td/a'</span>)</span><br><span class="line">            <span class="keyword">for</span> tag <span class="keyword">in</span> tags_list:</span><br><span class="line">                tags.append(<span class="string">''</span>.join(tag.xpath(<span class="string">'./text()'</span>)))</span><br><span class="line">            <span class="keyword">return</span> tags</span><br></pre></td></tr></tbody></table></figure><p>存储入mysql数据库</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_mysql</span>(<span class="params">self,item</span>):</span></span><br><span class="line">    <span class="comment">#连接数据库</span></span><br><span class="line">        db = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>, db=<span class="string">'douban'</span>,charset=<span class="string">"utf8"</span>)</span><br><span class="line">        <span class="comment">#写sql语句</span></span><br><span class="line">        sql = <span class="string">"INSERT INTO douban_book(tag,pic,titiel,author,press,price,time,score,book_info) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s);"</span></span><br><span class="line"><span class="comment">#尝试插入数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> db.cursor() <span class="keyword">as</span> cursor:<span class="comment">#创建游标</span></span><br><span class="line">                cursor.execute(sql, (item[<span class="string">'tag'</span>],item[<span class="string">'book_pic'</span>],item[<span class="string">'book_titiel'</span>],item[<span class="string">'book_author'</span>],item[<span class="string">'book_press'</span>],item[<span class="string">'book_price'</span>],item[<span class="string">'book_time'</span>],item[<span class="string">'book_score'</span>],item[<span class="string">'book_info'</span>]))</span><br><span class="line">                db.commit()<span class="comment">#提交数据</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            cursor.execute(sql,(<span class="string">'1'</span>,<span class="string">'1'</span>,item[<span class="string">'book_titiel'</span>],<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,))</span><br><span class="line">            db.commit()</span><br></pre></td></tr></tbody></table></figure><p>将八项重要内容写入数据库</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_book_message</span>(<span class="params">self,tag</span>):</span></span><br><span class="line">            <span class="string">'''</span></span><br><span class="line"><span class="string">            将八项重要信息存储到mysql数据库</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            <span class="comment">#拼接tag和page成新的url</span></span><br><span class="line">            url = <span class="string">'https://book.douban.com/tag/'</span>+tag+<span class="string">'?start=%d&amp;type=T'</span> %self.page</span><br><span class="line">            result = requests.get(url).text</span><br><span class="line">            <span class="comment">#开始xpath解析</span></span><br><span class="line">            html = etree.HTML(result)</span><br><span class="line">            books_list = html.xpath(<span class="string">'//*[@id="subject_list"]/ul/li'</span>)</span><br><span class="line">            <span class="comment">#由于翻页操作是通过回调函数实现，所以需要做跳出循环的判断</span></span><br><span class="line">            <span class="keyword">if</span> books_list == []:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            item = {}<span class="comment">#新建一个空字典存储获取到的信息</span></span><br><span class="line">            item[<span class="string">'tag'</span>] = tag</span><br><span class="line">            <span class="keyword">for</span> book <span class="keyword">in</span> books_list:</span><br><span class="line">                <span class="comment">#封面</span></span><br><span class="line">                item[<span class="string">'book_pic'</span>] = <span class="string">''</span>.join(book.xpath(<span class="string">'./div[1]/a/img/@src'</span>))</span><br><span class="line">                <span class="comment">#书名</span></span><br><span class="line">                item[<span class="string">'book_titiel'</span>] = <span class="string">''</span>.join(book.xpath(<span class="string">'./div[2]/h2/a/@title'</span>))</span><br><span class="line">                </span><br><span class="line">                _book_press = book.xpath(<span class="string">'./div[2]/div[1]/text()'</span>)[<span class="number">0</span>].split(<span class="string">'\n'</span>)</span><br><span class="line">                <span class="comment">#由于作者，出版社，时间，售价是通过/分割的所以写一个列表推倒式存储</span></span><br><span class="line">                book_press = <span class="string">''</span>.join([book_press <span class="keyword">for</span> book_press <span class="keyword">in</span> _book_press <span class="keyword">if</span> <span class="string">'/'</span> <span class="keyword">in</span> book_press])</span><br><span class="line">                <span class="comment">#作者/出版社/时间/售价</span></span><br><span class="line">                <span class="comment">#查看多条数据后发现最后一条必为价格，最后第二条为时间，最后第三条为出版社</span></span><br><span class="line">                item[<span class="string">'book_price'</span>] = book_press.split(<span class="string">'/'</span>)[-<span class="number">1</span>]</span><br><span class="line">                item[<span class="string">'book_time'</span>] = book_press.split(<span class="string">'/'</span>)[-<span class="number">2</span>]</span><br><span class="line">                item[<span class="string">'book_press'</span>] = book_press.split(<span class="string">'/'</span>)[-<span class="number">3</span>]</span><br><span class="line">                item[<span class="string">'book_author'</span>] = <span class="string">''</span>.join(book_press.split(<span class="string">'/'</span>)[:-<span class="number">3</span>])</span><br><span class="line">                <span class="comment">#评分</span></span><br><span class="line">                item[<span class="string">'book_score'</span>] = <span class="string">''</span>.join(book.xpath(<span class="string">'./div[2]/div[2]/span[2]/text()'</span>))</span><br><span class="line">                <span class="comment">#简介</span></span><br><span class="line">                item[<span class="string">'book_info'</span>] = <span class="string">''</span>.join(<span class="string">''</span>.join(book.xpath(<span class="string">'./div[2]/p/text()'</span>)).split(<span class="string">'\n'</span>))</span><br><span class="line">                self.insert_mysql(item)<span class="comment">#写入数据库</span></span><br><span class="line">                <span class="comment">#print(item)</span></span><br><span class="line">            self.page += <span class="number">20</span></span><br><span class="line">            self.get_book_message(tag)</span><br></pre></td></tr></tbody></table></figure><p>整个类：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DouBanBook</span>():</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">           self.url_book = <span class="string">'https://book.douban.com/tag/?view=cloud'</span></span><br><span class="line">           self.page = <span class="number">0</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">get_tags</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="string">'''</span></span><br><span class="line"><span class="string">           获取tag列表</span></span><br><span class="line"><span class="string">           '''</span></span><br><span class="line">           tags = [] <span class="comment">#创建一个空列表存储tag名</span></span><br><span class="line">           result = requests.get(self.url_book).text</span><br><span class="line">           <span class="comment">#开始xpath解析</span></span><br><span class="line">           html = etree.HTML(result)</span><br><span class="line">           tags_list = html.xpath(<span class="string">'//[@id="content"]/div/div[1]/div[2]/div/table/tbody/tr/td/a'</span>)</span><br><span class="line">           <span class="keyword">for</span> tag <span class="keyword">in</span> tags_list:</span><br><span class="line">               tags.append(<span class="string">''</span>.join(tag.xpath(<span class="string">'./text()'</span>)))</span><br><span class="line">           <span class="keyword">return</span> tags</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">get_book_message</span>(<span class="params">self,tag</span>):</span></span><br><span class="line">           <span class="string">'''</span></span><br><span class="line"><span class="string">           将八项重要信息存储到mysql数据库</span></span><br><span class="line"><span class="string">           '''</span></span><br><span class="line">           <span class="comment">#拼接tag和page成新的url</span></span><br><span class="line">           url = <span class="string">'https://book.douban.com/tag/'</span>+tag+<span class="string">'?start=%d&amp;type=T'</span> %self.page</span><br><span class="line">           result = requests.get(url).text</span><br><span class="line">           <span class="comment">#开始xpath解析</span></span><br><span class="line">           html = etree.HTML(result)</span><br><span class="line">           books_list = html.xpath(<span class="string">'//*[@id="subject_list"]/ul/li'</span>)</span><br><span class="line">           <span class="comment">#由于翻页操作是通过回调函数实现，所以需要做跳出循环的判断</span></span><br><span class="line">           <span class="keyword">if</span> books_list == []:</span><br><span class="line">               <span class="keyword">return</span></span><br><span class="line">           item = {}<span class="comment">#新建一个空字典存储获取到的信息</span></span><br><span class="line">           item[<span class="string">'tag'</span>] = tag</span><br><span class="line">           <span class="keyword">for</span> book <span class="keyword">in</span> books_list:</span><br><span class="line">               <span class="comment">#封面</span></span><br><span class="line">               item[<span class="string">'book_pic'</span>] = <span class="string">''</span>.join(book.xpath(<span class="string">'./div[1]/a/img/@src'</span>))</span><br><span class="line">               <span class="comment">#书名</span></span><br><span class="line">               item[<span class="string">'book_titiel'</span>] = <span class="string">''</span>.join(book.xpath(<span class="string">'./div[2]/h2/a/@title'</span>))</span><br><span class="line">               </span><br><span class="line">               _book_press = book.xpath(<span class="string">'./div[2]/div[1]/text()'</span>)[<span class="number">0</span>].split(<span class="string">'\n'</span>)</span><br><span class="line">               <span class="comment">#由于作者，出版社，时间，售价是通过/分割的所以写一个列表推倒式存储</span></span><br><span class="line">               book_press = <span class="string">''</span>.join([book_press <span class="keyword">for</span> book_press <span class="keyword">in</span> _book_press <span class="keyword">if</span> <span class="string">'/'</span> <span class="keyword">in</span> book_press])</span><br><span class="line">               <span class="comment">#作者/出版社/时间/售价</span></span><br><span class="line">               <span class="comment">#查看多条数据后发现最后一条必为价格，最后第二条为时间，最后第三条为出版社</span></span><br><span class="line">               item[<span class="string">'book_price'</span>] = book_press.split(<span class="string">'/'</span>)[-<span class="number">1</span>]</span><br><span class="line">               item[<span class="string">'book_time'</span>] = book_press.split(<span class="string">'/'</span>)[-<span class="number">2</span>]</span><br><span class="line">               item[<span class="string">'book_press'</span>] = book_press.split(<span class="string">'/'</span>)[-<span class="number">3</span>]</span><br><span class="line">               item[<span class="string">'book_author'</span>] = <span class="string">''</span>.join(book_press.split(<span class="string">'/'</span>)[:-<span class="number">3</span>])</span><br><span class="line">               <span class="comment">#评分</span></span><br><span class="line">               item[<span class="string">'book_score'</span>] = <span class="string">''</span>.join(book.xpath(<span class="string">'./div[2]/div[2]/span[2]/text()'</span>))</span><br><span class="line">               <span class="comment">#简介</span></span><br><span class="line">               item[<span class="string">'book_info'</span>] = <span class="string">''</span>.join(<span class="string">''</span>.join(book.xpath(<span class="string">'./div[2]/p/text()'</span>)).split(<span class="string">'\n'</span>))</span><br><span class="line">               self.insert_mysql(item)<span class="comment">#写入数据库</span></span><br><span class="line">               <span class="comment">#print(item)</span></span><br><span class="line">           self.page += <span class="number">20</span></span><br><span class="line">           self.get_book_message(tag)</span><br><span class="line">           </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">insert_mysql</span>(<span class="params">self,item</span>):</span></span><br><span class="line">           db = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>, db=<span class="string">'douban'</span>,charset=<span class="string">"utf8"</span>)</span><br><span class="line">           sql = <span class="string">"INSERT INTO douban_book(tag,pic,titiel,author,press,price,time,score,book_info) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s);"</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               <span class="keyword">with</span> db.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                   cursor.execute(sql, (item[<span class="string">'tag'</span>],item[<span class="string">'book_pic'</span>],item[<span class="string">'book_titiel'</span>],item[<span class="string">'book_author'</span>],item[<span class="string">'book_press'</span>],item[<span class="string">'book_price'</span>],item[<span class="string">'book_time'</span>],item[<span class="string">'book_score'</span>],item[<span class="string">'book_info'</span>]))</span><br><span class="line">                   db.commit()</span><br><span class="line">           <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">               cursor.execute(sql,(<span class="string">'1'</span>,<span class="string">'1'</span>,item[<span class="string">'book_titiel'</span>],<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,))</span><br><span class="line">               db.commit()</span><br></pre></td></tr></tbody></table></figure><p>开始调用：</p><p>由于全部图书有点多，使用线程池加快点速度并记录下耗时</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    starttime = time.time()</span><br><span class="line">    book = DouBanBook()</span><br><span class="line">    p = Pool()</span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> book.get_tags():</span><br><span class="line">        p.apply_async(book.get_book_message,args=(tag,))</span><br><span class="line"></span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    usetime = time.time()-starttime</span><br><span class="line">    print(<span class="string">'总耗时%s'</span>%usetime)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool <span class="comment">#进程池</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree <span class="comment">#lxml解析页面</span></span><br><span class="line"><span class="keyword">import</span> pymysql <span class="comment">#连接mysql数据库了</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="comment">#模拟http/https访问</span></span><br><span class="line"><span class="keyword">import</span> time <span class="comment">#时间模块</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
